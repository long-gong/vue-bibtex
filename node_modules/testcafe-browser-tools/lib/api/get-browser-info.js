'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _Object$keys = require('babel-runtime/core-js/object/keys').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _arrayFind = require('array-find');

var _arrayFind2 = _interopRequireDefault(_arrayFind);

var _getInstallations = require('./get-installations');

var _getInstallations2 = _interopRequireDefault(_getInstallations);

var _utilsFsExistsPromised = require('../utils/fs-exists-promised');

var _utilsFsExistsPromised2 = _interopRequireDefault(_utilsFsExistsPromised);

var _aliases = require('../aliases');

var _aliases2 = _interopRequireDefault(_aliases);

//Const
var DEFAULT_ALIAS = {
    cmd: '',
    macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}}'
};

//API
/**
 * Returns information about the specified browser.
 * @function
 * @async
 * @name getBrowserInfo
 * @param {string} browser - A browser alias ('chrome', 'firefox', etc.) or a path to the browser's executable file.
 * @returns {BrowserInfo} An object that contains information about the specified browser.
 */

exports.default = function callee$0$0(browser) {
    var installations, browserAsAlias, fileExists, detectedAlias, _ref, cmd, macOpenCmdTemplate;

    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.next = 2;
                return _regeneratorRuntime.awrap(_getInstallations2.default());

            case 2:
                installations = context$1$0.sent;
                browserAsAlias = browser.trim().toLowerCase();

                if (!installations[browserAsAlias]) {
                    context$1$0.next = 6;
                    break;
                }

                return context$1$0.abrupt('return', installations[browserAsAlias]);

            case 6:
                context$1$0.next = 8;
                return _regeneratorRuntime.awrap(_utilsFsExistsPromised2.default(browser));

            case 8:
                fileExists = context$1$0.sent;

                if (fileExists) {
                    context$1$0.next = 11;
                    break;
                }

                return context$1$0.abrupt('return', null);

            case 11:
                detectedAlias = _arrayFind2.default(_Object$keys(_aliases2.default), function (alias) {
                    return _aliases2.default[alias].nameRe.test(browser);
                });
                _ref = detectedAlias ? _aliases2.default[detectedAlias] : DEFAULT_ALIAS;
                cmd = _ref.cmd;
                macOpenCmdTemplate = _ref.macOpenCmdTemplate;
                return context$1$0.abrupt('return', { path: browser, cmd: cmd, macOpenCmdTemplate: macOpenCmdTemplate });

            case 16:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

module.exports = exports.default;