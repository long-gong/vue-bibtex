'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _utilsExec = require('../utils/exec');

var _utilsFsExistsPromised = require('../utils/fs-exists-promised');

var _utilsFsExistsPromised2 = _interopRequireDefault(_utilsFsExistsPromised);

var _messages = require('../messages');

function checkBrowserPath(browserInfo) {
    var fileExists;
    return _regeneratorRuntime.async(function checkBrowserPath$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (browserInfo.path) {
                    context$1$0.next = 4;
                    break;
                }

                if (!browserInfo.winOpenCmdTemplate) {
                    context$1$0.next = 3;
                    break;
                }

                return context$1$0.abrupt('return');

            case 3:
                throw new Error(_messages.getText(_messages.MESSAGES.browserPathNotSet));

            case 4:
                context$1$0.next = 6;
                return _regeneratorRuntime.awrap(_utilsFsExistsPromised2.default(browserInfo.path));

            case 6:
                fileExists = context$1$0.sent;

                if (fileExists) {
                    context$1$0.next = 9;
                    break;
                }

                throw new Error(_messages.getText(_messages.MESSAGES.unableToRunBrowser, browserInfo.path));

            case 9:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

function getWinOpenCommand(browserInfo, pageUrl) {
    if (browserInfo.winOpenCmdTemplate) {
        return _mustache2.default.render(browserInfo.winOpenCmdTemplate, {
            pageUrl: pageUrl
        });
    }

    var browserDirPath = _path2.default.dirname(browserInfo.path);
    var browserExecFileName = _path2.default.basename(browserInfo.path);

    return 'start /D "' + browserDirPath + '" .\\' + browserExecFileName + ' ' + browserInfo.cmd + ' ' + pageUrl;
}

function getMacOpenCommand(browserInfo, pageUrl) {
    return _mustache2.default.render(browserInfo.macOpenCmdTemplate, {
        path: browserInfo.path,
        cmd: browserInfo.cmd,
        pageUrl: pageUrl
    });
}

function getLinuxOpenCommand(browserInfo, pageUrl) {
    return '"' + browserInfo.path + '" ' + browserInfo.cmd + ' "' + pageUrl + '" 0<&- >/dev/null 2>&1 &';
}

var getOpenCommand = null;

if (_osFamily2.default.win) getOpenCommand = getWinOpenCommand;else if (_osFamily2.default.mac) getOpenCommand = getMacOpenCommand;else if (_osFamily2.default.linux) getOpenCommand = getLinuxOpenCommand;

/**
 * Opens the web page in a new instance of the browser.
 * @function
 * @async
 * @name open
 * @param {BrowserInfo} browserInfo - Provides information on the browser where the web page should be opened.
 * @param {string} pageUrl - Specifies the web page URL.
 */

exports.default = function callee$0$0(browserInfo, pageUrl) {
    var command;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.next = 2;
                return _regeneratorRuntime.awrap(checkBrowserPath(browserInfo));

            case 2:
                if (getOpenCommand) {
                    context$1$0.next = 4;
                    break;
                }

                return context$1$0.abrupt('return');

            case 4:
                command = getOpenCommand(browserInfo, pageUrl);
                context$1$0.prev = 5;
                context$1$0.next = 8;
                return _regeneratorRuntime.awrap(_utilsExec.exec(command));

            case 8:
                context$1$0.next = 13;
                break;

            case 10:
                context$1$0.prev = 10;
                context$1$0.t0 = context$1$0['catch'](5);
                throw new Error(_messages.getText(_messages.MESSAGES.unableToRunBrowser, browserInfo.path));

            case 13:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this, [[5, 10]]);
};

module.exports = exports.default;

//NOTE: Path may be undefined when winOpenCmdTemplate is specified (e.g. MS Edge)