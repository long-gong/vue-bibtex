'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _os = require('os');

var _utilsExec = require('../utils/exec');

var _binaries = require('../binaries');

var _binaries2 = _interopRequireDefault(_binaries);

exports.default = function callee$0$0(windowDescription) {
    var res, windowParams, getWindowSizeArgs;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                res = null;
                windowParams = [];
                getWindowSizeArgs = void 0;

                if (!_osFamily2.default.win) {
                    context$1$0.next = 7;
                    break;
                }

                getWindowSizeArgs = [windowDescription.hwnd];
                context$1$0.next = 16;
                break;

            case 7:
                if (!_osFamily2.default.mac) {
                    context$1$0.next = 11;
                    break;
                }

                getWindowSizeArgs = [windowDescription.processId, windowDescription.windowId];
                context$1$0.next = 16;
                break;

            case 11:
                if (!_osFamily2.default.linux) {
                    context$1$0.next = 15;
                    break;
                }

                getWindowSizeArgs = [windowDescription.windowId];
                context$1$0.next = 16;
                break;

            case 15:
                return context$1$0.abrupt('return', null);

            case 16:
                context$1$0.prev = 16;
                context$1$0.next = 19;
                return _regeneratorRuntime.awrap(_utilsExec.execFile(_binaries2.default.getWindowSize, getWindowSizeArgs));

            case 19:
                res = context$1$0.sent;
                context$1$0.next = 25;
                break;

            case 22:
                context$1$0.prev = 22;
                context$1$0.t0 = context$1$0['catch'](16);
                return context$1$0.abrupt('return', null);

            case 25:

                windowParams = res.split(_os.EOL);

                return context$1$0.abrupt('return', { width: Number(windowParams[0]), height: Number(windowParams[1]) });

            case 27:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this, [[16, 22]]);
};

module.exports = exports.default;