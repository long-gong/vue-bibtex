'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _findWindow = require('./find-window');

var _findWindow2 = _interopRequireDefault(_findWindow);

var _getWindowSize = require('./get-window-size');

var _getWindowSize2 = _interopRequireDefault(_getWindowSize);

var _utilsDelay = require('../utils/delay');

var _utilsDelay2 = _interopRequireDefault(_utilsDelay);

var DEFAULT_WATCHING_INTERVAL = 2000;

/**
 * Pause execution of a Promise chain while the specified browser window is opened.
 * @function
 * @name watchWindow
 * @param {string | object} windowDescriptor - The title of the web page opened in the window or a descriptor returned by findWindow
 * @param {number} [watchingInterval=2000] - A time interval in milliseconds between checking the window state
 * @returns Promise<undefined> A Promise which resolves when the browser window is closed.
 **/

exports.default = function callee$0$0(windowDescriptor) {
    var watchingInterval = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_WATCHING_INTERVAL : arguments[1];
    var windowDescription, windowSize;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (!(typeof windowDescriptor === 'string')) {
                    context$1$0.next = 6;
                    break;
                }

                context$1$0.next = 3;
                return _regeneratorRuntime.awrap(_findWindow2.default(windowDescriptor));

            case 3:
                context$1$0.t0 = context$1$0.sent;
                context$1$0.next = 7;
                break;

            case 6:
                context$1$0.t0 = windowDescriptor;

            case 7:
                windowDescription = context$1$0.t0;

                if (windowDescription) {
                    context$1$0.next = 10;
                    break;
                }

                return context$1$0.abrupt('return');

            case 10:
                context$1$0.next = 12;
                return _regeneratorRuntime.awrap(_getWindowSize2.default(windowDescription));

            case 12:
                windowSize = context$1$0.sent;

            case 13:
                if (!(windowSize && windowSize.width && windowSize.height)) {
                    context$1$0.next = 21;
                    break;
                }

                context$1$0.next = 16;
                return _regeneratorRuntime.awrap(_utilsDelay2.default(watchingInterval));

            case 16:
                context$1$0.next = 18;
                return _regeneratorRuntime.awrap(_getWindowSize2.default(windowDescription));

            case 18:
                windowSize = context$1$0.sent;
                context$1$0.next = 13;
                break;

            case 21:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

module.exports = exports.default;