'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _findWindow = require('./find-window');

var _findWindow2 = _interopRequireDefault(_findWindow);

var _utilsExec = require('../utils/exec');

var _binaries = require('../binaries');

var _binaries2 = _interopRequireDefault(_binaries);

/**
 * Closes the browser window where the specified web page is opened.
 * @function
 * @async
 * @name close
 * @param {string | object} windowDescriptor - The title of the web page opened in the window or a descriptor returned by findWindow.
 */

exports.default = function callee$0$0(windowDescriptor) {
    var windowDescription, closeWindowArguments;
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (!(typeof windowDescriptor === 'string')) {
                    context$1$0.next = 6;
                    break;
                }

                context$1$0.next = 3;
                return _regeneratorRuntime.awrap(_findWindow2.default(windowDescriptor));

            case 3:
                context$1$0.t0 = context$1$0.sent;
                context$1$0.next = 7;
                break;

            case 6:
                context$1$0.t0 = windowDescriptor;

            case 7:
                windowDescription = context$1$0.t0;

                if (windowDescription) {
                    context$1$0.next = 10;
                    break;
                }

                return context$1$0.abrupt('return');

            case 10:
                closeWindowArguments = void 0;

                if (!_osFamily2.default.win) {
                    context$1$0.next = 15;
                    break;
                }

                closeWindowArguments = [windowDescription.hwnd];
                context$1$0.next = 24;
                break;

            case 15:
                if (!_osFamily2.default.mac) {
                    context$1$0.next = 19;
                    break;
                }

                closeWindowArguments = [windowDescription.processId, windowDescription.windowId];
                context$1$0.next = 24;
                break;

            case 19:
                if (!_osFamily2.default.linux) {
                    context$1$0.next = 23;
                    break;
                }

                closeWindowArguments = [windowDescription.windowId];
                context$1$0.next = 24;
                break;

            case 23:
                return context$1$0.abrupt('return');

            case 24:
                context$1$0.next = 26;
                return _regeneratorRuntime.awrap(_utilsExec.execFile(_binaries2.default.close, closeWindowArguments));

            case 26:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

module.exports = exports.default;