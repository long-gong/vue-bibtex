'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;
exports.execFile = execFile;
exports.exec = exec;
exports.execWinShellUtf8 = execWinShellUtf8;

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _promisify = require('./promisify');

var _promisify2 = _interopRequireDefault(_promisify);

var OSASCRIPT_PATH = '/usr/bin/osascript';

var execFilePromise = _promisify2.default(_child_process2.default.execFile);
var execPromise = _promisify2.default(_child_process2.default.exec);

function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}

//API

function execFile(filePath, args) {
    return _regeneratorRuntime.async(function execFile$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                if (!(_osFamily2.default.mac && endsWith(filePath, '.scpt'))) {
                    context$1$0.next = 6;
                    break;
                }

                context$1$0.next = 3;
                return _regeneratorRuntime.awrap(execFilePromise(OSASCRIPT_PATH, [filePath].concat(args)));

            case 3:
                context$1$0.t0 = context$1$0.sent;
                context$1$0.next = 9;
                break;

            case 6:
                context$1$0.next = 8;
                return _regeneratorRuntime.awrap(execFilePromise(filePath, args));

            case 8:
                context$1$0.t0 = context$1$0.sent;

            case 9:
                return context$1$0.abrupt('return', context$1$0.t0);

            case 10:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

function exec(command) {
    return _regeneratorRuntime.async(function exec$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                return context$1$0.abrupt('return', execPromise(command, { env: process.env }));

            case 1:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

function execWinShellUtf8(command) {
    var setCodePageCmd, restoreCodePageCmd;
    return _regeneratorRuntime.async(function execWinShellUtf8$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                setCodePageCmd = 'FOR /F  "tokens=2 delims=:,." %i in (\'chcp\') do (chcp 65001';
                restoreCodePageCmd = 'chcp %i)';
                context$1$0.next = 4;
                return _regeneratorRuntime.awrap(exec(setCodePageCmd + ' & ' + command + ' & ' + restoreCodePageCmd));

            case 4:
                return context$1$0.abrupt('return', context$1$0.sent);

            case 5:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}

// NOTE: To avoid terminal errors, we need to restore the original code page after the command is executed.