'use strict';

exports.__esModule = true;

var _baseDomAdapter = require('./base-dom-adapter');

var _baseDomAdapter2 = _interopRequireDefault(_baseDomAdapter);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _url = require('../../utils/url');

var urlUtils = _interopRequireWildcard(_url);

var _parse = require('../../utils/parse5');

var parse5Utils = _interopRequireWildcard(_parse);

var _namespaces = require('./namespaces');

var _index = require('./index');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint hammerhead/proto-methods: 0 */
class Parse5DomAdapter extends _baseDomAdapter2.default {
    constructor(isIframe, crossDomainPort) {
        super();

        this.isIframe = isIframe;
        this.crossDomainPort = crossDomainPort;
    }

    removeAttr(el, attr) {
        parse5Utils.removeAttr(el, attr);
    }

    getAttr(el, attr) {
        return parse5Utils.getAttr(el, attr);
    }

    getClassName(el) {
        return this.getAttr(el, 'class') || '';
    }

    hasAttr(el, attr) {
        return this.getAttr(el, attr) !== null;
    }

    isSVGElement(el) {
        return el.namespaceURI === _namespaces.SVG_NAMESPACE;
    }

    hasEventHandler(el) {
        for (let i = 0; i < el.attrs.length; i++) {
            if (this.EVENTS.includes(el.attrs[i].name)) return true;
        }

        return false;
    }

    getTagName(el) {
        return (el.tagName || '').toLowerCase();
    }

    setAttr(el, attr, value) {
        return parse5Utils.setAttr(el, attr, value);
    }

    setScriptContent(script, content) {
        script.childNodes = [parse5Utils.createTextNode(content, script)];
    }

    getScriptContent(script) {
        return script.childNodes.length ? script.childNodes[0].value : '';
    }

    getStyleContent(style) {
        return style.childNodes.length ? style.childNodes[0].value : '';
    }

    setStyleContent(style, content) {
        style.childNodes = [parse5Utils.createTextNode(content, style)];
    }

    needToProcessContent() {
        return true;
    }

    needToProcessUrl(tagName, target) {
        if ((0, _index.isIframeFlagTag)(tagName) && target === '_parent') return false;

        return true;
    }

    attachEventEmitter(domProcessor) {
        const eventEmitter = new _events2.default.EventEmitter();

        domProcessor.on = eventEmitter.on.bind(eventEmitter);
        domProcessor.off = eventEmitter.removeListener.bind(eventEmitter);
        domProcessor.emit = eventEmitter.emit.bind(eventEmitter);
    }

    hasIframeParent() {
        return this.isIframe;
    }

    getCrossDomainPort() {
        return this.crossDomainPort;
    }

    getProxyUrl() {
        return urlUtils.getProxyUrl.apply(urlUtils, arguments);
    }

    isTopParentIframe() {
        return false;
    }

    sameOriginCheck(location, checkedUrl) {
        return urlUtils.sameOriginCheck(location, checkedUrl);
    }

    isExistingTarget() {
        return false;
    }
}
exports.default = Parse5DomAdapter;
module.exports = exports['default'];