'use strict';

exports.__esModule = true;

var _instruction = require('../instruction');

var _instruction2 = _interopRequireDefault(_instruction);

var _nodeBuilder = require('../node-builder');

var _esotope = require('../tools/esotope');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Transform:
// const foo = postMessage; foo = postMessage; { _postMessage: postMessage }; return postMessage;
// -->
// const foo = _get$PostMessage(postMessage); foo = _get$PostMessage(postMessage); { _postMessage: _get$PostMessage(postMessage) }; return _get$PostMessage(postMessage);

exports.default = {
    nodeReplacementRequireTransform: false,

    nodeTypes: [_esotope.Syntax.Identifier],

    condition: (node, parent) => {
        if (node.name === 'postMessage') {
            // Skip: window.postMessage, postMessage.call
            if (parent.type === _esotope.Syntax.MemberExpression) return false;

            // Skip: class X { postMessage () {} }
            if (parent.type === _esotope.Syntax.MethodDefinition) return false;

            // Skip: class postMessage { x () {} }
            if (parent.type === _esotope.Syntax.ClassDeclaration) return false;

            // Skip: function postMessage () { ... }
            if ((parent.type === _esotope.Syntax.FunctionExpression || parent.type === _esotope.Syntax.FunctionDeclaration) && parent.id === node) return false;

            // Skip: function (postMessage) { ... } || function func(postMessage) { ... } || postMessage => { ... }
            if ((parent.type === _esotope.Syntax.FunctionExpression || parent.type === _esotope.Syntax.FunctionDeclaration || parent.type === _esotope.Syntax.ArrowFunctionExpression) && parent.params.indexOf(node) !== -1) return false;

            // Skip: { postMessage: value }
            if (parent.type === _esotope.Syntax.Property && parent.key === node) return false;

            // Skip: postMessage = value || function x (postMessage = value) { ... }
            if ((parent.type === _esotope.Syntax.AssignmentExpression || parent.type === _esotope.Syntax.AssignmentPattern) && parent.left === node) return false;

            // Skip: const postMessage = value;
            if (parent.type === _esotope.Syntax.VariableDeclarator && parent.id === node) return false;

            // Skip: postMessage++ || postMessage-- || ++postMessage || --postMessage
            if (parent.type === _esotope.Syntax.UpdateExpression && parent.operator === '++' || parent.operator === '--') return false;

            // Skip already transformed: __get$PostMessage(postMessage) || __call$(obj, postMessage, args...);
            if (parent.type === _esotope.Syntax.CallExpression && (parent.callee.name === _instruction2.default.getPostMessage || parent.callee.name === _instruction2.default.callMethod && parent.arguments[1] === node)) return false;

            // Skip: function x (...postMessage) {}
            if (parent.type === _esotope.Syntax.RestElement) return false;

            return true;
        }

        return false;
    },

    run: _nodeBuilder.createGetPostMessageMethCall
}; // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

module.exports = exports['default'];