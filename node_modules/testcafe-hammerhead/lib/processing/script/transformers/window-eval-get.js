'use strict';

exports.__esModule = true;

var _instruction = require('../instruction');

var _instruction2 = _interopRequireDefault(_instruction);

var _nodeBuilder = require('../node-builder');

var _esotope = require('../tools/esotope');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Transform:
// const foo = window.eval; foo = window.eval; { _eval: window.eval }; return window.eval;
// -->
// const foo = _get$Eval(window.eval); foo = _get$Eval(window.eval); { _eval: _get$Eval(window.eval) }; return _get$Eval(window.eval);

exports.default = {
    nodeReplacementRequireTransform: false,

    nodeTypes: [_esotope.Syntax.MemberExpression],

    condition: (node, parent) => {
        // Skip: window.eval.field
        if (parent.type === _esotope.Syntax.MemberExpression && (parent.property === node || parent.object === node)) return false;

        // Skip: window.eval()
        if (parent.type === _esotope.Syntax.CallExpression && parent.callee === node) return false;

        // Skip: window.eval = 1, window["eval"] = 1
        if (parent.type === _esotope.Syntax.AssignmentExpression && parent.left === node) return false;

        // Skip already transformed: __get$Eval(window.eval), __get$Eval(window["eval"])
        if (parent.type === _esotope.Syntax.CallExpression && parent.callee.name === _instruction2.default.getEval) return false;

        // window.eval
        if (node.property.type === _esotope.Syntax.Identifier && node.property.name === 'eval') return true;

        // window['eval']
        if (node.property.type === _esotope.Syntax.Literal && node.property.value === 'eval') return true;

        return false;
    },

    run: _nodeBuilder.createGetEvalMethCall
}; // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

module.exports = exports['default'];