'use strict';

exports.__esModule = true;

var _nodeBuilder = require('../node-builder');

var _esotope = require('../tools/esotope');

var _instrumented = require('../instrumented');

// Transform:
// obj[prop] -->
// __get$(obj, prop)

exports.default = {
    nodeReplacementRequireTransform: true,

    nodeTypes: [_esotope.Syntax.MemberExpression],

    condition: (node, parent) => {
        if (!node.computed) return false;

        if (node.property.type === _esotope.Syntax.Literal && !(0, _instrumented.shouldInstrumentProperty)(node.property.value)) return false;

        // super[prop]
        if (node.object.type === _esotope.Syntax.Super) return false;

        // object[prop] = value
        if (parent.type === _esotope.Syntax.AssignmentExpression && parent.left === node) return false;

        // delete object[prop]
        if (parent.type === _esotope.Syntax.UnaryExpression && parent.operator === 'delete') return false;

        // object[prop]++ || object[prop]-- || ++object[prop] || --object[prop]
        if (parent.type === _esotope.Syntax.UpdateExpression && parent.operator === '++' || parent.operator === '--') return false;

        // object[prop]()
        if (parent.type === _esotope.Syntax.CallExpression && parent.callee === node) return false;

        // new (object[prop])() || new (object[prop])
        if (parent.type === _esotope.Syntax.NewExpression && parent.callee === node) return false;

        // for(object[prop] in source)
        if (parent.type === _esotope.Syntax.ForInStatement && parent.left === node) return false;

        return true;
    },

    run: node => (0, _nodeBuilder.createComputedPropertyGetWrapper)(node.property, node.object)
}; // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

module.exports = exports['default'];