'use strict';

exports.__esModule = true;

var _nodeBuilder = require('../node-builder');

var _esotope = require('../tools/esotope');

var _replaceNode = require('./replace-node');

var _replaceNode2 = _interopRequireDefault(_replaceNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const INVOCATION_FUNC_NAME_RE = /^(call|apply|bind)$/;

// Transform:
// postMessage.call(ctx, script);
// postMessage.apply(ctx, script);
// postMessage.bind(...); -->
// __get$PostMessage(postMessage).call(ctx, script);
// __get$PostMessage(postMessage).apply(ctx, script);
// __get$PostMessage(postMessage).bind(...);

// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

exports.default = {
    nodeReplacementRequireTransform: false,

    nodeTypes: [_esotope.Syntax.CallExpression],

    condition: node => {
        if (node.callee.type === _esotope.Syntax.MemberExpression && INVOCATION_FUNC_NAME_RE.test(node.callee.property.name)) {
            // postMessage.<call|apply>(ctx, script, ...)
            if (node.arguments.length < 2 && node.callee.property.name !== 'bind') return false;

            const obj = node.callee.object;

            // obj.postMessage.<meth>(), obj[postMessage].<meth>(),
            if (obj.type === _esotope.Syntax.MemberExpression && (obj.property.value || obj.property.name) === 'postMessage') return true;

            // postMessage.<meth>()
            if (obj.name === 'postMessage') return true;
        }

        return false;
    },

    run: node => {
        const nodeX = (0, _nodeBuilder.createGetPostMessageMethCall)(node.callee.object);

        (0, _replaceNode2.default)(node.callee.object, nodeX, node.callee, 'object');

        return null;
    }
};
module.exports = exports['default'];