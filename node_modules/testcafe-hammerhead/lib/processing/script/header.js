'use strict';

exports.__esModule = true;
exports.SCRIPT_PROCESSING_END_HEADER_COMMENT = exports.SCRIPT_PROCESSING_END_COMMENT = exports.SCRIPT_PROCESSING_START_COMMENT = undefined;
exports.remove = remove;
exports.add = add;

var _regexpEscape = require('../../utils/regexp-escape');

var _regexpEscape2 = _interopRequireDefault(_regexpEscape);

var _internalProperties = require('../../processing/dom/internal-properties');

var _internalProperties2 = _interopRequireDefault(_internalProperties);

var _instruction = require('./instruction');

var _instruction2 = _interopRequireDefault(_instruction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SCRIPT_PROCESSING_START_COMMENT = exports.SCRIPT_PROCESSING_START_COMMENT = '/*hammerhead|script|start*/'; // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

const SCRIPT_PROCESSING_END_COMMENT = exports.SCRIPT_PROCESSING_END_COMMENT = '/*hammerhead|script|end*/';
const SCRIPT_PROCESSING_END_HEADER_COMMENT = exports.SCRIPT_PROCESSING_END_HEADER_COMMENT = '/*hammerhead|script|processing-header-end*/';

const STRICT_MODE_PLACEHOLDER = '{strict-placeholder}';

const HEADER = [SCRIPT_PROCESSING_START_COMMENT, STRICT_MODE_PLACEHOLDER, 'if(typeof window!=="undefined"&&window){', `window["${_internalProperties2.default.processDomMethodName}"] && window["${_internalProperties2.default.processDomMethodName}"]();`, '}', 'else{', `var ${_instruction2.default.getLocation}=function(l){return l},`, `${_instruction2.default.setLocation}=function(l,v){return l = v},`, `${_instruction2.default.setProperty}=function(o,p,v){return o[p] = v},`, `${_instruction2.default.getProperty}=function(o,p){return o[p]},`, `${_instruction2.default.callMethod}=function(o,p,a){return o[p].apply(o,a)},`, `${_instruction2.default.getEval}=function(e){return e},`, `${_instruction2.default.processScript}=function(s){return s},`, `${_instruction2.default.processHtml}=function(h){return h},`, `${_instruction2.default.getPostMessage}=function(w,p){return arguments.length===1?w.postMessage:p};`, '}', SCRIPT_PROCESSING_END_HEADER_COMMENT, '\n'].join('');

// NOTE: IE removes trailing newlines in script.textContent,
// so a trailing newline in RegExp is optional
const HEADER_RE = new RegExp(`${(0, _regexpEscape2.default)(SCRIPT_PROCESSING_START_COMMENT)}[\\S\\s]+?${(0, _regexpEscape2.default)(SCRIPT_PROCESSING_END_HEADER_COMMENT)}\n?`, 'gi');
const PROCESSING_END_COMMENT_RE = new RegExp(`\n?${(0, _regexpEscape2.default)(SCRIPT_PROCESSING_END_COMMENT)}\\s*`, 'gi');

function remove(code) {
    return code.replace(HEADER_RE, '').replace(PROCESSING_END_COMMENT_RE, '');
}

function add(code, isStrictMode) {
    const header = HEADER.replace(STRICT_MODE_PLACEHOLDER, isStrictMode ? '"use strict";' : '');

    return header + code + '\n' + SCRIPT_PROCESSING_END_COMMENT;
}