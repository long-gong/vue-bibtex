'use strict';

exports.__esModule = true;

var _resourceProcessorBase = require('./resource-processor-base');

var _resourceProcessorBase2 = _interopRequireDefault(_resourceProcessorBase);

var _lruCache = require('lru-cache');

var _lruCache2 = _interopRequireDefault(_lruCache);

var _script = require('../script');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ScriptResourceProcessor extends _resourceProcessorBase2.default {
    constructor() {
        super();

        this.jsCache = new _lruCache2.default({
            // NOTE: Max cache size is 50 MBytes.
            max: 50 * 1024 * 1024,

            length: function length(n) {
                // NOTE: 1 char ~ 1 byte.
                return n.length;
            }
        });
    }

    processResource(script) {
        if (!script) return script;

        let processedScript = this.jsCache.get(script);

        if (!processedScript) {
            processedScript = (0, _script.processScript)(script, true);
            this.jsCache.set(script, processedScript);
        }

        return processedScript;
    }

    shouldProcessResource(ctx) {
        return ctx.contentInfo.isScript;
    }
}

exports.default = new ScriptResourceProcessor();
module.exports = exports['default'];