'use strict';

exports.__esModule = true;

var _parse = require('parse5');

var _parse2 = _interopRequireDefault(_parse);

var _className = require('../../shadow-ui/class-name');

var _className2 = _interopRequireDefault(_className);

var _dom = require('../dom');

var _dom2 = _interopRequireDefault(_dom);

var _parse5DomAdapter = require('../dom/parse5-dom-adapter');

var _parse5DomAdapter2 = _interopRequireDefault(_parse5DomAdapter);

var _resourceProcessorBase = require('./resource-processor-base');

var _resourceProcessorBase2 = _interopRequireDefault(_resourceProcessorBase);

var _parse3 = require('../../utils/parse5');

var parse5Utils = _interopRequireWildcard(_parse3);

var _getBom = require('../../utils/get-bom');

var _getBom2 = _interopRequireDefault(_getBom);

var _internalProperties = require('../../processing/dom/internal-properties');

var _internalProperties2 = _interopRequireDefault(_internalProperties);

var _getStorageKey = require('../../utils/get-storage-key');

var _getStorageKey2 = _interopRequireDefault(_getStorageKey);

var _createSelfRemovingScript = require('../../utils/create-self-removing-script');

var _createSelfRemovingScript2 = _interopRequireDefault(_createSelfRemovingScript);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BODY_CREATED_EVENT_SCRIPT = (0, _createSelfRemovingScript2.default)(`
    if (window["${_internalProperties2.default.hammerhead}"])
        window["${_internalProperties2.default.hammerhead}"].sandbox.node.raiseBodyCreatedEvent();
`);

class PageProcessor extends _resourceProcessorBase2.default {
    constructor() {
        super();

        this.parser = new _parse2.default.Parser();

        this.RESTART_PROCESSING = Symbol();
        this.PARSED_BODY_CREATED_EVENT_SCRIPT = this.parser.parseFragment(BODY_CREATED_EVENT_SCRIPT).childNodes[0];

        this.serializer = new _parse2.default.Serializer();
    }

    _createRestoreStoragesScript(storageKey, storages) {
        const scriptStr = (0, _createSelfRemovingScript2.default)(`
            window.localStorage.setItem("${storageKey}", ${JSON.stringify(storages.localStorage)});
            window.sessionStorage.setItem("${storageKey}", ${JSON.stringify(storages.sessionStorage)});
        `);

        return this.parser.parseFragment(scriptStr).childNodes[0];
    }

    static _getPageProcessingOptions(ctx, urlReplacer) {
        return {
            crossDomainProxyPort: ctx.serverInfo.crossDomainPort,
            isIframe: ctx.isIframe,
            stylesheets: ctx.getInjectableStyles(),
            scripts: ctx.getInjectableScripts(),
            urlReplacer: urlReplacer,
            isIframeWithImageSrc: ctx.contentInfo && ctx.contentInfo.isIframeWithImageSrc
        };
    }

    static _getPageMetas(metaEls, domAdapter) {
        const metas = [];

        for (let i = 0; i < metaEls.length; i++) {
            metas.push({
                httpEquiv: domAdapter.getAttr(metaEls[i], 'http-equiv'),
                content: domAdapter.getAttr(metaEls[i], 'content'),
                charset: domAdapter.getAttr(metaEls[i], 'charset')
            });
        }

        return metas;
    }

    static _addPageResources(head, processingOptions) {
        const result = [];

        if (processingOptions.stylesheets) {
            processingOptions.stylesheets.forEach(stylesheetUrl => {
                result.push(parse5Utils.createElement('link', [{ name: 'rel', value: 'stylesheet' }, { name: 'type', value: 'text/css' }, { name: 'class', value: _className2.default.uiStylesheet }, { name: 'href', value: stylesheetUrl }]));
            });
        }

        if (processingOptions.scripts) {
            processingOptions.scripts.forEach(scriptUrl => {
                result.push(parse5Utils.createElement('script', [{ name: 'type', value: 'text/javascript' }, { name: 'class', value: _className2.default.script }, { name: 'charset', value: 'UTF-8' }, { name: 'src', value: scriptUrl }]));
            });
        }

        for (let i = result.length - 1; i > -1; i--) parse5Utils.insertElement(result[i], head);
    }

    static _addCharsetInfo(head, charset) {
        parse5Utils.insertElement(parse5Utils.createElement('meta', [{ name: 'class', value: _className2.default.charset }, { name: 'charset', value: charset }]), head);
    }

    static _changeMetas(metas, domAdapter) {
        if (metas) {
            metas.forEach(meta => {
                // TODO: Figure out how to emulate the tag behavior.
                if (domAdapter.getAttr(meta, 'name') === 'referrer') parse5Utils.setAttr(meta, 'content', 'unsafe-url');
            });
        }
    }

    static _prepareHtml(html, processingOpts) {
        if (processingOpts && processingOpts.iframeImageSrc) return `<html><body><img src="${processingOpts.iframeImageSrc}" /></body></html>`;

        return html;
    }

    _addRestoreStoragesScript(ctx, head) {
        const storageKey = (0, _getStorageKey2.default)(ctx.session.id, ctx.dest.host);
        const restoreStoragesScript = this._createRestoreStoragesScript(storageKey, ctx.restoringStorages);

        parse5Utils.insertElement(restoreStoragesScript, head);
    }

    _addBodyCreatedEventScript(body) {
        parse5Utils.insertElement(this.PARSED_BODY_CREATED_EVENT_SCRIPT, body);
    }

    shouldProcessResource(ctx) {
        // NOTE: In some cases, Firefox sends the default accept header for the script.
        // We should not try to process it as a page in this case.
        return (ctx.isPage || ctx.contentInfo.isIframeWithImageSrc) && !ctx.contentInfo.isScript && !ctx.contentInfo.isFileDownload;
    }

    processResource(html, ctx, charset, urlReplacer, processingOpts) {
        processingOpts = processingOpts || PageProcessor._getPageProcessingOptions(ctx, urlReplacer);

        const bom = (0, _getBom2.default)(html);

        html = bom ? html.replace(bom, '') : html;

        PageProcessor._prepareHtml(html, processingOpts);

        const root = this.parser.parse(html);
        const domAdapter = new _parse5DomAdapter2.default(processingOpts.isIframe, processingOpts.crossDomainProxyPort);
        const elements = parse5Utils.findElementsByTagNames(root, ['base', 'meta', 'head', 'body', 'frameset']);
        const base = elements.base ? elements.base[0] : null;
        const baseUrl = base ? domAdapter.getAttr(base, 'href') : '';
        const metas = elements.meta;
        const head = elements.head[0];
        const body = elements.body ? elements.body[0] : elements.frameset[0];

        if (metas && charset.fromMeta(PageProcessor._getPageMetas(metas, domAdapter))) return this.RESTART_PROCESSING;

        const domProcessor = new _dom2.default(domAdapter);
        const replacer = (resourceUrl, resourceType, charsetAttrValue) => urlReplacer(resourceUrl, resourceType, charsetAttrValue, baseUrl);

        domProcessor.forceProxySrcForImage = ctx.session.hasRequestEventListeners();
        parse5Utils.walkElements(root, el => domProcessor.processElement(el, replacer));

        if (!ctx.isHtmlImport) {
            PageProcessor._addPageResources(head, processingOpts, domAdapter);
            this._addBodyCreatedEventScript(body, domAdapter);

            if (ctx.restoringStorages && !processingOpts.isIframe) this._addRestoreStoragesScript(ctx, head);
        }

        PageProcessor._changeMetas(metas, domAdapter);
        PageProcessor._addCharsetInfo(head, charset.get(), domAdapter);

        return (bom || '') + this.serializer.serialize(root);
    }
}

exports.default = new PageProcessor();
module.exports = exports['default'];