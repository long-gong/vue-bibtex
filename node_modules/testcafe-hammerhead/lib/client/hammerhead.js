(function initHammerheadClient () {
    // This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split(/[\\/]/);
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"bowser": {
		":mainpath:": "./src/bowser.js",
		"src": {
			"bowser.js": function (exports, module, require) {
				

				/*!
				 * Bowser - a browser detector
				 * https://github.com/ded/bowser
				 * MIT License | (c) Dustin Diaz 2015
				 */

				!function (root, name, definition) {
				  if (typeof module != 'undefined' && module.exports) module.exports = definition();else if (typeof define == 'function' && define.amd) define(name, definition);else root[name] = definition();
				}(undefined, 'bowser', function () {
				  /**
				    * See useragents.js for examples of navigator.userAgent
				    */

				  var t = true;

				  function detect(ua) {

				    function getFirstMatch(regex) {
				      var match = ua.match(regex);
				      return match && match.length > 1 && match[1] || '';
				    }

				    function getSecondMatch(regex) {
				      var match = ua.match(regex);
				      return match && match.length > 1 && match[2] || '';
				    }

				    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),
				        likeAndroid = /like android/i.test(ua),
				        android = !likeAndroid && /android/i.test(ua),
				        nexusMobile = /nexus\s*[0-6]\s*/i.test(ua),
				        nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua),
				        chromeos = /CrOS/.test(ua),
				        silk = /silk/i.test(ua),
				        sailfish = /sailfish/i.test(ua),
				        tizen = /tizen/i.test(ua),
				        webos = /(web|hpw)os/i.test(ua),
				        windowsphone = /windows phone/i.test(ua),
				        samsungBrowser = /SamsungBrowser/i.test(ua),
				        windows = !windowsphone && /windows/i.test(ua),
				        mac = !iosdevice && !silk && /macintosh/i.test(ua),
				        linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua),
				        edgeVersion = getFirstMatch(/edge\/(\d+(\.\d+)?)/i),
				        versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i),
				        tablet = /tablet/i.test(ua),
				        mobile = !tablet && /[^-]mobi/i.test(ua),
				        xbox = /xbox/i.test(ua),
				        result;

				    if (/opera/i.test(ua)) {
				      //  an old Opera
				      result = {
				        name: 'Opera',
				        opera: t,
				        version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
				      };
				    } else if (/opr|opios/i.test(ua)) {
				      // a new Opera
				      result = {
				        name: 'Opera',
				        opera: t,
				        version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
				      };
				    } else if (/SamsungBrowser/i.test(ua)) {
				      result = {
				        name: 'Samsung Internet for Android',
				        samsungBrowser: t,
				        version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
				      };
				    } else if (/coast/i.test(ua)) {
				      result = {
				        name: 'Opera Coast',
				        coast: t,
				        version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
				      };
				    } else if (/yabrowser/i.test(ua)) {
				      result = {
				        name: 'Yandex Browser',
				        yandexbrowser: t,
				        version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
				      };
				    } else if (/ucbrowser/i.test(ua)) {
				      result = {
				        name: 'UC Browser',
				        ucbrowser: t,
				        version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
				      };
				    } else if (/mxios/i.test(ua)) {
				      result = {
				        name: 'Maxthon',
				        maxthon: t,
				        version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
				      };
				    } else if (/epiphany/i.test(ua)) {
				      result = {
				        name: 'Epiphany',
				        epiphany: t,
				        version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
				      };
				    } else if (/puffin/i.test(ua)) {
				      result = {
				        name: 'Puffin',
				        puffin: t,
				        version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
				      };
				    } else if (/sleipnir/i.test(ua)) {
				      result = {
				        name: 'Sleipnir',
				        sleipnir: t,
				        version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
				      };
				    } else if (/k-meleon/i.test(ua)) {
				      result = {
				        name: 'K-Meleon',
				        kMeleon: t,
				        version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
				      };
				    } else if (windowsphone) {
				      result = {
				        name: 'Windows Phone',
				        windowsphone: t
				      };
				      if (edgeVersion) {
				        result.msedge = t;
				        result.version = edgeVersion;
				      } else {
				        result.msie = t;
				        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i);
				      }
				    } else if (/msie|trident/i.test(ua)) {
				      result = {
				        name: 'Internet Explorer',
				        msie: t,
				        version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
				      };
				    } else if (chromeos) {
				      result = {
				        name: 'Chrome',
				        chromeos: t,
				        chromeBook: t,
				        chrome: t,
				        version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/chrome.+? edge/i.test(ua)) {
				      result = {
				        name: 'Microsoft Edge',
				        msedge: t,
				        version: edgeVersion
				      };
				    } else if (/vivaldi/i.test(ua)) {
				      result = {
				        name: 'Vivaldi',
				        vivaldi: t,
				        version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
				      };
				    } else if (sailfish) {
				      result = {
				        name: 'Sailfish',
				        sailfish: t,
				        version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/seamonkey\//i.test(ua)) {
				      result = {
				        name: 'SeaMonkey',
				        seamonkey: t,
				        version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/firefox|iceweasel|fxios/i.test(ua)) {
				      result = {
				        name: 'Firefox',
				        firefox: t,
				        version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
				      };
				      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
				        result.firefoxos = t;
				      }
				    } else if (silk) {
				      result = {
				        name: 'Amazon Silk',
				        silk: t,
				        version: getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/phantom/i.test(ua)) {
				      result = {
				        name: 'PhantomJS',
				        phantom: t,
				        version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/slimerjs/i.test(ua)) {
				      result = {
				        name: 'SlimerJS',
				        slimer: t,
				        version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
				      };
				    } else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
				      result = {
				        name: 'BlackBerry',
				        blackberry: t,
				        version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
				      };
				    } else if (webos) {
				      result = {
				        name: 'WebOS',
				        webos: t,
				        version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
				      };
				      /touchpad\//i.test(ua) && (result.touchpad = t);
				    } else if (/bada/i.test(ua)) {
				      result = {
				        name: 'Bada',
				        bada: t,
				        version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
				      };
				    } else if (tizen) {
				      result = {
				        name: 'Tizen',
				        tizen: t,
				        version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
				      };
				    } else if (/qupzilla/i.test(ua)) {
				      result = {
				        name: 'QupZilla',
				        qupzilla: t,
				        version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
				      };
				    } else if (/chromium/i.test(ua)) {
				      result = {
				        name: 'Chromium',
				        chromium: t,
				        version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
				      };
				    } else if (/chrome|crios|crmo/i.test(ua)) {
				      result = {
				        name: 'Chrome',
				        chrome: t,
				        version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
				      };
				    } else if (android) {
				      result = {
				        name: 'Android',
				        version: versionIdentifier
				      };
				    } else if (/safari|applewebkit/i.test(ua)) {
				      result = {
				        name: 'Safari',
				        safari: t
				      };
				      if (versionIdentifier) {
				        result.version = versionIdentifier;
				      }
				    } else if (iosdevice) {
				      result = {
				        name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
				        // WTF: version is not part of user agent in web apps
				      };if (versionIdentifier) {
				        result.version = versionIdentifier;
				      }
				    } else if (/googlebot/i.test(ua)) {
				      result = {
				        name: 'Googlebot',
				        googlebot: t,
				        version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
				      };
				    } else {
				      result = {
				        name: getFirstMatch(/^(.*)\/(.*) /),
				        version: getSecondMatch(/^(.*)\/(.*) /)
				      };
				    }

				    // set webkit or gecko flag for browsers based on these engines
				    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
				      if (/(apple)?webkit\/537\.36/i.test(ua)) {
				        result.name = result.name || "Blink";
				        result.blink = t;
				      } else {
				        result.name = result.name || "Webkit";
				        result.webkit = t;
				      }
				      if (!result.version && versionIdentifier) {
				        result.version = versionIdentifier;
				      }
				    } else if (!result.opera && /gecko\//i.test(ua)) {
				      result.name = result.name || "Gecko";
				      result.gecko = t;
				      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i);
				    }

				    // set OS flags for platforms that have multiple browsers
				    if (!result.windowsphone && !result.msedge && (android || result.silk)) {
				      result.android = t;
				    } else if (!result.windowsphone && !result.msedge && iosdevice) {
				      result[iosdevice] = t;
				      result.ios = t;
				    } else if (mac) {
				      result.mac = t;
				    } else if (xbox) {
				      result.xbox = t;
				    } else if (windows) {
				      result.windows = t;
				    } else if (linux) {
				      result.linux = t;
				    }

				    // OS version extraction
				    var osVersion = '';
				    if (result.windowsphone) {
				      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
				    } else if (iosdevice) {
				      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
				      osVersion = osVersion.replace(/[_\s]/g, '.');
				    } else if (android) {
				      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
				    } else if (result.webos) {
				      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
				    } else if (result.blackberry) {
				      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
				    } else if (result.bada) {
				      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
				    } else if (result.tizen) {
				      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
				    }
				    if (osVersion) {
				      result.osversion = osVersion;
				    }

				    // device type extraction
				    var osMajorVersion = osVersion.split('.')[0];
				    if (tablet || nexusTablet || iosdevice == 'ipad' || android && (osMajorVersion == 3 || osMajorVersion >= 4 && !mobile) || result.silk) {
				      result.tablet = t;
				    } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || nexusMobile || result.blackberry || result.webos || result.bada) {
				      result.mobile = t;
				    }

				    // Graded Browser Support
				    // http://developer.yahoo.com/yui/articles/gbs
				    if (result.msedge || result.msie && result.version >= 10 || result.yandexbrowser && result.version >= 15 || result.vivaldi && result.version >= 1.0 || result.chrome && result.version >= 20 || result.samsungBrowser && result.version >= 4 || result.firefox && result.version >= 20.0 || result.safari && result.version >= 6 || result.opera && result.version >= 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] >= 6 || result.blackberry && result.version >= 10.1 || result.chromium && result.version >= 20) {
				      result.a = t;
				    } else if (result.msie && result.version < 10 || result.chrome && result.version < 20 || result.firefox && result.version < 20.0 || result.safari && result.version < 6 || result.opera && result.version < 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] < 6 || result.chromium && result.version < 20) {
				      result.c = t;
				    } else result.x = t;

				    return result;
				  }

				  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '');

				  bowser.test = function (browserList) {
				    for (var i = 0; i < browserList.length; ++i) {
				      var browserItem = browserList[i];
				      if (typeof browserItem === 'string') {
				        if (browserItem in bowser) {
				          return true;
				        }
				      }
				    }
				    return false;
				  };

				  /**
				   * Get version precisions count
				   *
				   * @example
				   *   getVersionPrecision("1.10.3") // 3
				   *
				   * @param  {string} version
				   * @return {number}
				   */
				  function getVersionPrecision(version) {
				    return version.split(".").length;
				  }

				  /**
				   * Array::map polyfill
				   *
				   * @param  {Array} arr
				   * @param  {Function} iterator
				   * @return {Array}
				   */
				  function map(arr, iterator) {
				    var result = [],
				        i;
				    if (Array.prototype.map) {
				      return Array.prototype.map.call(arr, iterator);
				    }
				    for (i = 0; i < arr.length; i++) {
				      result.push(iterator(arr[i]));
				    }
				    return result;
				  }

				  /**
				   * Calculate browser version weight
				   *
				   * @example
				   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
				   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
				   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
				   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
				   *
				   * @param  {Array<String>} versions versions to compare
				   * @return {Number} comparison result
				   */
				  function compareVersions(versions) {
				    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
				    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
				    var chunks = map(versions, function (version) {
				      var delta = precision - getVersionPrecision(version);

				      // 2) "9" -> "9.0" (for precision = 2)
				      version = version + new Array(delta + 1).join(".0");

				      // 3) "9.0" -> ["000000000"", "000000009"]
				      return map(version.split("."), function (chunk) {
				        return new Array(20 - chunk.length).join("0") + chunk;
				      }).reverse();
				    });

				    // iterate in reverse order by reversed chunks array
				    while (--precision >= 0) {
				      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
				      if (chunks[0][precision] > chunks[1][precision]) {
				        return 1;
				      } else if (chunks[0][precision] === chunks[1][precision]) {
				        if (precision === 0) {
				          // all version chunks are same
				          return 0;
				        }
				      } else {
				        return -1;
				      }
				    }
				  }

				  /**
				   * Check if browser is unsupported
				   *
				   * @example
				   *   bowser.isUnsupportedBrowser({
				   *     msie: "10",
				   *     firefox: "23",
				   *     chrome: "29",
				   *     safari: "5.1",
				   *     opera: "16",
				   *     phantom: "534"
				   *   });
				   *
				   * @param  {Object}  minVersions map of minimal version to browser
				   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
				   * @param  {String}  [ua] user agent string
				   * @return {Boolean}
				   */
				  function isUnsupportedBrowser(minVersions, strictMode, ua) {
				    var _bowser = bowser;

				    // make strictMode param optional with ua param usage
				    if (typeof strictMode === 'string') {
				      ua = strictMode;
				      strictMode = void 0;
				    }

				    if (strictMode === void 0) {
				      strictMode = false;
				    }
				    if (ua) {
				      _bowser = detect(ua);
				    }

				    var version = "" + _bowser.version;
				    for (var browser in minVersions) {
				      if (minVersions.hasOwnProperty(browser)) {
				        if (_bowser[browser]) {
				          if (typeof minVersions[browser] !== 'string') {
				            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
				          }

				          // browser version and min supported version.
				          return compareVersions([version, minVersions[browser]]) < 0;
				        }
				      }
				    }

				    return strictMode; // not found
				  }

				  /**
				   * Check if browser is supported
				   *
				   * @param  {Object} minVersions map of minimal version to browser
				   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
				   * @param  {String}  [ua] user agent string
				   * @return {Boolean}
				   */
				  function check(minVersions, strictMode, ua) {
				    return !isUnsupportedBrowser(minVersions, strictMode, ua);
				  }

				  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
				  bowser.compareVersions = compareVersions;
				  bowser.check = check;

				  /*
				   * Set our detect method to the main bowser object so we can
				   * reuse it to test other user agents.
				   * This is needed to implement future tests.
				   */
				  bowser._detect = detect;

				  return bowser;
				});
			}
		}
	},
	"pinkie": {
		"index.js": function (exports, module, require) {
			

			var PENDING = 'pending';
			var SETTLED = 'settled';
			var FULFILLED = 'fulfilled';
			var REJECTED = 'rejected';
			var NOOP = function NOOP() {};

			// async calls
			var asyncSetTimer = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout;
			var asyncQueue = [];
			var asyncTimer;

			function asyncFlush() {
				// run promise callbacks
				for (var i = 0; i < asyncQueue.length; i++) {
					asyncQueue[i][0](asyncQueue[i][1]);
				}

				// reset async asyncQueue
				asyncQueue = [];
				asyncTimer = false;
			}

			function asyncCall(callback, arg) {
				asyncQueue.push([callback, arg]);

				if (!asyncTimer) {
					asyncTimer = true;
					asyncSetTimer(asyncFlush, 0);
				}
			}

			function invokeResolver(resolver, promise) {
				function resolvePromise(value) {
					resolve(promise, value);
				}

				function rejectPromise(reason) {
					reject(promise, reason);
				}

				try {
					resolver(resolvePromise, rejectPromise);
				} catch (e) {
					rejectPromise(e);
				}
			}

			function invokeCallback(subscriber) {
				var owner = subscriber.owner;
				var settled = owner._state;
				var value = owner._data;
				var callback = subscriber[settled];
				var promise = subscriber.then;

				if (typeof callback === 'function') {
					settled = FULFILLED;
					try {
						value = callback(value);
					} catch (e) {
						reject(promise, e);
					}
				}

				if (!handleThenable(promise, value)) {
					if (settled === FULFILLED) {
						resolve(promise, value);
					}

					if (settled === REJECTED) {
						reject(promise, value);
					}
				}
			}

			function handleThenable(promise, value) {
				var resolved;

				try {
					if (promise === value) {
						throw new TypeError('A promises callback cannot return that same promise.');
					}

					if (value && (typeof value === 'function' || typeof value === 'object')) {
						var then = value.then; // then should be retrived only once

						if (typeof then === 'function') {
							then.call(value, function (val) {
								if (!resolved) {
									resolved = true;

									if (value !== val) {
										resolve(promise, val);
									} else {
										fulfill(promise, val);
									}
								}
							}, function (reason) {
								if (!resolved) {
									resolved = true;

									reject(promise, reason);
								}
							});

							return true;
						}
					}
				} catch (e) {
					if (!resolved) {
						reject(promise, e);
					}

					return true;
				}

				return false;
			}

			function resolve(promise, value) {
				if (promise === value || !handleThenable(promise, value)) {
					fulfill(promise, value);
				}
			}

			function fulfill(promise, value) {
				if (promise._state === PENDING) {
					promise._state = SETTLED;
					promise._data = value;

					asyncCall(publishFulfillment, promise);
				}
			}

			function reject(promise, reason) {
				if (promise._state === PENDING) {
					promise._state = SETTLED;
					promise._data = reason;

					asyncCall(publishRejection, promise);
				}
			}

			function publish(promise) {
				promise._then = promise._then.forEach(invokeCallback);
			}

			function publishFulfillment(promise) {
				promise._state = FULFILLED;
				publish(promise);
			}

			function publishRejection(promise) {
				promise._state = REJECTED;
				publish(promise);
			}

			/**
			 * @class
			 */
			function Promise(resolver) {
				if (typeof resolver !== 'function') {
					throw new TypeError('Promise resolver ' + resolver + ' is not a function');
				}

				if (this instanceof Promise === false) {
					throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
				}

				this._then = [];

				invokeResolver(resolver, this);
			}

			Promise.prototype = {
				constructor: Promise,

				_state: PENDING,
				_then: null,
				_data: undefined,

				then: function then(onFulfillment, onRejection) {
					var subscriber = {
						owner: this,
						then: new this.constructor(NOOP),
						fulfilled: onFulfillment,
						rejected: onRejection
					};

					if (this._state === FULFILLED || this._state === REJECTED) {
						// already resolved, call callback async
						asyncCall(invokeCallback, subscriber);
					} else {
						// subscribe
						this._then.push(subscriber);
					}

					return subscriber.then;
				},

				'catch': function _catch(onRejection) {
					return this.then(null, onRejection);
				}
			};

			Promise.all = function (promises) {
				if (!Array.isArray(promises)) {
					throw new TypeError('You must pass an array to Promise.all().');
				}

				return new Promise(function (resolve, reject) {
					var results = [];
					var remaining = 0;

					function resolver(index) {
						remaining++;
						return function (value) {
							results[index] = value;
							if (! --remaining) {
								resolve(results);
							}
						};
					}

					for (var i = 0, promise; i < promises.length; i++) {
						promise = promises[i];

						if (promise && typeof promise.then === 'function') {
							promise.then(resolver(i), reject);
						} else {
							results[i] = promise;
						}
					}

					if (!remaining) {
						resolve(results);
					}
				});
			};

			Promise.race = function (promises) {
				if (!Array.isArray(promises)) {
					throw new TypeError('You must pass an array to Promise.race().');
				}

				return new Promise(function (resolve, reject) {
					for (var i = 0, promise; i < promises.length; i++) {
						promise = promises[i];

						if (promise && typeof promise.then === 'function') {
							promise.then(resolve, reject);
						} else {
							resolve(promise);
						}
					}
				});
			};

			Promise.resolve = function (value) {
				if (value && typeof value === 'object' && value.constructor === Promise) {
					return value;
				}

				return new Promise(function (resolve) {
					resolve(value);
				});
			};

			Promise.reject = function (reason) {
				return new Promise(function (resolve, reject) {
					reject(reason);
				});
			};

			module.exports = Promise;
		}
	},
	"testcafe-hammerhead": {
		"src": {
			"client": {
				"dom-processor": {
					"client-dom-adapter.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _internalProperties = require('../../processing/dom/internal-properties');

						var _internalProperties2 = _interopRequireDefault(_internalProperties);

						var _eventEmitter = require('../utils/event-emitter');

						var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

						var _baseDomAdapter = require('../../processing/dom/base-dom-adapter');

						var _baseDomAdapter2 = _interopRequireDefault(_baseDomAdapter);

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _settings = require('../settings');

						var _settings2 = _interopRequireDefault(_settings);

						var _destinationLocation = require('../utils/destination-location');

						var _url = require('../utils/url');

						var _dom = require('../utils/dom');

						var domUtils = _interopRequireWildcard(_dom);

						var _fastApply = require('../utils/fast-apply');

						var _fastApply2 = _interopRequireDefault(_fastApply);

						var _writer = require('../sandbox/node/document/writer');

						var _windowsStorage = require('../sandbox/windows-storage');

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var ClientDomAdapter = function (_BaseDomAdapter) {
						    _inherits(ClientDomAdapter, _BaseDomAdapter);

						    function ClientDomAdapter() {
						        _classCallCheck(this, ClientDomAdapter);

						        return _possibleConstructorReturn(this, _BaseDomAdapter.apply(this, arguments));
						    }

						    ClientDomAdapter.prototype.removeAttr = function removeAttr(el, attr) {
						        return _nativeMethods2.default.removeAttribute.call(el, attr);
						    };

						    ClientDomAdapter.prototype.getAttr = function getAttr(el, attr) {
						        return _nativeMethods2.default.getAttribute.call(el, attr);
						    };

						    ClientDomAdapter.prototype.hasAttr = function hasAttr(el, attr) {
						        return el.hasAttribute(attr);
						    };

						    ClientDomAdapter.prototype.isSVGElement = function isSVGElement(el) {
						        return domUtils.isSVGElement(el);
						    };

						    ClientDomAdapter.prototype.getClassName = function getClassName(el) {
						        return el.className;
						    };

						    ClientDomAdapter.prototype.hasEventHandler = function hasEventHandler(el) {
						        var attributes = _nativeMethods2.default.elementAttributesGetter.call(el);

						        for (var _i2 = 0; _i2 < attributes.length; _i2++) {
						            var attr = attributes[_i2];
						            if (this.EVENTS.indexOf(attr.name) !== -1) return true;
						        }

						        return false;
						    };

						    ClientDomAdapter.prototype.getTagName = function getTagName(el) {
						        return domUtils.getTagName(el);
						    };

						    ClientDomAdapter.prototype.setAttr = function setAttr(el, attr, value) {
						        return _nativeMethods2.default.setAttribute.call(el, attr, value);
						    };

						    ClientDomAdapter.prototype.setScriptContent = function setScriptContent(script, content) {
						        _nativeMethods2.default.scriptTextSetter.call(script, content);
						    };

						    ClientDomAdapter.prototype.getScriptContent = function getScriptContent(script) {
						        return _nativeMethods2.default.scriptTextGetter.call(script);
						    };

						    ClientDomAdapter.prototype.getStyleContent = function getStyleContent(style) {
						        return _nativeMethods2.default.elementInnerHTMLGetter.call(style);
						    };

						    ClientDomAdapter.prototype.setStyleContent = function setStyleContent(style, content) {
						        _nativeMethods2.default.elementInnerHTMLSetter.call(style, content);
						    };

						    ClientDomAdapter.prototype.needToProcessContent = function needToProcessContent(el) {
						        return !(0, _writer.hasUnclosedElementFlag)(el);
						    };

						    ClientDomAdapter.prototype.needToProcessUrl = function needToProcessUrl() {
						        return true;
						    };

						    ClientDomAdapter.prototype.hasIframeParent = function hasIframeParent(el) {
						        try {
						            if (el[_internalProperties2.default.processedContext]) return window.top !== el[_internalProperties2.default.processedContext];

						            return window.top.document !== domUtils.findDocument(el);
						        } catch (e) {
						            return true;
						        }
						    };

						    ClientDomAdapter.prototype.attachEventEmitter = function attachEventEmitter(domProcessor) {
						        var eventEmitter = new _eventEmitter2.default();

						        domProcessor.on = function (evt, listener) {
						            return eventEmitter.on(evt, listener);
						        };
						        domProcessor.off = function (evt, listener) {
						            return eventEmitter.off(evt, listener);
						        };
						        domProcessor.emit = function () {
						            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						                args[_key] = arguments[_key];
						            }

						            return (0, _fastApply2.default)(eventEmitter, 'emit', args);
						        };
						    };

						    ClientDomAdapter.prototype.getCrossDomainPort = function getCrossDomainPort() {
						        return _settings2.default.get().crossDomainProxyPort;
						    };

						    ClientDomAdapter.prototype.getProxyUrl = function getProxyUrl() {
						        return _url.getProxyUrl.apply(null, arguments);
						    };

						    ClientDomAdapter.prototype.isTopParentIframe = function isTopParentIframe(el) {
						        var elWindow = el[_internalProperties2.default.processedContext];

						        return elWindow && window.top === elWindow.parent;
						    };

						    ClientDomAdapter.prototype.sameOriginCheck = function sameOriginCheck(location, checkedUrl) {
						        return (0, _destinationLocation.sameOriginCheck)(location, checkedUrl);
						    };

						    ClientDomAdapter.prototype.isExistingTarget = function isExistingTarget(target) {
						        return !!(0, _windowsStorage.findByName)(target);
						    };

						    return ClientDomAdapter;
						}(_baseDomAdapter2.default);

						exports.default = ClientDomAdapter;
						module.exports = exports['default'];
					},
					"index.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _clientDomAdapter = require('./client-dom-adapter');

						var _clientDomAdapter2 = _interopRequireDefault(_clientDomAdapter);

						var _index = require('../../processing/dom/index');

						var _index2 = _interopRequireDefault(_index);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						exports.default = new _index2.default(new _clientDomAdapter2.default());
						module.exports = exports['default'];
					}
				},
				"index.js": function (exports, module, require) {
					

					exports.__esModule = true;

					var _pinkie = require('pinkie');

					var _pinkie2 = _interopRequireDefault(_pinkie);

					var _sandbox = require('./sandbox');

					var _sandbox2 = _interopRequireDefault(_sandbox);

					var _eventEmitter = require('./utils/event-emitter');

					var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

					var _xhr = require('./sandbox/xhr');

					var _xhr2 = _interopRequireDefault(_xhr);

					var _settings = require('./settings');

					var _settings2 = _interopRequireDefault(_settings);

					var _transport = require('./transport');

					var _transport2 = _interopRequireDefault(_transport);

					var _json = require('./json');

					var JSON = _interopRequireWildcard(_json);

					var _browser = require('./utils/browser');

					var browserUtils = _interopRequireWildcard(_browser);

					var _dom = require('./utils/dom');

					var domUtils = _interopRequireWildcard(_dom);

					var _event = require('./utils/event');

					var eventUtils = _interopRequireWildcard(_event);

					var _types = require('./utils/types');

					var typeUtils = _interopRequireWildcard(_types);

					var _position = require('./utils/position');

					var positionUtils = _interopRequireWildcard(_position);

					var _style = require('./utils/style');

					var styleUtils = _interopRequireWildcard(_style);

					var _stringTrim = require('../utils/string-trim');

					var _stringTrim2 = _interopRequireDefault(_stringTrim);

					var _url = require('./utils/url');

					var urlUtils = _interopRequireWildcard(_url);

					var _featureDetection = require('./utils/feature-detection');

					var featureDetection = _interopRequireWildcard(_featureDetection);

					var _html = require('./utils/html');

					var htmlUtils = _interopRequireWildcard(_html);

					var _nativeMethods = require('./sandbox/native-methods');

					var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

					var _script = require('../processing/script');

					var _header = require('../processing/script/header');

					var _style2 = require('../processing/style');

					var _isJqueryObject = require('./utils/is-jquery-object');

					var _isJqueryObject2 = _interopRequireDefault(_isJqueryObject);

					var _extend = require('./utils/extend');

					var _extend2 = _interopRequireDefault(_extend);

					var _internalProperties = require('../processing/dom/internal-properties');

					var _internalProperties2 = _interopRequireDefault(_internalProperties);

					var _pageNavigationWatch = require('./page-navigation-watch');

					var _pageNavigationWatch2 = _interopRequireDefault(_pageNavigationWatch);

					var _domProcessor = require('./dom-processor');

					var _domProcessor2 = _interopRequireDefault(_domProcessor);

					function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

					function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

					function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

					var Hammerhead = function () {
					    function Hammerhead() {
					        var _this = this;

					        _classCallCheck(this, Hammerhead);

					        this.win = null;
					        this.sandbox = new _sandbox2.default();
					        this.pageNavigationWatch = new _pageNavigationWatch2.default(this.sandbox.event, this.sandbox.codeInstrumentation, this.sandbox.node.element);

					        this.EVENTS = {
					            beforeFormSubmit: this.sandbox.node.element.BEFORE_FORM_SUBMIT_EVENT,
					            beforeBeforeUnload: this.sandbox.event.unload.BEFORE_BEFORE_UNLOAD_EVENT,
					            beforeUnload: this.sandbox.event.unload.BEFORE_UNLOAD_EVENT,
					            unload: this.sandbox.event.unload.UNLOAD_EVENT,
					            bodyCreated: this.sandbox.node.mutation.BODY_CREATED_EVENT,
					            documentCleaned: this.sandbox.node.mutation.DOCUMENT_CLEANED_EVENT,
					            uncaughtJsError: this.sandbox.node.win.UNCAUGHT_JS_ERROR_EVENT,
					            unhandledRejection: this.sandbox.node.win.UNHANDLED_REJECTION_EVENT,
					            startFileUploading: this.sandbox.upload.START_FILE_UPLOADING_EVENT,
					            endFileUploading: this.sandbox.upload.END_FILE_UPLOADING_EVENT,
					            evalIframeScript: this.sandbox.iframe.EVAL_EXTERNAL_SCRIPT_EVENT,
					            xhrCompleted: this.sandbox.xhr.XHR_COMPLETED_EVENT,
					            xhrError: this.sandbox.xhr.XHR_ERROR_EVENT,
					            beforeXhrSend: this.sandbox.xhr.BEFORE_XHR_SEND_EVENT,
					            fetchSent: this.sandbox.fetch.FETCH_REQUEST_SENT_EVENT,
					            pageNavigationTriggered: this.pageNavigationWatch.PAGE_NAVIGATION_TRIGGERED_EVENT,
					            scriptElementAdded: this.sandbox.node.element.SCRIPT_ELEMENT_ADDED_EVENT,
					            consoleMethCalled: this.sandbox.console.CONSOLE_METH_CALLED_EVENT
					        };

					        this.PROCESSING_COMMENTS = {
					            stylesheetStart: _style2.STYLESHEET_PROCESSING_START_COMMENT,
					            stylesheetEnd: _style2.STYLESHEET_PROCESSING_END_COMMENT,
					            scriptStart: _header.SCRIPT_PROCESSING_START_COMMENT,
					            scriptEndHeader: _header.SCRIPT_PROCESSING_END_HEADER_COMMENT,
					            scriptEnd: _header.SCRIPT_PROCESSING_END_COMMENT
					        };

					        this.EventEmitter = _eventEmitter2.default;

					        // Methods
					        this.doUpload = function (input, filePaths) {
					            return _this.sandbox.upload.doUpload(input, filePaths);
					        };
					        this.createNativeXHR = _xhr2.default.createNativeXHR;

					        this.processScript = _script.processScript;

					        // NOTE: We should provide a function to retrieve modules, because hammerhead will be bundled into a single
					        // file and we will not have access to the internal modules by default.
					        // eslint-disable-next-line no-undef
					        this.get = require;

					        // Modules
					        this.Promise = _pinkie2.default;
					        this.json = JSON;
					        this.transport = _transport2.default;
					        this.nativeMethods = this.sandbox.nativeMethods;
					        this.shadowUI = this.sandbox.shadowUI;
					        this.storages = this.sandbox.storageSandbox;

					        this.eventSandbox = {
					            listeners: this.sandbox.event.listeners,
					            hover: this.sandbox.event.hover,
					            focusBlur: this.sandbox.event.focusBlur,
					            elementEditingWatcher: this.sandbox.event.elementEditingWatcher,
					            eventSimulator: this.sandbox.event.eventSimulator,
					            selection: this.sandbox.event.selection,
					            message: this.sandbox.event.message,
					            timers: this.sandbox.event.timers,
					            DataTransfer: this.sandbox.event.DataTransfer,
					            DragDataStore: this.sandbox.event.DragDataStore
					        };

					        this.utils = {
					            browser: browserUtils,
					            dom: domUtils,
					            event: eventUtils,
					            position: positionUtils,
					            style: styleUtils,
					            types: typeUtils,
					            trim: _stringTrim2.default,
					            isJQueryObj: _isJqueryObject2.default,
					            extend: _extend2.default,
					            html: htmlUtils,
					            url: urlUtils,
					            featureDetection: featureDetection
					        };
					    }

					    Hammerhead.prototype._getEventOwner = function _getEventOwner(evtName) {
					        switch (evtName) {
					            case this.EVENTS.pageNavigationTriggered:
					                return this.pageNavigationWatch;

					            case this.EVENTS.beforeUnload:
					            case this.EVENTS.beforeBeforeUnload:
					            case this.EVENTS.unload:
					                return this.sandbox.event.unload;

					            case this.EVENTS.bodyCreated:
					            case this.EVENTS.documentCleaned:
					                return this.sandbox.node.mutation;

					            case this.EVENTS.uncaughtJsError:
					            case this.EVENTS.unhandledRejection:
					                return this.sandbox.node.win;

					            case this.EVENTS.startFileUploading:
					            case this.EVENTS.endFileUploading:
					                return this.sandbox.upload;

					            case this.EVENTS.evalIframeScript:
					                return this.sandbox.iframe;

					            case this.EVENTS.xhrCompleted:
					            case this.EVENTS.xhrError:
					            case this.EVENTS.beforeXhrSend:
					                return this.sandbox.xhr;

					            case this.EVENTS.beforeFormSubmit:
					            case this.EVENTS.scriptElementAdded:
					                return this.sandbox.node.element;

					            case this.EVENTS.fetchSent:
					                return this.sandbox.fetch;

					            case this.EVENTS.consoleMethCalled:
					                return this.sandbox.console;

					            default:
					                return null;
					        }
					    };

					    Hammerhead._cleanLocalStorageServiceData = function _cleanLocalStorageServiceData(sessionId, window) {
					        _nativeMethods2.default.winLocalStorageGetter.call(window).removeItem(sessionId);
					    };

					    Hammerhead.prototype.on = function on(evtName, handler) {
					        var eventOwner = this._getEventOwner(evtName);

					        if (eventOwner) eventOwner.on(evtName, handler);
					    };

					    Hammerhead.prototype.off = function off(evtName, handler) {
					        var eventOwner = this._getEventOwner(evtName);

					        if (eventOwner) eventOwner.off(evtName, handler);
					    };

					    Hammerhead.prototype.navigateTo = function navigateTo(url) {
					        var navigationUrl = urlUtils.getNavigationUrl(url, this.win);

					        if (!navigationUrl) return;

					        this.win.location = navigationUrl;
					    };

					    Hammerhead.prototype.start = function start(initSettings, win) {
					        this.win = win || window;

					        if (initSettings) {
					            _settings2.default.set(initSettings);

					            if (initSettings.isFirstPageLoad) Hammerhead._cleanLocalStorageServiceData(initSettings.sessionId, this.win);

					            _domProcessor2.default.forceProxySrcForImage = !!initSettings.forceProxySrcForImage;
					        }

					        this.sandbox.attach(this.win);
					        this.pageNavigationWatch.start();
					    };

					    return Hammerhead;
					}();

					var hammerhead = new Hammerhead();

					// NOTE: The 'load' event is raised after calling document.close for a same-domain iframe
					// So, we need to define the '%hammerhead%' variable as 'configurable' so that it can be redefined.
					_nativeMethods2.default.objectDefineProperty.call(window.Object, window, _internalProperties2.default.hammerhead, {
					    value: hammerhead,
					    configurable: true
					});

					exports.default = hammerhead;
					module.exports = exports['default'];
				},
				"json.js": function (exports, module, require) {
					

					exports.__esModule = true;
					exports.isSerializable = undefined;
					exports.stringify = stringify;
					exports.parse = parse;

					var _isJqueryObject = require('./utils/is-jquery-object');

					var _isJqueryObject2 = _interopRequireDefault(_isJqueryObject);

					function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

					// NOTE: json2.js uses fallbacks to the existing JSON implementations. So we can't rely on it in our client code.
					// This is an isolated implementation of JSON that does not rely on any external stuff (prototypes, existing JSON
					// implementations, etc.). The Serialization/deserialization logic is borrowed from http://json.org/json2.js.
					function f(n) {
					    // Format integers to have at least two digits.
					    return n < 10 ? '0' + n : n;
					}

					var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
					var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

					var gap = void 0;
					var indent = void 0;

					var meta = { // table of character substitutions
					    '\b': '\\b',
					    '\t': '\\t',
					    '\n': '\\n',
					    '\f': '\\f',
					    '\r': '\\r',
					    '"': '\\"',
					    '\\': '\\\\'
					};

					function quote(string) {

					    // If the string contains no control characters, no quote characters, and no
					    // backslash characters, then we can safely slap some quotes around it.
					    // Otherwise we must also replace the offending characters with safe escape
					    // sequences.

					    escapable.lastIndex = 0;
					    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
					        var c = meta[a];
					        return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
					    }) + '"' : '"' + string + '"';
					}

					function str(key, holder) {

					    // Produce a string from holder[key].

					    var i = void 0,
					        // The loop counter.
					    k = void 0,
					        // The member key.
					    v = void 0,
					        // The member value.
					    length = void 0,
					        mind = gap,
					        partial = void 0,
					        value = holder[key];

					    // If the value has a toJSON method, call it to obtain a replacement value.

					    if (value && typeof value === 'object') {
					        //NOTE: determine exact object type instead of relying on prototype.toJSON like in original json2.js
					        var objToStrValue = Object.prototype.toString.apply(value);
					        if (objToStrValue === '[object String]' || objToStrValue === '[object Number]' || objToStrValue === '[object Boolean]') {
					            value = value.valueOf();
					        } else if (objToStrValue === '[object Date]') {
					            value = isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;
					        }
					    }

					    // What happens next depends on the value's type.
					    switch (typeof value) {
					        case 'string':
					            return quote(value);

					        case 'number':

					            // JSON numbers must be finite. Encode non-finite numbers as null.

					            return isFinite(value) ? String(value) : 'null';

					        case 'boolean':
					        case 'null':

					            // If the value is a boolean or null, convert it to a string. Note:
					            // typeof null does not produce 'null'. The case is included here in
					            // the remote chance that this gets fixed someday.

					            return String(value);

					        // If the type is 'object', we might be dealing with an object or an array or
					        // null.

					        case 'object':

					            // Due to a specification blunder in ECMAScript, typeof null is 'object',
					            // so watch out for that case.

					            if (!value) {
					                return 'null';
					            }

					            // Make an array to hold the partial results of stringifying this object value.

					            gap += indent;
					            partial = [];

					            // Is the value an array?

					            if (Object.prototype.toString.apply(value) === '[object Array]') {

					                // The value is an array. Stringify every element. Use null as a placeholder
					                // for non-JSON values.

					                length = value.length;
					                for (i = 0; i < length; i += 1) {
					                    partial[i] = str(i, value) || 'null';
					                }

					                // Join all of the elements together, separated with commas, and wrap them in
					                // brackets.

					                v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
					                gap = mind;
					                return v;
					            }

					            // Iterate through all of the keys in the object.
					            for (k in value) {
					                if (Object.prototype.hasOwnProperty.call(value, k)) {
					                    v = str(k, value);
					                    if (v) {
					                        partial.push(quote(k) + (gap ? ': ' : ':') + v);
					                    }
					                }
					            }

					            // Join all of the member texts together, separated with commas,
					            // and wrap them in braces.

					            v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
					            gap = mind;
					            return v;
					    }
					}

					function isDOMNode(obj) {
					    if (typeof Node === 'object') return obj instanceof Node;

					    return typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';
					}

					function isSerializable(value) {
					    if (value) {
					        //NOTE: jquery object, DOM nodes and functions are disallowed obj types because we can't serialize them correctly
					        if (typeof value === 'function' || (0, _isJqueryObject2.default)(value) || isDOMNode(value)) return false;

					        if (typeof value === 'object') {
					            for (var prop in value) {
					                if (value.hasOwnProperty(prop) && !isSerializable(value[prop])) return false;
					            }
					        }
					    }

					    return true;
					}

					//Exports
					//-------------------------------------------------------------------------------------
					function stringify(value) {
					    gap = '';
					    indent = '';

					    // Make a fake root object containing our value under the key of ''.
					    // Return the result of stringifying the value.
					    return str('', { '': value });
					}

					function parse(text, reviver) {
					    // The parse method takes a text and an optional reviver function, and returns
					    // a JavaScript value if the text is a valid JSON text.

					    var j = void 0;

					    function walk(holder, key) {

					        // The walk method is used to recursively walk the resulting structure so
					        // that modifications can be made.

					        var k = void 0,
					            v = void 0,
					            value = holder[key];
					        if (value && typeof value === 'object') {
					            for (k in value) {
					                if (Object.prototype.hasOwnProperty.call(value, k)) {
					                    v = walk(value, k);
					                    if (v !== undefined) {
					                        value[k] = v;
					                    } else {
					                        delete value[k];
					                    }
					                }
					            }
					        }
					        return reviver.call(holder, key, value);
					    }

					    // Parsing happens in four stages. In the first stage, we replace certain
					    // Unicode characters with escape sequences. JavaScript handles many characters
					    // incorrectly, either silently deleting them, or treating them as line endings.

					    text = String(text);
					    cx.lastIndex = 0;
					    if (cx.test(text)) {
					        text = text.replace(cx, function (a) {
					            return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
					        });
					    }

					    // In the second stage, we run the text against regular expressions that look
					    // for non-JSON patterns. We are especially concerned with '()' and 'new'
					    // because they can cause invocation, and '=' because it can cause mutation.
					    // But just to be safe, we want to reject all unexpected forms.

					    // We split the second stage into 4 regexp operations in order to work around
					    // crippling inefficiencies in IE's and Safari's regexp engines. First we
					    // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
					    // replace all simple value tokens with ']' characters. Third, we delete all
					    // open brackets that follow a colon or comma or that begin the text. Finally,
					    // we look to see that the remaining characters are only whitespace or ']' or
					    // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

					    if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

					        // In the third stage we use the eval function to compile the text into a
					        // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
					        // in JavaScript: it can begin a block or an object literal. We wrap the text
					        // in parens to eliminate the ambiguity.

					        j = eval('(' + text + ')');

					        // In the optional fourth stage, we recursively walk the new structure, passing
					        // each name/value pair to a reviver function for possible transformation.

					        return typeof reviver === 'function' ? walk({ '': j }, '') : j;
					    }

					    // If the text is not JSON parseable, then a SyntaxError is thrown.

					    throw new SyntaxError('JSON.parse');
					}

					//NOTE: one more addition - func below allows as to check is it possible to correctly serialize given value
					exports.isSerializable = isSerializable;
				},
				"page-navigation-watch.js": function (exports, module, require) {
					

					exports.__esModule = true;

					var _eventEmitter = require('./utils/event-emitter');

					var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

					var _url = require('../utils/url');

					var _url2 = require('./utils/url');

					var _dom = require('./utils/dom');

					var _windowsStorage = require('./sandbox/windows-storage');

					var windowsStorage = _interopRequireWildcard(_windowsStorage);

					var _dom2 = require('../processing/dom');

					var _nextTick = require('./utils/next-tick');

					var _nextTick2 = _interopRequireDefault(_nextTick);

					var _nativeMethods = require('./sandbox/native-methods');

					var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

					function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

					function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

					function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

					function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

					function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

					var PageNavigationWatch = function (_EventEmiter) {
					    _inherits(PageNavigationWatch, _EventEmiter);

					    function PageNavigationWatch(eventSandbox, codeInstrumentation, elementSandbox) {
					        _classCallCheck(this, PageNavigationWatch);

					        var _this = _possibleConstructorReturn(this, _EventEmiter.call(this));

					        _this.PAGE_NAVIGATION_TRIGGERED_EVENT = 'hammerhead|event|page-navigation-triggered';

					        _this.lastLocationValue = window.location.toString();

					        _this.codeInstrumentation = codeInstrumentation;
					        _this.eventSandbox = eventSandbox;
					        _this.elementSandbox = elementSandbox;
					        return _this;
					    }

					    PageNavigationWatch.prototype._formWatch = function _formWatch(elementSandbox, eventSandbox) {
					        var onFormSubmit = function onFormSubmit(form) {
					            var targetWindow = PageNavigationWatch._getTargetWindow(form);

					            PageNavigationWatch._onNavigationTriggeredInWindow(targetWindow, _nativeMethods2.default.formActionGetter.call(form));
					        };

					        // NOTE: fires when form.submit() is called
					        elementSandbox.on(elementSandbox.BEFORE_FORM_SUBMIT_EVENT, function (e) {
					            return onFormSubmit(e.form);
					        });

					        // NOTE: fires when the form is submitted by clicking the submit button
					        eventSandbox.listeners.initElementListening(window, ['submit']);
					        eventSandbox.listeners.addInternalEventListener(window, ['submit'], function (e) {
					            var prevented = false;

					            if (!(0, _dom.isFormElement)(e.target)) return;

					            var onPreventDefault = function onPreventDefault(preventedEvent) {
					                prevented = prevented || preventedEvent === e;
					            };

					            eventSandbox.on(eventSandbox.EVENT_PREVENTED_EVENT, onPreventDefault);

					            (0, _nextTick2.default)().then(function () {
					                eventSandbox.off(eventSandbox.EVENT_PREVENTED_EVENT, onPreventDefault);

					                // NOTE: the defaultPrevented flag is saved between event raises in all browsers
					                // except IE. In IE, it is reset to false before the next handler is executed.
					                if (!e.defaultPrevented && !prevented) onFormSubmit(e.target);
					            });
					        });
					    };

					    PageNavigationWatch._getTargetWindow = function _getTargetWindow(el) {
					        var target = _nativeMethods2.default.getAttribute.call(el, (0, _dom2.getStoredAttrName)('target')) || _nativeMethods2.default.getAttribute.call(el, 'target') || '_self';

					        switch (target) {
					            case '_top':
					                return window.top;
					            case '_parent':
					                return window.parent;
					            case '_self':
					                return window;
					            default:
					                return windowsStorage.findByName(target);
					        }
					    };

					    PageNavigationWatch.prototype._linkWatch = function _linkWatch(eventSandbox) {
					        eventSandbox.listeners.initElementListening(window, ['click']);
					        eventSandbox.listeners.addInternalEventListener(window, ['click'], function (e) {
					            var link = (0, _dom.isAnchorElement)(e.target) ? e.target : (0, _dom.closest)(e.target, 'a');

					            if (link && !(0, _dom.isShadowUIElement)(link)) {
					                var prevented = false;
					                var targetWindow = PageNavigationWatch._getTargetWindow(link);
					                var href = _nativeMethods2.default.anchorHrefGetter.call(link);

					                var onPreventDefault = function onPreventDefault(preventedEvent) {
					                    prevented = prevented || preventedEvent === e;
					                };

					                eventSandbox.on(eventSandbox.EVENT_PREVENTED_EVENT, onPreventDefault);

					                (0, _nextTick2.default)().then(function () {
					                    eventSandbox.off(eventSandbox.EVENT_PREVENTED_EVENT, onPreventDefault);

					                    // NOTE: the defaultPrevented flag is saved between event raises in all browsers
					                    // except IE. In IE, it is reset to false before the next handler is executed.
					                    if (!e.defaultPrevented && !prevented) PageNavigationWatch._onNavigationTriggeredInWindow(targetWindow, href);
					                });
					            }
					        });
					    };

					    PageNavigationWatch.prototype._locationWatch = function _locationWatch(codeInstrumentation) {
					        var _this2 = this;

					        var locationAccessorsInstrumentation = codeInstrumentation.locationAccessorsInstrumentation;
					        var locationChangedHandler = function locationChangedHandler(newLocation) {
					            return _this2.onNavigationTriggered(newLocation);
					        };

					        locationAccessorsInstrumentation.on(locationAccessorsInstrumentation.LOCATION_CHANGED_EVENT, locationChangedHandler);
					    };

					    PageNavigationWatch._onNavigationTriggeredInWindow = function _onNavigationTriggeredInWindow(win, url) {

					        try {
					            win['%hammerhead%'].pageNavigationWatch.onNavigationTriggered(url);
					        }
					        // eslint-disable-next-line no-empty
					        catch (e) {}
					    };

					    PageNavigationWatch.prototype.onNavigationTriggered = function onNavigationTriggered(url) {
					        var currentLocation = this.lastLocationValue;

					        this.lastLocationValue = window.location.toString();

					        if (url !== currentLocation && (url.charAt(0) === '#' || (0, _url2.isChangedOnlyHash)(currentLocation, url)) || (0, _dom2.isJsProtocol)(url)) return;

					        this.emit(this.PAGE_NAVIGATION_TRIGGERED_EVENT, (0, _url.parseProxyUrl)(url).destUrl);
					    };

					    PageNavigationWatch.prototype.start = function start() {
					        this._locationWatch(this.codeInstrumentation);
					        this._linkWatch(this.eventSandbox);
					        this._formWatch(this.elementSandbox, this.eventSandbox);
					    };

					    return PageNavigationWatch;
					}(_eventEmitter2.default);

					exports.default = PageNavigationWatch;
					module.exports = exports['default'];
				},
				"sandbox": {
					"backup.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.create = create;
						exports.get = get;

						var _dom = require('../utils/dom');

						var _nativeMethods = require('./native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var SANDBOX_BACKUP = 'hammerhead|sandbox-backup';

						function findRecord(storage, iframe) {
						    for (var i = storage.length - 1; i >= 0; i--) {
						        try {
						            if (storage[i].iframe === iframe) return storage[i];
						        } catch (e) {
						            storage.splice(i, 1);
						        }
						    }

						    return void 0;
						}

						function create(window, sandbox) {
						    var topSameDomainWindow = (0, _dom.getTopSameDomainWindow)(window);
						    var iframe = window !== topSameDomainWindow ? (0, _dom.getFrameElement)(window) : null;
						    var storage = topSameDomainWindow[SANDBOX_BACKUP];

						    if (!storage) {
						        storage = [];
						        _nativeMethods2.default.objectDefineProperty.call(window.Object, topSameDomainWindow, SANDBOX_BACKUP, { value: storage });
						    }

						    var record = findRecord(storage, iframe);

						    if (record) record.sandbox = sandbox;else storage.push({ iframe: iframe, sandbox: sandbox });
						}

						function get(window) {
						    var topSameDomainWindow = (0, _dom.getTopSameDomainWindow)(window);
						    var storage = topSameDomainWindow[SANDBOX_BACKUP];
						    var iframe = window !== topSameDomainWindow ? window.frameElement : null;

						    if (storage) {
						        var record = findRecord(storage, iframe);

						        return record ? record.sandbox : null;
						    }

						    return null;
						}
					},
					"base.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _eventEmitter = require('../utils/event-emitter');

						var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

						var _nativeMethods = require('./native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _dom = require('../utils/dom');

						var _internalProperties = require('../../processing/dom/internal-properties');

						var _internalProperties2 = _interopRequireDefault(_internalProperties);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var SandboxBase = function (_EventEmitter) {
						    _inherits(SandboxBase, _EventEmitter);

						    function SandboxBase() {
						        _classCallCheck(this, SandboxBase);

						        var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

						        _this.window = null;
						        _this.nativeMethods = _nativeMethods2.default;
						        return _this;
						    }

						    // NOTE: The sandbox is deactivated when its window is removed from the DOM.


						    SandboxBase.prototype.isDeactivated = function isDeactivated() {
						        try {
						            // NOTE: In IE11, a situation when the document is not active may occur.
						            // eslint-disable-next-line no-unused-expressions
						            this.document.body;

						            if (this.window[_internalProperties2.default.hammerhead]) {
						                var frameElement = (0, _dom.getFrameElement)(this.window);

						                return frameElement && !(0, _dom.isElementInDocument)(frameElement, (0, _dom.findDocument)(frameElement));
						            }
						        }
						        // eslint-disable-next-line no-empty
						        catch (e) {}

						        return true;
						    };

						    SandboxBase.prototype.attach = function attach(window, document) {
						        this.window = window;
						        this.document = document || window.document;
						    };

						    return SandboxBase;
						}(_eventEmitter2.default);

						exports.default = SandboxBase;
						module.exports = exports['default'];
					},
					"code-instrumentation": {
						"index.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _properties = require('./properties');

							var _properties2 = _interopRequireDefault(_properties);

							var _location = require('./location');

							var _location2 = _interopRequireDefault(_location);

							var _methods = require('./methods');

							var _methods2 = _interopRequireDefault(_methods);

							var _script = require('../../../processing/script');

							var _instruction = require('../../../processing/script/instruction');

							var _instruction2 = _interopRequireDefault(_instruction);

							var _nativeMethods = require('../../sandbox/native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _html = require('../../utils/html');

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var CodeInstrumentation = function (_SandboxBase) {
							    _inherits(CodeInstrumentation, _SandboxBase);

							    function CodeInstrumentation(eventSandbox, windowSandbox, messageSandbox) {
							        _classCallCheck(this, CodeInstrumentation);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.methodCallInstrumentation = new _methods2.default(eventSandbox.message);
							        _this.locationAccessorsInstrumentation = new _location2.default(messageSandbox);
							        _this.propertyAccessorsInstrumentation = new _properties2.default(windowSandbox);
							        return _this;
							    }

							    CodeInstrumentation.prototype.attach = function attach(window) {
							        _SandboxBase.prototype.attach.call(this, window);

							        this.methodCallInstrumentation.attach(window);
							        this.locationAccessorsInstrumentation.attach(window);
							        this.elementPropertyAccessors = this.propertyAccessorsInstrumentation.attach(window);

							        // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
							        // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.
							        // NOTE: GH-260
							        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, _instruction2.default.getEval, {
							            value: function value(evalFn) {
							                if (evalFn !== window.eval) return evalFn;

							                return function (script) {
							                    if (typeof script === 'string') script = (0, _script.processScript)(script);

							                    return evalFn(script);
							                };
							            },
							            configurable: true
							        });

							        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, _instruction2.default.processScript, {
							            value: function value(script, isApply) {
							                if (isApply) {
							                    if (script && script.length && typeof script[0] === 'string') {
							                        var args = [(0, _script.processScript)(script[0], false)];

							                        // NOTE: shallow-copy the remaining args. Don't use arr.slice(),
							                        // since it may leak the arguments object.
							                        // See: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/arguments
							                        for (var i = 1; i < script.length; i++) {
							                            args.push(script[i]);
							                        }return args;
							                    }
							                } else if (typeof script === 'string') return (0, _script.processScript)(script, false);

							                return script;
							            },
							            configurable: true
							        });

							        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, _instruction2.default.processHtml, {
							            value: function value(win, html) {
							                if (typeof html === 'string') html = (0, _html.processHtml)('<html><body>' + html + '</body></html>', { processedContext: win });

							                return html;
							            },
							            configurable: true
							        });
							    };

							    return CodeInstrumentation;
							}(_base2.default);

							exports.default = CodeInstrumentation;
							module.exports = exports['default'];
						},
						"location": {
							"ancestor-origins-wrapper.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.default = DOMStringListWrapper;

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _index = require('./index');

								var _index2 = _interopRequireDefault(_index);

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function DOMStringListWrapper(window, getCrossDomainOrigin) {
								    var _this = this;

								    var nativeOrigins = window.location.ancestorOrigins;
								    var parentWindow = window;

								    _nativeMethods2.default.objectDefineProperty(this, '_nativeLength', {
								        value: nativeOrigins.length,
								        configurable: true
								    });

								    var _loop = function _loop(i) {
								        parentWindow = parentWindow.parent;
								        var parentLocationWrapper = _index2.default.getLocationWrapper(parentWindow);
								        var isCrossDomainParent = parentLocationWrapper === parentWindow.location;

								        // eslint-disable-next-line no-restricted-properties
								        updateOrigin(_this, i, isCrossDomainParent ? '' : parentLocationWrapper.origin);

								        if (isCrossDomainParent) {
								            getCrossDomainOrigin(parentWindow, function (origin) {
								                updateOrigin(_this, i, origin);
								            });
								        }
								    };

								    for (var i = 0; i < this._nativeLength; i++) {
								        _loop(i);
								    }
								}

								DOMStringListWrapper.prototype = _nativeMethods2.default.objectCreate(DOMStringList.prototype);

								DOMStringListWrapper.prototype.item = function (index) {
								    return this[index];
								};

								DOMStringListWrapper.prototype.contains = function (origin) {
								    if (typeof origin !== 'string') origin = String(origin);

								    for (var i = 0; i < this._nativeLength; i++) {
								        if (this[i] === origin) return true;
								    }

								    return false;
								};

								_nativeMethods2.default.objectDefineProperty(DOMStringListWrapper.prototype, 'length', {
								    configurable: true,
								    enumerable: true,
								    get: function get() {
								        return this._nativeLength;
								    }
								});

								function updateOrigin(wrapper, index, newOrigin) {
								    wrapper[index] = newOrigin;

								    _nativeMethods2.default.objectDefineProperty(wrapper, index, {
								        value: newOrigin,
								        configurable: true,
								        enumerable: true
								    });
								}
								module.exports = exports['default'];
							},
							"index.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _wrapper = require('./wrapper');

								var _wrapper2 = _interopRequireDefault(_wrapper);

								var _base = require('../../base');

								var _base2 = _interopRequireDefault(_base);

								var _dom = require('../../../utils/dom');

								var _instruction = require('../../../../processing/script/instruction');

								var _instruction2 = _interopRequireDefault(_instruction);

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

								function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

								var LOCATION_WRAPPER = 'hammerhead|location-wrapper';

								var LocationAccessorsInstrumentation = function (_SandboxBase) {
								    _inherits(LocationAccessorsInstrumentation, _SandboxBase);

								    function LocationAccessorsInstrumentation(messageSandbox) {
								        _classCallCheck(this, LocationAccessorsInstrumentation);

								        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

								        _this.LOCATION_CHANGED_EVENT = 'hammerhead|event|location-changed';

								        _this.messageSandbox = messageSandbox;

								        _this.locationChangedEventCallback = function (e) {
								            return _this.emit(_this.LOCATION_CHANGED_EVENT, e);
								        };
								        return _this;
								    }

								    LocationAccessorsInstrumentation.isLocationWrapper = function isLocationWrapper(obj) {
								        return obj instanceof _wrapper2.default;
								    };

								    LocationAccessorsInstrumentation.getLocationWrapper = function getLocationWrapper(owner) {
								        // NOTE: When the owner is cross-domain, we cannot get its location wrapper, so we return the original
								        // location, which cannot be accessed but behaves like a real one. Cross-domain location retains the 'replace'
								        // and 'assign' methods, so we intercept calls to them through MethodCallInstrumentation.
								        try {
								            return owner[LOCATION_WRAPPER];
								        } catch (e) {
								            return owner.location;
								        }
								    };

								    LocationAccessorsInstrumentation.prototype.attach = function attach(window) {
								        _SandboxBase.prototype.attach.call(this, window);

								        var locationWrapper = new _wrapper2.default(window, this.messageSandbox, this.locationChangedEventCallback);

								        // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
								        // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.
								        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, LOCATION_WRAPPER, {
								            value: locationWrapper,
								            configurable: true
								        });
								        _nativeMethods2.default.objectDefineProperty.call(window.Object, window.document, LOCATION_WRAPPER, {
								            value: locationWrapper,
								            configurable: true
								        });
								        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, _instruction2.default.getLocation, {
								            value: function value(location) {
								                return (0, _dom.isLocation)(location) ? locationWrapper : location;
								            },
								            configurable: true
								        });
								        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, _instruction2.default.setLocation, {
								            value: function value(location, _value) {
								                if ((0, _dom.isLocation)(location) && typeof _value === 'string') {
								                    // eslint-disable-next-line no-restricted-properties
								                    locationWrapper.href = _value;

								                    return _value;
								                }

								                return null;
								            },

								            configurable: true
								        });
								    };

								    return LocationAccessorsInstrumentation;
								}(_base2.default);

								exports.default = LocationAccessorsInstrumentation;
								module.exports = exports['default'];
							},
							"wrapper.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _destinationLocation = require('../../../utils/destination-location');

								var _url = require('../../../utils/url');

								var _url2 = require('../../../../utils/url');

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _urlResolver = require('../../../utils/url-resolver');

								var _urlResolver2 = _interopRequireDefault(_urlResolver);

								var _index = require('../../../../processing/dom/index');

								var _ancestorOriginsWrapper = require('./ancestor-origins-wrapper');

								var _ancestorOriginsWrapper2 = _interopRequireDefault(_ancestorOriginsWrapper);

								var _integerIdGenerator = require('../../../utils/integer-id-generator');

								var _integerIdGenerator2 = _interopRequireDefault(_integerIdGenerator);

								var _propertyOverriding = require('../../../utils/property-overriding');

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								var GET_ORIGIN_CMD = 'hammerhead|command|get-origin';
								var ORIGIN_RECEIVED_CMD = 'hammerhead|command|origin-received';

								function getLocationUrl(window) {
								    try {
								        return window.location.toString();
								    } catch (e) {
								        return void 0;
								    }
								}

								var LocationWrapper = function LocationWrapper(window, messageSandbox, onChanged) {
								    var _this = this;

								    _classCallCheck(this, LocationWrapper);

								    var parsedLocation = (0, _url.parseProxyUrl)(getLocationUrl(window));
								    var locationResourceType = parsedLocation ? parsedLocation.resourceType : '';
								    var parsedResourceType = (0, _url.parseResourceType)(locationResourceType);
								    var isLocationPropsInProto = _nativeMethods2.default.objectHasOwnProperty.call(window.Location.prototype, 'href');
								    var locationPropsOwner = isLocationPropsInProto ? window.Location.prototype : window.location;
								    var locationProps = {};

								    parsedResourceType.isIframe |= window !== window.top;

								    var resourceType = (0, _url2.getResourceTypeString)({
								        isIframe: parsedResourceType.isIframe,
								        isForm: parsedResourceType.isForm
								    });
								    var getHref = function getHref() {
								        // eslint-disable-next-line no-restricted-properties
								        if (window !== window.top && window.location.href === 'about:blank') return 'about:blank';

								        var locationUrl = (0, _destinationLocation.get)();
								        var resolveElement = _urlResolver2.default.getResolverElement(window.document);

								        _nativeMethods2.default.anchorHrefSetter.call(resolveElement, locationUrl);

								        var href = _nativeMethods2.default.anchorHrefGetter.call(resolveElement);

								        return (0, _url2.ensureTrailingSlash)(href, locationUrl);
								    };
								    var getProxiedHref = function getProxiedHref(href) {
								        if (typeof href !== 'string') href = String(href);

								        href = (0, _url2.prepareUrl)(href);

								        if ((0, _index.isJsProtocol)(href)) return (0, _index.processJsAttrValue)(href, { isJsProtocol: true, isEventAttr: false });

								        var locationUrl = getLocationUrl(window);

								        var proxyPort = null;

								        if (window !== window.parent) {
								            var parentLocationUrl = getLocationUrl(window.parent);
								            var parsedParentLocationUrl = (0, _url.parseProxyUrl)(parentLocationUrl);

								            if (parsedParentLocationUrl && parsedParentLocationUrl.proxy) {
								                // eslint-disable-next-line no-restricted-properties
								                var parentProxyPort = parsedParentLocationUrl.proxy.port;

								                proxyPort = (0, _url2.sameOriginCheck)(parentLocationUrl, href) ? parentProxyPort : (0, _url.getCrossDomainProxyPort)(parentProxyPort);
								            }
								        }

								        var changedOnlyHash = locationUrl && (0, _url.isChangedOnlyHash)(locationUrl, href);
								        var currentResourceType = changedOnlyHash ? locationResourceType : resourceType;

								        return (0, _url.getProxyUrl)(href, { resourceType: currentResourceType, proxyPort: proxyPort });
								    };

								    // eslint-disable-next-line no-restricted-properties
								    locationProps.href = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, 'href', {
								        getter: getHref,
								        setter: function setter(href) {
								            var proxiedHref = getProxiedHref(href);

								            // eslint-disable-next-line no-restricted-properties
								            window.location.href = proxiedHref;

								            onChanged(proxiedHref);

								            return href;
								        }
								    });

								    // eslint-disable-next-line no-restricted-properties
								    locationProps.search = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, 'search', {
								        // eslint-disable-next-line no-restricted-properties
								        getter: function getter() {
								            return window.location.search;
								        },
								        setter: function setter(search) {
								            var newLocation = (0, _url.changeDestUrlPart)(window.location.toString(), _nativeMethods2.default.anchorSearchSetter, search, resourceType);

								            window.location = newLocation;
								            onChanged(newLocation);

								            return search;
								        }
								    });

								    // eslint-disable-next-line no-restricted-properties
								    locationProps.origin = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, 'origin', {
								        getter: function getter() {
								            return (0, _url2.getDomain)((0, _destinationLocation.getParsed)());
								        },
								        setter: function setter(origin) {
								            return origin;
								        }
								    });

								    locationProps.hash = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, 'hash', {
								        getter: function getter() {
								            return window.location.hash;
								        },
								        setter: function setter(hash) {
								            window.location.hash = hash;

								            return hash;
								        }
								    });

								    if (window.location.ancestorOrigins) {
								        var callbacks = _nativeMethods2.default.objectCreate(null);
								        var idGenerator = (0, _integerIdGenerator2.default)();

								        var getCrossDomainOrigin = function getCrossDomainOrigin(win, callback) {
								            var id = idGenerator.increment();

								            callbacks[id] = callback;

								            messageSandbox.sendServiceMsg({ id: id, cmd: GET_ORIGIN_CMD }, win);
								        };

								        messageSandbox.on(messageSandbox.SERVICE_MSG_RECEIVED_EVENT, function (_ref) {
								            var message = _ref.message,
								                source = _ref.source;

								            if (message.cmd === GET_ORIGIN_CMD) {
								                // eslint-disable-next-line no-restricted-properties
								                messageSandbox.sendServiceMsg({ id: message.id, cmd: ORIGIN_RECEIVED_CMD, origin: _this.origin }, source);
								            } else if (message.cmd === ORIGIN_RECEIVED_CMD) {
								                var callback = callbacks[message.id];

								                if (callback) callback(message.origin); // eslint-disable-line no-restricted-properties
								            }
								        });

								        var ancestorOrigins = new _ancestorOriginsWrapper2.default(window, getCrossDomainOrigin);

								        locationProps.ancestorOrigins = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, 'ancestorOrigins', {
								            getter: function getter() {
								                return ancestorOrigins;
								            }
								        });
								    }

								    var createLocationPropertyDesc = function createLocationPropertyDesc(property, nativePropSetter) {
								        locationProps[property] = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, property, {
								            getter: function getter() {
								                return (0, _destinationLocation.getParsed)()[property];
								            },
								            setter: function setter(value) {
								                var newLocation = (0, _url.changeDestUrlPart)(window.location.toString(), nativePropSetter, value, resourceType);

								                window.location = newLocation;
								                onChanged(newLocation);

								                return value;
								            }
								        });
								    };

								    createLocationPropertyDesc('port', _nativeMethods2.default.anchorPortSetter);
								    createLocationPropertyDesc('host', _nativeMethods2.default.anchorHostSetter);
								    createLocationPropertyDesc('hostname', _nativeMethods2.default.anchorHostnameSetter);
								    createLocationPropertyDesc('pathname', _nativeMethods2.default.anchorPathnameSetter);
								    createLocationPropertyDesc('protocol', _nativeMethods2.default.anchorProtocolSetter);

								    locationProps.assign = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, 'assign', {
								        value: function value(url) {
								            var proxiedHref = getProxiedHref(url);
								            var result = window.location.assign(proxiedHref);

								            onChanged(proxiedHref);

								            return result;
								        }
								    });

								    locationProps.replace = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, 'replace', {
								        value: function value(url) {
								            var proxiedHref = getProxiedHref(url);
								            var result = window.location.replace(proxiedHref);

								            onChanged(proxiedHref);

								            return result;
								        }
								    });

								    locationProps.reload = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, 'reload', {
								        value: function value(forcedReload) {
								            var result = window.location.reload(forcedReload);

								            onChanged(window.location.toString());

								            return result;
								        }
								    });

								    locationProps.toString = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, 'toString', { value: getHref });

								    if (!isLocationPropsInProto && _nativeMethods2.default.objectHasOwnProperty.call(window.location, 'valueOf')) locationProps.valueOf = (0, _propertyOverriding.createOverriddenDescriptor)(locationPropsOwner, 'valueOf', { value: function value() {
								            return _this;
								        } });

								    _nativeMethods2.default.objectDefineProperties(this, locationProps);
								};

								exports.default = LocationWrapper;
								module.exports = exports['default'];
							}
						},
						"methods.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _instruction = require('../../../processing/script/instruction');

							var _instruction2 = _interopRequireDefault(_instruction);

							var _instrumented = require('../../../processing/script/instrumented');

							var _dom = require('../../utils/dom');

							var _fastApply = require('../../utils/fast-apply');

							var _fastApply2 = _interopRequireDefault(_fastApply);

							var _types = require('../../utils/types');

							var typeUtils = _interopRequireWildcard(_types);

							var _url = require('../../utils/url');

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var MethodCallInstrumentation = function (_SandboxBase) {
							    _inherits(MethodCallInstrumentation, _SandboxBase);

							    function MethodCallInstrumentation(messageSandbox) {
							        _classCallCheck(this, MethodCallInstrumentation);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.messageSandbox = messageSandbox;

							        _this.methodWrappers = {
							            postMessage: {
							                condition: _dom.isWindow,
							                method: function method(contentWindow, args) {
							                    return messageSandbox.postMessage(contentWindow, args);
							                }
							            },

							            // NOTE: We cannot get the location wrapper for a cross-domain window. Therefore, we need to
							            // intercept calls to the native 'replace' method.
							            replace: {
							                condition: _dom.isLocation,
							                method: function method(location, args) {
							                    return location.replace((0, _url.getProxyUrl)(args[0], {
							                        resourceType: MethodCallInstrumentation._getLocationResourceType(location)
							                    }));
							                }
							            },

							            // NOTE: We cannot get the location wrapper for a cross-domain window. Therefore, we need to
							            // intercept calls to the native 'assign' method.
							            assign: {
							                condition: _dom.isLocation,
							                method: function method(location, args) {
							                    return location.assign((0, _url.getProxyUrl)(args[0], {
							                        resourceType: MethodCallInstrumentation._getLocationResourceType(location)
							                    }));
							                }
							            }
							        };
							        return _this;
							    }

							    // NOTE: Isolate throw statement into a separate function because JS engine doesn't optimize such functions.


							    MethodCallInstrumentation._error = function _error(msg) {
							        throw new Error(msg);
							    };

							    MethodCallInstrumentation._getLocationResourceType = function _getLocationResourceType(location) {
							        return window.top.location === location ? null : (0, _url.stringifyResourceType)({ isIframe: true });
							    };

							    MethodCallInstrumentation._isPostMessageFn = function _isPostMessageFn(win, fn) {
							        // NOTE: in iOS Safari 9.3 win.postMessage === win.postMessage equals false
							        if (win.postMessage === win.postMessage) return win.postMessage === fn;

							        return fn && typeof fn.toString === 'function' && fn.toString() === win.postMessage.toString();
							    };

							    MethodCallInstrumentation.prototype.attach = function attach(window) {
							        var _this2 = this;

							        _SandboxBase.prototype.attach.call(this, window);

							        // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
							        // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.
							        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, _instruction2.default.callMethod, {
							            value: function value(owner, methName, args) {
							                if (typeUtils.isNullOrUndefined(owner)) MethodCallInstrumentation._error('Cannot call method \'' + methName + '\' of ' + typeUtils.inaccessibleTypeToStr(owner));

							                if (typeof owner[methName] !== 'function') MethodCallInstrumentation._error('\'' + methName + '\' is not a function');

							                // OPTIMIZATION: previously we've performed the
							                // `this.methodWrappers.hasOwnProperty(methName)`
							                // check which is quite slow. Now we use the
							                // fast RegExp check instead.
							                if (typeof methName === 'string' && (0, _instrumented.shouldInstrumentMethod)(methName) && _this2.methodWrappers[methName].condition(owner)) return _this2.methodWrappers[methName].method(owner, args);

							                return (0, _fastApply2.default)(owner, methName, args);
							            },
							            configurable: true
							        });

							        var methodCallInstrumentation = this;

							        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, _instruction2.default.getPostMessage, {
							            value: function value(win, postMessageFn) {
							                if (arguments.length === 1 && !(0, _dom.isWindow)(win)) return win.postMessage;

							                if (arguments.length === 2 && !MethodCallInstrumentation._isPostMessageFn(this, postMessageFn)) return postMessageFn;

							                return function () {
							                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
							                        args[_key] = arguments[_key];
							                    }

							                    return methodCallInstrumentation.messageSandbox.postMessage(this, args);
							                };
							            },
							            configurable: true
							        });
							    };

							    return MethodCallInstrumentation;
							}(_base2.default);

							exports.default = MethodCallInstrumentation;
							module.exports = exports['default'];
						},
						"properties": {
							"anchor.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.getAnchorProperty = getAnchorProperty;
								exports.setAnchorProperty = setAnchorProperty;
								exports.dispose = dispose;

								var _url = require('../../../utils/url');

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								var anchor = _nativeMethods2.default.createElement.call(document, 'a');
								var emptyAnchor = _nativeMethods2.default.createElement.call(document, 'a');

								function getAnchorProperty(el, nativePropGetter) {
								    var href = _nativeMethods2.default.anchorHrefGetter.call(el);

								    if (href) {
								        var parsedProxyUrl = (0, _url.parseProxyUrl)(href);

								        _nativeMethods2.default.anchorHrefSetter.call(anchor, parsedProxyUrl ? parsedProxyUrl.destUrl : href);

								        return nativePropGetter.call(anchor);
								    }

								    return nativePropGetter.call(emptyAnchor);
								}

								function setAnchorProperty(el, nativePropSetter, value) {
								    var href = _nativeMethods2.default.anchorHrefGetter.call(el);

								    if (href) {
								        var parsedProxyUrl = (0, _url.parseProxyUrl)(href);

								        _nativeMethods2.default.anchorHrefSetter.call(anchor, parsedProxyUrl ? parsedProxyUrl.destUrl : href);
								        nativePropSetter.call(anchor, value);
								        el.setAttribute('href', _nativeMethods2.default.anchorHrefGetter.call(anchor));
								    }

								    return value;
								}

								function dispose() {
								    anchor = null;
								    emptyAnchor = null;
								}
							},
							"index.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _internalProperties = require('../../../../processing/dom/internal-properties');

								var _internalProperties2 = _interopRequireDefault(_internalProperties);

								var _location = require('../location');

								var _location2 = _interopRequireDefault(_location);

								var _wrapper = require('../location/wrapper');

								var _wrapper2 = _interopRequireDefault(_wrapper);

								var _base = require('../../base');

								var _base2 = _interopRequireDefault(_base);

								var _destinationLocation = require('../../../utils/destination-location');

								var destLocation = _interopRequireWildcard(_destinationLocation);

								var _dom = require('../../../utils/dom');

								var domUtils = _interopRequireWildcard(_dom);

								var _types = require('../../../utils/types');

								var typeUtils = _interopRequireWildcard(_types);

								var _url = require('../../../utils/url');

								var urlUtils = _interopRequireWildcard(_url);

								var _url2 = require('../../../../utils/url');

								var _instruction = require('../../../../processing/script/instruction');

								var _instruction2 = _interopRequireDefault(_instruction);

								var _instrumented = require('../../../../processing/script/instrumented');

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _dom2 = require('../../../../processing/dom');

								function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

								function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

								var PropertyAccessorsInstrumentation = function (_SandboxBase) {
								    _inherits(PropertyAccessorsInstrumentation, _SandboxBase);

								    function PropertyAccessorsInstrumentation(windowSandbox) {
								        _classCallCheck(this, PropertyAccessorsInstrumentation);

								        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

								        _this.windowSandbox = windowSandbox;
								        return _this;
								    }

								    // NOTE: Isolate throw statements into a separate function because the
								    // JS engine doesn't optimize such functions.


								    PropertyAccessorsInstrumentation._error = function _error(msg) {
								        throw new Error(msg);
								    };

								    PropertyAccessorsInstrumentation._safeIsShadowUIElement = function _safeIsShadowUIElement(el) {
								        try {
								            return domUtils.isShadowUIElement(el);
								        } catch (e) {
								            return false;
								        }
								    };

								    PropertyAccessorsInstrumentation.prototype._createPropertyAccessors = function _createPropertyAccessors(window, document) {
								        return {
								            href: {
								                condition: _location2.default.isLocationWrapper,

								                // eslint-disable-next-line no-restricted-properties
								                get: function get(locationWrapper) {
								                    return locationWrapper.href;
								                },

								                set: function set(locationWrapper, value) {
								                    // eslint-disable-next-line no-restricted-properties
								                    locationWrapper.href = destLocation.resolveUrl(value, document);

								                    return value;
								                }
								            },

								            location: {
								                condition: function condition(owner) {
								                    return domUtils.isDocument(owner) || domUtils.isWindow(owner);
								                },

								                get: function get(owner) {
								                    var locationWrapper = _location2.default.getLocationWrapper(owner);

								                    if (locationWrapper) return locationWrapper;

								                    var wnd = domUtils.isWindow(owner) ? owner : owner.defaultView;

								                    return new _wrapper2.default(wnd);
								                },

								                set: function set(owner, location) {
								                    var ownerWindow = domUtils.isWindow(owner) ? owner : owner.defaultView;
								                    var locationWrapper = _location2.default.getLocationWrapper(ownerWindow);

								                    if (!locationWrapper) {
								                        if (typeof location !== 'string') location = String(location);

								                        if (!(0, _dom2.isJsProtocol)(location)) {
								                            var url = (0, _url2.prepareUrl)(location);
								                            var resourceType = urlUtils.stringifyResourceType({ isIframe: true });

								                            owner.location = destLocation.sameOriginCheck(location.toString(), url) ? urlUtils.getProxyUrl(url, { resourceType: resourceType }) : urlUtils.getCrossDomainIframeProxyUrl(url);
								                        } else owner.location = (0, _dom2.processJsAttrValue)(location, { isJsProtocol: true, isEventAttr: false });
								                    } else
								                        // eslint-disable-next-line no-restricted-properties
								                        locationWrapper.href = location;

								                    return location;
								                }
								            }
								        };
								    };

								    PropertyAccessorsInstrumentation._getSetPropertyInstructionByOwner = function _getSetPropertyInstructionByOwner(owner, window) {
								        try {
								            return owner && owner[_internalProperties2.default.processedContext] && owner[_internalProperties2.default.processedContext] !== window && owner[_internalProperties2.default.processedContext][_instruction2.default.setProperty];
								        } catch (e) {
								            return null;
								        }
								    };

								    PropertyAccessorsInstrumentation.prototype.attach = function attach(window) {
								        _SandboxBase.prototype.attach.call(this, window);

								        var accessors = this._createPropertyAccessors(window, window.document);
								        var windowSandbox = this.windowSandbox;

								        // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
								        // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.
								        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, _instruction2.default.getProperty, {
								            value: function value(owner, propName) {
								                if (typeUtils.isNullOrUndefined(owner)) PropertyAccessorsInstrumentation._error('Cannot read property \'' + propName + '\' of ' + typeUtils.inaccessibleTypeToStr(owner));

								                if (typeof propName === 'string' && (0, _instrumented.shouldInstrumentProperty)(propName) && accessors[propName].condition(owner)) return accessors[propName].get(owner);

								                var propertyValue = owner[propName];

								                windowSandbox.isInternalGetter = true;

								                if (propertyValue && PropertyAccessorsInstrumentation._safeIsShadowUIElement(propertyValue)) return void 0;

								                windowSandbox.isInternalGetter = false;

								                return propertyValue;
								            },

								            configurable: true
								        });

								        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, _instruction2.default.setProperty, {
								            value: function value(owner, propName, _value) {
								                if (typeUtils.isNullOrUndefined(owner)) PropertyAccessorsInstrumentation._error('Cannot set property \'' + propName + '\' of ' + typeUtils.inaccessibleTypeToStr(owner));

								                var ownerSetPropertyInstruction = PropertyAccessorsInstrumentation._getSetPropertyInstructionByOwner(owner, window);

								                if (ownerSetPropertyInstruction) return ownerSetPropertyInstruction(owner, propName, _value);

								                if (typeof propName === 'string' && (0, _instrumented.shouldInstrumentProperty)(propName) && accessors[propName].condition(owner)) return accessors[propName].set(owner, _value);

								                // eslint-disable-next-line no-return-assign
								                return owner[propName] = _value;
								            },

								            configurable: true
								        });

								        return accessors;
								    };

								    return PropertyAccessorsInstrumentation;
								}(_base2.default);

								exports.default = PropertyAccessorsInstrumentation;
								module.exports = exports['default'];
							}
						}
					},
					"console.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _base = require('./base');

						var _base2 = _interopRequireDefault(_base);

						var _dom = require('../utils/dom');

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var ConsoleSandbox = function (_SandboxBase) {
						    _inherits(ConsoleSandbox, _SandboxBase);

						    function ConsoleSandbox(messageSandbox) {
						        _classCallCheck(this, ConsoleSandbox);

						        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

						        _this.CONSOLE_METH_CALLED_EVENT = 'hammerhead|event|console-meth-called';

						        _this.messageSandbox = messageSandbox;

						        _this.serviceMsgReceivedEventCallback = function (_ref) {
						            var message = _ref.message;

						            if (message.cmd === _this.CONSOLE_METH_CALLED_EVENT) _this.emit(_this.CONSOLE_METH_CALLED_EVENT, { meth: message.meth, line: message.line });
						        };
						        return _this;
						    }

						    ConsoleSandbox.prototype._toString = function _toString(obj) {
						        try {
						            return String(obj);
						        } catch (e) {
						            return 'object';
						        }
						    };

						    ConsoleSandbox.prototype._proxyConsoleMeth = function _proxyConsoleMeth(meth) {
						        var _this2 = this;

						        this.window.console[meth] = function () {
						            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						                args[_key] = arguments[_key];
						            }

						            if (!(0, _dom.isCrossDomainWindows)(window, window.top)) {
						                var sendToTopWindow = window !== window.top;
						                var line = _nativeMethods2.default.arrayMap.call(args, _this2._toString).join(' ');

						                if (sendToTopWindow) {
						                    _this2.emit(_this2.CONSOLE_METH_CALLED_EVENT, { meth: meth, line: line, inIframe: true });
						                    _this2.messageSandbox.sendServiceMsg({ meth: meth, line: line, cmd: _this2.CONSOLE_METH_CALLED_EVENT }, window.top);
						                } else _this2.emit(_this2.CONSOLE_METH_CALLED_EVENT, { meth: meth, line: line });
						            }

						            _this2.nativeMethods.consoleMeths[meth].apply(_this2.nativeMethods.console, args);
						        };
						    };

						    ConsoleSandbox.prototype.attach = function attach(window) {
						        _SandboxBase.prototype.attach.call(this, window);

						        this._proxyConsoleMeth('log');
						        this._proxyConsoleMeth('info');
						        this._proxyConsoleMeth('error');
						        this._proxyConsoleMeth('warn');

						        var messageSandbox = this.messageSandbox;

						        messageSandbox.on(messageSandbox.SERVICE_MSG_RECEIVED_EVENT, this.serviceMsgReceivedEventCallback);
						    };

						    return ConsoleSandbox;
						}(_base2.default);

						exports.default = ConsoleSandbox;
						module.exports = exports['default'];
					},
					"cookie": {
						"index.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _pinkie = require('pinkie');

							var _pinkie2 = _interopRequireDefault(_pinkie);

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _settings = require('../../settings');

							var _settings2 = _interopRequireDefault(_settings);

							var _windowSync = require('./window-sync');

							var _windowSync2 = _interopRequireDefault(_windowSync);

							var _destinationLocation = require('../../utils/destination-location');

							var destLocation = _interopRequireWildcard(_destinationLocation);

							var _cookie = require('../../utils/cookie');

							var cookieUtils = _interopRequireWildcard(_cookie);

							var _stringTrim = require('../../../utils/string-trim');

							var _stringTrim2 = _interopRequireDefault(_stringTrim);

							var _cookieLimit = require('../../../session/cookie-limit');

							var _cookieLimit2 = _interopRequireDefault(_cookieLimit);

							var _nativeMethods = require('../../sandbox/native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _cookie2 = require('../../../utils/cookie');

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var MIN_DATE_VALUE = new _nativeMethods2.default.date(0).toUTCString(); // eslint-disable-line new-cap

							var CookieSandbox = function (_SandboxBase) {
							    _inherits(CookieSandbox, _SandboxBase);

							    function CookieSandbox(messageSandbox) {
							        _classCallCheck(this, CookieSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.messageSandbox = messageSandbox;
							        _this.windowSync = null;

							        _this.pendingWindowSync = [];
							        return _this;
							    }

							    CookieSandbox.prototype._canSetCookie = function _canSetCookie(cookie, setByClient) {
							        // eslint-disable-next-line no-restricted-properties
							        if (setByClient && (cookie.length > _cookieLimit2.default || destLocation.getParsed().protocol === 'file:')) return false;

							        var clientCookie = 'key' + _nativeMethods2.default.mathRandom.call(_nativeMethods2.default.math) + '=value';

							        _nativeMethods2.default.documentCookieSetter.call(this.document, clientCookie);

							        var documentCookieIsEmpty = !_nativeMethods2.default.documentCookieGetter.call(this.document);

							        if (!documentCookieIsEmpty) _nativeMethods2.default.documentCookieSetter.call(this.document, clientCookie + ';expires=' + MIN_DATE_VALUE);

							        return !documentCookieIsEmpty;
							    };

							    CookieSandbox._updateClientCookieStr = function _updateClientCookieStr(cookieKey, newCookieStr) {
							        var cookieStr = _settings2.default.get().cookie; // eslint-disable-line no-restricted-properties
							        var cookies = cookieStr ? cookieStr.split(';') : [];
							        var changedCookies = [];
							        var replaced = false;
							        var searchStr = cookieKey === '' ? null : cookieKey + '=';

							        // NOTE: Replace a cookie if it already exists.

							        for (var _i2 = 0; _i2 < cookies.length; _i2++) {
							            var cookie = cookies[_i2];
							            cookie = (0, _stringTrim2.default)(cookie);

							            var isCookieExists = searchStr ? cookie.indexOf(searchStr) === 0 : cookie.indexOf('=') === -1;

							            if (!isCookieExists) changedCookies.push(cookie);else if (newCookieStr !== null) {
							                changedCookies.push(newCookieStr);

							                replaced = true;
							            }
							        }

							        if (!replaced && newCookieStr !== null) changedCookies.push(newCookieStr);

							        _settings2.default.get().cookie = changedCookies.join('; '); // eslint-disable-line no-restricted-properties
							    };

							    CookieSandbox.prototype.getCookie = function getCookie() {
							        this.syncCookie();

							        // eslint-disable-next-line no-restricted-properties
							        return _settings2.default.get().cookie || '';
							    };

							    CookieSandbox.prototype.setCookie = function setCookie(document, cookie) {
							        var setByClient = typeof cookie === 'string';

							        // NOTE: Cookie cannot be set in iframe without src in IE
							        // Also cookie cannot be set on a page with 'file:' protocol
							        // or if the length of cookie higher than limit
							        if (!this._canSetCookie(cookie, setByClient)) return;

							        var parsedCookie = setByClient ? cookieUtils.parse(cookie) : cookie;

							        if (!parsedCookie || parsedCookie.httpOnly) return;

							        var parsedDestLocation = destLocation.getParsed();

							        // NOTE: All Hammerhad sessions have the same domain, so we need to validate the Domain attribute manually
							        // according to a test url.
							        // eslint-disable-next-line no-restricted-properties
							        if (!cookieUtils.domainMatch(parsedDestLocation.hostname, parsedCookie.domain)) return;

							        // eslint-disable-next-line no-restricted-properties
							        if ((!parsedCookie.secure || parsedDestLocation.protocol === 'https:') &&
							        // eslint-disable-next-line no-restricted-properties
							        cookieUtils.pathMatch(parsedDestLocation.pathname, parsedCookie.path)) {
							            var currentDate = cookieUtils.getUTCDate();
							            var clientCookieStr = null;

							            if (!parsedCookie.expires || parsedCookie.expires === 'Infinity' || parsedCookie.expires > currentDate) clientCookieStr = cookieUtils.formatClientString(parsedCookie);

							            CookieSandbox._updateClientCookieStr(parsedCookie.key, clientCookieStr);
							        }

							        if (setByClient) {
							            cookieUtils.setDefaultValues(parsedCookie, parsedDestLocation);

							            this._syncClientCookie(parsedCookie);
							            this.syncCookie();
							        }
							    };

							    CookieSandbox.prototype.syncCookie = function syncCookie() {
							        var cookies = _nativeMethods2.default.documentCookieGetter.call(this.document);
							        var parsedCookies = (0, _cookie2.parseClientSyncCookieStr)(cookies);
							        var sessionId = _settings2.default.get().sessionId;
							        var serverSyncCookies = [];

							        for (var _i4 = 0, _parsedCookies$outdat2 = parsedCookies.outdated; _i4 < _parsedCookies$outdat2.length; _i4++) {
							            var outdatedCookie = _parsedCookies$outdat2[_i4];
							            _nativeMethods2.default.documentCookieSetter.call(this.document, (0, _cookie2.generateDeleteSyncCookieStr)(outdatedCookie));
							        }

							        for (var _i6 = 0, _parsedCookies$actual2 = parsedCookies.actual; _i6 < _parsedCookies$actual2.length; _i6++) {
							            var parsedCookie = _parsedCookies$actual2[_i6];
							            if (parsedCookie.sid !== sessionId) continue;

							            if (parsedCookie.isServerSync) serverSyncCookies.push(parsedCookie);else if (parsedCookie.isWindowSync) this.setCookie(this.document, parsedCookie);
							        }

							        this._syncServerCookie(serverSyncCookies);
							    };

							    CookieSandbox.prototype._syncServerCookie = function _syncServerCookie(parsedCookies) {
							        var _this2 = this;

							        for (var _i8 = 0; _i8 < parsedCookies.length; _i8++) {
							            var parsedCookie = parsedCookies[_i8];
							            this.setCookie(this.document, parsedCookie);

							            _nativeMethods2.default.documentCookieSetter.call(this.document, (0, _cookie2.generateDeleteSyncCookieStr)(parsedCookie));
							            (0, _cookie2.changeSyncType)(parsedCookie, { server: false, window: true });
							            _nativeMethods2.default.documentCookieSetter.call(this.document, (0, _cookie2.formatSyncCookie)(parsedCookie));
							        }

							        this.windowSync.syncBetweenWindows(parsedCookies, null, function () {
							            for (var _i10 = 0; _i10 < parsedCookies.length; _i10++) {
							                var _parsedCookie = parsedCookies[_i10];
							                _nativeMethods2.default.documentCookieSetter.call(_this2.document, (0, _cookie2.generateDeleteSyncCookieStr)(_parsedCookie));
							            }
							        });
							    };

							    CookieSandbox.prototype._syncClientCookie = function _syncClientCookie(parsedCookie) {
							        var _this3 = this;

							        parsedCookie.isClientSync = true;
							        parsedCookie.isWindowSync = true;
							        parsedCookie.sid = _settings2.default.get().sessionId;
							        parsedCookie.lastAccessed = new _nativeMethods2.default.date(); // eslint-disable-line new-cap

							        (0, _cookie2.prepareSyncCookieProperties)(parsedCookie);

							        _nativeMethods2.default.documentCookieSetter.call(this.document, (0, _cookie2.formatSyncCookie)(parsedCookie));

							        this.windowSync.syncBetweenWindows([parsedCookie], null, function () {
							            _nativeMethods2.default.documentCookieSetter.call(_this3.document, (0, _cookie2.generateDeleteSyncCookieStr)(parsedCookie));
							            (0, _cookie2.changeSyncType)(parsedCookie, { window: false });
							            _nativeMethods2.default.documentCookieSetter.call(_this3.document, (0, _cookie2.formatSyncCookie)(parsedCookie));
							        });
							    };

							    CookieSandbox.prototype._processPendingWindowSync = function _processPendingWindowSync() {
							        for (var _i12 = 0, _pendingWindowSync2 = this.pendingWindowSync; _i12 < _pendingWindowSync2.length; _i12++) {
							            var _pendingWindowSync2$_ = _pendingWindowSync2[_i12],
							                parsedCookies = _pendingWindowSync2$_.parsedCookies,
							                win = _pendingWindowSync2$_.win,
							                resolve = _pendingWindowSync2$_.resolve;

							            var syncResultPromise = this.syncWindowCookie(parsedCookies, win);

							            if (syncResultPromise) syncResultPromise.then(resolve);else resolve();
							        }

							        this.pendingWindowSync = [];
							    };

							    CookieSandbox.prototype.syncWindowCookie = function syncWindowCookie(parsedCookies, win) {
							        var _this4 = this;

							        // NOTE: This function can be called before the 'attach' call.
							        if (!this.document) return new _pinkie2.default(function (resolve) {
							            return _this4.pendingWindowSync.push({ parsedCookies: parsedCookies, win: win, resolve: resolve });
							        });

							        var clientCookie = _nativeMethods2.default.documentCookieGetter.call(this.document);
							        var actualCookies = [];

							        for (var _i14 = 0; _i14 < parsedCookies.length; _i14++) {
							            var parsedCookie = parsedCookies[_i14];
							            var startIndex = clientCookie.indexOf(parsedCookie.cookieStr);
							            var endIndex = startIndex + parsedCookie.cookieStr.length;

							            if (startIndex > -1 && (clientCookie.length === endIndex || clientCookie.charAt(endIndex) === ';')) {
							                this.setCookie(this.document, parsedCookie);
							                actualCookies.push(parsedCookie);
							            }
							        }

							        return this.windowSync.syncBetweenWindows(actualCookies, win);
							    };

							    CookieSandbox.prototype.attach = function attach(window) {
							        _SandboxBase.prototype.attach.call(this, window);

							        this.windowSync = new _windowSync2.default(window, this, this.messageSandbox);

							        this._processPendingWindowSync();
							    };

							    return CookieSandbox;
							}(_base2.default);

							exports.default = CookieSandbox;
							module.exports = exports['default'];
						},
						"window-sync.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _pinkie = require('pinkie');

							var _pinkie2 = _interopRequireDefault(_pinkie);

							var _internalProperties = require('../../../processing/dom/internal-properties');

							var _internalProperties2 = _interopRequireDefault(_internalProperties);

							var _integerIdGenerator = require('../../utils/integer-id-generator');

							var _integerIdGenerator2 = _interopRequireDefault(_integerIdGenerator);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							var SYNC_COOKIE_START_CMD = 'hammerhead|command|sync-cookie-start';
							var SYNC_COOKIE_DONE_CMD = 'hammerhead|command|sync-cookie-done';

							var WindowSync = function () {
							    function WindowSync(win, cookieSandbox, messageSandbox) {
							        var _this = this;

							        _classCallCheck(this, WindowSync);

							        this.win = win;
							        this.cookieSandbox = cookieSandbox;
							        this.messageSandbox = messageSandbox;

							        this.messageIdGenerator = (0, _integerIdGenerator2.default)();
							        this.resolversMap = {};

							        messageSandbox.on(messageSandbox.SERVICE_MSG_RECEIVED_EVENT, function (_ref) {
							            var message = _ref.message,
							                source = _ref.source;

							            if (message.cmd === SYNC_COOKIE_START_CMD) {
							                var syncResultPromise = _this.cookieSandbox.syncWindowCookie(message.cookies, source);
							                var callback = function callback() {
							                    return _this.messageSandbox.sendServiceMsg({
							                        id: message.id,
							                        cmd: SYNC_COOKIE_DONE_CMD
							                    }, source);
							                };

							                if (syncResultPromise) syncResultPromise.then(callback);else callback();
							            }
							            // NOTE: We need to remove the second part of the condition after a fix of GH-1715
							            else if (message.cmd === SYNC_COOKIE_DONE_CMD && _this.resolversMap[message.id]) {
							                    _this.resolversMap[message.id]();

							                    delete _this.resolversMap[message.id];
							                }
							        });
							    }

							    WindowSync._getCookieSandbox = function _getCookieSandbox(win) {
							        try {
							            // eslint-disable-next-line no-restricted-properties
							            return win[_internalProperties2.default.hammerhead].sandbox.cookie;
							        } catch (e) {
							            return null;
							        }
							    };

							    WindowSync.prototype._getWindowsForSync = function _getWindowsForSync(initiator) {
							        var windows = [];

							        if (this.win !== this.win.parent && this.win.parent !== initiator) windows.push(this.win.parent);

							        for (var _i2 = 0, _win$window2 = this.win.window; _i2 < _win$window2.length; _i2++) {
							            var frameWin = _win$window2[_i2];
							            if (frameWin !== initiator) windows.push(frameWin);
							        }

							        return windows;
							    };

							    WindowSync.prototype.syncBetweenWindows = function syncBetweenWindows(cookies, initiator, callback) {
							        if (!cookies.length) {
							            if (callback) callback();

							            return null;
							        }

							        var windowsForSync = this._getWindowsForSync(initiator);
							        var syncMessages = [];

							        for (var _i4 = 0; _i4 < windowsForSync.length; _i4++) {
							            var win = windowsForSync[_i4];
							            var cookieSandbox = WindowSync._getCookieSandbox(win);

							            if (cookieSandbox) {
							                var syncResultPromise = cookieSandbox.syncWindowCookie(cookies, this.win);

							                if (syncResultPromise) syncMessages.push(syncResultPromise);
							            } else syncMessages.push(this.sendSyncMessage(win, SYNC_COOKIE_START_CMD, cookies));
							        }

							        if (syncMessages.length) {
							            var promiseAllMessages = _pinkie2.default.all(syncMessages);

							            return callback ? promiseAllMessages.then(callback) : promiseAllMessages;
							        }

							        if (callback) callback();

							        return null;
							    };

							    WindowSync.prototype.sendSyncMessage = function sendSyncMessage(win, cmd, cookies) {
							        var _this2 = this;

							        var id = this.messageIdGenerator.increment();

							        return new _pinkie2.default(function (resolve) {
							            _this2.resolversMap[id] = resolve;
							            _this2.messageSandbox.sendServiceMsg({ id: id, cmd: cmd, cookies: cookies }, win);
							        });
							    };

							    return WindowSync;
							}();

							exports.default = WindowSync;
							module.exports = exports['default'];
						}
					},
					"electron.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _base = require('./base');

						var _base2 = _interopRequireDefault(_base);

						var _script = require('../../processing/script');

						var _destinationLocation = require('../utils/destination-location');

						var destinationLocation = _interopRequireWildcard(_destinationLocation);

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var ElectronSandbox = function (_SandboxBase) {
						    _inherits(ElectronSandbox, _SandboxBase);

						    function ElectronSandbox() {
						        _classCallCheck(this, ElectronSandbox);

						        return _possibleConstructorReturn(this, _SandboxBase.apply(this, arguments));
						    }

						    ElectronSandbox._createFnWrapper = function _createFnWrapper(vm, nativeFn) {
						        return function () {
						            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						                args[_key] = arguments[_key];
						            }

						            if (typeof args[0] === 'string') args[0] = (0, _script.processScript)(args[0]);

						            return nativeFn.apply(vm, args);
						        };
						    };

						    ElectronSandbox._overrideElectronModulePaths = function _overrideElectronModulePaths(window) {
						        // NOTE: Need this to avoid Webmake require
						        // eslint-disable-next-line no-eval
						        var electronRequire = eval('require');
						        var path = electronRequire('path');
						        var destination = destinationLocation.getParsed();

						        /*eslint-disable no-restricted-properties*/
						        if (destination.protocol !== 'file:') return;

						        var pathname = window.process.platform === 'win32' && destination.pathname[0] === '/' ? destination.pathname.substr(1) : destination.pathname;
						        /*eslint-enable no-restricted-properties*/

						        window.__filename = path.normalize(decodeURIComponent(pathname));
						        window.__dirname = path.dirname(window.__filename);

						        window.module.filename = window.__filename;

						        window.module.paths = window.module.paths.concat(electronRequire('module')._nodeModulePaths(window.__dirname));
						    };

						    ElectronSandbox.prototype.attach = function attach(window) {
						        _SandboxBase.prototype.attach.call(this, window);

						        if (!window.require) return;

						        var vm = window.require('vm');

						        if (!vm) return;

						        var nativeMethods = this.nativeMethods;

						        if (nativeMethods.refreshElectronMeths(vm)) {
						            vm.createScript = ElectronSandbox._createFnWrapper(vm, nativeMethods.createScript);
						            vm.runInDebugContext = ElectronSandbox._createFnWrapper(vm, nativeMethods.runInDebugContext);
						            vm.runInContext = ElectronSandbox._createFnWrapper(vm, nativeMethods.runInContext);
						            vm.runInNewContext = ElectronSandbox._createFnWrapper(vm, nativeMethods.runInNewContext);
						            vm.runInThisContext = ElectronSandbox._createFnWrapper(vm, nativeMethods.runInThisContext);

						            ElectronSandbox._overrideElectronModulePaths(window);
						        }
						    };

						    return ElectronSandbox;
						}(_base2.default);

						exports.default = ElectronSandbox;
						module.exports = exports['default'];
					},
					"event": {
						"active-window-tracker.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var WINDOW_ACTIVATED_EVENT = 'hammerhead|event|window-activated';
							var WINDOW_DEACTIVATED_EVENT = 'hammerhead|event|window-deactivated';

							var ActiveWindowTracker = function (_SandboxBase) {
							    _inherits(ActiveWindowTracker, _SandboxBase);

							    function ActiveWindowTracker(messageSandbox) {
							        _classCallCheck(this, ActiveWindowTracker);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.messageSandbox = messageSandbox;

							        _this.isIframeWindow = null;
							        _this.activeWindow = null;
							        _this.isActive = null;
							        return _this;
							    }

							    ActiveWindowTracker.prototype._notifyPrevActiveWindow = function _notifyPrevActiveWindow() {
							        try {
							            if (this.activeWindow.top && this.activeWindow !== this.activeWindow.top) {
							                this.messageSandbox.sendServiceMsg({
							                    cmd: WINDOW_DEACTIVATED_EVENT
							                }, this.activeWindow);
							            }
							        } catch (err) {
							            // NOTE: The error appears in IE when the corresponding iframe is removed.
							        }
							    };

							    ActiveWindowTracker.prototype.attach = function attach(window) {
							        var _this2 = this;

							        _SandboxBase.prototype.attach.call(this, window);

							        this.isIframeWindow = window !== window.top;
							        this.activeWindow = !this.isIframeWindow ? window.top : null;
							        this.isActive = !this.isIframeWindow;

							        this.messageSandbox.on(this.messageSandbox.SERVICE_MSG_RECEIVED_EVENT, function (e) {
							            if (e.message.cmd === WINDOW_ACTIVATED_EVENT) {
							                _this2._notifyPrevActiveWindow();

							                _this2.isActive = false;
							                _this2.activeWindow = e.source;
							            } else if (e.message.cmd === WINDOW_DEACTIVATED_EVENT) _this2.isActive = false;
							        });
							    };

							    ActiveWindowTracker.prototype.isCurrentWindowActive = function isCurrentWindowActive() {
							        return this.isActive;
							    };

							    ActiveWindowTracker.prototype.makeCurrentWindowActive = function makeCurrentWindowActive() {
							        this.isActive = true;

							        if (!this.isIframeWindow) {
							            this._notifyPrevActiveWindow();

							            this.activeWindow = this.window;
							        } else {
							            this.messageSandbox.sendServiceMsg({
							                cmd: WINDOW_ACTIVATED_EVENT
							            }, this.window.top);
							        }
							    };

							    return ActiveWindowTracker;
							}(_base2.default);

							exports.default = ActiveWindowTracker;
							module.exports = exports['default'];
						},
						"drag-and-drop": {
							"data-store-mode.js": function (exports, module, require) {
								

								exports.__esModule = true;
								// https://html.spec.whatwg.org/multipage/interaction.html#drag-data-store-mode
								exports.default = {
								    readwrite: 'readwrite',
								    readonly: 'readonly',
								    protected: 'protected'
								};
								module.exports = exports['default'];
							},
							"data-transfer-item-kind.js": function (exports, module, require) {
								

								exports.__esModule = true;
								// https://html.spec.whatwg.org/multipage/interaction.html#the-drag-data-item-kind
								exports.default = {
								    string: 'string',
								    file: 'file'
								};
								module.exports = exports['default'];
							},
							"data-transfer-item-list.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _dataTransferItem = require('./data-transfer-item');

								var _dataTransferItem2 = _interopRequireDefault(_dataTransferItem);

								var _dataStoreMode = require('./data-store-mode');

								var _dataStoreMode2 = _interopRequireDefault(_dataStoreMode);

								var _dataTransferItemKind = require('./data-transfer-item-kind');

								var _dataTransferItemKind2 = _interopRequireDefault(_dataTransferItemKind);

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								function parseTextUriList(textUriList) {
								    textUriList = textUriList.replace(/\r\n$/, '');

								    var res = [];

								    if (textUriList === '') return res;

								    textUriList = textUriList.split(/\r\n/);

								    for (var _i2 = 0, _textUriList2 = textUriList; _i2 < _textUriList2.length; _i2++) {
								        var textUri = _textUriList2[_i2];
								        if (textUri !== '#') res.push(textUri);
								    }

								    return res;
								}

								function processFormat(format) {
								    if (format === 'text') return 'text/plain';

								    if (format === 'url') return 'text/uri-list';

								    return format;
								}

								// https://html.spec.whatwg.org/multipage/interaction.html#datatransferitemlist

								var DataTransferItemList = function DataTransferItemList(dataStore) {
								    var _this = this;

								    _classCallCheck(this, DataTransferItemList);

								    // Internals
								    var items = [];
								    var itemsData = [];

								    var getTypes = function getTypes() {
								        var res = [];

								        for (var _i4 = 0, _items2 = items; _i4 < _items2.length; _i4++) {
								            var item = _items2[_i4];
								            res.push(item.type);
								        }

								        return res;
								    };

								    var updateIndexes = function updateIndexes() {
								        var idx = 0;

								        while (items[idx] !== void 0 || _this[idx] !== void 0) {
								            var item = items[idx];

								            _nativeMethods2.default.objectDefineProperty.call(window.Object, _this, idx, {
								                enumerable: item !== void 0,
								                configurable: true,
								                value: item
								            });

								            idx++;
								        }
								    };

								    var getItemData = function getItemData(format) {
								        var convertToUrl = false;

								        format = processFormat(format);

								        if (format === 'url') convertToUrl = true;

								        var item = '';

								        for (var i = 0; i < items.length; i++) {
								            if (items[i].type === format) item = itemsData[i];
								        }

								        if (convertToUrl && item) item = parseTextUriList(item)[0];

								        return item;
								    };

								    var removeItem = function removeItem(format) {
								        format = processFormat(format);

								        for (var i = 0; i < items.length; i++) {
								            if (items[i].type === format) {
								                items.splice(i, 1);
								                itemsData.splice(i, 1);
								                break;
								            }
								        }

								        updateIndexes();
								    };

								    var addItem = function addItem(data, type, allowReplace) {
								        var newItem = null;

								        if (typeof data === 'string') {
								            var typeLowerCase = type.toString().toLowerCase();
								            var itemData = getItemData(typeLowerCase);

								            if (!allowReplace && itemData) throw new Error('Failed to execute \'add\' on \'DataTransferItemList\': An item already exists for type \'' + typeLowerCase + '\'.');

								            if (itemData) removeItem(typeLowerCase);

								            newItem = new _dataTransferItem2.default(_dataTransferItemKind2.default.string, processFormat(type), data);
								        } else newItem = new _dataTransferItem2.default(_dataTransferItemKind2.default.file, null, data);

								        items.push(newItem);
								        itemsData.push(data);
								        updateIndexes();

								        return newItem;
								    };

								    // Internal API
								    this.getAndHideInternalMethods = function () {
								        var res = { getTypes: getTypes, getItemData: getItemData, removeItem: removeItem, addItem: addItem };

								        delete _this.getAndHideInternalMethods;

								        return res;
								    };

								    // API
								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'length', {
								        enumerable: true,

								        get: function get() {
								            return items.length;
								        }
								    });

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'remove', {
								        configurable: true,
								        enumerable: true,

								        get: function get() {
								            return function (idx) {
								                if (dataStore.mode !== _dataStoreMode2.default.readwrite) return;

								                items.splice(idx, 1);
								                itemsData.splice(idx, 1);
								                updateIndexes();
								            };
								        }
								    });

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'clear', {
								        configurable: true,
								        enumerable: true,

								        get: function get() {
								            return function () {
								                if (dataStore.mode !== _dataStoreMode2.default.readwrite) return;

								                items = [];
								                itemsData = [];
								                updateIndexes();
								            };
								        }
								    });

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'add', {
								        configurable: true,
								        enumerable: true,

								        get: function get() {
								            return function (data, type) {
								                if (!arguments.length) throw new Error("Failed to execute 'add' on 'DataTransferItemList': 1 argument required, but only 0 present.");

								                if (arguments.length === 1 && typeof data === 'string') throw new Error("Failed to execute 'add' on 'DataTransferItemList': parameter 1 is not of type 'File'.");

								                if (dataStore.mode !== _dataStoreMode2.default.readwrite) return void 0;

								                return addItem(data, type, false);
								            };
								        }
								    });
								};

								exports.default = DataTransferItemList;


								if (_nativeMethods2.default.DataTransferItemList) DataTransferItemList.prototype = _nativeMethods2.default.DataTransferItemList.prototype;
								module.exports = exports['default'];
							},
							"data-transfer-item.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _dataTransferItemKind = require('./data-transfer-item-kind');

								var _dataTransferItemKind2 = _interopRequireDefault(_dataTransferItemKind);

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								// https://html.spec.whatwg.org/multipage/interaction.html#datatransferitem
								var DataTransferItem = function DataTransferItem(kind, type, data) {
								    _classCallCheck(this, DataTransferItem);

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'kind', {
								        enumerable: true,
								        get: function get() {
								            return kind;
								        }
								    });

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'type', {
								        enumerable: true,
								        get: function get() {
								            return type;
								        }
								    });

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'getAsString', {
								        configurable: true,
								        enumerable: true,

								        get: function get() {
								            return function (callback) {
								                if (!arguments.length) throw new Error("Failed to execute 'getAsString' on 'DataTransferItem': 1 argument required, but only 0 present.");

								                if (typeof callback !== 'function') return;

								                if (kind !== _dataTransferItemKind2.default.string) return;

								                _nativeMethods2.default.setTimeout.call(window, function () {
								                    return callback(data);
								                }, 0);
								            };
								        }
								    });

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'getAsFile', {
								        configurable: true,
								        enumerable: true,

								        get: function get() {
								            return function () {
								                if (kind !== _dataTransferItemKind2.default.file) return null;

								                return data;
								            };
								        }
								    });
								};

								exports.default = DataTransferItem;


								if (_nativeMethods2.default.DataTransferItem) DataTransferItem.prototype = _nativeMethods2.default.DataTransferItem.prototype;
								module.exports = exports['default'];
							},
							"data-transfer.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _browser = require('../../../utils/browser');

								var _featureDetection = require('../../../utils/feature-detection');

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _dataTransferItemList = require('./data-transfer-item-list');

								var _dataTransferItemList2 = _interopRequireDefault(_dataTransferItemList);

								var _fileList = require('./file-list');

								var _fileList2 = _interopRequireDefault(_fileList);

								var _dataStoreMode = require('./data-store-mode');

								var _dataStoreMode2 = _interopRequireDefault(_dataStoreMode);

								var _dropEffect = require('./drop-effect');

								var _dropEffect2 = _interopRequireDefault(_dropEffect);

								var _effectAllowed = require('./effect-allowed');

								var _effectAllowed2 = _interopRequireDefault(_effectAllowed);

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // NOTE: Although DataTransfer interface has a constructor, it is not possible to
								// create a useful DataTransfer object from script, since DataTransfer objects have a
								// processing and security model that is coordinated by the browser during drag-and-drops.
								// So we have to create a mock for it to use it in drag-and-drop events


								// https://html.spec.whatwg.org/multipage/interaction.html#datatransfer
								var DataTransfer = function DataTransfer(dataStore) {
								    _classCallCheck(this, DataTransfer);

								    var dropEffect = _dropEffect2.default.none;
								    var effectAllowed = _effectAllowed2.default.uninitialized;

								    var itemList = new _dataTransferItemList2.default(dataStore);
								    var itemListInternals = itemList.getAndHideInternalMethods();
								    var fileList = new _fileList2.default();

								    var emptyItemList = new _dataTransferItemList2.default(dataStore);
								    var emptyListInternals = emptyItemList.getAndHideInternalMethods();

								    var getActualItemList = function getActualItemList() {
								        return dataStore.mode === _dataStoreMode2.default.protected ? emptyItemList : itemList;
								    };

								    var getActualItemListInternals = function getActualItemListInternals() {
								        return dataStore.mode === _dataStoreMode2.default.protected ? emptyListInternals : itemListInternals;
								    };

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'dropEffect', {
								        configurable: true,
								        enumerable: true,

								        get: function get() {
								            return dropEffect;
								        },
								        set: function set(value) {
								            if (_dropEffect2.default[value]) dropEffect = _dropEffect2.default[value];

								            return value;
								        }
								    });

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'effectAllowed', {
								        configurable: true,
								        enumerable: true,

								        get: function get() {
								            return effectAllowed;
								        },
								        set: function set(value) {
								            if (_effectAllowed2.default[value]) effectAllowed = _effectAllowed2.default[value];

								            return value;
								        }
								    });

								    if (!_browser.isIE11) {
								        _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'items', {
								            configurable: true,
								            enumerable: true,

								            get: getActualItemList
								        });
								    }

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'types', {
								        configurable: true,
								        enumerable: true,

								        get: function get() {
								            return getActualItemListInternals().getTypes();
								        }
								    });

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'files', {
								        configurable: true,
								        enumerable: true,

								        get: function get() {
								            return fileList;
								        }
								    });

								    if (!_browser.isIE11) {
								        this.setDragImage = function () {
								            // do nothing
								        };
								    }

								    this.getData = function (format) {
								        if (!arguments.length) throw new Error("Failed to execute 'getData' on 'DataTransfer': 1 argument required, but only 0 present.");

								        format = format.toString().toLowerCase();

								        return getActualItemListInternals().getItemData(format);
								    };

								    this.setData = function (format, data) {
								        if (arguments.length < 2) throw new Error('Failed to execute \'setData\' on \'DataTransfer\': 2 argument required, but only ' + arguments.length + ' present.');

								        if (dataStore.mode !== _dataStoreMode2.default.readwrite) return;

								        format = format.toString().toLowerCase();

								        itemListInternals.addItem(data, format, true);
								    };

								    this.clearData = function (format) {
								        if (dataStore.mode !== _dataStoreMode2.default.readwrite) return;

								        if (format === void 0) itemList.clear();else itemListInternals.removeItem(format);
								    };
								};

								exports.default = DataTransfer;


								if (_featureDetection.hasDataTransfer) DataTransfer.prototype = _nativeMethods2.default.DataTransfer.prototype;
								module.exports = exports['default'];
							},
							"drag-data-store.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _dataStoreMode = require('./data-store-mode');

								var _dataStoreMode2 = _interopRequireDefault(_dataStoreMode);

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								// https://html.spec.whatwg.org/multipage/interaction.html#the-drag-data-store
								var DragDataStore = function () {
								    function DragDataStore() {
								        _classCallCheck(this, DragDataStore);

								        this.mode = _dataStoreMode2.default.readwrite;
								    }

								    DragDataStore.prototype.setReadOnlyMode = function setReadOnlyMode() {
								        this.mode = _dataStoreMode2.default.readonly;
								    };

								    DragDataStore.prototype.setProtectedMode = function setProtectedMode() {
								        this.mode = _dataStoreMode2.default.protected;
								    };

								    return DragDataStore;
								}();

								exports.default = DragDataStore;
								module.exports = exports['default'];
							},
							"drop-effect.js": function (exports, module, require) {
								

								exports.__esModule = true;
								// https://html.spec.whatwg.org/multipage/interaction.html#dom-datatransfer-dropeffect
								exports.default = {
								    none: 'none',
								    copy: 'copy',
								    link: 'link',
								    move: 'move'
								};
								module.exports = exports['default'];
							},
							"effect-allowed.js": function (exports, module, require) {
								

								exports.__esModule = true;
								// https://html.spec.whatwg.org/multipage/interaction.html#dom-datatransfer-effectallowed
								exports.default = {
								    uninitialized: 'uninitialized',
								    none: 'none',
								    copy: 'copy',
								    copyLink: 'copyLink',
								    copyMove: 'copyMove',
								    link: 'link',
								    linkMove: 'linkMove',
								    move: 'move',
								    all: 'all'
								};
								module.exports = exports['default'];
							},
							"file-list.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // https://w3c.github.io/FileAPI/#filelist-section
								// NOTE: we have limited support for FileList only for drag and drop DataTransfer purposes


								var FileList = function FileList() {
								    _classCallCheck(this, FileList);

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'length', {
								        enumerable: true,

								        get: function get() {
								            return 0;
								        }
								    });

								    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'item', {
								        enumerable: true,

								        get: function get() {
								            return function () {
								                return void 0;
								            };
								        }
								    });
								};

								exports.default = FileList;


								if (_nativeMethods2.default.FileList) FileList.prototype = _nativeMethods2.default.FileList.prototype;
								module.exports = exports['default'];
							}
						},
						"element-editing-watcher.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _dom = require('../../utils/dom');

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							var ELEMENT_EDITING_OBSERVED_FLAG = 'hammerhead|element-editing-observed';
							var OLD_VALUE_PROPERTY = 'hammerhead|old-value';

							var ElementEditingWatcher = function () {
							    function ElementEditingWatcher(eventSimulator) {
							        _classCallCheck(this, ElementEditingWatcher);

							        this.eventSimulator = eventSimulator;
							    }

							    ElementEditingWatcher.prototype._onBlur = function _onBlur(e) {
							        if (!this.processElementChanging(e.target)) this.stopWatching(e.target);
							    };

							    ElementEditingWatcher.prototype._onChange = function _onChange(e) {
							        this.stopWatching(e.target);
							    };

							    ElementEditingWatcher._getValue = function _getValue(el) {
							        if ((0, _dom.isInputElement)(el)) return _nativeMethods2.default.inputValueGetter.call(el);else if ((0, _dom.isTextAreaElement)(el)) return _nativeMethods2.default.textAreaValueGetter.call(el);

							        // eslint-disable-next-line no-restricted-properties
							        return el.value;
							    };

							    ElementEditingWatcher.prototype.stopWatching = function stopWatching(el) {
							        var _this = this;

							        if (el) {
							            _nativeMethods2.default.removeEventListener.call(el, 'blur', function (e) {
							                return _this._onBlur(e);
							            });
							            _nativeMethods2.default.removeEventListener.call(el, 'change', function (e) {
							                return _this._onChange(e);
							            });

							            if (el[ELEMENT_EDITING_OBSERVED_FLAG]) delete el[ELEMENT_EDITING_OBSERVED_FLAG];

							            if (el[OLD_VALUE_PROPERTY]) delete el[OLD_VALUE_PROPERTY];
							        }
							    };

							    ElementEditingWatcher.prototype.watchElementEditing = function watchElementEditing(el) {
							        var _this2 = this;

							        if (el && !el[ELEMENT_EDITING_OBSERVED_FLAG] && (0, _dom.isTextEditableElementAndEditingAllowed)(el) && !(0, _dom.isShadowUIElement)(el)) {

							            el[ELEMENT_EDITING_OBSERVED_FLAG] = true;
							            el[OLD_VALUE_PROPERTY] = ElementEditingWatcher._getValue(el);

							            _nativeMethods2.default.addEventListener.call(el, 'blur', function (e) {
							                return _this2._onBlur(e);
							            });
							            _nativeMethods2.default.addEventListener.call(el, 'change', function (e) {
							                return _this2._onChange(e);
							            });
							        }
							    };

							    ElementEditingWatcher.prototype.restartWatchingElementEditing = function restartWatchingElementEditing(el) {
							        if (el && el[ELEMENT_EDITING_OBSERVED_FLAG]) el[OLD_VALUE_PROPERTY] = ElementEditingWatcher._getValue(el);
							    };

							    ElementEditingWatcher.prototype.processElementChanging = function processElementChanging(el) {
							        if (el && el[ELEMENT_EDITING_OBSERVED_FLAG] && ElementEditingWatcher._getValue(el) !== el[OLD_VALUE_PROPERTY]) {
							            this.eventSimulator.change(el);
							            this.restartWatchingElementEditing(el);

							            return true;
							        }

							        return false;
							    };

							    return ElementEditingWatcher;
							}();

							exports.default = ElementEditingWatcher;
							module.exports = exports['default'];
						},
						"focus-blur.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _internalAttributes = require('../../../processing/dom/internal-attributes');

							var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

							var _internalProperties = require('../../../processing/dom/internal-properties');

							var _internalProperties2 = _interopRequireDefault(_internalProperties);

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _activeWindowTracker = require('../event/active-window-tracker');

							var _activeWindowTracker2 = _interopRequireDefault(_activeWindowTracker);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _browser = require('../../utils/browser');

							var browserUtils = _interopRequireWildcard(_browser);

							var _dom = require('../../utils/dom');

							var domUtils = _interopRequireWildcard(_dom);

							var _style = require('../../utils/style');

							var styleUtils = _interopRequireWildcard(_style);

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var INTERNAL_FOCUS_BLUR_FLAG_PREFIX = 'hammerhead|event|internal-';

							var PREVENT_FOCUS_ON_CHANGE = browserUtils.isChrome;

							var eventsMap = {
							    bubbles: {
							        'focus': 'focusin',
							        'blur': 'focusout'
							    },
							    nonBubbles: {
							        'focusin': 'focus',
							        'focusout': 'blur'
							    }
							};

							var FocusBlurSandbox = function (_SandboxBase) {
							    _inherits(FocusBlurSandbox, _SandboxBase);

							    function FocusBlurSandbox(listeners, eventSimulator, messageSandbox, shadowUI, timersSandbox, elementEditingWatcher) {
							        _classCallCheck(this, FocusBlurSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.topWindow = null;
							        _this.lastFocusedElement = null;
							        _this.scrollState = {};

							        _this.eventSimulator = eventSimulator;
							        _this.activeWindowTracker = new _activeWindowTracker2.default(messageSandbox);
							        _this.shadowUI = shadowUI;
							        _this.listeners = listeners;
							        _this.elementEditingWatcher = elementEditingWatcher;
							        _this.timersSandbox = timersSandbox;
							        return _this;
							    }

							    FocusBlurSandbox._getNativeMeth = function _getNativeMeth(el, event) {
							        if (domUtils.isSVGElement(el)) {
							            if (event === 'focus') return _nativeMethods2.default.svgFocus;else if (event === 'blur') return _nativeMethods2.default.svgBlur;
							        }

							        return _nativeMethods2.default[event];
							    };

							    FocusBlurSandbox._restoreElementScroll = function _restoreElementScroll(el, scroll) {
							        var newScroll = styleUtils.getElementScroll(el);

							        if (newScroll.left !== scroll.left) styleUtils.setScrollLeft(el, scroll.left);

							        if (newScroll.top !== scroll.top) styleUtils.setScrollTop(el, scroll.top);
							    };

							    FocusBlurSandbox.prototype._onChangeActiveElement = function _onChangeActiveElement(activeElement) {
							        if (this.lastFocusedElement === activeElement) return;

							        if (this.lastFocusedElement && _nativeMethods2.default.getAttribute.call(this.lastFocusedElement, _internalAttributes2.default.focusPseudoClass)) _nativeMethods2.default.removeAttribute.call(this.lastFocusedElement, _internalAttributes2.default.focusPseudoClass);

							        if (domUtils.isElementFocusable(activeElement) && !(domUtils.isBodyElement(activeElement) && domUtils.getTabIndex(activeElement, 'tabIndex') === null)) {
							            this.lastFocusedElement = activeElement;
							            _nativeMethods2.default.setAttribute.call(activeElement, _internalAttributes2.default.focusPseudoClass, true);
							        } else this.lastFocusedElement = null;
							    };

							    FocusBlurSandbox.prototype._shouldUseLabelHtmlForElement = function _shouldUseLabelHtmlForElement(el, type) {
							        return type === 'focus' && domUtils.isLabelElement(el) && el.htmlFor;
							    };

							    FocusBlurSandbox.prototype._getElementNonScrollableParentsScrollState = function _getElementNonScrollableParentsScrollState(el) {
							        var scrollState = [];
							        var elementParents = domUtils.getParents(el);

							        for (var _i2 = 0; _i2 < elementParents.length; _i2++) {
							            var elementParent = elementParents[_i2];
							            if (styleUtils.get(elementParent, 'overflow') === 'hidden') {
							                scrollState.push({
							                    element: elementParent,
							                    state: styleUtils.getElementScroll(elementParent)
							                });
							            }
							        }

							        return scrollState;
							    };

							    FocusBlurSandbox.prototype._restoreElementNonScrollableParentsScrollState = function _restoreElementNonScrollableParentsScrollState(scrollState) {
							        for (var _i4 = 0; _i4 < scrollState.length; _i4++) {
							            var scrollStateEntry = scrollState[_i4];
							            FocusBlurSandbox._restoreElementScroll(scrollStateEntry.element, scrollStateEntry.state);
							        }
							    };

							    FocusBlurSandbox.prototype._saveScrollStateIfNecessary = function _saveScrollStateIfNecessary(el, preventScrolling) {
							        if (preventScrolling) this.scrollState.windowScroll = styleUtils.getElementScroll(this.window);

							        if (browserUtils.isIE) this.scrollState.elementNonScrollableParentsScrollState = this._getElementNonScrollableParentsScrollState(el);
							    };

							    FocusBlurSandbox.prototype._restoreScrollStateIfNecessary = function _restoreScrollStateIfNecessary(preventScrolling) {
							        if (preventScrolling) FocusBlurSandbox._restoreElementScroll(this.window, this.scrollState.windowScroll);

							        if (browserUtils.isIE) this._restoreElementNonScrollableParentsScrollState(this.scrollState.elementNonScrollableParentsScrollState);
							    };

							    FocusBlurSandbox.prototype._raiseEvent = function _raiseEvent(el, type, callback, _ref) {
							        var _this2 = this;

							        var withoutHandlers = _ref.withoutHandlers,
							            isAsync = _ref.isAsync,
							            forMouseEvent = _ref.forMouseEvent,
							            preventScrolling = _ref.preventScrolling,
							            relatedTarget = _ref.relatedTarget,
							            focusedOnChange = _ref.focusedOnChange;

							        // NOTE: We cannot use Promise because 'resolve' will be called async, but we need to resolve
							        // immediately in IE9 and IE10.

							        var simulateEvent = function simulateEvent() {
							            // NOTE: The focus and blur events should be raised after activeElement is changed (B237489)
							            // in MSEdge, the focus/blur events are executed  synchronously.
							            if (browserUtils.isIE && browserUtils.version < 12) {
							                _this2.window.setTimeout(function () {
							                    _this2.window.setTimeout(function () {
							                        delete el[FocusBlurSandbox.getInternalEventFlag(type)];
							                    }, 0);
							                }, 0);
							            } else delete el[FocusBlurSandbox.getInternalEventFlag(type)];

							            if (!withoutHandlers) {

							                var bubblesEventType = eventsMap.bubbles[type];
							                var bubblesEventShouldRaiseFirstly = browserUtils.isIE11 || browserUtils.isMSEdge && browserUtils.version < 17 && type === 'blur';

							                if (isAsync) {
							                    // NOTE: focusin, focusout events are synchronously
							                    _this2.eventSimulator[bubblesEventType](el, relatedTarget);
							                    _this2.timersSandbox.deferFunction(function () {
							                        return _this2.eventSimulator[type](el, relatedTarget);
							                    });
							                } else if (bubblesEventShouldRaiseFirstly) {
							                    _this2.eventSimulator[bubblesEventType](el, relatedTarget);
							                    _this2.eventSimulator[type](el, relatedTarget);
							                } else {
							                    _this2.eventSimulator[type](el, relatedTarget);
							                    _this2.eventSimulator[bubblesEventType](el, relatedTarget);
							                }
							            } else if (type === 'focus' && PREVENT_FOCUS_ON_CHANGE) {
							                var preventFocus = function preventFocus(e, dispatched, preventEvent, cancelHandlers, stopEventPropagation) {
							                    cancelHandlers();
							                    stopEventPropagation();
							                };

							                _this2.listeners.addInternalEventListener(window, ['focus'], preventFocus);
							                _this2.eventSimulator['focus'](el, relatedTarget);
							                _this2.listeners.removeInternalEventListener(window, ['focus'], preventFocus);
							            }

							            callback();
							        };

							        if (el[type]) {
							            // NOTE: To guarantee that all focus/blur events are raised, we need to raise them manually.
							            this._saveScrollStateIfNecessary(el, preventScrolling);

							            if (this._shouldUseLabelHtmlForElement(el, type)) {
							                var htmlForElement = _nativeMethods2.default.getElementById.call(domUtils.findDocument(el), el.htmlFor);

							                if (htmlForElement) el = htmlForElement;else {
							                    callback();
							                    return;
							                }
							            }

							            el[FocusBlurSandbox.getInternalEventFlag(type)] = true;
							            // NOTE: We should guarantee that activeElement will be changed, therefore we need to call the native
							            // focus/blur event.
							            if (!focusedOnChange) FocusBlurSandbox._getNativeMeth(el, type).call(el);

							            this._restoreScrollStateIfNecessary(preventScrolling);

							            var curDocument = domUtils.findDocument(el);
							            var activeElement = domUtils.getActiveElement(curDocument);

							            // NOTE: If the element was not focused and has a parent with tabindex, we focus this parent.
							            var parent = el.parentNode;
							            var parentWithTabIndex = parent === document ? null : domUtils.closest(parent, '[tabindex]');

							            if (type === 'focus' && activeElement !== el && parentWithTabIndex && forMouseEvent) {
							                // NOTE: In WebKit, Safari and MSEdge, calling the native focus event for a parent element
							                // raises page scrolling. We can't prevent it. Therefore, we need to restore a page scrolling value.
							                var needPreventScrolling = browserUtils.isWebKit || browserUtils.isSafari || browserUtils.isIE;

							                this._raiseEvent(parentWithTabIndex, 'focus', simulateEvent, {
							                    preventScrolling: needPreventScrolling,
							                    forMouseEvent: forMouseEvent
							                });
							            }
							            // NOTE: Some browsers don't change document.activeElement after calling element.blur() if a browser
							            // window is in the background. That's why we call body.focus() without handlers. It should be called
							            // synchronously because client scripts may expect that document.activeElement will be changed immediately
							            // after element.blur() is called.
							            else if (type === 'blur' && activeElement === el && el !== curDocument.body) this._raiseEvent(curDocument.body, 'focus', simulateEvent, { withoutHandlers: true });else if (!el.disabled) simulateEvent();else callback();
							        } else simulateEvent();
							    };

							    FocusBlurSandbox.getInternalEventFlag = function getInternalEventFlag(type) {
							        return INTERNAL_FOCUS_BLUR_FLAG_PREFIX + type;
							    };

							    FocusBlurSandbox.getNonBubblesEventType = function getNonBubblesEventType(bubblesEventType) {
							        return eventsMap.nonBubbles[bubblesEventType];
							    };

							    FocusBlurSandbox.prototype.attach = function attach(window) {
							        var _this3 = this;

							        _SandboxBase.prototype.attach.call(this, window);

							        this.activeWindowTracker.attach(window);
							        this.topWindow = domUtils.isCrossDomainWindows(window, window.top) ? window : window.top;

							        this.listeners.addInternalEventListener(window, ['focus', 'blur'], function () {
							            var activeElement = domUtils.getActiveElement(_this3.document);

							            _this3._onChangeActiveElement(activeElement);
							        });
							    };

							    FocusBlurSandbox.prototype._raiseSelectionChange = function _raiseSelectionChange(callback, el) {
							        // NOTE: In MSEdge, the 'selectionchange' event doesn't occur immediately (it occurs with a some delay)
							        // so we should raise it right after the 'focus' event is raised.
							        if (browserUtils.isMSEdge && el && domUtils.isTextEditableElement(el)) this.eventSimulator.selectionchange(el);

							        if (typeof callback === 'function') callback();
							    };

							    FocusBlurSandbox.prototype.focus = function focus(el, callback, silent, forMouseEvent, isNativeFocus, preventScrolling) {
							        var _this4 = this;

							        // NOTE: el.focus() does not raise the event if the element is invisible. If the element is located
							        // within an invisible iframe, all browsers except Chrome do not raise the event (GH-442)
							        var raiseEventInIframe = !isNativeFocus || browserUtils.isWebKit || !styleUtils.isElementInInvisibleIframe(el);
							        var elDocument = (el[_internalProperties2.default.processedContext] || this.window).document;

							        if (!raiseEventInIframe || isNativeFocus && !styleUtils.isElementVisible(el, elDocument)) return null;

							        var isElementInIframe = domUtils.isElementInIframe(el);
							        var iframeElement = isElementInIframe ? domUtils.getIframeByElement(el) : null;
							        var curDocument = domUtils.findDocument(el);
							        var isBodyElement = domUtils.isBodyElement(el);
							        var activeElement = domUtils.getActiveElement();
							        var activeElementDocument = domUtils.findDocument(activeElement);

							        var withoutHandlers = false;
							        var needBlur = false;
							        var needBlurIframe = false;

							        var isContentEditable = domUtils.isContentEditableElement(el);
							        var isCurrentWindowActive = this.activeWindowTracker.isCurrentWindowActive();

							        if (activeElement === el) withoutHandlers = !(isBodyElement && isContentEditable && !isCurrentWindowActive);else withoutHandlers = isBodyElement && !(isContentEditable || browserUtils.isIE);

							        // NOTE: In IE, if you call focus() or blur() methods from script, an active element is changed immediately,
							        // but events are raised asynchronously after some timeout.
							        var isAsync = false;
							        var raiseFocusEvent = function raiseFocusEvent() {
							            if (!isCurrentWindowActive && !domUtils.isShadowUIElement(el)) _this4.activeWindowTracker.makeCurrentWindowActive();

							            var raiseEventArgs = {
							                withoutHandlers: withoutHandlers || silent,
							                isAsync: isAsync,
							                forMouseEvent: forMouseEvent,
							                preventScrolling: preventScrolling,
							                relatedTarget: activeElement
							            };

							            _this4._raiseEvent(el, 'focus', function () {
							                if (!silent) _this4.elementEditingWatcher.watchElementEditing(el);

							                // NOTE: If we call focus for an unfocusable element (like 'div' or 'image') in iframe, we should
							                // specify document.active for this iframe manually, so we call focus without handlers.
							                if (isElementInIframe && iframeElement && domUtils.getActiveElement(_this4.topWindow.document) !== iframeElement) _this4._raiseEvent(iframeElement, 'focus', function () {
							                    return _this4._raiseSelectionChange(callback, el);
							                }, { withoutHandlers: true, isAsync: isAsync });else _this4._raiseSelectionChange(callback, el);
							            }, raiseEventArgs);
							        };

							        if (isNativeFocus && browserUtils.isIE) {
							            // NOTE: In IE, the focus() method does not have any effect if it is called in the focus event handler
							            // during the  second event phase.
							            if ((this.eventSimulator.isSavedWindowsEventsExists() || browserUtils.version > 10) && this.window.event && this.window.event.type === 'focus' && this.window.event.srcElement === el) {
							                this._raiseSelectionChange(callback, el);

							                return null;
							            }

							            // NOTE: In MSEdge, the focus/blur events are executed synchronously.
							            if (browserUtils.version < 12) isAsync = true;
							        }

							        if (activeElement && activeElement.tagName) {
							            if (activeElement !== el) {
							                // NOTE: B253685
							                if (curDocument !== activeElementDocument && activeElement === activeElementDocument.body) needBlur = false;else if (activeElement === curDocument.body) {
							                    // NOTE: The Blur event is raised for the body only in IE. In addition, we must not call the
							                    // blur function for the body because this moves the browser window into the background.
							                    if (!silent && browserUtils.isIE) {
							                        if (isAsync) this.timersSandbox.setTimeout.call(this.window, function () {
							                            return _this4.eventSimulator.blur(activeElement);
							                        }, 0);else this.eventSimulator.blur(activeElement);
							                    }
							                } else if (!el.disabled) needBlur = true;
							            }

							            // NOTE: B254260
							            needBlurIframe = curDocument !== activeElementDocument && domUtils.isElementInIframe(activeElement, activeElementDocument);
							        }
							        // NOTE: We always call blur for iframe manually without handlers (B254260).
							        if (needBlurIframe && !needBlur) {
							            if (browserUtils.isIE) {
							                // NOTE: We should call blur for iframe with handlers in IE but we can't call the method 'blur'
							                // because activeElement !== element and handlers will not be called.
							                this.eventSimulator.blur(domUtils.getIframeByElement(activeElement));
							                raiseFocusEvent();
							            } else this.blur(domUtils.getIframeByElement(activeElement), raiseFocusEvent, true, isNativeFocus);
							        } else if (needBlur) {
							            this.blur(activeElement, function (focusOnChange) {
							                if (needBlurIframe) _this4.blur(domUtils.getIframeByElement(activeElement), raiseFocusEvent, true, isNativeFocus);else if (!focusOnChange) raiseFocusEvent();else if (typeof callback === 'function') callback();
							            }, silent, isNativeFocus, el);
							        } else raiseFocusEvent();

							        return null;
							    };

							    FocusBlurSandbox.prototype.blur = function blur(el, callback, withoutHandlers, isNativeBlur, relatedTarget) {
							        var curDocument = domUtils.findDocument(el);
							        var activeElement = domUtils.getActiveElement(curDocument);
							        // NOTE: In IE, if you call the focus() or blur() method from script, an active element is changed
							        // immediately but events are raised asynchronously after some timeout (in MSEdgethe focus/blur methods
							        // are executed synchronously).
							        var isAsync = isNativeBlur && browserUtils.isIE && browserUtils.version < 12;

							        if (activeElement !== el) withoutHandlers = true;

							        var focusedOnChange = false;

							        if (!withoutHandlers) {
							            var focusOnChangeHandler = function focusOnChangeHandler(e) {
							                focusedOnChange = e.target === el;
							            };

							            if (PREVENT_FOCUS_ON_CHANGE) this.listeners.addInternalEventListener(window, ['focus'], focusOnChangeHandler);

							            this.elementEditingWatcher.processElementChanging(el);

							            if (PREVENT_FOCUS_ON_CHANGE) this.listeners.removeInternalEventListener(window, ['focus'], focusOnChangeHandler);

							            this.elementEditingWatcher.stopWatching(el);
							        }

							        var raiseEventParameters = {
							            withoutHandlers: withoutHandlers,
							            isAsync: isAsync,
							            relatedTarget: relatedTarget,
							            focusedOnChange: focusedOnChange
							        };

							        this._raiseEvent(el, 'blur', function () {
							            if (typeof callback === 'function') callback(focusedOnChange);
							        }, raiseEventParameters);
							    };

							    FocusBlurSandbox._processFocusPseudoClassSelector = function _processFocusPseudoClassSelector(selector) {
							        // NOTE: When a selector that contains the ':focus' pseudo-class is used in the querySelector and
							        // querySelectorAll functions, these functions return an empty result if the browser is not focused.
							        // This replaces ':focus' with a custom CSS class to return the current active element in that case.
							        // IE returns a valid element, so there is no need to replace the selector for it.

							        if (!browserUtils.isIE) return selector.replace(/\s*:focus\b/gi, '[' + _internalAttributes2.default.focusPseudoClass + ']');

							        return selector;
							    };

							    return FocusBlurSandbox;
							}(_base2.default);

							exports.default = FocusBlurSandbox;
							module.exports = exports['default'];
						},
						"hover.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _internalAttributes = require('../../../processing/dom/internal-attributes');

							var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _dom = require('../../utils/dom');

							var domUtils = _interopRequireWildcard(_dom);

							var _position = require('../../utils/position');

							var positionUtils = _interopRequireWildcard(_position);

							var _browser = require('../../utils/browser');

							var browserUtils = _interopRequireWildcard(_browser);

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var HoverSandbox = function (_SandboxBase) {
							    _inherits(HoverSandbox, _SandboxBase);

							    function HoverSandbox(listeners) {
							        _classCallCheck(this, HoverSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.listeners = listeners;

							        _this.hoverElementFixed = false;
							        _this.lastHoveredElement = null;
							        return _this;
							    }

							    HoverSandbox._setHoverMarker = function _setHoverMarker(newHoveredElement, jointParent) {
							        if (jointParent) _nativeMethods2.default.setAttribute.call(jointParent, _internalAttributes2.default.hoverPseudoClass, '');

							        while (newHoveredElement && newHoveredElement.tagName) {
							            // NOTE: Assign a pseudo-class marker to the elements until the joint parent is found.
							            if (newHoveredElement !== jointParent) {
							                _nativeMethods2.default.setAttribute.call(newHoveredElement, _internalAttributes2.default.hoverPseudoClass, '');
							                newHoveredElement = newHoveredElement.parentNode;
							            } else break;
							        }
							    };

							    // NOTE: In this method, we go up to the tree of elements and look for a joint parent for the
							    // previous and new hovered elements. Processing is needed only until  that parent is found.
							    // In this case, we'll reduce the number of dom calls.


							    HoverSandbox.prototype._clearHoverMarkerUntilJointParent = function _clearHoverMarkerUntilJointParent(newHoveredElement) {
							        var jointParent = null;

							        if (this.lastHoveredElement) {
							            var el = this.lastHoveredElement;

							            while (el && el.tagName && el.contains) {
							                // NOTE: Check that the current element is a joint parent for the hovered elements.
							                if (!el.contains(newHoveredElement)) {
							                    _nativeMethods2.default.removeAttribute.call(el, _internalAttributes2.default.hoverPseudoClass);
							                    el = el.parentNode;
							                } else {
							                    jointParent = el;
							                    break;
							                }
							            }

							            if (jointParent) _nativeMethods2.default.removeAttribute.call(jointParent, _internalAttributes2.default.hoverPseudoClass);
							        }

							        return jointParent;
							    };

							    HoverSandbox.prototype._onHover = function _onHover(_ref) {
							        var target = _ref.target,
							            clientX = _ref.clientX,
							            clientY = _ref.clientY;

							        var hoverIsDisabled = browserUtils.isIE && positionUtils.shouldIgnoreMouseEventInsideIframe(target, clientX, clientY);

							        if (!hoverIsDisabled) this._hover(target);
							    };

							    HoverSandbox.prototype._hover = function _hover(el) {
							        if (!this.hoverElementFixed && !domUtils.isShadowUIElement(el)) {
							            var jointParent = this._clearHoverMarkerUntilJointParent(el);

							            HoverSandbox._setHoverMarker(el, jointParent);

							            this.lastHoveredElement = el;
							        }
							    };

							    HoverSandbox.prototype.fixHoveredElement = function fixHoveredElement() {
							        this.hoverElementFixed = true;
							    };

							    HoverSandbox.prototype.freeHoveredElement = function freeHoveredElement() {
							        this.hoverElementFixed = false;
							    };

							    HoverSandbox.prototype.attach = function attach(window) {
							        var _this2 = this;

							        _SandboxBase.prototype.attach.call(this, window);

							        this.listeners.addInternalEventListener(window, ['mouseover', 'touchstart'], function (e) {
							            return _this2._onHover(e);
							        });
							    };

							    return HoverSandbox;
							}(_base2.default);

							exports.default = HoverSandbox;
							module.exports = exports['default'];
						},
						"index.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _focusBlur = require('./focus-blur');

							var _focusBlur2 = _interopRequireDefault(_focusBlur);

							var _hover = require('./hover');

							var _hover2 = _interopRequireDefault(_hover);

							var _listeners = require('./listeners');

							var _listeners2 = _interopRequireDefault(_listeners);

							var _selection = require('./selection');

							var _selection2 = _interopRequireDefault(_selection);

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _dom = require('../../utils/dom');

							var domUtils = _interopRequireWildcard(_dom);

							var _event = require('../../utils/event');

							var _dataTransfer = require('./drag-and-drop/data-transfer');

							var _dataTransfer2 = _interopRequireDefault(_dataTransfer);

							var _dragDataStore = require('./drag-and-drop/drag-data-store');

							var _dragDataStore2 = _interopRequireDefault(_dragDataStore);

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var EventSandbox = function (_SandboxBase) {
							    _inherits(EventSandbox, _SandboxBase);

							    function EventSandbox(listeners, eventSimulator, elementEditingWatcher, unloadSandbox, messageSandbox, shadowUI, timerSandbox) {
							        _classCallCheck(this, EventSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.EVENT_PREVENTED_EVENT = 'hammerhead|event|event-prevented';

							        _this.listeners = listeners;
							        _this.elementEditingWatcher = elementEditingWatcher;
							        _this.unload = unloadSandbox;
							        _this.timers = timerSandbox;
							        _this.eventSimulator = eventSimulator;
							        _this.focusBlur = new _focusBlur2.default(listeners, eventSimulator, messageSandbox, shadowUI, timerSandbox, elementEditingWatcher);
							        _this.selection = new _selection2.default(_this);
							        _this.hover = new _hover2.default(listeners);
							        _this.shadowUI = shadowUI;
							        _this.message = messageSandbox;

							        _this.DataTransfer = _dataTransfer2.default;
							        _this.DragDataStore = _dragDataStore2.default;

							        _this.overriddenMethods = null;

							        _this.onFocus = null;
							        _this.cancelInternalEvents = null;

							        _this._createOverridedMethods();
							        _this._createInternalHandlers();
							        return _this;
							    }

							    EventSandbox.prototype._createOverridedMethods = function _createOverridedMethods() {
							        var selection = this.selection;
							        var focusBlurSandbox = this.focusBlur;
							        var eventSimulator = this.eventSimulator;
							        var sandbox = this;

							        this.overriddenMethods = {
							            dispatchEvent: function dispatchEvent() {
							                _listeners2.default.beforeDispatchEvent(this);

							                var isWindow = domUtils.isWindow(this);
							                var res = isWindow ? _nativeMethods2.default.windowDispatchEvent.apply(this, arguments) : _nativeMethods2.default.dispatchEvent.apply(this, arguments);

							                _listeners2.default.afterDispatchEvent(this);

							                return res;
							            },

							            click: function click() {
							                _listeners2.default.beforeDispatchEvent(this);

							                var res = eventSimulator.nativeClick(this, _nativeMethods2.default.click);

							                _listeners2.default.afterDispatchEvent(this);

							                return res;
							            },

							            setSelectionRange: function setSelectionRange() {
							                return selection.setSelectionRangeWrapper.apply(this, arguments);
							            },

							            select: function select() {
							                return selection.selectWrapper.call(this);
							            },

							            focus: function focus() {
							                return focusBlurSandbox.focus(this, null, false, false, true);
							            },

							            blur: function blur() {
							                return focusBlurSandbox.blur(this, null, false, true);
							            },

							            preventDefault: function preventDefault() {
							                sandbox.emit(sandbox.EVENT_PREVENTED_EVENT, this);

							                return _nativeMethods2.default.preventDefault.call(this);
							            }
							        };
							    };

							    EventSandbox.prototype._createInternalHandlers = function _createInternalHandlers() {
							        var shadowUI = this.shadowUI;
							        var document = this.document;
							        var eventSimulator = this.eventSimulator;

							        this.onFocus = function (e) {
							            var focusedEl = e.target;
							            var activeEl = domUtils.getActiveElement(document);

							            if (!domUtils.isShadowUIElement(focusedEl) && !domUtils.isShadowUIElement(activeEl)) shadowUI.setLastActiveElement(activeEl);
							        };

							        this.cancelInternalEvents = function (e, dispatched, preventEvent, cancelHandlers, stopPropagation) {
							            // NOTE: We should cancel events raised by calling the native function (focus, blur) only if the
							            // element has a flag. If an event is dispatched, we shouldn't cancel it.
							            // After calling a native function two events were raised
							            // .focus() -> focus, focusin
							            // .blur() -> blur, focusout
							            // So we should prevent both events
							            var eventType = _focusBlur2.default.getNonBubblesEventType(e.type) || e.type;
							            var internalEventFlag = _focusBlur2.default.getInternalEventFlag(eventType);

							            if (e.target[internalEventFlag] && !e[eventSimulator.DISPATCHED_EVENT_FLAG]) stopPropagation();
							        };
							    };

							    EventSandbox.prototype.attach = function attach(window) {
							        _SandboxBase.prototype.attach.call(this, window);

							        window.HTMLInputElement.prototype.setSelectionRange = this.overriddenMethods.setSelectionRange;
							        window.HTMLTextAreaElement.prototype.setSelectionRange = this.overriddenMethods.setSelectionRange;
							        window.Window.prototype.dispatchEvent = this.overriddenMethods.dispatchEvent;
							        window.Document.prototype.dispatchEvent = this.overriddenMethods.dispatchEvent;
							        window.HTMLElement.prototype.dispatchEvent = this.overriddenMethods.dispatchEvent;
							        window.SVGElement.prototype.dispatchEvent = this.overriddenMethods.dispatchEvent;
							        window.HTMLElement.prototype.focus = this.overriddenMethods.focus;
							        window.HTMLElement.prototype.blur = this.overriddenMethods.blur;
							        window.HTMLElement.prototype.click = this.overriddenMethods.click;
							        window.Window.focus = this.overriddenMethods.focus;
							        window.Window.blur = this.overriddenMethods.blur;
							        window.Event.prototype.preventDefault = this.overriddenMethods.preventDefault;

							        if (window.TextRange && window.TextRange.prototype.select) window.TextRange.prototype.select = this.overriddenMethods.select;

							        this.initDocumentListening(window.document);

							        this.listeners.initElementListening(window, _event.DOM_EVENTS.concat(['load', 'beforeunload', 'pagehide', 'unload', 'message']));

							        this.listeners.addInternalEventListener(window, ['focus'], this.onFocus);
							        this.listeners.addInternalEventListener(window, ['focus', 'blur', 'change', 'focusin', 'focusout'], this.cancelInternalEvents);

							        this.unload.attach(window);
							        this.message.attach(window);
							        this.timers.attach(window);
							        this.focusBlur.attach(window);
							        this.hover.attach(window);
							    };

							    EventSandbox.prototype.initDocumentListening = function initDocumentListening(document) {
							        this.listeners.initElementListening(document, _event.DOM_EVENTS);
							    };

							    return EventSandbox;
							}(_base2.default);

							exports.default = EventSandbox;
							module.exports = exports['default'];
						},
						"listeners.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _internalProperties = require('../../../processing/dom/internal-properties');

							var _internalProperties2 = _interopRequireDefault(_internalProperties);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _eventEmitter = require('../../utils/event-emitter');

							var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

							var _listeningContext = require('./listening-context');

							var listeningCtx = _interopRequireWildcard(_listeningContext);

							var _event = require('../../utils/event');

							var _dom = require('../../utils/dom');

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var LISTENED_EVENTS = ['click', 'mousedown', 'mouseup', 'dblclick', 'contextmenu', 'mousemove', 'mouseover', 'mouseout', 'pointerdown', 'pointermove', 'pointerover', 'pointerout', 'pointerup', 'MSPointerDown', 'MSPointerMove', 'MSPointerOver', 'MSPointerOut', 'MSPointerUp', 'touchstart', 'touchmove', 'touchend', 'keydown', 'keypress', 'keyup', 'change', 'focus', 'blur', 'focusin', 'focusout'];

							var EVENT_SANDBOX_DISPATCH_EVENT_FLAG = 'hammerhead|event-sandbox-dispatch-event-flag';

							var Listeners = function (_EventEmitter) {
							    _inherits(Listeners, _EventEmitter);

							    function Listeners() {
							        _classCallCheck(this, Listeners);

							        var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

							        _this.EVENT_LISTENER_ATTACHED_EVENT = 'hammerhead|event|event-listener-attached';
							        _this.EVENT_LISTENER_DETACHED_EVENT = 'hammerhead|event|event-listener-detached';

							        _this.listeningCtx = listeningCtx;

							        _this.addInternalEventListener = _this.listeningCtx.addInternalHandler;
							        _this.addFirstInternalHandler = _this.listeningCtx.addFirstInternalHandler;
							        _this.removeInternalEventListener = _this.listeningCtx.removeInternalHandler;
							        return _this;
							    }

							    Listeners._getBodyEventListenerWrapper = function _getBodyEventListenerWrapper(documentEventCtx, listener) {
							        return function (e) {
							            if (documentEventCtx.cancelOuterHandlers) return null;

							            return listener.call(this, e);
							        };
							    };

							    Listeners._getNativeAddEventListener = function _getNativeAddEventListener(el) {
							        if ((0, _dom.isWindow)(el)) return _nativeMethods2.default.windowAddEventListener;

							        return el.body !== void 0 ? _nativeMethods2.default.documentAddEventListener : _nativeMethods2.default.addEventListener;
							    };

							    Listeners._getNativeRemoveEventListener = function _getNativeRemoveEventListener(el) {
							        if ((0, _dom.isWindow)(el)) return _nativeMethods2.default.windowRemoveEventListener;

							        return el.body !== void 0 ? _nativeMethods2.default.documentRemoveEventListener : _nativeMethods2.default.removeEventListener;
							    };

							    Listeners._getEventListenerWrapper = function _getEventListenerWrapper(eventCtx, listener) {
							        return function (e) {
							            var isIEServiceHandler = listener.toString() === '[object FunctionWrapper]';

							            // NOTE: Ignore IE11's and Edge's service handlers (GH-379)
							            if (isIEServiceHandler) return null;

							            if (eventCtx.cancelOuterHandlers) return null;

							            if (typeof eventCtx.outerHandlersWrapper === 'function') return eventCtx.outerHandlersWrapper.call(this, e, listener);

							            return (0, _event.callEventListener)(this, listener, e);
							        };
							    };

							    Listeners._isDifferentHandler = function _isDifferentHandler(outerHandlers, listener, useCapture) {
							        for (var _i2 = 0; _i2 < outerHandlers.length; _i2++) {
							            var outerHandler = outerHandlers[_i2];
							            if (outerHandler.fn === listener && outerHandler.useCapture === useCapture) return false;
							        }

							        return true;
							    };

							    Listeners._getUseCaptureParam = function _getUseCaptureParam(optionalParam) {
							        if (optionalParam && typeof optionalParam === 'boolean') return optionalParam;else if (optionalParam && typeof optionalParam === 'object') return !!optionalParam.capture;

							        return false;
							    };

							    Listeners.prototype._createEventHandler = function _createEventHandler() {
							        var listeners = this;

							        return function (e) {
							            var el = this;
							            var elWindow = el[_internalProperties2.default.processedContext] || window;
							            var eventPrevented = false;
							            var handlersCancelled = false;
							            var stopPropagationCalled = false;
							            var eventCtx = listeners.listeningCtx.getEventCtx(el, e.type);

							            if (!eventCtx) return;

							            var internalHandlers = eventCtx.internalHandlers;

							            eventCtx.cancelOuterHandlers = false;

							            var preventEvent = function preventEvent() {
							                eventPrevented = true;
							                (0, _event.preventDefault)(e);
							            };

							            var cancelHandlers = function cancelHandlers() {
							                if (!handlersCancelled) eventCtx.cancelOuterHandlers = true;

							                handlersCancelled = true;
							            };

							            var stopEventPropagation = function stopEventPropagation() {
							                stopPropagationCalled = true;

							                (0, _event.stopPropagation)(e);
							            };

							            for (var _i4 = 0; _i4 < internalHandlers.length; _i4++) {
							                var internalHandler = internalHandlers[_i4];
							                internalHandler.call(el, e, elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG], preventEvent, cancelHandlers, stopEventPropagation);

							                if (eventPrevented || stopPropagationCalled) break;
							            }
							        };
							    };

							    Listeners.prototype._createElementOverridedMethods = function _createElementOverridedMethods(el) {
							        var listeners = this;

							        return {
							            addEventListener: function addEventListener() {
							                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
							                    args[_key] = arguments[_key];
							                }

							                var type = args[0];
							                var listener = args[1];
							                var useCapture = Listeners._getUseCaptureParam(args[2]);
							                var eventListeningInfo = listeningCtx.getEventCtx(el, type);
							                var nativeAddEventListener = Listeners._getNativeAddEventListener(el);

							                if (!eventListeningInfo || !(0, _event.isValidEventListener)(listener)) return nativeAddEventListener.apply(el, args);

							                // NOTE: T233158
							                var isDifferentHandler = Listeners._isDifferentHandler(eventListeningInfo.outerHandlers, listener, useCapture);

							                if (!isDifferentHandler) return null;

							                var wrapper = Listeners._getEventListenerWrapper(eventListeningInfo, listener);

							                listeningCtx.wrapEventListener(eventListeningInfo, listener, wrapper, useCapture);

							                args[1] = wrapper;

							                var res = nativeAddEventListener.apply(el, args);

							                listeners.emit(listeners.EVENT_LISTENER_ATTACHED_EVENT, { el: el, listener: listener, eventType: type });

							                return res;
							            },

							            removeEventListener: function removeEventListener() {
							                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
							                    args[_key2] = arguments[_key2];
							                }

							                var type = args[0];
							                var listener = args[1];
							                var useCapture = Listeners._getUseCaptureParam(args[2]);
							                var nativeRemoveEventListener = Listeners._getNativeRemoveEventListener(el);
							                var eventCtx = listeningCtx.getEventCtx(el, type);

							                if (!eventCtx || !(0, _event.isValidEventListener)(listener)) return nativeRemoveEventListener.apply(el, args);

							                args[1] = listeningCtx.getWrapper(eventCtx, listener, useCapture);

							                var res = nativeRemoveEventListener.apply(el, args);

							                listeners.emit(listeners.EVENT_LISTENER_DETACHED_EVENT, { el: el, listener: listener, eventType: type });

							                return res;
							            }
							        };
							    };

							    Listeners.prototype._createDocumentBodyOverridedMethods = function _createDocumentBodyOverridedMethods(doc) {
							        var listeners = this;
							        var nativeAddEventListener = function () {
							            return doc.body.addEventListener;
							        }();
							        var nativeRemoveEventListener = function () {
							            return doc.body.removeEventListener;
							        }();

							        return {
							            addEventListener: function addEventListener() {
							                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
							                    args[_key3] = arguments[_key3];
							                }

							                var type = args[0];
							                var listener = args[1];
							                var useCapture = Listeners._getUseCaptureParam(args[2]);
							                var docEventListeningInfo = listeningCtx.getEventCtx(doc, type);
							                var eventListeningInfo = listeningCtx.getEventCtx(this, type);

							                if (!docEventListeningInfo || !(0, _event.isValidEventListener)(listener)) return nativeAddEventListener.apply(this, args);

							                // NOTE: T233158
							                var isDifferentHandler = Listeners._isDifferentHandler(eventListeningInfo.outerHandlers, listener, useCapture);

							                if (!isDifferentHandler) return null;

							                var wrapper = Listeners._getBodyEventListenerWrapper(docEventListeningInfo, listener);

							                listeningCtx.wrapEventListener(eventListeningInfo, listener, wrapper, useCapture);

							                var res = nativeAddEventListener.call(this, type, wrapper, useCapture);

							                listeners.emit(listeners.EVENT_LISTENER_ATTACHED_EVENT, {
							                    el: this,
							                    eventType: type,
							                    listener: listener
							                });

							                return res;
							            },

							            removeEventListener: function removeEventListener() {
							                var type = arguments.length <= 0 ? undefined : arguments[0];
							                var listener = arguments.length <= 1 ? undefined : arguments[1];
							                var useCapture = Listeners._getUseCaptureParam(arguments.length <= 2 ? undefined : arguments[2]);

							                var eventListeningInfo = listeningCtx.getEventCtx(this, type);

							                if (!eventListeningInfo || !(0, _event.isValidEventListener)(listener)) return nativeRemoveEventListener.call(this, type, listener, useCapture);

							                return nativeRemoveEventListener.call(this, type, listeningCtx.getWrapper(eventListeningInfo, listener, useCapture), useCapture);
							            }
							        };
							    };

							    Listeners.prototype.initElementListening = function initElementListening(el, events) {
							        var nativeAddEventListener = Listeners._getNativeAddEventListener(el);

							        events = events || LISTENED_EVENTS;

							        this.listeningCtx.addListeningElement(el, events);

							        for (var _i6 = 0, _events2 = events; _i6 < _events2.length; _i6++) {
							            var event = _events2[_i6];
							            nativeAddEventListener.call(el, event, this._createEventHandler(), true);
							        }

							        var overridedMethods = this._createElementOverridedMethods(el);

							        el.addEventListener = overridedMethods.addEventListener;
							        el.removeEventListener = overridedMethods.removeEventListener;
							    };

							    Listeners.prototype.initDocumentBodyListening = function initDocumentBodyListening(doc) {
							        listeningCtx.addListeningElement(doc.body, _event.DOM_EVENTS);

							        var overridedMethods = this._createDocumentBodyOverridedMethods(doc);

							        doc.body.addEventListener = overridedMethods.addEventListener;
							        doc.body.removeEventListener = overridedMethods.removeEventListener;
							    };

							    Listeners.prototype.restartElementListening = function restartElementListening(el) {
							        var nativeAddEventListener = Listeners._getNativeAddEventListener(el);
							        var elementCtx = this.listeningCtx.getElementCtx(el);

							        if (elementCtx) {
							            var eventNames = window.Object.keys(elementCtx);

							            for (var _i8 = 0; _i8 < eventNames.length; _i8++) {
							                var eventName = eventNames[_i8];
							                nativeAddEventListener.call(el, eventName, this._createEventHandler(), true);
							            }
							        }
							    };

							    Listeners.prototype.cancelElementListening = function cancelElementListening(el) {
							        this.listeningCtx.removeListeningElement(el);

							        if (el.body) this.listeningCtx.removeListeningElement(el.body);
							    };

							    Listeners.beforeDispatchEvent = function beforeDispatchEvent(el) {
							        var elWindow = el[_internalProperties2.default.processedContext] || window;

							        elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG] = (elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG] || 0) + 1;
							    };

							    Listeners.afterDispatchEvent = function afterDispatchEvent(el) {
							        var elWindow = el[_internalProperties2.default.processedContext] || window;

							        elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG]--;

							        if (!elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG]) delete elWindow[EVENT_SANDBOX_DISPATCH_EVENT_FLAG];
							    };

							    Listeners.prototype.setEventListenerWrapper = function setEventListenerWrapper(el, events, wrapper) {
							        if (!this.listeningCtx.isElementListening(el)) this.initElementListening(el, events);

							        for (var _i10 = 0; _i10 < events.length; _i10++) {
							            var event = events[_i10];
							            var eventListeningInfo = this.listeningCtx.getEventCtx(el, event);

							            eventListeningInfo.outerHandlersWrapper = wrapper;
							        }
							    };

							    Listeners.prototype.getEventListeners = function getEventListeners(el, event) {
							        var eventCtx = this.listeningCtx.getEventCtx(el, event);

							        if (!eventCtx) return null;

							        return _nativeMethods2.default.arrayMap.call(eventCtx.outerHandlers, function (handler) {
							            return handler.fn;
							        });
							    };

							    return Listeners;
							}(_eventEmitter2.default);

							exports.default = Listeners;
							module.exports = exports['default'];
						},
						"listening-context.js": function (exports, module, require) {
							

							exports.__esModule = true;
							exports.getElementCtx = getElementCtx;
							exports.getEventCtx = getEventCtx;
							exports.isElementListening = isElementListening;
							exports.addListeningElement = addListeningElement;
							exports.removeListeningElement = removeListeningElement;
							exports.addFirstInternalHandler = addFirstInternalHandler;
							exports.addInternalHandler = addInternalHandler;
							exports.removeInternalHandler = removeInternalHandler;
							exports.wrapEventListener = wrapEventListener;
							exports.getWrapper = getWrapper;

							var _browser = require('../../utils/browser');

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							// NOTE: For internal usage of Listeners.
							var ELEMENT_LISTENING_EVENTS_STORAGE_PROP = 'hammerhead|element-listening-events-storage-prop';

							function getElementCtx(el) {
							    return el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP];
							}

							function getEventCtx(el, event) {
							    event = _browser.isIE && _browser.version > 10 && /MSPointer/.test(event) ? event.replace('MS', '').toLowerCase() : event;

							    var elementCtx = getElementCtx(el);

							    return elementCtx && elementCtx[event];
							}

							function isElementListening(el) {
							    return !!el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP];
							}

							function addListeningElement(el, events) {
							    var elementCtx = getElementCtx(el) || {};

							    for (var i = 0; i < events.length; i++) {
							        if (!elementCtx[events[i]]) {
							            elementCtx[events[i]] = {
							                internalHandlers: [],
							                outerHandlers: [],
							                outerHandlersWrapper: null,
							                wrappers: [],
							                cancelOuterHandlers: false
							            };
							        }
							    }

							    if (!isElementListening(el)) {
							        _nativeMethods2.default.objectDefineProperty.call(window.Object, el, ELEMENT_LISTENING_EVENTS_STORAGE_PROP, {
							            value: elementCtx,
							            writable: true
							        });
							    }
							}

							function removeListeningElement(el) {
							    delete el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP];
							}

							function addFirstInternalHandler(el, events, handler) {
							    var elementCtx = getElementCtx(el);

							    for (var _i2 = 0; _i2 < events.length; _i2++) {
							        var event = events[_i2];
							        elementCtx[event].internalHandlers.unshift(handler);
							    }
							}

							function addInternalHandler(el, events, handler) {
							    var elementCtx = getElementCtx(el);

							    for (var _i4 = 0; _i4 < events.length; _i4++) {
							        var event = events[_i4];
							        elementCtx[event].internalHandlers.push(handler);
							    }
							}

							function removeInternalHandler(el, events, handler) {
							    var elementCtx = getElementCtx(el);

							    for (var _i6 = 0; _i6 < events.length; _i6++) {
							        var event = events[_i6];
							        var internalHandlers = elementCtx[event].internalHandlers;
							        var handlerIndex = internalHandlers.indexOf(handler);

							        if (handlerIndex > -1) internalHandlers.splice(handlerIndex, 1);
							    }
							}

							function wrapEventListener(eventCtx, listener, wrapper, useCapture) {
							    eventCtx.outerHandlers.push({
							        fn: listener,
							        useCapture: useCapture || false
							    });
							    eventCtx.wrappers.push(wrapper);
							}

							function getWrapper(eventCtx, listener, useCapture) {
							    var originListeners = eventCtx.outerHandlers;
							    var wrappers = eventCtx.wrappers;
							    var wrapper = null;

							    for (var i = 0; i < originListeners.length; i++) {
							        var curListener = originListeners[i];

							        if (curListener.fn === listener && (curListener.useCapture || false) === (useCapture || false)) {
							            wrapper = wrappers[i];

							            wrappers.splice(i, 1);
							            originListeners.splice(i, 1);

							            return wrapper;
							        }
							    }

							    return null;
							}
						},
						"message.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _pinkie = require('pinkie');

							var _pinkie2 = _interopRequireDefault(_pinkie);

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _destinationLocation = require('../../utils/destination-location');

							var destLocation = _interopRequireWildcard(_destinationLocation);

							var _url = require('../../utils/url');

							var _json = require('../../json');

							var _dom = require('../../utils/dom');

							var _event = require('../../utils/event');

							var _fastApply = require('../../utils/fast-apply');

							var _fastApply2 = _interopRequireDefault(_fastApply);

							var _propertyOverriding = require('../../utils/property-overriding');

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var MESSAGE_TYPE = {
							    service: 'hammerhead|service-msg',
							    user: 'hammerhead|user-msg'
							};

							var MessageSandbox = function (_SandboxBase) {
							    _inherits(MessageSandbox, _SandboxBase);

							    function MessageSandbox(listeners, unloadSandbox) {
							        _classCallCheck(this, MessageSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.PING_DELAY = 200;
							        _this.PING_IFRAME_TIMEOUT = 7000;
							        _this.PING_IFRAME_MIN_TIMEOUT = 100;
							        _this.SERVICE_MSG_RECEIVED_EVENT = 'hammerhead|event|service-msg-received';
							        _this.RECEIVE_MSG_FN = 'hammerhead|receive-msg-function';

							        _this.pingCallback = null;
							        _this.pingCmd = null;

							        // NOTE: The window.top property may be changed after an iframe is removed from DOM in IE, so we save it.
							        _this.topWindow = null;
							        _this.window = null;

							        _this.listeners = listeners;
							        _this.unloadSandbox = unloadSandbox;

							        _this.storedOnMessageHandler = null;
							        _this.isWindowUnloaded = false;

							        _this.iframeInternalMsgQueue = [];
							        return _this;
							    }

							    MessageSandbox._getMessageData = function _getMessageData(e) {
							        var rawData = (0, _dom.isMessageEvent)(e) ? _nativeMethods2.default.messageEventDataGetter.call(e) : e.data;

							        return typeof rawData === 'string' ? (0, _json.parse)(rawData) : rawData;
							    };

							    MessageSandbox.prototype._onMessage = function _onMessage(e) {
							        var data = MessageSandbox._getMessageData(e);

							        if (data.type === MESSAGE_TYPE.service && e.source) {
							            if (this.pingCmd && data.message.cmd === this.pingCmd && data.message.isPingResponse) {
							                this.pingCallback();
							                this.pingCallback = null;
							                this.pingCmd = null;
							            } else this.emit(this.SERVICE_MSG_RECEIVED_EVENT, { message: data.message, source: e.source });
							        }
							    };

							    MessageSandbox.prototype._onWindowMessage = function _onWindowMessage(e, originListener) {
							        var data = MessageSandbox._getMessageData(e);

							        if (data.type !== MESSAGE_TYPE.service) {
							            var originUrl = destLocation.get();

							            if (data.targetUrl === '*' || destLocation.sameOriginCheck(originUrl, data.targetUrl)) return (0, _event.callEventListener)(this.window, originListener, e);
							        }

							        return null;
							    };

							    MessageSandbox._wrapMessage = function _wrapMessage(type, message, targetUrl) {
							        var parsedDest = destLocation.getParsed();
							        var originUrl = (0, _url.formatUrl)({
							            /*eslint-disable no-restricted-properties*/
							            protocol: parsedDest.protocol,
							            host: parsedDest.host
							            /*eslint-enable no-restricted-properties*/
							        });

							        return { message: message, originUrl: originUrl, targetUrl: targetUrl, type: type };
							    };

							    MessageSandbox.prototype._removeInternalMsgFromQueue = function _removeInternalMsgFromQueue(sendFunc) {
							        for (var index = 0, length = this.iframeInternalMsgQueue.length; index < length; index++) {
							            if (this.iframeInternalMsgQueue[index].sendFunc === sendFunc) {
							                this.iframeInternalMsgQueue.splice(index, 1);

							                return true;
							            }
							        }

							        return false;
							    };

							    MessageSandbox.prototype.attach = function attach(window) {
							        var _this2 = this;

							        _SandboxBase.prototype.attach.call(this, window);
							        // NOTE: The window.top property may be changed after an iframe is removed from DOM in IE, so we save it.
							        this.topWindow = window.top;
							        this.isWindowUnloaded = false;

							        this.unloadSandbox.on(this.unloadSandbox.UNLOAD_EVENT, function () {
							            _this2.isWindowUnloaded = true;

							            while (_this2.iframeInternalMsgQueue.length) {
							                var msgInfo = _this2.iframeInternalMsgQueue[0];

							                _nativeMethods2.default.clearTimeout.call(_this2.window, msgInfo.timeoutId);
							                msgInfo.sendFunc();
							            }
							        });

							        var onMessageHandler = function onMessageHandler() {
							            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
							                args[_key] = arguments[_key];
							            }

							            return (0, _fastApply2.default)(_this2, '_onMessage', args);
							        };
							        var onWindowMessageHandler = function onWindowMessageHandler() {
							            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
							                args[_key2] = arguments[_key2];
							            }

							            return (0, _fastApply2.default)(_this2, '_onWindowMessage', args);
							        };

							        this.listeners.addInternalEventListener(window, ['message'], onMessageHandler);
							        this.listeners.setEventListenerWrapper(window, ['message'], onWindowMessageHandler);

							        // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
							        // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.
							        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, this.RECEIVE_MSG_FN, {
							            value: onMessageHandler,
							            configurable: true
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.MessageEvent.prototype, 'data', {
							            getter: function getter() {
							                var target = this.target;
							                var data = _nativeMethods2.default.messageEventDataGetter.call(this);

							                if (data && data.type !== MESSAGE_TYPE.service && (0, _dom.isWindow)(target)) return data.message;

							                return data;
							            }
							        });

							        var eventPropsOwner = _nativeMethods2.default.isEventPropsLocatedInProto ? window.Window.prototype : window;

							        (0, _propertyOverriding.overrideDescriptor)(eventPropsOwner, 'onmessage', {
							            getter: function getter() {
							                return _this2.storedOnMessageHandler;
							            },
							            setter: function setter(handler) {
							                _this2.storedOnMessageHandler = typeof handler === 'function' ? handler : null;

							                _nativeMethods2.default.winOnMessageSetter.call(window, _this2.storedOnMessageHandler ? function (e) {
							                    return _this2._onWindowMessage(e, handler);
							                } : null);
							            }
							        });
							    };

							    MessageSandbox.prototype.postMessage = function postMessage(contentWindow, args) {
							        var targetUrl = args[1];

							        if ((0, _dom.isCrossDomainWindows)(this.window, contentWindow)) args[1] = (0, _url.getCrossDomainProxyUrl)();else if (!(0, _url.isSupportedProtocol)(contentWindow.location.toString()) || !(0, _url.isSupportedProtocol)(this.window.location.toString())) args[1] = '*';else {
							            args[1] = (0, _url.formatUrl)({
							                /*eslint-disable no-restricted-properties*/
							                protocol: this.window.location.protocol,
							                host: this.window.location.host
							                /*eslint-enable no-restricted-properties*/
							            });
							        }

							        args[0] = MessageSandbox._wrapMessage(MESSAGE_TYPE.user, args[0], targetUrl);

							        return (0, _fastApply2.default)(contentWindow, 'postMessage', args);
							    };

							    MessageSandbox.prototype.sendServiceMsg = function sendServiceMsg(msg, targetWindow) {
							        var _this3 = this;

							        var message = MessageSandbox._wrapMessage(MESSAGE_TYPE.service, msg);
							        var canSendDirectly = !(0, _dom.isCrossDomainWindows)(targetWindow, this.window) && !!targetWindow[this.RECEIVE_MSG_FN];

							        if (canSendDirectly) {
							            var sendFunc = function sendFunc(force) {
							                // NOTE: In IE, this function is called on the timeout despite the fact that the timer has been cleared
							                // in the unload event handler, so we check whether the function is in the queue
							                if (force || _this3._removeInternalMsgFromQueue(sendFunc)) {
							                    // NOTE: The 'sendFunc' function may be called on timeout, so we must call 'canSendDirectly' again,
							                    // because the iframe could become cross-domain in the meantime. Unfortunately, Chrome hangs when
							                    // trying to call the 'isCrossDomainWindows' function, so we have to wrap it in 'try/catch'.
							                    try {
							                        targetWindow[_this3.RECEIVE_MSG_FN]({
							                            // NOTE: Cloning a message to prevent this modification.
							                            data: (0, _json.parse)((0, _json.stringify)(message)),
							                            source: _this3.window
							                        });
							                    }
							                    // eslint-disable-next-line no-empty
							                    catch (e) {}
							                }
							            };

							            if (!this.isWindowUnloaded) {
							                // NOTE: Imitation of a delay for the postMessage method.
							                // We use the same-domain top window
							                // so that the function called by setTimeout is executed after removing the iframe
							                var topSameDomainWindow = (0, _dom.getTopSameDomainWindow)(this.window);
							                var timeoutId = _nativeMethods2.default.setTimeout.call(topSameDomainWindow, sendFunc, 10);

							                this.iframeInternalMsgQueue.push({ timeoutId: timeoutId, sendFunc: sendFunc });
							            } else sendFunc(true);

							            return null;
							        }

							        return targetWindow.postMessage(message, '*');
							    };

							    MessageSandbox.prototype.pingIframe = function pingIframe(targetIframe, pingMessageCommand, shortWaiting) {
							        var _this4 = this;

							        return new _pinkie2.default(function (resolve, reject) {
							            var pingInterval = null;
							            var pingTimeout = null;
							            var targetWindow = null;

							            var sendPingRequest = function sendPingRequest() {
							                targetWindow = _nativeMethods2.default.contentWindowGetter.call(targetIframe);

							                if (targetWindow) {
							                    _this4.sendServiceMsg({
							                        cmd: _this4.pingCmd,
							                        isPingRequest: true
							                    }, targetWindow);
							                }
							            };

							            var cleanTimeouts = function cleanTimeouts() {
							                _nativeMethods2.default.clearInterval.call(_this4.window, pingInterval);
							                _nativeMethods2.default.clearTimeout.call(_this4.window, pingTimeout);

							                _this4.pingCallback = null;
							                _this4.pingCmd = null;
							                pingInterval = null;
							                pingTimeout = null;
							            };

							            pingTimeout = _nativeMethods2.default.setTimeout.call(_this4.window, function () {
							                cleanTimeouts();
							                reject();
							            }, shortWaiting ? _this4.PING_IFRAME_MIN_TIMEOUT : _this4.PING_IFRAME_TIMEOUT);

							            _this4.pingCallback = function () {
							                cleanTimeouts();
							                resolve();
							            };

							            _this4.pingCmd = pingMessageCommand;

							            sendPingRequest();
							            pingInterval = _nativeMethods2.default.setInterval.call(_this4.window, sendPingRequest, _this4.PING_DELAY);
							        });
							    };

							    return MessageSandbox;
							}(_base2.default);

							exports.default = MessageSandbox;
							module.exports = exports['default'];
						},
						"selection.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _focusBlur = require('./focus-blur');

							var _focusBlur2 = _interopRequireDefault(_focusBlur);

							var _listeners = require('./listeners');

							var _listeners2 = _interopRequireDefault(_listeners);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _browser = require('../../utils/browser');

							var browserUtils = _interopRequireWildcard(_browser);

							var _dom = require('../../utils/dom');

							var domUtils = _interopRequireWildcard(_dom);

							var _internalProperties = require('../../../processing/dom/internal-properties');

							var _internalProperties2 = _interopRequireDefault(_internalProperties);

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							var browserResetInputSelection = browserUtils.isFirefox && browserUtils.version > 50;

							var Selection = function () {
							    function Selection(eventSandbox) {
							        _classCallCheck(this, Selection);

							        this.focusBlurSandbox = eventSandbox.focusBlur;
							        this.timersSandbox = eventSandbox.timers;
							        this.listeners = eventSandbox.listeners;
							        this.eventSimulator = eventSandbox.eventSimulator;

							        var selection = this;
							        var eventSimulator = this.eventSimulator;
							        var listeners = this.listeners;
							        var timersSandbox = this.timersSandbox;

							        this.setSelectionRangeWrapper = function () {
							            var selectionStart = arguments[0];
							            var selectionEnd = arguments[1];
							            var selectionDirection = arguments[2] || 'none';
							            var el = this;
							            var fn = domUtils.isTextAreaElement(el) ? _nativeMethods2.default.textAreaSetSelectionRange : _nativeMethods2.default.setSelectionRange;
							            var activeElement = domUtils.getActiveElement(domUtils.findDocument(el));
							            var curDocument = domUtils.findDocument(el);
							            var isElementActive = false;

							            var selectionSetter = function selectionSetter() {
							                var changeType = Selection._needChangeInputType(el);
							                var useInternalSelection = Selection._needForInternalSelection(el);
							                var savedType = el.type;
							                var res = void 0;

							                if (changeType) el.type = 'text';

							                // NOTE: In MSEdge, an error occurs when the setSelectionRange method is called for an input with
							                // 'display = none' and selectionStart !== selectionEnd in other IEs, the error doesn't occur, but
							                // as a result selectionStart === selectionEnd === 0.
							                try {
							                    res = fn.call(el, selectionStart, selectionEnd, selectionDirection);
							                } catch (e) {
							                    res = fn.call(el, 0, 0, selectionDirection);
							                }

							                if (useInternalSelection) {
							                    el[_internalProperties2.default.selection] = {
							                        selectionStart: el.selectionStart,
							                        selectionEnd: el.selectionEnd,
							                        selectionDirection: el.selectionDirection
							                    };
							                }

							                if (changeType) {
							                    el.type = savedType;
							                    // HACK: (A problem with input type = 'number' after Chrome is updated to v.33.0.1750.117 and
							                    // in Firefox 29.0.  T101195) To set right selection: if the input type is 'number' or 'email',
							                    // we need to change the type to text, and then restore it after setting selection.(B254340).
							                    // However, the type is changed asynchronously in this case. To force type changing,we need to
							                    // call blur, Then raise the focus event to make the element active.

							                    if (isElementActive) {
							                        selection.focusBlurSandbox.blur(el, null, true);
							                        selection.focusBlurSandbox.focus(el, null, true);

							                        // HACK: we should call focus for previous active element again because
							                        // in Firefox 55.0.3 after first focus active element isn't changed
							                        if (domUtils.getActiveElement(domUtils.findDocument(el)) !== el) selection.focusBlurSandbox.focus(el, null, true);
							                    }
							                }

							                // NOTE: In MSEdge, the 'selectionchange' event doesn't occur immediately (it occurs with a delay)
							                // So, we should raise it right after the 'setSelectionRange' method.
							                if (browserUtils.isIE && browserUtils.version > 11) eventSimulator.selectionchange(el);

							                return res;
							            };

							            if (activeElement === el) {
							                isElementActive = true;
							                return selectionSetter();
							            }

							            var needFocus = browserUtils.isIE11 || browserUtils.isMSEdge && browserUtils.version > 16 && !curDocument.hasFocus();

							            return selection.wrapSetterSelection(el, selectionSetter, needFocus);
							        };

							        this.selectWrapper = function () {
							            var element = this.parentElement();

							            if (!element || domUtils.getActiveElement(domUtils.findDocument(element)) === element) return _nativeMethods2.default.select.call(this);

							            var result = null;
							            var focusRaised = false;
							            var focusHandler = function focusHandler(e) {
							                if (e.target === element || element.style.display === 'none') focusRaised = true;
							            };

							            listeners.addInternalEventListener(document, ['focus'], focusHandler);

							            result = _nativeMethods2.default.select.call(this);

							            timersSandbox.setTimeout.call(window, function () {
							                timersSandbox.setTimeout.call(window, function () {
							                    listeners.removeInternalEventListener(document, ['focus'], focusHandler);

							                    if (!focusRaised) eventSimulator.focus(element);
							                }, 0);
							            }, 0);

							            return result;
							        };
							    }

							    Selection._isNumberOrEmailInput = function _isNumberOrEmailInput(el) {
							        return domUtils.isInputElement(el) && /^(number|email)$/.test(el.type);
							    };

							    Selection._needChangeInputType = function _needChangeInputType(el) {
							        return (browserUtils.isWebKit || browserResetInputSelection) && Selection._isNumberOrEmailInput(el);
							    };

							    // NOTE: We need to store the state of element's selection
							    // because it is cleared when element's type is changed


							    Selection._needForInternalSelection = function _needForInternalSelection(el) {
							        return Selection._isNumberOrEmailInput(el) && browserResetInputSelection;
							    };

							    Selection.prototype.setSelection = function setSelection(el, start, end, direction) {
							        if (el.setSelectionRange) el.setSelectionRange(start, end, direction);else {
							            el.selectionStart = start;
							            el.selectionEnd = end;
							        }
							    };

							    Selection.prototype.getSelection = function getSelection(el) {
							        var changeType = Selection._needChangeInputType(el);
							        var activeElement = domUtils.getActiveElement(domUtils.findDocument(el));
							        var isElementActive = activeElement === el;
							        var savedType = el.type;
							        var selection = null;

							        // HACK: (A problem with input type = ‘number’ after Chrome is updated to v.33.0.1750.117 and in
							        // Firefox 29.0. T101195) To get selection, if the input type is  'number' or 'email', we need to change
							        // the type to text (B254340). However, the type is changed asynchronously in this case. To force type changing,
							        // we need to call blur.Then call focus to make the element active.
							        if (changeType) {
							            // NOTE: We shouldn't call blur while changing element's type in Firefox, cause
							            // sometimes it can't be focused after. The reason of this behavior is hard to
							            // be determinated, this was found during execution testcafe client tests.
							            if (!browserResetInputSelection && isElementActive) this.focusBlurSandbox.blur(el, null, true);

							            el.type = 'text';
							        }

							        var internalSelection = el[_internalProperties2.default.selection];

							        selection = {
							            start: internalSelection ? internalSelection.selectionStart : el.selectionStart,
							            end: internalSelection ? internalSelection.selectionEnd : el.selectionEnd,
							            direction: internalSelection ? internalSelection.selectionDirection : el.selectionDirection
							        };

							        if (changeType) {
							            el.type = savedType;

							            if (isElementActive) this.focusBlurSandbox.focus(el, null, true);
							        }

							        return selection;
							    };

							    Selection.prototype.wrapSetterSelection = function wrapSetterSelection(el, selectionSetter, needFocus, isContentEditable) {
							        var _this = this;

							        var curDocument = domUtils.findDocument(el);
							        var activeElement = domUtils.getActiveElement(curDocument);
							        var result = null;
							        var focusRaised = false;

							        // NOTE: we should not call focus during selection setting
							        // if element has been focused already (TestCafe GH-2301)
							        needFocus = needFocus && activeElement !== el;

							        var focusHandler = function focusHandler(e) {
							            if (e.target === el || el.style.display === 'none') focusRaised = true;
							        };

							        if (needFocus) this.listeners.addInternalEventListener(document, ['focus'], focusHandler);

							        // The focus and blur events
							        _listeners2.default.beforeDispatchEvent(el);
							        _listeners2.default.beforeDispatchEvent(el);

							        result = selectionSetter();

							        // The focus and blur events
							        _listeners2.default.afterDispatchEvent(el);
							        _listeners2.default.afterDispatchEvent(el);

							        if (needFocus) {
							            activeElement = domUtils.getActiveElement(curDocument);

							            if (browserUtils.isWebKit && activeElement !== el) {
							                if (focusRaised) el[_focusBlur2.default.getInternalEventFlag('focus')] = true;

							                el.focus();
							            }

							            // NOTE: In MSEdge, focus and blur are sync.
							            if (browserUtils.isIE && browserUtils.version < 12) {
							                this.timersSandbox.setTimeout.call(window, function () {
							                    _this.timersSandbox.setTimeout.call(window, function () {
							                        _this.listeners.removeInternalEventListener(document, ['focus'], focusHandler);

							                        if (!focusRaised) _this.eventSimulator.focus(el);
							                    }, 0);
							                }, 0);
							            } else {
							                this.listeners.removeInternalEventListener(document, ['focus'], focusHandler);

							                if (!focusRaised) {
							                    // NOTE: In Firefox, raising the dispatchEvent 'focus' doesn’t activate an element.
							                    // We should call the native focus method.
							                    if (isContentEditable && browserUtils.isFirefox) this.focusBlurSandbox.focus(el, null, true, false, true);else this.eventSimulator.focus(el);
							                }
							            }
							        }

							        return result;
							    };

							    return Selection;
							}();

							exports.default = Selection;
							module.exports = exports['default'];
						},
						"simulator.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _extend = require('../../utils/extend');

							var _extend2 = _interopRequireDefault(_extend);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _browser = require('../../utils/browser');

							var browserUtils = _interopRequireWildcard(_browser);

							var _dom = require('../../utils/dom');

							var domUtils = _interopRequireWildcard(_dom);

							var _event = require('../../utils/event');

							var eventUtils = _interopRequireWildcard(_event);

							var _position = require('../../utils/position');

							var _style = require('../../utils/style');

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							var TOUCH_EVENT_RADIUS = 25;
							var TOUCH_EVENT_FORCE = 0.5;

							var POINTER_EVENT_BUTTON = {
							    noButton: -1,
							    leftButton: 0,
							    rightButton: 2
							};

							// NOTE: (IE11 only) 'MouseEvent.detail' value always equals 0 for 'click' and 'dblclick' events.
							// Otherwise, MouseEvent.detail behave as described in specification - https://www.w3.org/TR/uievents/#events-mouseevents
							var DEFAULT_MOUSE_EVENT_DETAIL_PROP_VALUE = {
							    click: browserUtils.isIE ? 0 : 1,
							    dblclick: browserUtils.isIE ? 0 : 2,
							    mousedown: 1,
							    mouseup: 1
							};

							var KEY_EVENT_NAME_RE = /^key\w+$/;
							var MOUSE_EVENT_NAME_RE = /^((mouse\w+)|((dbl)?click)|(contextmenu)|(drag\w*)|(drop))$/;
							var TOUCH_EVENT_NAME_RE = /^touch\w+$/;
							var FOCUS_IN_OUT_EVENT_NAME_RE = /^focus(in|out)$/;

							// NOTE: initTextEvent method required INPUT_METHOD param in IE
							var DOM_INPUT_METHOD_KEYBOARD = 1;

							var EventSimulator = function () {
							    function EventSimulator() {
							        _classCallCheck(this, EventSimulator);

							        this.DISPATCHED_EVENT_FLAG = 'hammerhead|dispatched-event';

							        this.touchIdentifier = _nativeMethods2.default.dateNow();
							        // NOTE: (IE only) If event dispatching calls a native click function, we should clear the window.event
							        // property (which was set in the raiseDispatchEvent function). Otherwise, the window.event property will
							        // contain the dispatched event, not the native click event. We should restore the window.event value after
							        // the click is handled. (B237144)
							        this.savedWindowEvents = [];
							        this.savedNativeClickCount = 0;

							        this.browserWithNewEventsStyle = !browserUtils.isIE11;
							    }

							    EventSimulator._dispatchStorageEvent = function _dispatchStorageEvent(el, args) {
							        var ev = _nativeMethods2.default.documentCreateEvent.call(document, 'StorageEvent');

							        ev.initStorageEvent('storage', args.canBubble, args.cancelable, args.key, args.oldValue, args.newValue, args.url, null);

							        _nativeMethods2.default.objectDefineProperty.call(window.Object, ev, 'storageArea', {
							            get: function get() {
							                return args.storageArea;
							            },
							            configurable: true
							        });

							        if (args.key === null) {
							            _nativeMethods2.default.objectDefineProperty.call(window.Object, ev, 'key', {
							                get: function get() {
							                    return null;
							                },
							                configurable: true
							            });
							        }

							        return el.dispatchEvent(ev);
							    };

							    EventSimulator._dispatchTouchEvent = function _dispatchTouchEvent(el, args) {
							        var ev = _nativeMethods2.default.documentCreateEvent.call(document, 'TouchEvent');

							        // HACK: A test for iOS by using initTouchEvent arguments.
							        // TODO: Replace it with a user agent analysis later.
							        if (ev.initTouchEvent) {
							            if (browserUtils.isIOS) {
							                ev.initTouchEvent(args.type, args.canBubble, args.cancelable, args.view, args.detail, args.screenX, args.screenY, args.pageX, args.pageY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.touches, args.targetTouches, args.changedTouches, args.scale === void 0 ? 1.0 : args.scale,
							                // NOTE: B237995
							                args.rotation === void 0 ? 0.0 : args.rotation);
							            } else if (ev.initTouchEvent.length === 12) {
							                // NOTE: The Firefox.
							                ev.initTouchEvent(args.type, args.canBubble, args.cancelable, args.view, args.detail, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.touches, args.targetTouches, args.changedTouches);
							            } else {
							                // NOTE: The default Android browser, Dolphin.
							                ev.initTouchEvent(args.touches, args.targetTouches, args.changedTouches, args.type, args.view, args.screenX, args.screenY, args.pageX - args.view.pageXOffset, args.pageY - args.view.pageYOffset, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey);
							            }
							        } else {
							            ev = new _nativeMethods2.default.WindowTouchEvent(args.type, {
							                touches: args.touches,
							                targetTouches: args.targetTouches,
							                changedTouches: args.changedTouches,
							                ctrlKey: args.ctrlKey,
							                altKey: args.altKey,
							                shiftKey: args.shiftKey,
							                metaKey: args.metaKey,
							                bubbles: args.canBubble,
							                cancelable: args.cancelable,
							                cancelBubble: false,
							                defaultPrevented: false,
							                detail: args.detail,
							                view: args.view
							            });
							        }

							        return el.dispatchEvent(ev);
							    };

							    EventSimulator._getUIEventArgs = function _getUIEventArgs(type) {
							        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

							        var detail = 'detail' in options ? options.detail : DEFAULT_MOUSE_EVENT_DETAIL_PROP_VALUE[type];

							        return {
							            type: type,
							            canBubble: options.canBubble !== false,
							            cancelable: options.cancelable !== false,
							            view: options.view || window,
							            detail: detail || 0,
							            ctrlKey: options.ctrlKey || false,
							            altKey: options.altKey || false,
							            shiftKey: options.shiftKey || false,
							            metaKey: options.metaKey || false
							        };
							    };

							    EventSimulator._getStorageEventArgs = function _getStorageEventArgs() {
							        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

							        return (0, _extend2.default)(options, {
							            canBubble: options.canBubble !== false,
							            cancelable: options.cancelable !== false
							        });
							    };

							    EventSimulator._getMouseEventArgs = function _getMouseEventArgs(type) {
							        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

							        return (0, _extend2.default)(EventSimulator._getUIEventArgs(type, options), {
							            screenX: options.screenX || 0,
							            screenY: options.screenY || 0,
							            clientX: options.clientX || 0,
							            clientY: options.clientY || 0,
							            button: options.button === void 0 ? eventUtils.BUTTON.left : options.button,
							            buttons: options.buttons === void 0 ? eventUtils.BUTTONS_PARAMETER.leftButton : options.buttons,
							            relatedTarget: options.relatedTarget || null,
							            which: options.which
							        });
							    };

							    EventSimulator._getKeyEventArgs = function _getKeyEventArgs(type, options) {
							        var keyOptions = {
							            keyCode: options.keyCode || 0,
							            charCode: options.charCode || 0,
							            which: type === 'press' ? options.charCode : options.keyCode
							        };

							        if ('keyIdentifier' in options) keyOptions.keyIdentifier = options.keyIdentifier;

							        if ('key' in options) keyOptions.key = options.key;

							        return (0, _extend2.default)(EventSimulator._getUIEventArgs(type, options), keyOptions);
							    };

							    EventSimulator._getModifiersAsString = function _getModifiersAsString(args) {
							        var modifiersString = '';

							        for (var modifier in eventUtils.KEYBOARD_MODIFIERS_PARAMETER) {
							            if (_nativeMethods2.default.objectHasOwnProperty.call(eventUtils.KEYBOARD_MODIFIERS_PARAMETER, modifier) && args[modifier]) modifiersString += eventUtils.KEYBOARD_MODIFIERS_PARAMETER[modifier] + ' ';
							        }

							        return modifiersString;
							    };

							    EventSimulator._prepareMouseEventOptions = function _prepareMouseEventOptions() {
							        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

							        var buttons = options.buttons === void 0 ? eventUtils.BUTTONS_PARAMETER.noButton : options.buttons;
							        var button = eventUtils.BUTTON.left;

							        options.buttons = buttons;
							        options.button = options.button || button;

							        if (browserUtils.isWebKit) {
							            options.which = eventUtils.WHICH_PARAMETER.leftButton;

							            if (options.buttons === eventUtils.BUTTONS_PARAMETER.noButton) options.which = eventUtils.WHICH_PARAMETER.noButton;
							            if (options.buttons === eventUtils.BUTTONS_PARAMETER.rightButton) options.which = eventUtils.WHICH_PARAMETER.rightButton;
							        }

							        return options;
							    };

							    EventSimulator.prototype._simulateEvent = function _simulateEvent(el, event, userOptions) {
							        var _this = this;

							        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

							        var args = null;
							        var dispatch = null;
							        // NOTE: We don't simulate a click on links with modifiers (ctrl, shift, ctrl+shift, alt),
							        // because it causes the opening of a browser window or additional tabs in it or loading files.
							        var isClickOnLink = event === 'click' && domUtils.isAnchorElement(el);
							        var opts = (0, _extend2.default)(userOptions ? {
							            clientX: userOptions.clientX,
							            clientY: userOptions.clientY,
							            screenX: userOptions.screenX,
							            screenY: userOptions.screenY,
							            altKey: isClickOnLink ? false : userOptions.alt,
							            shiftKey: isClickOnLink ? false : userOptions.shift,
							            ctrlKey: isClickOnLink ? false : userOptions.ctrl,
							            metaKey: userOptions.meta,
							            button: userOptions.button,
							            which: userOptions.which,
							            buttons: userOptions.buttons,
							            relatedTarget: userOptions.relatedTarget
							        } : {}, options);

							        if (!opts.relatedTarget) opts.relatedTarget = document.body;

							        if (event === 'storage') {
							            opts = (0, _extend2.default)(opts, userOptions);
							            args = EventSimulator._getStorageEventArgs(opts);
							            dispatch = EventSimulator._dispatchStorageEvent;
							        } else if (MOUSE_EVENT_NAME_RE.test(event)) {
							            if (userOptions && userOptions.button !== void 0) opts = (0, _extend2.default)(opts, { button: userOptions.button });

							            args = EventSimulator._getMouseEventArgs(event, opts);
							            // eslint-disable-next-line no-shadow
							            dispatch = function dispatch(el, args) {
							                return _this._dispatchMouseRelatedEvents(el, args, userOptions ? userOptions.dataTransfer : void 0);
							            };
							        } else if (KEY_EVENT_NAME_RE.test(event)) {
							            if (userOptions && (userOptions.keyCode !== void 0 || userOptions.charCode !== void 0)) {
							                opts = (0, _extend2.default)(opts, {
							                    key: userOptions.key || void 0,
							                    keyCode: userOptions.keyCode || 0,
							                    charCode: userOptions.charCode || 0
							                });

							                if ('keyIdentifier' in userOptions) opts.keyIdentifier = userOptions.keyIdentifier;

							                if ('key' in userOptions) opts.key = userOptions.key;
							            }

							            args = EventSimulator._getKeyEventArgs(event, opts);
							            // eslint-disable-next-line no-shadow
							            dispatch = function dispatch(el, args) {
							                return _this._dispatchKeyEvent(el, args);
							            };
							        } else if (TOUCH_EVENT_NAME_RE.test(event)) {
							            args = this._getTouchEventArgs(event, (0, _extend2.default)(opts, { target: el }));
							            dispatch = EventSimulator._dispatchTouchEvent;
							        }

							        return dispatch(el, args);
							    };

							    EventSimulator.prototype._getTouchEventArgs = function _getTouchEventArgs(type) {
							        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

							        var args = (0, _extend2.default)(EventSimulator._getUIEventArgs(type, options), {
							            screenX: options.screenX || 0,
							            screenY: options.screenY || 0,
							            clientX: options.clientX || 0,
							            clientY: options.clientY || 0,
							            pageX: options.clientX || 0,
							            pageY: options.clientY || 0,
							            identifier: this._getTouchIdentifier(type)
							        });

							        if (_nativeMethods2.default.documentCreateTouch) {
							            if (browserUtils.isIOS) args.touch = _nativeMethods2.default.documentCreateTouch.call(document, args.view, options.target, args.identifier, args.clientX, args.clientY, 0, 0);else {
							                // NOTE: B237995
							                args.touch = _nativeMethods2.default.documentCreateTouch.call(document, args.view, options.target, args.identifier, args.pageX, args.pageY, args.screenX, args.screenY, args.clientX, args.clientY, null, null, args.rotation === void 0 ? 0 : args.rotation);
							            }
							        } else {
							            args.touch = new _nativeMethods2.default.WindowTouch({
							                identifier: args.identifier,
							                target: options.target,
							                clientX: args.clientX,
							                clientY: args.clientY,
							                pageX: args.pageX,
							                pageY: args.pageY,
							                screenX: args.screenX,
							                screenY: args.screenY,
							                rotationAngle: 0,
							                radiusX: TOUCH_EVENT_RADIUS,
							                radiusY: TOUCH_EVENT_RADIUS,
							                force: TOUCH_EVENT_FORCE
							            });
							        }

							        args.changedTouches = [args.touch];
							        // NOTE: T170088
							        args.touches = args.type === 'touchend' ? [] : args.changedTouches;

							        if (_nativeMethods2.default.documentCreateTouchList) {
							            var _nativeMethods$docume, _nativeMethods$docume2;

							            args.changedTouches = (_nativeMethods$docume = _nativeMethods2.default.documentCreateTouchList).call.apply(_nativeMethods$docume, [document].concat(args.changedTouches));
							            args.touches = (_nativeMethods$docume2 = _nativeMethods2.default.documentCreateTouchList).call.apply(_nativeMethods$docume2, [document].concat(args.touches));
							        }

							        args.targetTouches = args.touches;

							        return args;
							    };

							    EventSimulator.prototype._getTouchIdentifier = function _getTouchIdentifier(type) {
							        // NOTE: A touch point is created when the 'touchstart' event occurs. When the point' is moved,
							        // its id must not be changed (T112153).
							        if (type === 'touchstart') this.touchIdentifier++;

							        return this.touchIdentifier;
							    };

							    EventSimulator.prototype._raiseNativeClick = function _raiseNativeClick(el, originClick) {
							        // NOTE: B254199
							        var iframe = domUtils.isElementInIframe(el) && domUtils.getIframeByElement(el);
							        var curWindow = iframe ? _nativeMethods2.default.contentWindowGetter.call(iframe) : window;
							        var prevWindowEvent = curWindow.event;

							        if (browserUtils.isIE11) delete curWindow.event;

							        originClick.call(el);

							        // NOTE: Window.event becomes empty when the click event handler
							        // triggers the click event for a different element in IE11.(GH-226).
							        if (browserUtils.isIE11 && prevWindowEvent) {
							            _nativeMethods2.default.objectDefineProperty.call(window.Object, curWindow, 'event', {
							                get: function get() {
							                    return prevWindowEvent;
							                },
							                configurable: true
							            });
							        }
							    };

							    EventSimulator.prototype._dispatchKeyEvent = function _dispatchKeyEvent(el, args) {
							        var ev = null;

							        if (this.browserWithNewEventsStyle && _nativeMethods2.default.WindowKeyboardEvent) {
							            var eventArgs = {
							                bubbles: args.canBubble,
							                cancelable: args.cancelable,
							                cancelBubble: false,
							                defaultPrevented: false,
							                view: args.view,
							                detail: args.detail,
							                ctrlKey: args.ctrlKey,
							                altKey: args.altKey,
							                shiftKey: args.shiftKey,
							                metaKey: args.metaKey,
							                keyCode: args.keyCode,
							                charCode: args.charCode,
							                which: args.which
							            };

							            if ('keyIdentifier' in args) eventArgs.keyIdentifier = args.keyIdentifier;

							            if ('key' in args) eventArgs.key = args.key;

							            ev = new _nativeMethods2.default.WindowKeyboardEvent(args.type, eventArgs);
							        } else if (_nativeMethods2.default.documentCreateEvent) {
							            ev = _nativeMethods2.default.documentCreateEvent.call(document, 'KeyboardEvent');

							            ev.initKeyboardEvent(args.type, args.canBubble, args.cancelable, args.view, '', 0, EventSimulator._getModifiersAsString(args), false, '');
							        }

							        if (ev) {
							            // NOTE: the window.event.keyCode, window.event.charCode, window.event.which and
							            // window.event.key properties are not assigned after KeyboardEvent is created
							            _nativeMethods2.default.objectDefineProperty.call(window.Object, ev, 'keyCode', {
							                configurable: true,
							                enumerable: true,
							                get: function get() {
							                    return args.keyCode;
							                }
							            });

							            _nativeMethods2.default.objectDefineProperty.call(window.Object, ev, 'charCode', {
							                configurable: true,
							                enumerable: true,
							                get: function get() {
							                    return args.charCode;
							                }
							            });

							            _nativeMethods2.default.objectDefineProperty.call(window.Object, ev, 'which', {
							                configurable: true,
							                enumerable: true,
							                get: function get() {
							                    return args.which;
							                }
							            });

							            if ('key' in args) {
							                _nativeMethods2.default.objectDefineProperty.call(window.Object, ev, 'key', {
							                    configurable: true,
							                    enumerable: true,
							                    get: function get() {
							                        return args.key;
							                    }
							                });
							            }

							            if ('keyIdentifier' in args) {
							                _nativeMethods2.default.objectDefineProperty.call(window.Object, ev, 'keyIdentifier', {
							                    configurable: true,
							                    enumerable: true,
							                    get: function get() {
							                        return args.keyIdentifier;
							                    }
							                });
							            }

							            var defaultPrevented = false;
							            var returnValue = true;

							            // NOTE: the dispatchEvent method does not return false in the case when preventDefault method
							            // was called for events that were created with the KeyboardEvent constructor
							            if (this.browserWithNewEventsStyle) {
							                ev.preventDefault = function () {
							                    defaultPrevented = true;
							                    _nativeMethods2.default.preventDefault.call(ev);

							                    return false;
							                };
							            }

							            // NOTE: the dispatchEvent method does not return false when returnValue was set to false (only in MSEdge)
							            if (browserUtils.isMSEdge) {
							                _nativeMethods2.default.objectDefineProperty.call(window.Object, ev, 'returnValue', {
							                    get: function get() {
							                        return returnValue;
							                    },
							                    set: function set(value) {
							                        if (value === false) ev.preventDefault();

							                        returnValue = value;
							                    }
							                });
							            }

							            var res = this._raiseDispatchEvent(el, ev, args);

							            if (browserUtils.isMSEdge) return returnValue && !defaultPrevented;else if (browserUtils.isIE) return res;

							            return !defaultPrevented;
							        }

							        return null;
							    };

							    EventSimulator.prototype._dispatchPointerEvent = function _dispatchPointerEvent(el, args) {
							        var pointEvent = null;
							        var elPosition = (0, _position.getOffsetPosition)(el);
							        var elBorders = (0, _style.getBordersWidth)(el);
							        var elClientPosition = (0, _position.offsetToClientCoords)({
							            x: elPosition.left + elBorders.left,
							            y: elPosition.top + elBorders.top
							        });
							        var eventShortType = args.type.replace('mouse', '');
							        var pointerEventType = 'pointer' + eventShortType;

							        var pointerArgs = (0, _extend2.default)({
							            width: 1,
							            height: 1,
							            pressure: 0,
							            tiltX: 0,
							            tiltY: 0,
							            // NOTE: This parameter must be "1" for “mouse”.
							            pointerId: 1,
							            pointerType: 'mouse',
							            timeStamp: _nativeMethods2.default.dateNow(),
							            isPrimary: true
							        }, args);

							        pointerArgs.type = pointerEventType;
							        pointerArgs.offsetX = args.clientX - elClientPosition.x;
							        pointerArgs.offsetY = args.clientY - elClientPosition.y;

							        if (eventShortType === 'move' || eventShortType === 'over' || eventShortType === 'out') pointerArgs.button = args.buttons === eventUtils.BUTTONS_PARAMETER.noButton ? POINTER_EVENT_BUTTON.noButton : pointerArgs.button;

							        if (browserUtils.isIE11) {
							            pointerArgs.rotation = 0;

							            pointEvent = _nativeMethods2.default.documentCreateEvent.call(document, 'PointerEvent');

							            // NOTE: We set the relatedTarget argument to null because IE has a memory leak.
							            pointEvent.initPointerEvent(pointerArgs.type, pointerArgs.canBubble, pointerArgs.cancelable, window, pointerArgs.detail, pointerArgs.screenX, pointerArgs.screenY, pointerArgs.clientX, pointerArgs.clientY, pointerArgs.ctrlKey, pointerArgs.altKey, pointerArgs.shiftKey, pointerArgs.metaKey, pointerArgs.button, null, pointerArgs.offsetX, pointerArgs.offsetY, pointerArgs.width, pointerArgs.height, pointerArgs.pressure, pointerArgs.rotation, pointerArgs.tiltX, pointerArgs.tiltY, pointerArgs.pointerId, pointerArgs.pointerType, pointerArgs.timeStamp, pointerArgs.isPrimary);

							            // NOTE: After dispatching the pointer event, it doesn't contain the 'target' and 'relatedTarget' properties.
							            _nativeMethods2.default.objectDefineProperty.call(window.Object, pointEvent, 'target', {
							                get: function get() {
							                    return el;
							                },
							                configurable: true
							            });

							            _nativeMethods2.default.objectDefineProperty.call(window.Object, pointEvent, 'relatedTarget', {
							                get: function get() {
							                    return args.relatedTarget;
							                },
							                configurable: true
							            });

							            _nativeMethods2.default.objectDefineProperty.call(window.Object, pointEvent, 'buttons', {
							                get: function get() {
							                    return args.buttons;
							                }
							            });
							        } else {
							            pointerArgs.bubbles = true;
							            pointerArgs.cancelable = true;

							            pointEvent = new _nativeMethods2.default.WindowPointerEvent(pointerEventType, pointerArgs);
							        }

							        this._raiseDispatchEvent(el, pointEvent, pointerArgs);
							    };

							    EventSimulator.prototype._dispatchMouseRelatedEvents = function _dispatchMouseRelatedEvents(el, args, dataTransfer) {
							        if (args.type !== 'mouseover' && args.type !== 'mouseenter' && (0, _position.shouldIgnoreMouseEventInsideIframe)(el, args.clientX, args.clientY)) return true;

							        var pointerRegExp = /mouse(down|up|move|over|out)/;

							        // NOTE: In IE, submit doesn't work if a click is simulated for some submit button's children (for example,
							        // img, B236676). In addition, if a test is being recorded in IE, the target of a click event is always a
							        // button, not a child, so the child does not receive the click event.
							        if (browserUtils.isIE) {
							            if (args.type === 'click' || args.type === 'mouseup' || args.type === 'mousedown') {
							                var closestButton = domUtils.closest(el.parentNode, 'button');

							                if (el.parentNode && closestButton) {
							                    if (_nativeMethods2.default.getAttribute.call(closestButton, 'type') === 'submit') el = closestButton;
							                }
							            }
							        }

							        if (eventUtils.hasPointerEvents && pointerRegExp.test(args.type)) this._dispatchPointerEvent(el, args);

							        return this._dispatchMouseEvent(el, args, dataTransfer);
							    };

							    EventSimulator.prototype._dispatchMouseEvent = function _dispatchMouseEvent(el, args, dataTransfer) {
							        var event = null;

							        if (this.browserWithNewEventsStyle && _nativeMethods2.default.WindowMouseEvent) {
							            event = new _nativeMethods2.default.WindowMouseEvent(args.type, {
							                bubbles: args.canBubble,
							                cancelable: args.cancelable,
							                view: window,
							                detail: args.detail,
							                screenX: args.screenX,
							                screenY: args.screenY,
							                clientX: args.clientX,
							                clientY: args.clientY,
							                ctrlKey: args.ctrlKey,
							                altKey: args.altKey,
							                shiftKey: args.shiftKey,
							                metaKey: args.metaKey,
							                button: args.button,
							                buttons: args.buttons,
							                relatedTarget: args.relatedTarget
							            });
							        } else {
							            event = _nativeMethods2.default.documentCreateEvent.call(document, 'MouseEvents');

							            event.initMouseEvent(args.type, args.canBubble, args.cancelable, window, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget);

							            _nativeMethods2.default.objectDefineProperty.call(window.Object, event, 'buttons', {
							                get: function get() {
							                    return args.buttons;
							                }
							            });
							        }

							        // NOTE: T188166 (act.hover triggers the mouseenter event with the "which" parameter set to 1).
							        if (args.which !== void 0 && browserUtils.isWebKit) {
							            _nativeMethods2.default.objectDefineProperty.call(window.Object, event, 'which', {
							                get: function get() {
							                    return args.which;
							                }
							            });
							        }

							        if (dataTransfer) {
							            _nativeMethods2.default.objectDefineProperty.call(window.Object, event, 'dataTransfer', {
							                configurable: true,
							                enumerable: true,
							                get: function get() {
							                    return dataTransfer;
							                }
							            });
							        }

							        return this._raiseDispatchEvent(el, event, args);
							    };

							    EventSimulator.prototype._dispatchFocusEvent = function _dispatchFocusEvent(el, name) {
							        var relatedTarget = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

							        var event = null;
							        var bubbles = FOCUS_IN_OUT_EVENT_NAME_RE.test(name);

							        if (this.browserWithNewEventsStyle && _nativeMethods2.default.WindowFocusEvent) {
							            event = new _nativeMethods2.default.WindowFocusEvent(name, {
							                bubbles: bubbles,
							                cancelable: false,
							                cancelBubble: false,
							                relatedTarget: relatedTarget,
							                defaultPrevented: false
							            });
							        } else if (_nativeMethods2.default.documentCreateEvent) {
							            event = _nativeMethods2.default.documentCreateEvent.call(document, 'FocusEvent');

							            event.initFocusEvent(name, bubbles, true, null, 0, bubbles ? relatedTarget : null);
							        }

							        if (event) {
							            event[this.DISPATCHED_EVENT_FLAG] = true;

							            return this._raiseDispatchEvent(el, event);
							        }

							        return null;
							    };

							    EventSimulator.prototype._dispatchTextEvent = function _dispatchTextEvent(el, text) {
							        if (_nativeMethods2.default.WindowTextEvent && _nativeMethods2.default.documentCreateEvent) {
							            var event = _nativeMethods2.default.documentCreateEvent.call(document, 'TextEvent');

							            var args = {
							                eventType: browserUtils.isIE11 ? 'textinput' : 'textInput',
							                bubbles: true,
							                cancelable: true,
							                view: window,
							                data: text,
							                inputMethod: DOM_INPUT_METHOD_KEYBOARD,
							                locale: navigator.language
							            };

							            event.initTextEvent(args.eventType, args.bubbles, args.cancelable, args.view, args.data, args.inputMethod, args.locale);

							            return this._raiseDispatchEvent(el, event);
							        }

							        return null;
							    };

							    EventSimulator.prototype._dispatchEvent = function _dispatchEvent(el, name, shouldBubble, flag) {
							        var ev = null;

							        if (_nativeMethods2.default.documentCreateEvent) {
							            ev = _nativeMethods2.default.documentCreateEvent.call(document, 'Events');

							            ev.initEvent(name, shouldBubble, true);
							        }

							        if (ev) {
							            if (flag) ev[flag] = true;

							            return this._raiseDispatchEvent(el, ev);
							        }

							        return null;
							    };

							    EventSimulator.prototype._raiseDispatchEvent = function _raiseDispatchEvent(el, ev) {
							        var iframe = domUtils.isElementInIframe(el) && domUtils.getIframeByElement(el);
							        var curWindow = iframe ? _nativeMethods2.default.contentWindowGetter.call(iframe) : window;

							        if (browserUtils.isIE11 && iframe && curWindow) {
							            // NOTE: In IE, when we raise an event by using the dispatchEvent function, the window.event object is null.
							            // If a real event happens, there is a window.event object, but it is not identical with the first argument
							            // of the event handler. The window.Event object is identical with the object that is created when we raise
							            // the event by using  the fireEvent function. So, when we raise the event by using the dispatchEvent function,
							            // we need to set the window.event object manually. An exception for IE11: The window.event object is not null
							            // and it’s the same as in the event handler (only in window.top.event). Also, in iE11, window.event doesn’t
							            // have the returnValue property, so it’s impossible to prevent the event by assigning window.event.returnValue
							            // to false.
							            // NOTE: In IE11, iframe's window.event object is null. We need to set
							            // iframe's window.event object manually by using window.event (B254199).
							            _nativeMethods2.default.objectDefineProperty.call(window.Object, curWindow, 'event', {
							                get: function get() {
							                    return window.event;
							                },
							                configurable: true
							            });
							        }

							        var res = el.dispatchEvent(ev);

							        // NOTE: GH-226
							        if (browserUtils.isIE11 && curWindow) delete curWindow.event;

							        return res;
							    };

							    /* NOTE: options = {
							     [clientX: integer,]
							     [clientY: integer,]
							     [alt: true|false,]
							     [ctrl: true|false,]
							     [shift: true|false,]
							     [meta: true|false,]
							     [button: Util.BUTTON]
							    } */

							    EventSimulator.prototype.click = function click(el, options) {
							        return this._simulateEvent(el, 'click', options, {
							            button: eventUtils.BUTTON.left,
							            buttons: eventUtils.BUTTONS_PARAMETER.noButton
							        });
							    };

							    EventSimulator.prototype.nativeClick = function nativeClick(el, originClick) {
							        this._raiseNativeClick(el, originClick);
							    };

							    EventSimulator.prototype.dblclick = function dblclick(el, options) {
							        return this._simulateEvent(el, 'dblclick', options, {
							            button: eventUtils.BUTTON.left,
							            buttons: eventUtils.BUTTONS_PARAMETER.noButton
							        });
							    };

							    EventSimulator.prototype.rightclick = function rightclick(el, options) {
							        return this._simulateEvent(el, 'click', options, {
							            button: eventUtils.BUTTON.right,
							            buttons: eventUtils.BUTTONS_PARAMETER.rightButton
							        });
							    };

							    EventSimulator.prototype.contextmenu = function contextmenu(el, options) {
							        return this._simulateEvent(el, 'contextmenu', options, {
							            button: eventUtils.BUTTON.right,
							            buttons: eventUtils.BUTTONS_PARAMETER.noButton
							        });
							    };

							    EventSimulator.prototype.mousedown = function mousedown(el) {
							        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

							        var button = options.button === void 0 ? eventUtils.BUTTON.left : options.button;
							        var buttons = button === eventUtils.BUTTON.left ? eventUtils.BUTTONS_PARAMETER.leftButton : eventUtils.BUTTONS_PARAMETER.rightButton;

							        options.button = button;
							        options.buttons = options.buttons === void 0 ? buttons : options.buttons;

							        return this._simulateEvent(el, 'mousedown', options);
							    };

							    EventSimulator.prototype.mouseup = function mouseup(el) {
							        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

							        var button = options.button === void 0 ? eventUtils.BUTTON.left : options.button;

							        return this._simulateEvent(el, 'mouseup', options, {
							            button: button,
							            buttons: eventUtils.BUTTONS_PARAMETER.noButton
							        });
							    };

							    EventSimulator.prototype.mouseover = function mouseover(el, options) {
							        options = EventSimulator._prepareMouseEventOptions(options);

							        return this._simulateEvent(el, 'mouseover', options);
							    };

							    EventSimulator.prototype.mousemove = function mousemove(el, options) {
							        options = EventSimulator._prepareMouseEventOptions(options);

							        return this._simulateEvent(el, 'mousemove', options, { cancelable: false });
							    };

							    EventSimulator.prototype.mouseout = function mouseout(el, options) {
							        options = EventSimulator._prepareMouseEventOptions(options);

							        return this._simulateEvent(el, 'mouseout', options);
							    };

							    EventSimulator.prototype.mouseenter = function mouseenter(el, options) {
							        options = EventSimulator._prepareMouseEventOptions(options);

							        return this._simulateEvent(el, 'mouseenter', options, { canBubble: false });
							    };

							    EventSimulator.prototype.mouseleave = function mouseleave(el, options) {
							        options = EventSimulator._prepareMouseEventOptions(options);

							        return this._simulateEvent(el, 'mouseleave', options, { canBubble: false });
							    };

							    // NOTE: Keyboard events.


							    EventSimulator.prototype.keypress = function keypress(el, options) {
							        return this._simulateEvent(el, 'keypress', options);
							    };

							    EventSimulator.prototype.keyup = function keyup(el, options) {
							        return this._simulateEvent(el, 'keyup', options);
							    };

							    EventSimulator.prototype.keydown = function keydown(el, options) {
							        return this._simulateEvent(el, 'keydown', options);
							    };

							    // NOTE: Control events.
							    // NOTE: "focus", "blur" and "selectionchange" shouldn't bubble (T229732),
							    // but "input", "change" and "submit" should do it (GH-318).


							    EventSimulator.prototype.blur = function blur(el, relatedTarget) {
							        return this._dispatchFocusEvent(el, 'blur', relatedTarget);
							    };

							    EventSimulator.prototype.focus = function focus(el, relatedTarget) {
							        return this._dispatchFocusEvent(el, 'focus', relatedTarget);
							    };

							    EventSimulator.prototype.focusin = function focusin(el, relatedTarget) {
							        return this._dispatchFocusEvent(el, 'focusin', relatedTarget);
							    };

							    EventSimulator.prototype.focusout = function focusout(el, relatedTarget) {
							        return this._dispatchFocusEvent(el, 'focusout', relatedTarget);
							    };

							    EventSimulator.prototype.storage = function storage(window, options) {
							        return this._simulateEvent(window, 'storage', options);
							    };

							    EventSimulator.prototype.change = function change(el) {
							        return this._dispatchEvent(el, 'change', true, this.DISPATCHED_EVENT_FLAG);
							    };

							    EventSimulator.prototype.textInput = function textInput(el, text) {
							        return this._dispatchTextEvent(el, text);
							    };

							    EventSimulator.prototype.input = function input(el) {
							        return this._dispatchEvent(el, 'input', true);
							    };

							    EventSimulator.prototype.submit = function submit(el) {
							        return this._dispatchEvent(el, 'submit', true);
							    };

							    EventSimulator.prototype.selectionchange = function selectionchange(el) {
							        return this._dispatchEvent(el, 'selectionchange', false);
							    };

							    // NOTE: Touch events.


							    EventSimulator.prototype.touchstart = function touchstart(el, options) {
							        return this._simulateEvent(el, 'touchstart', options);
							    };

							    EventSimulator.prototype.touchend = function touchend(el, options) {
							        return this._simulateEvent(el, 'touchend', options);
							    };

							    EventSimulator.prototype.touchmove = function touchmove(el, options) {
							        return this._simulateEvent(el, 'touchmove', options);
							    };

							    // NOTE: drag and drop


							    EventSimulator.prototype.dragstart = function dragstart(el, options) {
							        return this._simulateEvent(el, 'dragstart', options);
							    };

							    EventSimulator.prototype.drag = function drag(el, options) {
							        return this._simulateEvent(el, 'drag', options);
							    };

							    EventSimulator.prototype.dragenter = function dragenter(el, options) {
							        return this._simulateEvent(el, 'dragenter', options);
							    };

							    EventSimulator.prototype.dragover = function dragover(el, options) {
							        return this._simulateEvent(el, 'dragover', options);
							    };

							    EventSimulator.prototype.dragleave = function dragleave(el, options) {
							        return this._simulateEvent(el, 'dragleave', options);
							    };

							    EventSimulator.prototype.drop = function drop(el, options) {
							        return this._simulateEvent(el, 'drop', options);
							    };

							    EventSimulator.prototype.dragend = function dragend(el, options) {
							        return this._simulateEvent(el, 'dragend', options);
							    };

							    EventSimulator.prototype.isSavedWindowsEventsExists = function isSavedWindowsEventsExists() {
							        return this.savedWindowEvents && this.savedWindowEvents.length;
							    };

							    return EventSimulator;
							}();

							exports.default = EventSimulator;
							module.exports = exports['default'];
						},
						"unload.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _createPropertyDesc = require('../../utils/create-property-desc.js');

							var _createPropertyDesc2 = _interopRequireDefault(_createPropertyDesc);

							var _browser = require('../../utils/browser');

							var _propertyOverriding = require('../../utils/property-overriding');

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var UnloadSandbox = function (_SandboxBase) {
							    _inherits(UnloadSandbox, _SandboxBase);

							    function UnloadSandbox(listeners) {
							        _classCallCheck(this, UnloadSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.BEFORE_UNLOAD_EVENT = 'hammerhead|event|before-unload';
							        _this.BEFORE_BEFORE_UNLOAD_EVENT = 'hammerhead|event|before-before-unload';
							        _this.UNLOAD_EVENT = 'hammerhead|event|unload';

							        _this.listeners = listeners;

							        _this.storedBeforeUnloadReturnValue = '';
							        _this.prevented = false;
							        _this.storedBeforeUnloadHandler = null;

							        // NOTE: the ios devices do not support beforeunload event
							        // https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW5
							        _this.beforeUnloadEventName = _browser.isIOS ? 'pagehide' : 'beforeunload';
							        return _this;
							    }

							    // NOTE: This handler has to be called after others.


							    UnloadSandbox.prototype._emitBeforeUnloadEvent = function _emitBeforeUnloadEvent() {
							        this.emit(this.BEFORE_UNLOAD_EVENT, {
							            returnValue: this.storedBeforeUnloadReturnValue,
							            prevented: this.prevented
							        });
							    };

							    UnloadSandbox.prototype._onBeforeUnloadHandler = function _onBeforeUnloadHandler(e, originListener) {
							        var _this2 = this;

							        var eventObj = e;

							        // NOTE: 'window.event' required for safari 9.0 because it calls the handler without 'e' (GH-698)
							        if (!e && window.event && window.event.type === this.beforeUnloadEventName) eventObj = window.event;

							        if (eventObj) {
							            // NOTE: Overriding the returnValue property to prevent a native dialog.
							            _nativeMethods2.default.objectDefineProperty.call(this.window.Object, eventObj, 'returnValue', (0, _createPropertyDesc2.default)({
							                get: function get() {
							                    return _this2.storedBeforeUnloadReturnValue;
							                },
							                set: function set(value) {
							                    // NOTE: In all browsers, if the property is set to any value, unload is prevented. In FireFox,
							                    // only if a value is set to an empty string, the unload operation is prevented.
							                    _this2.storedBeforeUnloadReturnValue = value;

							                    _this2.prevented = _browser.isFirefox ? value !== '' : true;
							                }
							            }));

							            _nativeMethods2.default.objectDefineProperty.call(this.window.Object, eventObj, 'preventDefault', (0, _createPropertyDesc2.default)({
							                get: function get() {
							                    return function () {
							                        _this2.prevented = true;

							                        return true;
							                    };
							                },

							                set: function set() {
							                    return void 0;
							                }
							            }));
							        }

							        var res = e ? originListener(e) : originListener();

							        if (res !== void 0) {
							            this.storedBeforeUnloadReturnValue = res;
							            this.prevented = true;
							        }
							    };

							    UnloadSandbox.prototype._reattachBeforeUnloadListener = function _reattachBeforeUnloadListener() {
							        // NOTE: reattach the Listener, it'll be the last in the queue.
							        _nativeMethods2.default.windowRemoveEventListener.call(this.window, this.beforeUnloadEventName, this);
							        _nativeMethods2.default.windowAddEventListener.call(this.window, this.beforeUnloadEventName, this);
							    };

							    UnloadSandbox.prototype.attach = function attach(window) {
							        var _this3 = this;

							        _SandboxBase.prototype.attach.call(this, window);

							        this.listeners.setEventListenerWrapper(window, [this.beforeUnloadEventName], function (e, listener) {
							            return _this3._onBeforeUnloadHandler(e, listener);
							        });
							        this.listeners.addInternalEventListener(window, ['unload'], function () {
							            return _this3.emit(_this3.UNLOAD_EVENT);
							        });

							        _nativeMethods2.default.windowAddEventListener.call(window, this.beforeUnloadEventName, this);

							        this.listeners.addInternalEventListener(window, [this.beforeUnloadEventName], function () {
							            return _this3.emit(_this3.BEFORE_BEFORE_UNLOAD_EVENT);
							        });
							        this.listeners.on(this.listeners.EVENT_LISTENER_ATTACHED_EVENT, function (e) {
							            if (e.el === window && e.eventType === _this3.beforeUnloadEventName) _this3._reattachBeforeUnloadListener();
							        });

							        var eventPropsOwner = _nativeMethods2.default.isEventPropsLocatedInProto ? window.Window.prototype : window;

							        (0, _propertyOverriding.overrideDescriptor)(eventPropsOwner, 'on' + this.beforeUnloadEventName, {
							            getter: function getter() {
							                return _this3.storedBeforeUnloadHandler;
							            },
							            setter: function setter(handler) {
							                return _this3.setOnBeforeUnload(window, handler);
							            }
							        });
							    };

							    UnloadSandbox.prototype.setOnBeforeUnload = function setOnBeforeUnload(window, handler) {
							        var _this4 = this;

							        var beforeUnloadEventPropSetter = _browser.isIOS ? _nativeMethods2.default.winOnPageHideSetter : _nativeMethods2.default.winOnBeforeUnloadSetter;

							        if (typeof handler === 'function') {
							            this.storedBeforeUnloadHandler = handler;

							            beforeUnloadEventPropSetter.call(window, function (e) {
							                return _this4._onBeforeUnloadHandler(e, handler);
							            });

							            this._reattachBeforeUnloadListener();
							        } else {
							            this.storedBeforeUnloadHandler = null;

							            beforeUnloadEventPropSetter.call(window, null);
							        }
							    };

							    UnloadSandbox.prototype.handleEvent = function handleEvent() {
							        this._emitBeforeUnloadEvent();
							    };

							    return UnloadSandbox;
							}(_base2.default);

							exports.default = UnloadSandbox;
							module.exports = exports['default'];
						}
					},
					"fetch.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _base = require('./base');

						var _base2 = _interopRequireDefault(_base);

						var _nativeMethods = require('./native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _headers = require('../../request-pipeline/xhr/headers');

						var _headers2 = _interopRequireDefault(_headers);

						var _url = require('../utils/url');

						var _destinationLocation = require('../utils/destination-location');

						var _dom = require('../utils/dom');

						var _sameOriginCheckFailedStatusCode = require('../../request-pipeline/xhr/same-origin-check-failed-status-code');

						var _sameOriginCheckFailedStatusCode2 = _interopRequireDefault(_sameOriginCheckFailedStatusCode);

						var _propertyOverriding = require('../utils/property-overriding');

						var _browser = require('../utils/browser');

						var browserUtils = _interopRequireWildcard(_browser);

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var DEFAULT_REQUEST_CREDENTIALS = _nativeMethods2.default.Request ? new _nativeMethods2.default.Request(window.location.toString()).credentials : void 0;

						var FetchSandbox = function (_SandboxBase) {
						    _inherits(FetchSandbox, _SandboxBase);

						    function FetchSandbox(cookieSandbox) {
						        _classCallCheck(this, FetchSandbox);

						        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

						        _this.cookieSandbox = cookieSandbox;

						        _this.FETCH_REQUEST_SENT_EVENT = 'hammerhead|event|fetch-request-sent-event';
						        return _this;
						    }

						    FetchSandbox._addSpecialHeadersToRequestInit = function _addSpecialHeadersToRequestInit(init) {
						        var headers = init.headers;
						        var requestCredentials = init.credentials || DEFAULT_REQUEST_CREDENTIALS;
						        var originHeaderValue = (0, _destinationLocation.getOriginHeader)();

						        if ((0, _dom.isFetchHeaders)(headers)) {
						            // eslint-disable-next-line no-restricted-properties
						            _nativeMethods2.default.headersSet.call(headers, _headers2.default.origin, originHeaderValue);
						            _nativeMethods2.default.headersSet.call(headers, _headers2.default.fetchRequestCredentials, requestCredentials);
						        } else {
						            var _transformedHeaders;

						            var transformedHeaders = (_transformedHeaders = {}, _transformedHeaders[_headers2.default.origin] = originHeaderValue, _transformedHeaders[_headers2.default.fetchRequestCredentials] = requestCredentials, _transformedHeaders);

						            if (headers) {
						                for (var _i2 = 0, _nativeMethods$object2 = _nativeMethods2.default.objectKeys(headers); _i2 < _nativeMethods$object2.length; _i2++) {
						                    var header = _nativeMethods$object2[_i2];
						                    transformedHeaders[header] = headers[header];
						                }
						            }

						            init.headers = transformedHeaders;
						        }

						        return init;
						    };

						    FetchSandbox._processArguments = function _processArguments(args) {
						        var input = args[0];
						        var inputIsString = typeof input === 'string';
						        var inputIsFetchRequest = (0, _dom.isFetchRequest)(input);
						        var init = args[1];

						        if (!inputIsFetchRequest) {
						            args[0] = (0, _url.getProxyUrl)(inputIsString ? input : String(input));
						            init = init || {};
						            args[1] = FetchSandbox._addSpecialHeadersToRequestInit(init);
						        } else if (init) args[1] = FetchSandbox._addSpecialHeadersToRequestInit(init);
						    };

						    FetchSandbox._sameOriginCheck = function _sameOriginCheck(args) {
						        var url = null;
						        var requestMode = null;

						        if ((0, _dom.isFetchRequest)(args[0])) {
						            url = (0, _url.parseProxyUrl)(args[0].url).destUrl;
						            requestMode = args[0].mode;
						        } else {
						            var parsedProxyUrl = (0, _url.parseProxyUrl)(args[0]);

						            url = parsedProxyUrl ? parsedProxyUrl.destUrl : args[0];
						            requestMode = (args[1] || {}).mode;
						        }

						        if (requestMode === 'same-origin') return (0, _destinationLocation.sameOriginCheck)((0, _destinationLocation.get)(), url, true);

						        return true;
						    };

						    FetchSandbox._getResponseType = function _getResponseType(response) {
						        var responseUrl = _nativeMethods2.default.responseUrlGetter.call(response);
						        var parsedResponseUrl = (0, _url.parseProxyUrl)(responseUrl);
						        var destUrl = parsedResponseUrl && parsedResponseUrl.destUrl;
						        var isSameOrigin = (0, _destinationLocation.sameOriginCheck)((0, _destinationLocation.get)(), destUrl, true);

						        if (isSameOrigin) return 'basic';

						        return response.status === 0 ? 'opaque' : 'cors';
						    };

						    FetchSandbox._entriesFilteredNext = function _entriesFilteredNext(iterator, nativeNext) {
						        var entry = nativeNext.apply(iterator);

						        if (entry.done) return entry;

						        // eslint-disable-next-line no-restricted-properties
						        if (entry.value[0] === _headers2.default.origin || entry.value[0] === _headers2.default.fetchRequestCredentials) return FetchSandbox._entriesFilteredNext(iterator, nativeNext);

						        return entry;
						    };

						    FetchSandbox._entriesWrapper = function _entriesWrapper() {
						        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						            args[_key] = arguments[_key];
						        }

						        var iterator = _nativeMethods2.default.headersEntries.apply(this, args);
						        var nativeNext = iterator.next;

						        iterator.next = function () {
						            return FetchSandbox._entriesFilteredNext(iterator, nativeNext);
						        };

						        return iterator;
						    };

						    FetchSandbox._valuesWrapper = function _valuesWrapper() {
						        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						            args[_key2] = arguments[_key2];
						        }

						        var iterator = _nativeMethods2.default.headersEntries.apply(this, args);
						        var nativeNext = iterator.next;

						        iterator.next = function () {
						            var filteredEntry = FetchSandbox._entriesFilteredNext(iterator, nativeNext);

						            if (!filteredEntry.done) filteredEntry.value = filteredEntry.value[1]; // eslint-disable-line no-restricted-properties

						            return filteredEntry;
						        };

						        return iterator;
						    };

						    FetchSandbox.prototype.attach = function attach(window) {
						        _SandboxBase.prototype.attach.call(this, window, window.document);

						        if (!_nativeMethods2.default.fetch) return;

						        var sandbox = this;

						        window.Request = function () {
						            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
						                args[_key3] = arguments[_key3];
						            }

						            FetchSandbox._processArguments(args);

						            window.Headers.prototype.entries = window.Headers.prototype[Symbol.iterator] = _nativeMethods2.default.headersEntries;

						            var request = args.length === 1 ? new _nativeMethods2.default.Request(args[0]) : new _nativeMethods2.default.Request(args[0], args[1]);

						            window.Headers.prototype.entries = window.Headers.prototype[Symbol.iterator] = FetchSandbox._entriesWrapper;

						            return request;
						        };
						        window.Request.prototype = _nativeMethods2.default.Request.prototype;

						        window.fetch = function () {
						            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
						                args[_key4] = arguments[_key4];
						            }

						            // NOTE: Safari processed the empty `fetch()` request without `Promise` rejection (GH-1613)
						            if (!args.length && !browserUtils.isSafari) return _nativeMethods2.default.fetch.apply(this);

						            try {
						                FetchSandbox._processArguments(args);
						            } catch (e) {
						                return _nativeMethods2.default.promiseReject.call(sandbox.window.Promise, e);
						            }

						            if (!FetchSandbox._sameOriginCheck(args)) return _nativeMethods2.default.promiseReject.call(sandbox.window.Promise, new TypeError());

						            window.Headers.prototype.entries = window.Headers.prototype[Symbol.iterator] = _nativeMethods2.default.headersEntries;

						            var fetchPromise = _nativeMethods2.default.fetch.apply(this, args);

						            window.Headers.prototype.entries = window.Headers.prototype[Symbol.iterator] = FetchSandbox._entriesWrapper;

						            sandbox.emit(sandbox.FETCH_REQUEST_SENT_EVENT, fetchPromise);

						            return _nativeMethods2.default.promiseThen.call(fetchPromise, function (response) {
						                sandbox.cookieSandbox.syncCookie();

						                return response;
						            });
						        };

						        var fetchToString = _nativeMethods2.default.fetch.toString();

						        window.fetch.toString = function () {
						            return fetchToString;
						        };

						        (0, _propertyOverriding.overrideDescriptor)(window.Response.prototype, 'type', {
						            getter: function getter() {
						                return FetchSandbox._getResponseType(this);
						            }
						        });

						        (0, _propertyOverriding.overrideDescriptor)(window.Response.prototype, 'status', {
						            getter: function getter() {
						                var responseStatus = _nativeMethods2.default.responseStatusGetter.call(this);

						                return responseStatus === _sameOriginCheckFailedStatusCode2.default ? 0 : responseStatus;
						            }
						        });

						        (0, _propertyOverriding.overrideDescriptor)(window.Response.prototype, 'url', {
						            getter: function getter() {
						                var responseUrl = _nativeMethods2.default.responseUrlGetter.call(this);
						                var parsedResponseUrl = responseUrl && (0, _url.parseProxyUrl)(responseUrl);

						                return parsedResponseUrl ? parsedResponseUrl.destUrl : responseUrl;
						            }
						        });

						        window.Headers.prototype.entries = window.Headers.prototype[Symbol.iterator] = FetchSandbox._entriesWrapper;

						        window.Headers.prototype.values = FetchSandbox._valuesWrapper;

						        window.Headers.prototype.forEach = function () {
						            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
						                args[_key5] = arguments[_key5];
						            }

						            var callback = args[0];

						            if (typeof callback === 'function') {
						                args[0] = function (value, name) {
						                    // eslint-disable-next-line no-restricted-properties
						                    if (name !== _headers2.default.origin && name !== _headers2.default.fetchRequestCredentials) callback.apply(this, arguments);
						                };
						            }

						            return _nativeMethods2.default.headersForEach.apply(this, args);
						        };
						    };

						    return FetchSandbox;
						}(_base2.default);

						exports.default = FetchSandbox;
						module.exports = exports['default'];
					},
					"ie-debug.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _base = require('./base');

						var _base2 = _interopRequireDefault(_base);

						var _browser = require('../utils/browser');

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var BROWSERTOOLS_CONSOLE_SAFEFUNC = '__BROWSERTOOLS_CONSOLE_SAFEFUNC';

						var IEDebugSandbox = function (_SandboxBase) {
						    _inherits(IEDebugSandbox, _SandboxBase);

						    function IEDebugSandbox() {
						        _classCallCheck(this, IEDebugSandbox);

						        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

						        _this._isDebuggerInitiator = false;
						        return _this;
						    }

						    IEDebugSandbox.prototype._createFuncWrapper = function _createFuncWrapper(func) {
						        var _this2 = this;

						        if (typeof func === 'function') {
						            return function (fn, safeAssert) {
						                var ieDebugSandbox = _this2;

						                return function () {
						                    // eslint-disable-line consistent-return
						                    ieDebugSandbox._isDebuggerInitiator = true;

						                    try {
						                        var result = fn(arguments);

						                        ieDebugSandbox._isDebuggerInitiator = false;

						                        return result;
						                    } catch (e) {
						                        safeAssert(e);
						                    }

						                    ieDebugSandbox._isDebuggerInitiator = false;
						                };
						            };
						        }

						        return func;
						    };

						    IEDebugSandbox.prototype.isDebuggerInitiator = function isDebuggerInitiator() {
						        return this._isDebuggerInitiator;
						    };

						    IEDebugSandbox.prototype.attach = function attach(window) {
						        var _this3 = this;

						        if (!_browser.isIE) return;

						        var descriptor = this.nativeMethods.objectGetOwnPropertyDescriptor(window, BROWSERTOOLS_CONSOLE_SAFEFUNC);
						        var wrapper = void 0;

						        if (!descriptor || descriptor.value) {
						            // eslint-disable-line no-restricted-properties
						            if (descriptor) wrapper = this._createFuncWrapper(descriptor.value); // eslint-disable-line no-restricted-properties

						            this.nativeMethods.objectDefineProperty(window, BROWSERTOOLS_CONSOLE_SAFEFUNC, {
						                set: function set(fn) {
						                    wrapper = _this3._createFuncWrapper(fn);
						                },
						                get: function get() {
						                    return wrapper;
						                }
						            });
						        }
						    };

						    return IEDebugSandbox;
						}(_base2.default);

						exports.default = IEDebugSandbox;
						module.exports = exports['default'];
					},
					"iframe.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _internalProperties = require('../../processing/dom/internal-properties');

						var _internalProperties2 = _interopRequireDefault(_internalProperties);

						var _base = require('./base');

						var _base2 = _interopRequireDefault(_base);

						var _settings = require('../settings');

						var _settings2 = _interopRequireDefault(_settings);

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _dom = require('../../processing/dom');

						var _dom2 = require('../utils/dom');

						var _browser = require('../utils/browser');

						var _json = require('../json');

						var JSON = _interopRequireWildcard(_json);

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var IFRAME_WINDOW_INITED = 'hammerhead|iframe-window-inited';

						var IframeSandbox = function (_SandboxBase) {
						    _inherits(IframeSandbox, _SandboxBase);

						    function IframeSandbox(nodeMutation, cookieSandbox) {
						        _classCallCheck(this, IframeSandbox);

						        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

						        _this.RUN_TASK_SCRIPT_EVENT = 'hammerhead|event|run-task-script';
						        _this.EVAL_HAMMERHEAD_SCRIPT_EVENT = 'hammerhead|event|eval-hammerhead-script';
						        _this.EVAL_EXTERNAL_SCRIPT_EVENT = 'hammerhead|event|eval-external-script';
						        _this.IFRAME_DOCUMENT_CREATED_EVENT = 'hammerhead|event|iframe-document-created';

						        _this.cookieSandbox = cookieSandbox;

						        _this.on(_this.RUN_TASK_SCRIPT_EVENT, _this.iframeReadyToInitHandler);
						        nodeMutation.on(nodeMutation.IFRAME_ADDED_TO_DOM_EVENT, function (e) {
						            return _this.processIframe(e.iframe);
						        });

						        _this.iframeNativeMethodsBackup = null;
						        return _this;
						    }

						    IframeSandbox.prototype._shouldSaveIframeNativeMethods = function _shouldSaveIframeNativeMethods(iframe) {
						        if (!_browser.isWebKit) return false;

						        var iframeSrc = this.nativeMethods.getAttribute.call(iframe, 'src');

						        return (0, _dom.isJsProtocol)(iframeSrc);
						    };

						    IframeSandbox.prototype._ensureIframeNativeMethodsForChrome = function _ensureIframeNativeMethodsForChrome(iframe) {
						        var contentWindow = _nativeMethods2.default.contentWindowGetter.call(iframe);
						        var contentDocument = _nativeMethods2.default.contentDocumentGetter.call(iframe);

						        if (!this.iframeNativeMethodsBackup && this._shouldSaveIframeNativeMethods(iframe)) this.iframeNativeMethodsBackup = new this.nativeMethods.constructor(contentDocument, contentWindow);else if (this.iframeNativeMethodsBackup) {
						            this.iframeNativeMethodsBackup.restoreDocumentMeths(contentWindow, contentDocument);
						            this.iframeNativeMethodsBackup = null;
						        }
						    };

						    IframeSandbox.prototype._ensureIframeNativeMethodsForIE = function _ensureIframeNativeMethodsForIE(iframe) {
						        var contentWindow = _nativeMethods2.default.contentWindowGetter.call(iframe);
						        var contentDocument = _nativeMethods2.default.contentDocumentGetter.call(iframe);
						        var iframeNativeMethods = contentWindow[_internalProperties2.default.iframeNativeMethods];

						        if (iframeNativeMethods) {
						            iframeNativeMethods.restoreDocumentMeths(contentWindow, contentDocument);
						            delete contentWindow[_internalProperties2.default.iframeNativeMethods];
						        }
						    };

						    IframeSandbox.prototype._ensureIframeNativeMethods = function _ensureIframeNativeMethods(iframe) {
						        // NOTE: In Chrome, iframe with javascript protocol src raises the load event twice.
						        // As a result, when the second load event is raised, we write the overridden methods to the native methods.
						        // So, we need to save the native methods when the first load event is raised.
						        // https://code.google.com/p/chromium/issues/detail?id=578812
						        this._ensureIframeNativeMethodsForChrome(iframe);

						        // NOTE: Restore native document methods for the iframe's document if it overrided earlier (IE9, IE10 only)
						        // https://github.com/DevExpress/testcafe-hammerhead/issues/279
						        this._ensureIframeNativeMethodsForIE(iframe);
						    };

						    IframeSandbox.prototype._emitEvents = function _emitEvents(iframe) {
						        // NOTE: Raise this internal event to eval the Hammerhead code script.
						        this.emit(this.EVAL_HAMMERHEAD_SCRIPT_EVENT, { iframe: iframe });

						        // NOTE: Raise this event to eval external code script.
						        this.emit(this.EVAL_EXTERNAL_SCRIPT_EVENT, { iframe: iframe });

						        // NOTE: Raise this event to eval the "task" script and to call the Hammerhead initialization method
						        // and external script initialization code.
						        this.emit(this.RUN_TASK_SCRIPT_EVENT, { iframe: iframe });
						    };

						    IframeSandbox.prototype._raiseReadyToInitEvent = function _raiseReadyToInitEvent(iframe) {
						        if (!(0, _dom2.isIframeWithoutSrc)(iframe)) return;

						        var contentWindow = _nativeMethods2.default.contentWindowGetter.call(iframe);
						        var contentDocument = _nativeMethods2.default.contentDocumentGetter.call(iframe);

						        if (!IframeSandbox.isIframeInitialized(iframe)) {
						            // NOTE: Even if iframe is not loaded (iframe.contentDocument.documentElement does not exist), we
						            // still need to override the document.write method without initializing Hammerhead. This method can
						            // be called before iframe is fully loaded, we should override it now.
						            if (contentDocument.write.toString() === this.nativeMethods.documentWrite.toString()) this.emit(this.IFRAME_DOCUMENT_CREATED_EVENT, { iframe: iframe });
						        } else if (!contentWindow[IFRAME_WINDOW_INITED] && !contentWindow[_internalProperties2.default.hammerhead]) {
						            this._ensureIframeNativeMethods(iframe);

						            // NOTE: Ok, the iframe is fully loaded now, but Hammerhead is not injected.
						            _nativeMethods2.default.objectDefineProperty.call(this.window.Object, contentWindow, IFRAME_WINDOW_INITED, { value: true });

						            this._emitEvents(iframe);

						            contentWindow[_internalProperties2.default.processDomMethodName]();
						        }
						    };

						    IframeSandbox.isIframeInitialized = function isIframeInitialized(iframe) {
						        var contentWindow = _nativeMethods2.default.contentWindowGetter.call(iframe);
						        var contentDocument = _nativeMethods2.default.contentDocumentGetter.call(iframe);
						        var isFFIframeUninitialized = _browser.isFirefox && contentWindow.document.readyState === 'uninitialized';

						        return !isFFIframeUninitialized && !!contentDocument.documentElement || _browser.isIE && contentWindow[_internalProperties2.default.documentWasCleaned];
						    };

						    IframeSandbox.isWindowInited = function isWindowInited(window) {
						        return window[IFRAME_WINDOW_INITED];
						    };

						    IframeSandbox.prototype.iframeReadyToInitHandler = function iframeReadyToInitHandler(e) {
						        // NOTE: We are using String.replace in order to avoid adding Mustache scripts on the client side.
						        // If it is needed elsewhere in a certain place, we should consider using Mustache.
						        var taskScriptTemplate = _settings2.default.get().iframeTaskScriptTemplate;
						        var escapeStringPatterns = function escapeStringPatterns(str) {
						            return str.replace(/\$/g, '$$$$');
						        };
						        var cookie = JSON.stringify(this.cookieSandbox.getCookie());
						        var referer = _settings2.default.get().referer || this.window.location.toString();
						        var iframeTaskScriptTemplate = JSON.stringify(taskScriptTemplate);
						        var taskScript = taskScriptTemplate.replace('{{{cookie}}}', escapeStringPatterns(cookie)).replace('{{{referer}}}', escapeStringPatterns(referer)).replace('{{{iframeTaskScriptTemplate}}}', escapeStringPatterns(iframeTaskScriptTemplate));

						        var contentWindow = _nativeMethods2.default.contentWindowGetter.call(e.iframe);

						        contentWindow.eval.call(contentWindow, taskScript);
						    };

						    IframeSandbox.prototype.onIframeBeganToRun = function onIframeBeganToRun(iframe) {
						        this._raiseReadyToInitEvent(iframe);
						    };

						    IframeSandbox.prototype.processIframe = function processIframe(el) {
						        var _this2 = this;

						        if ((0, _dom2.isShadowUIElement)(el)) return;

						        var tagName = (0, _dom2.getTagName)(el);

						        if (tagName === 'iframe' && _nativeMethods2.default.contentWindowGetter.call(el) || tagName === 'frame' && _nativeMethods2.default.frameContentWindowGetter.call(el)) this._raiseReadyToInitEvent(el);

						        // NOTE: This handler exists for iframes without the src attribute. In some the browsers (e.g. Chrome)
						        // the load event is triggering immediately after an iframe added to DOM. In other browsers,
						        // the _raiseReadyToInitEvent function is calling in our function wrapper after an iframe added to DOM.
						        this.nativeMethods.addEventListener.call(el, 'load', function () {
						            return _this2._raiseReadyToInitEvent(el);
						        });
						    };

						    return IframeSandbox;
						}(_base2.default);

						exports.default = IframeSandbox;
						module.exports = exports['default'];
					},
					"index.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _internalProperties = require('../../processing/dom/internal-properties');

						var _internalProperties2 = _interopRequireDefault(_internalProperties);

						var _codeInstrumentation = require('./code-instrumentation');

						var _codeInstrumentation2 = _interopRequireDefault(_codeInstrumentation);

						var _cookie = require('./cookie');

						var _cookie2 = _interopRequireDefault(_cookie);

						var _elementEditingWatcher = require('./event/element-editing-watcher');

						var _elementEditingWatcher2 = _interopRequireDefault(_elementEditingWatcher);

						var _event = require('./event');

						var _event2 = _interopRequireDefault(_event);

						var _simulator = require('./event/simulator');

						var _simulator2 = _interopRequireDefault(_simulator);

						var _iframe = require('./iframe');

						var _iframe2 = _interopRequireDefault(_iframe);

						var _listeners = require('./event/listeners');

						var _listeners2 = _interopRequireDefault(_listeners);

						var _message = require('./event/message');

						var _message2 = _interopRequireDefault(_message);

						var _mutation = require('./node/mutation');

						var _mutation2 = _interopRequireDefault(_mutation);

						var _node = require('./node');

						var _node2 = _interopRequireDefault(_node);

						var _base = require('./base');

						var _base2 = _interopRequireDefault(_base);

						var _shadowUi = require('./shadow-ui');

						var _shadowUi2 = _interopRequireDefault(_shadowUi);

						var _timers = require('./timers');

						var _timers2 = _interopRequireDefault(_timers);

						var _unload = require('./event/unload');

						var _unload2 = _interopRequireDefault(_unload);

						var _upload = require('./upload');

						var _upload2 = _interopRequireDefault(_upload);

						var _xhr = require('./xhr');

						var _xhr2 = _interopRequireDefault(_xhr);

						var _fetch = require('./fetch');

						var _fetch2 = _interopRequireDefault(_fetch);

						var _storages = require('./storages');

						var _storages2 = _interopRequireDefault(_storages);

						var _electron = require('./electron');

						var _electron2 = _interopRequireDefault(_electron);

						var _console = require('./console');

						var _console2 = _interopRequireDefault(_console);

						var _style = require('./style');

						var _style2 = _interopRequireDefault(_style);

						var _browser = require('../utils/browser');

						var _html = require('../utils/html');

						var _anchor = require('./code-instrumentation/properties/anchor');

						var _backup = require('./backup');

						var _urlResolver = require('../utils/url-resolver');

						var _urlResolver2 = _interopRequireDefault(_urlResolver);

						var _windowsStorage = require('./windows-storage');

						var windowStorage = _interopRequireWildcard(_windowsStorage);

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _ieDebug = require('./ie-debug');

						var _ieDebug2 = _interopRequireDefault(_ieDebug);

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var Sandbox = function (_SandboxBase) {
						    _inherits(Sandbox, _SandboxBase);

						    function Sandbox() {
						        _classCallCheck(this, Sandbox);

						        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

						        (0, _backup.create)(window, _this);
						        windowStorage.add(window);

						        var ieDebugSandbox = new _ieDebug2.default();
						        var listeners = new _listeners2.default();
						        var nodeMutation = new _mutation2.default();
						        var unloadSandbox = new _unload2.default(listeners);
						        var messageSandbox = new _message2.default(listeners, unloadSandbox);
						        var eventSimulator = new _simulator2.default();
						        var elementEditingWatcher = new _elementEditingWatcher2.default(eventSimulator);
						        var timersSandbox = new _timers2.default();
						        var cookieSandbox = new _cookie2.default(messageSandbox);

						        // API
						        _this.ieDebug = ieDebugSandbox;
						        _this.cookie = cookieSandbox; // eslint-disable-line no-restricted-properties
						        _this.storageSandbox = new _storages2.default(listeners, unloadSandbox, eventSimulator);
						        _this.xhr = new _xhr2.default(cookieSandbox);
						        _this.fetch = new _fetch2.default(cookieSandbox);
						        _this.iframe = new _iframe2.default(nodeMutation, cookieSandbox);
						        _this.shadowUI = new _shadowUi2.default(nodeMutation, messageSandbox, _this.iframe, ieDebugSandbox);
						        _this.upload = new _upload2.default(listeners, eventSimulator, _this.shadowUI);
						        _this.event = new _event2.default(listeners, eventSimulator, elementEditingWatcher, unloadSandbox, messageSandbox, _this.shadowUI, timersSandbox);
						        _this.node = new _node2.default(nodeMutation, _this.iframe, _this.event, _this.upload, _this.shadowUI, cookieSandbox);
						        _this.codeInstrumentation = new _codeInstrumentation2.default(_this.event, _this.node.win, messageSandbox);
						        _this.console = new _console2.default(messageSandbox);
						        _this.style = new _style2.default();
						        _this.unload = unloadSandbox;

						        if (_browser.isElectron) _this.electron = new _electron2.default();

						        _this.windowStorage = windowStorage;
						        return _this;
						    }

						    // NOTE: In some cases, IE raises the "Can't execute code from a freed script" exception,
						    // so that we cannot use a sandbox created earlier and we have to create a new one.


						    Sandbox._canUseSandbox = function _canUseSandbox(sandbox) {
						        try {
						            sandbox.off();
						        } catch (e) {
						            return false;
						        }

						        return true;
						    };

						    Sandbox.prototype.onIframeDocumentRecreated = function onIframeDocumentRecreated(iframe) {
						        if (iframe) {
						            var contentWindow = _nativeMethods2.default.contentWindowGetter.call(iframe);
						            var contentDocument = _nativeMethods2.default.contentDocumentGetter.call(iframe);

						            // NOTE: Try to find an existing iframe sandbox.
						            var sandbox = (0, _backup.get)(contentWindow);

						            if (sandbox && Sandbox._canUseSandbox(sandbox))
						                // NOTE: Inform the sandbox so that it restores communication with the recreated document.
						                sandbox.reattach(contentWindow, contentDocument);else {
						                // NOTE: Remove saved native methods for iframe
						                if (contentWindow[_internalProperties2.default.iframeNativeMethods]) delete contentWindow[_internalProperties2.default.iframeNativeMethods];

						                // NOTE: If the iframe sandbox is not found, this means that iframe is not initialized.
						                // In this case, we need to inject Hammerhead.

						                // HACK: IE10 cleans up overridden methods after the document.write method call.
						                this.nativeMethods.restoreDocumentMeths(contentWindow, contentDocument);

						                // NOTE: A sandbox for this iframe is not found (iframe is not yet initialized).
						                // Inform IFrameSandbox about this, and it injects Hammerhead.
						                this.iframe.onIframeBeganToRun(iframe);
						            }
						        }
						    };

						    Sandbox.prototype.reattach = function reattach(window, document) {
						        // NOTE: Assign the existing sandbox to the cleared document.
						        if (_browser.isIE) this.nativeMethods.refreshIfNecessary(document, window);

						        _urlResolver2.default.init(document);

						        this.event.initDocumentListening(document);
						        this.shadowUI.attach(window);
						        // NOTE: T182337
						        this.codeInstrumentation.attach(window);
						        this.node.doc.attach(window, document);
						        this.console.attach(window);
						    };

						    Sandbox.prototype.attach = function attach(window) {
						        var _this2 = this;

						        _SandboxBase.prototype.attach.call(this, window);

						        _urlResolver2.default.init(this.document);

						        // NOTE: Eval Hammerhead code script.
						        this.iframe.on(this.iframe.EVAL_HAMMERHEAD_SCRIPT_EVENT, function (e) {
						            _nativeMethods2.default.contentWindowGetter.call(e.iframe).eval('(' + initHammerheadClient.toString() + ')();//# sourceURL=hammerhead.js');
						        });

						        // NOTE: We need to reattach a sandbox to the recreated iframe document.
						        this.node.mutation.on(this.node.mutation.DOCUMENT_CLEANED_EVENT, function (e) {
						            return _this2.reattach(e.window, e.document);
						        });

						        this.ieDebug.attach(window);
						        this.iframe.attach(window);
						        this.xhr.attach(window);
						        this.fetch.attach(window);
						        this.storageSandbox.attach(window);
						        this.codeInstrumentation.attach(window);
						        this.shadowUI.attach(window);
						        this.event.attach(window);
						        this.node.attach(window);
						        this.upload.attach(window);
						        this.cookie.attach(window); // eslint-disable-line no-restricted-properties
						        this.console.attach(window);
						        this.style.attach(window);

						        if (this.electron) this.electron.attach(window);

						        this.unload.on(this.unload.UNLOAD_EVENT, function () {
						            return _this2.dispose();
						        });
						    };

						    Sandbox.prototype._removeInternalProperties = function _removeInternalProperties() {
						        var removeListeningElement = this.event.listeners.listeningCtx.removeListeningElement;

						        removeListeningElement(this.window);
						        removeListeningElement(this.document);

						        var childNodes = _nativeMethods2.default.querySelectorAll.call(this.document, '*');
						        var length = _nativeMethods2.default.nodeListLengthGetter.call(childNodes);

						        for (var i = 0; i < length; i++) {
						            var childNode = childNodes[i];

						            delete childNode[_internalProperties2.default.processedContext];
						            removeListeningElement(childNode);
						        }
						    };

						    Sandbox.prototype.dispose = function dispose() {
						        this.event.hover.lastHoveredElement = null;
						        this.event.focusBlur.lastFocusedElement = null;

						        (0, _html.dispose)();
						        (0, _anchor.dispose)();
						        _urlResolver2.default.dispose(this.document);
						        this.storageSandbox.dispose();
						        this._removeInternalProperties();
						    };

						    return Sandbox;
						}(_base2.default);

						exports.default = Sandbox;
						module.exports = exports['default'];
					},
					"native-methods.js": function (exports, module, require) {
						

						exports.__esModule = true;

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						/*global Document, Window */
						var NativeMethods = function () {
						    function NativeMethods(doc, win) {
						        _classCallCheck(this, NativeMethods);

						        win = win || window;

						        this.refreshDocumentMeths(doc, win);
						        this.refreshElementMeths(doc, win);
						        this.refreshWindowMeths(win);
						    }

						    NativeMethods._getDocumentPropOwnerName = function _getDocumentPropOwnerName(docPrototype, propName) {
						        return docPrototype.hasOwnProperty(propName) ? 'Document' : 'HTMLDocument';
						    };

						    NativeMethods.prototype.getStoragesPropsOwner = function getStoragesPropsOwner(win) {
						        return this.isStoragePropsLocatedInProto ? win.Window.prototype : win;
						    };

						    NativeMethods.prototype.refreshDocumentMeths = function refreshDocumentMeths(doc, win) {
						        doc = doc || document;
						        win = win || window;

						        var docPrototype = win.Document.prototype;

						        // Dom
						        this.createDocumentFragment = docPrototype.createDocumentFragment;
						        this.createElement = docPrototype.createElement;
						        this.createElementNS = docPrototype.createElementNS;

						        this.documentOpenPropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'open');
						        this.documentClosePropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'close');
						        this.documentWritePropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'write');
						        this.documentWriteLnPropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'writeln');

						        this.documentOpen = win[this.documentOpenPropOwnerName].prototype.open;
						        this.documentClose = win[this.documentClosePropOwnerName].prototype.close;
						        this.documentWrite = win[this.documentWritePropOwnerName].prototype.write;
						        this.documentWriteLn = win[this.documentWriteLnPropOwnerName].prototype.writeln;

						        this.elementFromPoint = docPrototype.elementFromPoint;
						        this.caretRangeFromPoint = docPrototype.caretRangeFromPoint;
						        this.caretPositionFromPoint = docPrototype.caretPositionFromPoint;
						        this.getElementById = docPrototype.getElementById;
						        this.getElementsByClassName = docPrototype.getElementsByClassName;
						        this.getElementsByName = docPrototype.getElementsByName;

						        this.getElementsByTagName = docPrototype.getElementsByTagName;
						        this.querySelector = docPrototype.querySelector;
						        this.querySelectorAll = docPrototype.querySelectorAll;

						        this.createHTMLDocument = win.DOMImplementation.prototype.createHTMLDocument;

						        if (doc.registerElement) this.registerElement = docPrototype.registerElement;

						        // Event
						        this.documentAddEventListener = docPrototype.addEventListener;
						        this.documentRemoveEventListener = docPrototype.removeEventListener;
						        this.documentCreateEvent = docPrototype.createEvent;
						        this.documentCreateTouch = docPrototype.createTouch;
						        this.documentCreateTouchList = docPrototype.createTouchList;

						        // getters/setters
						        this.documentCookiePropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'cookie');
						        this.documentScriptsPropOwnerName = NativeMethods._getDocumentPropOwnerName(docPrototype, 'scripts');

						        var documentCookieDescriptor = win.Object.getOwnPropertyDescriptor(win[this.documentCookiePropOwnerName].prototype, 'cookie');

						        // TODO: remove this condition after the GH-1649 fix
						        if (documentCookieDescriptor.get.toString().indexOf('native code') === -1 || documentCookieDescriptor.get.toString.toString().indexOf('native code') === -1) {
						            try {
						                var parentNativeMethods = win.parent['%hammerhead%'].nativeMethods;

						                documentCookieDescriptor.get = parentNativeMethods.documentCookieGetter;
						                documentCookieDescriptor.set = parentNativeMethods.documentCookieSetter;
						            }
						            // eslint-disable-next-line no-empty
						            catch (e) {}
						        }

						        this.documentReferrerGetter = win.Object.getOwnPropertyDescriptor(docPrototype, 'referrer').get;
						        this.documentStyleSheetsGetter = win.Object.getOwnPropertyDescriptor(docPrototype, 'styleSheets').get;
						        this.documentActiveElementGetter = win.Object.getOwnPropertyDescriptor(docPrototype, 'activeElement').get;
						        this.documentScriptsGetter = win.Object.getOwnPropertyDescriptor(win[this.documentScriptsPropOwnerName].prototype, 'scripts').get;
						        this.documentCookieGetter = documentCookieDescriptor.get;
						        this.documentCookieSetter = documentCookieDescriptor.set;

						        var documentDocumentURIDescriptor = win.Object.getOwnPropertyDescriptor(docPrototype, 'documentURI');

						        if (documentDocumentURIDescriptor) this.documentDocumentURIGetter = documentDocumentURIDescriptor.get;
						    };

						    NativeMethods.prototype.refreshElementMeths = function refreshElementMeths(doc, win) {
						        var _this = this;

						        win = win || window;

						        var createElement = function createElement(tagName) {
						            return _this.createElement.call(doc || document, tagName);
						        };
						        var nativeElement = createElement('div');

						        // Dom
						        this.appendChild = nativeElement.appendChild;
						        this.replaceChild = nativeElement.replaceChild;
						        this.cloneNode = nativeElement.cloneNode;
						        this.elementGetElementsByClassName = nativeElement.getElementsByClassName;
						        this.elementGetElementsByTagName = nativeElement.getElementsByTagName;
						        this.elementQuerySelector = nativeElement.querySelector;
						        this.elementQuerySelectorAll = nativeElement.querySelectorAll;
						        this.getAttribute = nativeElement.getAttribute;
						        this.getAttributeNS = nativeElement.getAttributeNS;
						        this.insertAdjacentHTML = nativeElement.insertAdjacentHTML;
						        this.insertBefore = nativeElement.insertBefore;
						        this.insertCell = createElement('tr').insertCell;
						        this.insertTableRow = createElement('table').insertRow;
						        this.insertTBodyRow = createElement('tbody').insertRow;
						        this.removeAttribute = nativeElement.removeAttribute;
						        this.removeAttributeNS = nativeElement.removeAttributeNS;
						        this.removeChild = nativeElement.removeChild;
						        this.setAttribute = nativeElement.setAttribute;
						        this.setAttributeNS = nativeElement.setAttributeNS;
						        this.hasAttribute = nativeElement.hasAttribute;
						        this.hasAttributeNS = nativeElement.hasAttributeNS;
						        this.hasAttributes = nativeElement.hasAttributes;
						        this.anchorToString = win.HTMLAnchorElement.prototype.toString;
						        this.matches = nativeElement.matches || nativeElement.msMatchesSelector;
						        this.closest = nativeElement.closest;

						        // Event
						        this.addEventListener = nativeElement.addEventListener;
						        this.removeEventListener = nativeElement.removeEventListener;
						        this.blur = nativeElement.blur;
						        this.click = nativeElement.click;
						        this.dispatchEvent = nativeElement.dispatchEvent;
						        this.focus = nativeElement.focus;
						        this.select = window.TextRange ? createElement('body').createTextRange().select : null;
						        this.setSelectionRange = createElement('input').setSelectionRange;
						        this.textAreaSetSelectionRange = createElement('textarea').setSelectionRange;

						        this.svgFocus = win.SVGElement ? win.SVGElement.prototype.focus : this.focus;
						        this.svgBlur = win.SVGElement ? win.SVGElement.prototype.blur : this.blur;

						        // Style
						        // NOTE: The 'style' descriptor is located in the Element.prototype in the Safari on IOS
						        this.htmlElementStylePropOwnerName = win.Element.prototype.hasOwnProperty('style') ? 'Element' : 'HTMLElement';

						        var htmlElementStyleDescriptor = win.Object.getOwnPropertyDescriptor(win[this.htmlElementStylePropOwnerName].prototype, 'style');

						        this.htmlElementStyleGetter = htmlElementStyleDescriptor.get;

						        // NOTE: IE does not allow to set a style property
						        if (htmlElementStyleDescriptor.set) this.htmlElementStyleSetter = htmlElementStyleDescriptor.set;

						        var styleCssTextDescriptor = win.Object.getOwnPropertyDescriptor(win.CSSStyleDeclaration.prototype, 'cssText');

						        this.styleCssTextGetter = styleCssTextDescriptor.get;
						        this.styleCssTextSetter = styleCssTextDescriptor.set;
						    };

						    NativeMethods.prototype.refreshWindowMeths = function refreshWindowMeths(win) {
						        win = win || window;

						        var winProto = win.constructor.prototype;

						        // Dom
						        this.eval = win.eval;
						        this.formSubmit = win.HTMLFormElement.prototype.submit;
						        this.documentFragmentQuerySelector = win.DocumentFragment.prototype.querySelector;
						        this.documentFragmentQuerySelectorAll = win.DocumentFragment.prototype.querySelectorAll;
						        this.preventDefault = win.Event.prototype.preventDefault;

						        this.historyPushState = win.history.pushState;
						        this.historyReplaceState = win.history.replaceState;
						        this.windowDispatchEvent = win.dispatchEvent;
						        this.postMessage = win.postMessage || winProto.postMessage;
						        this.windowOpen = win.open || winProto.open;
						        this.setTimeout = win.setTimeout || winProto.setTimeout;
						        this.setInterval = win.setInterval || winProto.setInterval;
						        this.clearTimeout = win.clearTimeout || winProto.clearTimeout;
						        this.clearInterval = win.clearInterval || winProto.clearInterval;

						        if (win.navigator.registerProtocolHandler) this.registerProtocolHandler = win.navigator.registerProtocolHandler;

						        if (win.navigator.sendBeacon) this.sendBeacon = win.navigator.sendBeacon;

						        // XHR
						        this.xhrAbort = win.XMLHttpRequest.prototype.abort;
						        this.xhrOpen = win.XMLHttpRequest.prototype.open;
						        this.xhrSend = win.XMLHttpRequest.prototype.send;
						        this.xhrAddEventListener = win.XMLHttpRequest.prototype.addEventListener;
						        this.xhrRemoveEventListener = win.XMLHttpRequest.prototype.removeEventListener;
						        this.xhrGetResponseHeader = win.XMLHttpRequest.prototype.getResponseHeader;
						        this.xhrGetAllResponseHeaders = win.XMLHttpRequest.prototype.getAllResponseHeaders;
						        this.xhrSetRequestHeader = win.XMLHttpRequest.prototype.setRequestHeader;
						        this.xhrOverrideMimeType = win.XMLHttpRequest.prototype.overrideMimeType;
						        this.xhrDispatchEvent = win.XMLHttpRequest.prototype.dispatchEvent;

						        try {
						            this.registerServiceWorker = win.navigator.serviceWorker.register;
						            this.getRegistrationServiceWorker = win.navigator.serviceWorker.getRegistration;
						        } catch (e) {
						            this.registerServiceWorker = null;
						            this.getRegistrationServiceWorker = null;
						        }

						        this.createContextualFragment = win.Range.prototype.createContextualFragment;

						        var nativePerformance = win.performance;
						        var nativePerformanceNow = win.performance.now || win.Performance.prototype.now;

						        this.performanceNow = function () {
						            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						                args[_key] = arguments[_key];
						            }

						            return nativePerformanceNow.apply(nativePerformance, args);
						        };

						        // Fetch
						        this.fetch = win.fetch;
						        this.Request = win.Request;

						        if (win.Headers) {
						            this.Headers = win.Headers;
						            this.headersSet = win.Headers.prototype.set;
						            this.headersEntries = win.Headers.prototype.entries;
						            this.headersForEach = win.Headers.prototype.forEach;
						        }

						        // Event
						        this.windowAddEventListener = win.addEventListener || winProto.addEventListener;
						        this.windowRemoveEventListener = win.removeEventListener || winProto.removeEventListener;
						        this.WindowPointerEvent = win.PointerEvent || winProto.PointerEvent;
						        this.WindowMSPointerEvent = win.MSPointerEvent || winProto.MSPointerEvent;
						        this.WindowTouch = win.Touch || winProto.Touch;
						        this.WindowTouchEvent = win.TouchEvent || winProto.TouchEvent;
						        this.WindowKeyboardEvent = win.KeyboardEvent || winProto.KeyboardEvent;
						        this.WindowFocusEvent = win.FocusEvent || winProto.FocusEvent;
						        this.WindowTextEvent = win.TextEvent || winProto.TextEvent;
						        this.WindowMouseEvent = win.MouseEvent || winProto.MouseEvent;

						        this.canvasContextDrawImage = win.CanvasRenderingContext2D.prototype.drawImage;
						        this.formDataAppend = win.FormData.prototype.append;

						        // DateTime
						        this.date = win.Date;
						        this.dateNow = win.Date.now;

						        // Math
						        this.math = win.Math;
						        this.mathRandom = win.Math.random;

						        // Object
						        this.objectToString = win.Object.prototype.toString;
						        this.objectAssign = win.Object.assign;
						        this.objectKeys = win.Object.keys;
						        this.objectDefineProperty = win.Object.defineProperty;
						        this.objectDefineProperties = win.Object.defineProperties;
						        this.objectCreate = win.Object.create;
						        this.objectIsExtensible = win.Object.isExtensible;
						        this.objectIsFrozen = win.Object.isFrozen;
						        this.objectGetOwnPropertyDescriptor = win.Object.getOwnPropertyDescriptor;
						        this.objectHasOwnProperty = win.Object.hasOwnProperty;
						        this.objectGetOwnPropertyNames = win.Object.getOwnPropertyNames;
						        this.objectGetPrototypeOf = win.Object.getPrototypeOf;

						        // Array
						        this.arraySlice = win.Array.prototype.slice;
						        this.arrayConcat = win.Array.prototype.concat;
						        this.arrayFilter = win.Array.prototype.filter;
						        this.arrayMap = win.Array.prototype.map;
						        this.arrayJoin = win.Array.prototype.join;

						        this.DOMParserParseFromString = win.DOMParser.prototype.parseFromString;

						        this.arrayBufferIsView = win.ArrayBuffer.prototype.constructor.isView;

						        var objectDataDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLObjectElement.prototype, 'data');
						        var inputTypeDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'type');
						        var inputValueDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'value');
						        var inputRequiredDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'required');
						        var textAreaValueDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLTextAreaElement.prototype, 'value');
						        var imageSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLImageElement.prototype, 'src');
						        var scriptSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLScriptElement.prototype, 'src');
						        var scriptIntegrityDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLScriptElement.prototype, 'integrity');
						        var embedSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLEmbedElement.prototype, 'src');
						        var sourceSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLSourceElement.prototype, 'src');
						        var mediaSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLMediaElement.prototype, 'src');
						        var inputSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'src');
						        var frameSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLFrameElement.prototype, 'src');
						        var iframeSrcDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLIFrameElement.prototype, 'src');
						        var anchorHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'href');
						        var linkHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLLinkElement.prototype, 'href');
						        var linkIntegrityDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLLinkElement.prototype, 'integrity');
						        var linkRelDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLLinkElement.prototype, 'rel');
						        var areaHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAreaElement.prototype, 'href');
						        var baseHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLBaseElement.prototype, 'href');
						        var anchorHostDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'host');
						        var anchorHostnameDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'hostname');
						        var anchorPathnameDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'pathname');
						        var anchorPortDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'port');
						        var anchorProtocolDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'protocol');
						        var anchorSearchDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'search');
						        var anchorTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'target');
						        var formTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLFormElement.prototype, 'target');
						        var areaTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAreaElement.prototype, 'target');
						        var baseTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLBaseElement.prototype, 'target');
						        var inputFormTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'formTarget');
						        var buttonFormTargetDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLButtonElement.prototype, 'formTarget');
						        var svgImageHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.SVGImageElement.prototype, 'href');
						        var svgAnimStrAnimValDescriptor = win.Object.getOwnPropertyDescriptor(win.SVGAnimatedString.prototype, 'animVal');
						        var svgAnimStrBaseValDescriptor = win.Object.getOwnPropertyDescriptor(win.SVGAnimatedString.prototype, 'baseVal');
						        var inputAutocompleteDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'autocomplete');
						        var formActionDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLFormElement.prototype, 'action');
						        var inputFormActionDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'formAction');
						        var buttonFormActionDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLButtonElement.prototype, 'formAction');
						        var nodeTextContentDescriptor = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'textContent');
						        var htmlElementInnerTextDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLElement.prototype, 'innerText');
						        var scriptTextDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLScriptElement.prototype, 'text');
						        var anchorTextDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'text');
						        var iframeSandboxDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLIFrameElement.prototype, 'sandbox');

						        // NOTE: Html properties is located in HTMLElement prototype in IE11 only
						        this.elementHTMLPropOwnerName = win.Element.prototype.hasOwnProperty('innerHTML') ? 'Element' : 'HTMLElement';

						        var elementInnerHTMLDescriptor = win.Object.getOwnPropertyDescriptor(win[this.elementHTMLPropOwnerName].prototype, 'innerHTML');
						        var elementOuterHTMLDescriptor = win.Object.getOwnPropertyDescriptor(win[this.elementHTMLPropOwnerName].prototype, 'outerHTML');

						        // Setters
						        this.objectDataSetter = objectDataDescriptor.set;
						        this.inputTypeSetter = inputTypeDescriptor.set;
						        this.inputValueSetter = inputValueDescriptor.set;
						        this.inputRequiredSetter = inputRequiredDescriptor.set;
						        this.textAreaValueSetter = textAreaValueDescriptor.set;
						        this.imageSrcSetter = imageSrcDescriptor.set;
						        this.scriptSrcSetter = scriptSrcDescriptor.set;
						        this.embedSrcSetter = embedSrcDescriptor.set;
						        this.sourceSrcSetter = sourceSrcDescriptor.set;
						        this.mediaSrcSetter = mediaSrcDescriptor.set;
						        this.inputSrcSetter = inputSrcDescriptor.set;
						        this.frameSrcSetter = frameSrcDescriptor.set;
						        this.iframeSrcSetter = iframeSrcDescriptor.set;
						        this.anchorHrefSetter = anchorHrefDescriptor.set;
						        this.linkHrefSetter = linkHrefDescriptor.set;
						        this.linkRelSetter = linkRelDescriptor.set;
						        this.areaHrefSetter = areaHrefDescriptor.set;
						        this.baseHrefSetter = baseHrefDescriptor.set;
						        this.anchorHostSetter = anchorHostDescriptor.set;
						        this.anchorHostnameSetter = anchorHostnameDescriptor.set;
						        this.anchorPathnameSetter = anchorPathnameDescriptor.set;
						        this.anchorPortSetter = anchorPortDescriptor.set;
						        this.anchorProtocolSetter = anchorProtocolDescriptor.set;
						        this.anchorSearchSetter = anchorSearchDescriptor.set;
						        this.anchorTargetSetter = anchorTargetDescriptor.set;
						        this.formTargetSetter = formTargetDescriptor.set;
						        this.areaTargetSetter = areaTargetDescriptor.set;
						        this.baseTargetSetter = baseTargetDescriptor.set;
						        this.inputFormTargetSetter = inputFormTargetDescriptor.set;
						        this.buttonFormTargetSetter = buttonFormTargetDescriptor.set;
						        this.svgAnimStrBaseValSetter = svgAnimStrBaseValDescriptor.set;
						        this.inputAutocompleteSetter = inputAutocompleteDescriptor.set;
						        this.formActionSetter = formActionDescriptor.set;
						        this.inputFormActionSetter = inputFormActionDescriptor.set;
						        this.buttonFormActionSetter = buttonFormActionDescriptor.set;
						        this.iframeSandboxSetter = iframeSandboxDescriptor.set;
						        this.htmlElementOnloadSetter = win.Object.getOwnPropertyDescriptor(win.HTMLElement.prototype, 'onload').set;

						        this.nodeTextContentSetter = nodeTextContentDescriptor.set;
						        this.htmlElementInnerTextSetter = htmlElementInnerTextDescriptor.set;
						        this.scriptTextSetter = scriptTextDescriptor.set;
						        this.anchorTextSetter = anchorTextDescriptor.set;
						        this.elementInnerHTMLSetter = elementInnerHTMLDescriptor.set;
						        this.elementOuterHTMLSetter = elementOuterHTMLDescriptor.set;

						        // NOTE: Some browsers (for example, Edge, Internet Explorer 11, Safari) don't support the 'integrity' property.
						        if (scriptIntegrityDescriptor && linkIntegrityDescriptor) {
						            this.scriptIntegritySetter = scriptIntegrityDescriptor.set;
						            this.linkIntegritySetter = linkIntegrityDescriptor.set;
						        }

						        // NOTE: Event properties is located in window prototype only in IE11
						        this.isEventPropsLocatedInProto = win.Window.prototype.hasOwnProperty('onerror');

						        var eventPropsOwner = this.isEventPropsLocatedInProto ? win.Window.prototype : win;

						        this.winOnBeforeUnloadSetter = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onbeforeunload').set;
						        this.winOnPageHideSetter = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onpagehide').set;
						        this.winOnMessageSetter = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onmessage').set;
						        this.winOnErrorSetter = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onerror').set;

						        var winOnUnhandledRejectionDescriptor = win.Object.getOwnPropertyDescriptor(eventPropsOwner, 'onunhandledrejection');

						        if (winOnUnhandledRejectionDescriptor) this.winOnUnhandledRejectionSetter = winOnUnhandledRejectionDescriptor.set;

						        // Getters
						        if (win.WebSocket) {
						            var urlPropDescriptor = win.Object.getOwnPropertyDescriptor(win.WebSocket.prototype, 'url');

						            if (urlPropDescriptor && urlPropDescriptor.get && urlPropDescriptor.configurable) this.webSocketUrlGetter = urlPropDescriptor.get;
						        }

						        this.messageEventOriginGetter = win.Object.getOwnPropertyDescriptor(win.MessageEvent.prototype, 'origin').get;
						        this.htmlCollectionLengthGetter = win.Object.getOwnPropertyDescriptor(win.HTMLCollection.prototype, 'length').get;
						        this.nodeListLengthGetter = win.Object.getOwnPropertyDescriptor(win.NodeList.prototype, 'length').get;
						        this.elementChildElementCountGetter = win.Object.getOwnPropertyDescriptor(win.Element.prototype, 'childElementCount').get;
						        this.inputFilesGetter = win.Object.getOwnPropertyDescriptor(win.HTMLInputElement.prototype, 'files').get;
						        this.styleSheetHrefGetter = win.Object.getOwnPropertyDescriptor(win.StyleSheet.prototype, 'href').get;
						        this.xhrStatusGetter = win.Object.getOwnPropertyDescriptor(win.XMLHttpRequest.prototype, 'status').get;
						        this.objectDataGetter = objectDataDescriptor.get;
						        this.inputTypeGetter = inputTypeDescriptor.get;
						        this.inputValueGetter = inputValueDescriptor.get;
						        this.inputRequiredGetter = inputRequiredDescriptor.get;
						        this.textAreaValueGetter = textAreaValueDescriptor.get;
						        this.imageSrcGetter = imageSrcDescriptor.get;
						        this.scriptSrcGetter = scriptSrcDescriptor.get;
						        this.embedSrcGetter = embedSrcDescriptor.get;
						        this.sourceSrcGetter = sourceSrcDescriptor.get;
						        this.mediaSrcGetter = mediaSrcDescriptor.get;
						        this.inputSrcGetter = inputSrcDescriptor.get;
						        this.frameSrcGetter = frameSrcDescriptor.get;
						        this.iframeSrcGetter = iframeSrcDescriptor.get;
						        this.anchorHrefGetter = anchorHrefDescriptor.get;
						        this.linkHrefGetter = linkHrefDescriptor.get;
						        this.linkRelGetter = linkRelDescriptor.get;
						        this.areaHrefGetter = areaHrefDescriptor.get;
						        this.baseHrefGetter = baseHrefDescriptor.get;
						        this.anchorHostGetter = anchorHostDescriptor.get;
						        this.anchorHostnameGetter = anchorHostnameDescriptor.get;
						        this.anchorPathnameGetter = anchorPathnameDescriptor.get;
						        this.anchorPortGetter = anchorPortDescriptor.get;
						        this.anchorProtocolGetter = anchorProtocolDescriptor.get;
						        this.anchorSearchGetter = anchorSearchDescriptor.get;
						        this.anchorTargetGetter = anchorTargetDescriptor.get;
						        this.formTargetGetter = formTargetDescriptor.get;
						        this.areaTargetGetter = areaTargetDescriptor.get;
						        this.baseTargetGetter = baseTargetDescriptor.get;
						        this.inputFormTargetGetter = inputFormTargetDescriptor.get;
						        this.buttonFormTargetGetter = buttonFormTargetDescriptor.get;
						        this.svgImageHrefGetter = svgImageHrefDescriptor.get;
						        this.svgAnimStrAnimValGetter = svgAnimStrAnimValDescriptor.get;
						        this.svgAnimStrBaseValGetter = svgAnimStrBaseValDescriptor.get;
						        this.inputAutocompleteGetter = inputAutocompleteDescriptor.get;
						        this.formActionGetter = formActionDescriptor.get;
						        this.inputFormActionGetter = inputFormActionDescriptor.get;
						        this.buttonFormActionGetter = buttonFormActionDescriptor.get;
						        this.iframeSandboxGetter = iframeSandboxDescriptor.get;
						        this.contentWindowGetter = win.Object.getOwnPropertyDescriptor(win.HTMLIFrameElement.prototype, 'contentWindow').get;
						        this.contentDocumentGetter = win.Object.getOwnPropertyDescriptor(win.HTMLIFrameElement.prototype, 'contentDocument').get;
						        this.frameContentWindowGetter = win.Object.getOwnPropertyDescriptor(win.HTMLFrameElement.prototype, 'contentWindow').get;

						        this.nodeTextContentGetter = nodeTextContentDescriptor.get;
						        this.htmlElementInnerTextGetter = htmlElementInnerTextDescriptor.get;
						        this.scriptTextGetter = scriptTextDescriptor.get;
						        this.anchorTextGetter = anchorTextDescriptor.get;
						        this.elementInnerHTMLGetter = elementInnerHTMLDescriptor.get;
						        this.elementOuterHTMLGetter = elementOuterHTMLDescriptor.get;

						        this.nodeFirstChildGetter = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'firstChild').get;
						        this.nodeLastChildGetter = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'lastChild').get;
						        this.nodeNextSiblingGetter = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'nextSibling').get;
						        this.nodePrevSiblingGetter = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'previousSibling').get;
						        this.elementFirstElementChildGetter = win.Object.getOwnPropertyDescriptor(win.Element.prototype, 'firstElementChild').get;
						        this.elementLastElementChildGetter = win.Object.getOwnPropertyDescriptor(win.Element.prototype, 'lastElementChild').get;
						        this.elementNextElementSiblingGetter = win.Object.getOwnPropertyDescriptor(win.Element.prototype, 'nextElementSibling').get;
						        this.elementPrevElementSiblingGetter = win.Object.getOwnPropertyDescriptor(win.Element.prototype, 'previousElementSibling').get;

						        var anchorOriginDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLAnchorElement.prototype, 'origin');

						        // NOTE: Some browsers (for example, Edge, Internet Explorer 11, Safari) don't support the 'integrity' property.
						        if (scriptIntegrityDescriptor && linkIntegrityDescriptor) {
						            this.scriptIntegrityGetter = scriptIntegrityDescriptor.get;
						            this.linkIntegrityGetter = linkIntegrityDescriptor.get;
						        }

						        // NOTE: IE and Edge don't support origin property
						        if (anchorOriginDescriptor) this.anchorOriginGetter = anchorOriginDescriptor.get;

						        var cssStyleSheetHrefDescriptor = win.Object.getOwnPropertyDescriptor(win.CSSStyleSheet.prototype, 'href');

						        // NOTE: IE11 doesn't support the 'href' property
						        if (cssStyleSheetHrefDescriptor) this.cssStyleSheetHrefGetter = cssStyleSheetHrefDescriptor.get;

						        var nodeBaseURIDescriptor = win.Object.getOwnPropertyDescriptor(win.Node.prototype, 'baseURI');

						        // NOTE: IE11 doesn't support the 'baseURI' property
						        if (nodeBaseURIDescriptor) this.nodeBaseURIGetter = nodeBaseURIDescriptor.get;

						        // NOTE: The 'attributes' property is located in Node prototype in IE11 only
						        this.elementAttributesPropOwnerName = win.Element.prototype.hasOwnProperty('attributes') ? 'Element' : 'Node';

						        this.elementAttributesGetter = win.Object.getOwnPropertyDescriptor(win[this.elementAttributesPropOwnerName].prototype, 'attributes').get;

						        // NOTE: At present we proxy only the PerformanceNavigationTiming.
						        // Another types of the PerformanceEntry will be fixed later
						        // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry
						        if (win.PerformanceNavigationTiming) this.performanceEntryNameGetter = win.Object.getOwnPropertyDescriptor(win.PerformanceEntry.prototype, 'name').get;

						        var dataPropDescriptor = win.Object.getOwnPropertyDescriptor(win.MessageEvent.prototype, 'data');

						        // NOTE: This condition is used for the Android 6.0 browser
						        if (dataPropDescriptor) this.messageEventDataGetter = dataPropDescriptor.get;

						        var htmlManifestDescriptor = win.Object.getOwnPropertyDescriptor(win.HTMLHtmlElement.prototype, 'manifest');

						        // NOTE: Only the Safari browser supports the 'manifest' property
						        if (htmlManifestDescriptor) {
						            this.htmlManifestGetter = htmlManifestDescriptor.get;
						            this.htmlManifestSetter = htmlManifestDescriptor.set;
						        }

						        if (win.fetch) {
						            this.responseStatusGetter = win.Object.getOwnPropertyDescriptor(win.Response.prototype, 'status').get;
						            this.responseTypeGetter = win.Object.getOwnPropertyDescriptor(win.Response.prototype, 'type').get;
						            this.responseUrlGetter = win.Object.getOwnPropertyDescriptor(win.Response.prototype, 'url').get;
						        }

						        if (win.Promise) {
						            this.promiseThen = win.Promise.prototype.then;
						            this.promiseReject = win.Promise.reject;
						        }

						        var xhrResponseURLDescriptor = win.Object.getOwnPropertyDescriptor(win.XMLHttpRequest.prototype, 'responseURL');

						        // NOTE: IE doesn't support the 'responseURL' property
						        if (xhrResponseURLDescriptor) this.xhrResponseURLGetter = xhrResponseURLDescriptor.get;

						        // NOTE: The 'localStorage' and 'sessionStorage' properties is located in window prototype only in IE11
						        this.isStoragePropsLocatedInProto = win.Window.prototype.hasOwnProperty('localStorage');

						        var storagesPropsOwner = this.getStoragesPropsOwner(win);

						        this.winLocalStorageGetter = win.Object.getOwnPropertyDescriptor(storagesPropsOwner, 'localStorage').get;
						        this.winSessionStorageGetter = win.Object.getOwnPropertyDescriptor(storagesPropsOwner, 'sessionStorage').get;

						        // MutationRecord
						        this.mutationRecordNextSiblingGetter = win.Object.getOwnPropertyDescriptor(win.MutationRecord.prototype, 'nextSibling').get;
						        this.mutationRecordPrevSiblingGetter = win.Object.getOwnPropertyDescriptor(win.MutationRecord.prototype, 'previousSibling').get;

						        // Stylesheets
						        this.styleGetPropertyValue = win.CSSStyleDeclaration.prototype.getPropertyValue;
						        this.styleSetProperty = win.CSSStyleDeclaration.prototype.setProperty;
						        this.styleRemoveProperty = win.CSSStyleDeclaration.prototype.removeProperty;

						        // Console
						        this.console = win.console;

						        if (this.console) {
						            this.consoleMeths = {
						                log: win.console.log,
						                warn: win.console.warn,
						                error: win.console.error,
						                info: win.console.info
						            };
						        }

						        // DOMTokenList
						        this.tokenListAdd = win.DOMTokenList.prototype.add;
						        this.tokenListRemove = win.DOMTokenList.prototype.remove;
						        this.tokenListReplace = win.DOMTokenList.prototype.replace;
						        this.tokenListSupports = win.DOMTokenList.prototype.supports;
						        this.tokenListToggle = win.DOMTokenList.prototype.toggle;
						        this.tokenListContains = win.DOMTokenList.prototype.contains;

						        this.refreshClasses(win);
						    };

						    NativeMethods.prototype.refreshClasses = function refreshClasses(win) {
						        this.windowClass = win.Window;
						        this.documentClass = win.Document;
						        this.locationClass = win.Location;
						        this.elementClass = win.Element;
						        this.svgElementClass = win.SVGElement;
						        this.Worker = win.Worker;
						        this.ArrayBuffer = win.ArrayBuffer;
						        this.Uint8Array = win.Uint8Array;
						        this.DataView = win.DataView;
						        this.Blob = win.Blob;
						        this.XMLHttpRequest = win.XMLHttpRequest;
						        this.Image = win.Image;
						        this.Function = win.Function;
						        this.functionToString = win.Function.toString;
						        this.FontFace = win.FontFace;
						        this.StorageEvent = win.StorageEvent;
						        this.MutationObserver = win.MutationObserver;
						        this.EventSource = win.EventSource;
						        this.Proxy = win.Proxy;
						        this.WebSocket = win.WebSocket;
						        this.HTMLCollection = win.HTMLCollection;
						        this.NodeList = win.NodeList;
						        this.Node = win.Node;

						        if (win.Proxy) this.Proxy = win.Proxy;

						        if (win.DataTransfer) this.DataTransfer = win.DataTransfer;

						        if (win.DataTransferItemList) this.DataTransferItemList = win.DataTransferItemList;

						        if (win.DataTransferItem) this.DataTransferItem = win.DataTransferItem;

						        if (win.FileList) this.FileList = win.FileList;
						    };

						    NativeMethods.prototype.refreshElectronMeths = function refreshElectronMeths(vmModule) {
						        if (this.createScript && this.createScript.toString() !== vmModule.createScript.toString()) return false;

						        this.createScript = vmModule.createScript;
						        this.runInDebugContext = vmModule.runInDebugContext;
						        this.runInContext = vmModule.runInContext;
						        this.runInNewContext = vmModule.runInNewContext;
						        this.runInThisContext = vmModule.runInThisContext;

						        return true;
						    };

						    NativeMethods._ensureDocumentMethodRestore = function _ensureDocumentMethodRestore(document, prototype, methodName, savedNativeMethod) {
						        prototype[methodName] = savedNativeMethod;

						        if (document[methodName] !== prototype[methodName]) document[methodName] = savedNativeMethod;
						    };

						    NativeMethods.prototype.restoreDocumentMeths = function restoreDocumentMeths(window, document) {
						        var docPrototype = window.Document.prototype;

						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createDocumentFragment', this.createDocumentFragment);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createElement', this.createElement);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createElementNS', this.createElementNS);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'elementFromPoint', this.elementFromPoint);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'caretRangeFromPoint', this.caretRangeFromPoint);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'caretPositionFromPoint', this.caretPositionFromPoint);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'getElementById', this.getElementById);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'getElementsByClassName', this.getElementsByClassName);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'getElementsByName', this.getElementsByName);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'getElementsByTagName', this.getElementsByTagName);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'querySelector', this.querySelector);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'querySelectorAll', this.querySelectorAll);

						        // Event
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'addEventListener', this.documentAddEventListener);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'removeEventListener', this.documentRemoveEventListener);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createEvent', this.documentCreateEvent);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createTouch', this.documentCreateTouch);
						        NativeMethods._ensureDocumentMethodRestore(document, docPrototype, 'createTouchList', this.documentCreateTouchList);

						        NativeMethods._ensureDocumentMethodRestore(document, window[this.documentOpenPropOwnerName].prototype, 'open', this.documentOpen);
						        NativeMethods._ensureDocumentMethodRestore(document, window[this.documentClosePropOwnerName].prototype, 'close', this.documentClose);
						        NativeMethods._ensureDocumentMethodRestore(document, window[this.documentWritePropOwnerName].prototype, 'write', this.documentWrite);
						        NativeMethods._ensureDocumentMethodRestore(document, window[this.documentWriteLnPropOwnerName].prototype, 'writeln', this.documentWriteLn);
						    };

						    NativeMethods.prototype.refreshIfNecessary = function refreshIfNecessary(doc, win) {
						        var _this2 = this;

						        var tryToExecuteCode = function tryToExecuteCode(func) {
						            try {
						                return func();
						            } catch (e) {
						                return true;
						            }
						        };

						        var needToRefreshDocumentMethods = tryToExecuteCode(function () {
						            return !doc.createElement || _this2.createElement.toString() === document.createElement.toString();
						        });

						        var needToRefreshElementMethods = tryToExecuteCode(function () {
						            var nativeElement = _this2.createElement.call(doc, 'div');

						            return nativeElement.getAttribute.toString() === _this2.getAttribute.toString();
						        });

						        var needToRefreshWindowMethods = tryToExecuteCode(function () {
						            _this2.setTimeout.call(win, function () {
						                return void 0;
						            }, 0);

						            return window.XMLHttpRequest.prototype.open.toString() === _this2.xhrOpen.toString();
						        });

						        // NOTE: T173709
						        if (needToRefreshDocumentMethods) this.refreshDocumentMeths(doc, win);

						        if (needToRefreshElementMethods) this.refreshElementMeths(doc, win);

						        // NOTE: T239109
						        if (needToRefreshWindowMethods) this.refreshWindowMeths(win);
						    };

						    return NativeMethods;
						}();

						exports.default = new NativeMethods();
						module.exports = exports['default'];
					},
					"node": {
						"attributes": {
							"index.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.assignAttributes = assignAttributes;
								exports.getAttributes = getAttributes;
								exports.refreshAttributesWrapper = refreshAttributesWrapper;

								var _wrapper = require('./wrapper');

								var _wrapper2 = _interopRequireDefault(_wrapper);

								var _dom = require('../../../utils/dom');

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _dom2 = require('../../../../processing/dom');

								var _dom3 = _interopRequireDefault(_dom2);

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								var ATTRIBUTES_WRAPPER = 'hammerhead|element-attribute-wrappers';

								function cleanAttributes(wrapper) {
								    if (wrapper.length) {
								        for (var i = 0; i < wrapper.length; i++) {
								            delete wrapper[wrapper[i].name];
								            delete wrapper[i];
								        }
								    }
								}

								function assignAttributes(wrapper, attributes) {
								    var length = 0;
								    var properties = {};

								    for (var _i2 = 0; _i2 < attributes.length; _i2++) {
								        var attr = attributes[_i2];
								        if (!(0, _dom.isHammerheadAttr)(attr.name)) {
								            var storedAttr = attributes[_dom3.default.getStoredAttrName(attr.name)];

								            if (storedAttr) {
								                // eslint-disable-next-line no-restricted-properties
								                if (_dom3.default.isAddedAutocompleteAttr(attr.name, storedAttr.value)) continue;

								                attr = _nativeMethods2.default.cloneNode.call(attr);

								                // eslint-disable-next-line no-restricted-properties
								                attr.value = storedAttr.value;
								            }

								            properties[attr.name] = { value: attr, configurable: true };
								            properties[length] = { value: attr, configurable: true };
								            length++;
								        }
								    }

								    properties['length'] = { value: length, configurable: true };

								    _nativeMethods2.default.objectDefineProperties.call(window.Object, wrapper, properties);
								}

								function getAttributes(el) {
								    if (el[ATTRIBUTES_WRAPPER]) {
								        refreshAttributesWrapper(el);

								        return el[ATTRIBUTES_WRAPPER];
								    }

								    var attributes = _nativeMethods2.default.elementAttributesGetter.call(el);

								    if (!attributes) return attributes;

								    for (var _i4 = 0; _i4 < attributes.length; _i4++) {
								        var attr = attributes[_i4];
								        if ((0, _dom.isHammerheadAttr)(attr.name)) {
								            _wrapper2.default.prototype = attributes;

								            el[ATTRIBUTES_WRAPPER] = new _wrapper2.default(el, attributes);

								            return el[ATTRIBUTES_WRAPPER];
								        }
								    }

								    return attributes;
								}

								function refreshAttributesWrapper(el) {
								    var attributesWrapper = el[ATTRIBUTES_WRAPPER];

								    if (attributesWrapper) {
								        cleanAttributes(attributesWrapper);
								        assignAttributes(attributesWrapper, _nativeMethods2.default.elementAttributesGetter.call(el));
								    }
								}
							},
							"wrapper.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _fnBind = require('../../../utils/fn-bind');

								var _fnBind2 = _interopRequireDefault(_fnBind);

								var _featureDetection = require('../../../utils/feature-detection');

								var _index = require('./index');

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								var ATTRIBUTES_METHODS = ['setNamedItem', 'setNamedItemNS', 'removeNamedItem', 'removeNamedItemNS', 'getNamedItem', 'getNamedItemNS'];

								function createMethodWrapper(el, attributes, method) {
								    return function () {
								        var result = attributes[method].apply(attributes, arguments);

								        (0, _index.refreshAttributesWrapper)(el);

								        return result;
								    };
								}

								var AttributesWrapper = function AttributesWrapper(el, attributes) {
								    var _this = this;

								    _classCallCheck(this, AttributesWrapper);

								    (0, _index.assignAttributes)(this, attributes);

								    this.item = function (index) {
								        return _this[index];
								    };

								    for (var field in attributes) {
								        if (typeof this[field] === 'function' && field !== 'item') {
								            this[field] = ATTRIBUTES_METHODS.indexOf(field) !== -1 ? createMethodWrapper(el, attributes, field) : (0, _fnBind2.default)(attributes[field], attributes);
								        }
								    }

								    if (_featureDetection.attrGetNamedItemIsNotEnumerable) this['getNamedItem'] = createMethodWrapper(el, attributes, 'getNamedItem');
								};

								exports.default = AttributesWrapper;
								module.exports = exports['default'];
							}
						},
						"document": {
							"index.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _base = require('../../base');

								var _base2 = _interopRequireDefault(_base);

								var _iframe = require('../../iframe');

								var _iframe2 = _interopRequireDefault(_iframe);

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _domProcessor = require('../../../dom-processor');

								var _domProcessor2 = _interopRequireDefault(_domProcessor);

								var _url = require('../../../utils/url');

								var urlUtils = _interopRequireWildcard(_url);

								var _settings = require('../../../settings');

								var _settings2 = _interopRequireDefault(_settings);

								var _browser = require('../../../utils/browser');

								var _dom = require('../../../utils/dom');

								var _writer = require('./writer');

								var _writer2 = _interopRequireDefault(_writer);

								var _shadowUi = require('./../../shadow-ui');

								var _shadowUi2 = _interopRequireDefault(_shadowUi);

								var _internalProperties = require('../../../../processing/dom/internal-properties');

								var _internalProperties2 = _interopRequireDefault(_internalProperties);

								var _location = require('../../code-instrumentation/location');

								var _location2 = _interopRequireDefault(_location);

								var _propertyOverriding = require('../../../utils/property-overriding');

								function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

								function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

								var DocumentSandbox = function (_SandboxBase) {
								    _inherits(DocumentSandbox, _SandboxBase);

								    function DocumentSandbox(nodeSandbox, shadowUI, cookieSandbox) {
								        _classCallCheck(this, DocumentSandbox);

								        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

								        _this.nodeSandbox = nodeSandbox;
								        _this.documentWriter = null;
								        _this.shadowUI = shadowUI;
								        _this.cookieSandbox = cookieSandbox;
								        return _this;
								    }

								    DocumentSandbox.forceProxySrcForImageIfNecessary = function forceProxySrcForImageIfNecessary(element) {
								        if ((0, _dom.isImgElement)(element) && _settings2.default.get().forceProxySrcForImage) element[_internalProperties2.default.forceProxySrcForImage] = true;
								    };

								    DocumentSandbox._isDocumentInDesignMode = function _isDocumentInDesignMode(doc) {
								        return doc.designMode === 'on';
								    };

								    DocumentSandbox.prototype._isUninitializedIframeWithoutSrc = function _isUninitializedIframeWithoutSrc(win) {
								        var frameElement = (0, _dom.getFrameElement)(win);

								        return win !== win.top && frameElement && (0, _dom.isIframeWithoutSrc)(frameElement) && !_iframe2.default.isIframeInitialized(frameElement);
								    };

								    DocumentSandbox.prototype._beforeDocumentCleaned = function _beforeDocumentCleaned() {
								        this.nodeSandbox.mutation.onBeforeDocumentCleaned({ document: this.document });
								    };

								    DocumentSandbox.prototype._onDocumentClosed = function _onDocumentClosed() {
								        this.nodeSandbox.mutation.onDocumentClosed({ document: this.document });
								    };

								    DocumentSandbox._shouldEmitDocumentCleanedEvents = function _shouldEmitDocumentCleanedEvents(doc) {
								        if (_browser.isIE) {
								            if (doc.readyState !== 'loading') return true;

								            var _window = doc.defaultView;

								            if (_window[_internalProperties2.default.documentWasCleaned]) return false;

								            var iframe = _window && (0, _dom.getFrameElement)(_window);

								            return iframe && (0, _dom.isIframeWithoutSrc)(iframe);
								        }

								        return doc.readyState !== 'loading' && doc.readyState !== 'uninitialized';
								    };

								    DocumentSandbox.prototype._performDocumentWrite = function _performDocumentWrite(args, ln) {
								        var shouldEmitEvents = DocumentSandbox._shouldEmitDocumentCleanedEvents(this.document);

								        if (shouldEmitEvents) this._beforeDocumentCleaned();

								        var result = this.documentWriter.write(args, ln, shouldEmitEvents);

								        // NOTE: B234357
								        if (!shouldEmitEvents) this.nodeSandbox.processNodes(null, this.document);

								        return result;
								    };

								    DocumentSandbox.prototype._needToUpdateDocumentWriter = function _needToUpdateDocumentWriter(window, document) {
								        try {
								            return !this.documentWriter || this.window !== window || this.document !== document;
								        } catch (e) {
								            return true;
								        }
								    };

								    DocumentSandbox._definePropertyDescriptor = function _definePropertyDescriptor(owner, childOfOwner, prop, overriddenDescriptor) {
								        // NOTE: The 'URL', 'domain' and 'referrer' properties are non configurable in IE and Edge
								        if (!overriddenDescriptor.configurable) {
								            // NOTE: property doesn't redefined yet
								            if (!childOfOwner.hasOwnProperty(prop)) _nativeMethods2.default.objectDefineProperty.call(window.Object, childOfOwner, prop, overriddenDescriptor);
								        } else _nativeMethods2.default.objectDefineProperty.call(window.Object, owner, prop, overriddenDescriptor);
								    };

								    DocumentSandbox.prototype.iframeDocumentOpen = function iframeDocumentOpen(window, document, args) {
								        var iframe = window.frameElement;
								        var result = _nativeMethods2.default.documentOpen.apply(document, args);

								        _nativeMethods2.default.objectDefineProperty(window, _internalProperties2.default.documentWasCleaned, { value: true, configurable: true });
								        this.nodeSandbox.iframeSandbox.onIframeBeganToRun(iframe);

								        return result;
								    };

								    DocumentSandbox._ensureDocumentMethodOverride = function _ensureDocumentMethodOverride(document, overridenMethods, methodName) {
								        if (document[methodName] !== overridenMethods[methodName]) document[methodName] = overridenMethods[methodName];
								    };

								    DocumentSandbox.prototype.attach = function attach(window, document) {
								        var _this2 = this;

								        if (this._needToUpdateDocumentWriter(window, document)) {
								            this.documentWriter = new _writer2.default(window, document);

								            this.nodeSandbox.mutation.on(this.nodeSandbox.mutation.BEFORE_DOCUMENT_CLEANED_EVENT, function () {
								                _this2.documentWriter = new _writer2.default(window, document);
								            });
								        }

								        _SandboxBase.prototype.attach.call(this, window, document);

								        var documentSandbox = this;
								        var docPrototype = window.Document.prototype;

								        var overridenMethods = {
								            open: function open() {
								                var isUninitializedIframe = documentSandbox._isUninitializedIframeWithoutSrc(window);

								                if (!isUninitializedIframe) documentSandbox._beforeDocumentCleaned();

								                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
								                    args[_key] = arguments[_key];
								                }

								                if (_browser.isIE) return window.parent[_internalProperties2.default.hammerhead].sandbox.node.doc.iframeDocumentOpen(window, this, args);

								                var result = _nativeMethods2.default.documentOpen.apply(this, args);

								                // NOTE: Chrome does not remove the "%hammerhead%" property from window
								                // after document.open call
								                var objectDefinePropertyFn = window[_internalProperties2.default.hammerhead] ? window[_internalProperties2.default.hammerhead].nativeMethods.objectDefineProperty : window.Object.defineProperty;

								                objectDefinePropertyFn(window, _internalProperties2.default.documentWasCleaned, { value: true, configurable: true });

								                if (!isUninitializedIframe) documentSandbox.nodeSandbox.mutation.onDocumentCleaned({ window: window, document: this });else
								                    // NOTE: If iframe initialization is in progress, we need to override the document.write and document.open
								                    // methods once again, because they were cleaned after the native document.open method call.
								                    documentSandbox.attach(window, this);

								                return result;
								            },

								            close: function close() {
								                // NOTE: IE11 raise the "load" event only when the document.close method is called. We need to
								                // restore the overriden document.open and document.write methods before Hammerhead injection, if the
								                // window is not initialized.
								                if (_browser.isIE && !_iframe2.default.isWindowInited(window)) _nativeMethods2.default.restoreDocumentMeths(window, this);

								                // NOTE: IE doesn't run scripts in iframe if iframe.documentContent.designMode equals 'on' (GH-871)
								                if (DocumentSandbox._isDocumentInDesignMode(this)) _shadowUi2.default.removeSelfRemovingScripts(this);

								                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
								                    args[_key2] = arguments[_key2];
								                }

								                var result = _nativeMethods2.default.documentClose.apply(this, args);

								                if (!documentSandbox._isUninitializedIframeWithoutSrc(window)) documentSandbox._onDocumentClosed();

								                var iframe = (0, _dom.getFrameElement)(window);

								                // NOTE: Firefox misses the Hammerhead instance after the iframe.contentDocument.close function calling (GH-1821)
								                if (iframe) documentSandbox.nodeSandbox.iframeSandbox.onIframeBeganToRun(iframe);

								                return result;
								            },

								            write: function write() {
								                return documentSandbox._performDocumentWrite(arguments);
								            },

								            writeln: function writeln() {
								                return documentSandbox._performDocumentWrite(arguments, true);
								            }
								        };

								        window[_nativeMethods2.default.documentOpenPropOwnerName].prototype.open = overridenMethods.open;
								        window[_nativeMethods2.default.documentClosePropOwnerName].prototype.close = overridenMethods.close;
								        window[_nativeMethods2.default.documentWritePropOwnerName].prototype.write = overridenMethods.write;
								        window[_nativeMethods2.default.documentWriteLnPropOwnerName].prototype.writeln = overridenMethods.writeln;

								        DocumentSandbox._ensureDocumentMethodOverride(document, overridenMethods, 'open');
								        DocumentSandbox._ensureDocumentMethodOverride(document, overridenMethods, 'close');
								        DocumentSandbox._ensureDocumentMethodOverride(document, overridenMethods, 'write');
								        DocumentSandbox._ensureDocumentMethodOverride(document, overridenMethods, 'writeln');

								        if (document.open !== overridenMethods.open) document.open = overridenMethods.open;

								        docPrototype.createElement = function () {
								            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
								                args[_key3] = arguments[_key3];
								            }

								            var el = _nativeMethods2.default.createElement.apply(this, args);

								            DocumentSandbox.forceProxySrcForImageIfNecessary(el);
								            _domProcessor2.default.processElement(el, urlUtils.convertToProxyUrl);
								            documentSandbox.nodeSandbox.processNodes(el);

								            return el;
								        };

								        docPrototype.createElementNS = function () {
								            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
								                args[_key4] = arguments[_key4];
								            }

								            var el = _nativeMethods2.default.createElementNS.apply(this, args);

								            DocumentSandbox.forceProxySrcForImageIfNecessary(el);
								            _domProcessor2.default.processElement(el, urlUtils.convertToProxyUrl);
								            documentSandbox.nodeSandbox.processNodes(el);

								            return el;
								        };

								        docPrototype.createDocumentFragment = function () {
								            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
								                args[_key5] = arguments[_key5];
								            }

								            var fragment = _nativeMethods2.default.createDocumentFragment.apply(this, args);

								            documentSandbox.nodeSandbox.processNodes(fragment);

								            return fragment;
								        };

								        var htmlDocPrototype = window.HTMLDocument.prototype;
								        var storedDomain = '';

								        if (_nativeMethods2.default.documentDocumentURIGetter) {
								            (0, _propertyOverriding.overrideDescriptor)(docPrototype, 'documentURI', {
								                getter: function getter() {
								                    var documentURI = _nativeMethods2.default.documentDocumentURIGetter.call(this);
								                    var parsedProxyUrl = urlUtils.parseProxyUrl(documentURI);

								                    return parsedProxyUrl ? parsedProxyUrl.destUrl : documentURI;
								                }
								            });
								        }

								        var referrerOverriddenDescriptor = (0, _propertyOverriding.createOverriddenDescriptor)(docPrototype, 'referrer', {
								            getter: function getter() {
								                var referrer = _nativeMethods2.default.documentReferrerGetter.call(this);
								                var parsedProxyUrl = urlUtils.parseProxyUrl(referrer);

								                return parsedProxyUrl ? parsedProxyUrl.destUrl : '';
								            }
								        });

								        DocumentSandbox._definePropertyDescriptor(docPrototype, htmlDocPrototype, 'referrer', referrerOverriddenDescriptor);

								        var urlOverriddenDescriptor = (0, _propertyOverriding.createOverriddenDescriptor)(docPrototype, 'URL', {
								            getter: function getter() {
								                // eslint-disable-next-line no-restricted-properties
								                return _location2.default.getLocationWrapper(this).href;
								            }
								        });

								        DocumentSandbox._definePropertyDescriptor(docPrototype, htmlDocPrototype, 'URL', urlOverriddenDescriptor);

								        var domainPropertyOwner = _nativeMethods2.default.objectHasOwnProperty.call(docPrototype, 'domain') ? docPrototype : htmlDocPrototype;

								        var domainOverriddenDescriptor = (0, _propertyOverriding.createOverriddenDescriptor)(domainPropertyOwner, 'domain', {
								            getter: function getter() {
								                // eslint-disable-next-line no-restricted-properties
								                return storedDomain || _location2.default.getLocationWrapper(window).hostname;
								            },
								            setter: function setter(value) {
								                storedDomain = value;
								            }
								        });

								        DocumentSandbox._definePropertyDescriptor(domainPropertyOwner, htmlDocPrototype, 'domain', domainOverriddenDescriptor);

								        (0, _propertyOverriding.overrideDescriptor)(docPrototype, 'styleSheets', {
								            getter: function getter() {
								                var styleSheets = _nativeMethods2.default.documentStyleSheetsGetter.call(this);

								                return documentSandbox.shadowUI._filterStyleSheetList(styleSheets, styleSheets.length);
								            }
								        });

								        var documentCookiePropOwnerPrototype = window[_nativeMethods2.default.documentCookiePropOwnerName].prototype;

								        (0, _propertyOverriding.overrideDescriptor)(documentCookiePropOwnerPrototype, 'cookie', {
								            getter: function getter() {
								                return documentSandbox.cookieSandbox.getCookie();
								            },
								            setter: function setter(value) {
								                documentSandbox.cookieSandbox.setCookie(this, String(value));
								            }
								        });

								        (0, _propertyOverriding.overrideDescriptor)(docPrototype, 'activeElement', {
								            getter: function getter() {
								                var activeElement = _nativeMethods2.default.documentActiveElementGetter.call(this);

								                if (activeElement && (0, _dom.isShadowUIElement)(activeElement)) return documentSandbox.shadowUI.getLastActiveElement() || this.body;

								                return activeElement;
								            }
								        });

								        var documentScriptsPropOwnerPrototype = window[_nativeMethods2.default.documentScriptsPropOwnerName].prototype;

								        (0, _propertyOverriding.overrideDescriptor)(documentScriptsPropOwnerPrototype, 'scripts', {
								            getter: function getter() {
								                var scripts = _nativeMethods2.default.documentScriptsGetter.call(this);
								                var length = _nativeMethods2.default.htmlCollectionLengthGetter.call(scripts);

								                return documentSandbox.shadowUI._filterNodeList(scripts, length);
								            }
								        });
								    };

								    return DocumentSandbox;
								}(_base2.default);

								exports.default = DocumentSandbox;
								module.exports = exports['default'];
							},
							"writer.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _html = require('../../../utils/html');

								var htmlUtils = _interopRequireWildcard(_html);

								var _dom = require('../../../utils/dom');

								var _browser = require('../../../utils/browser');

								var _script = require('../../../../processing/script');

								var _style = require('../../../../processing/style');

								var _style2 = _interopRequireDefault(_style);

								var _url = require('../../../utils/url');

								var _internalProperties = require('../../../../processing/dom/internal-properties');

								var _internalProperties2 = _interopRequireDefault(_internalProperties);

								var _createSelfRemovingScript = require('../../../../utils/create-self-removing-script');

								var _createSelfRemovingScript2 = _interopRequireDefault(_createSelfRemovingScript);

								function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								var BEGIN_MARKER_TAG_NAME = 'hammerhead_write_marker_begin';
								var END_MARKER_TAG_NAME = 'hammerhead_write_marker_end';
								var BEGIN_MARKER_MARKUP = '<' + BEGIN_MARKER_TAG_NAME + '></' + BEGIN_MARKER_TAG_NAME + '>';
								var END_MARKER_MARKUP = '<' + END_MARKER_TAG_NAME + '></' + END_MARKER_TAG_NAME + '>';
								var BEGIN_REMOVE_RE = new RegExp('^[\\S\\s]*' + BEGIN_MARKER_MARKUP, 'g');
								var END_REMOVE_RE = new RegExp(END_MARKER_MARKUP + '[\\S\\s]*$', 'g');
								var REMOVE_OPENING_TAG_RE = /^<[^>]+>/g;
								var REMOVE_CLOSING_TAG_RE = /<\/[^<>]+>$/g;
								var PENDING_RE = /<\/?(?:[A-Za-z][^>]*)?$/g;
								var UNCLOSED_ELEMENT_FLAG = 'hammerhead|unclosed-element-flag';

								var ON_WINDOW_RECREATION_SCRIPT_TEMPLATE = (0, _createSelfRemovingScript2.default)('\n    var hammerhead = window["' + _internalProperties2.default.hammerhead + '"];\n    var sandbox    = hammerhead && hammerhead.sandbox;\n\n    if (!sandbox) {\n        try {\n            sandbox = window.parent["' + _internalProperties2.default.hammerhead + '"].get(\'./sandbox/backup\').get(window);\n        } catch(e) {}\n    }\n\n    if (sandbox) {\n        Object.defineProperty(window, "' + _internalProperties2.default.documentWasCleaned + '", { value: true, configurable: true });\n        \n        sandbox.node.mutation.onDocumentCleaned({\n            window: window,\n            document: document\n        });\n\n        /* NOTE: B234357 */\n        sandbox.node.processNodes(null, document);\n    }\n');

								var DocumentWriter = function () {
								    function DocumentWriter(window, document) {
								        _classCallCheck(this, DocumentWriter);

								        this.window = window;
								        this.document = document;
								        this.pending = '';
								        this.parentTagChain = [];
								        this.isBeginMarkerInDOM = false;
								        this.isEndMarkerInDOM = false;
								        this.isClosingContentEl = false;
								        this.isNonClosedComment = false;
								        this.isAddContentToEl = false;
								        this.contentForProcessing = '';
								        this.nonClosedEl = null;

								        this.cachedStartsWithClosingTagRegExps = {};
								    }

								    DocumentWriter.prototype._cutPending = function _cutPending(htmlChunk) {
								        var match = htmlChunk.match(PENDING_RE);

								        this.pending = match ? match[0] : '';

								        return this.pending ? htmlChunk.substring(0, htmlChunk.length - this.pending.length) : htmlChunk;
								    };

								    DocumentWriter.prototype._wrapHtmlChunk = function _wrapHtmlChunk(htmlChunk) {
								        var parentTagChainMarkup = this.parentTagChain.length ? '<' + this.parentTagChain.join('><') + '>' : '';

								        if (this.isNonClosedComment) parentTagChainMarkup += '<!--';

								        return parentTagChainMarkup + BEGIN_MARKER_MARKUP + htmlChunk + END_MARKER_MARKUP;
								    };

								    DocumentWriter.prototype._unwrapHtmlChunk = function _unwrapHtmlChunk(htmlChunk) {
								        if (!htmlChunk) return htmlChunk;

								        htmlChunk = htmlChunk.replace(BEGIN_REMOVE_RE, '').replace(END_REMOVE_RE, '');

								        if (!this.isBeginMarkerInDOM) htmlChunk = this.isNonClosedComment ? htmlChunk.slice(4) : htmlChunk.replace(REMOVE_OPENING_TAG_RE, '');

								        if (!this.isEndMarkerInDOM) htmlChunk = this.isNonClosedComment ? htmlChunk.slice(0, -3) : htmlChunk.replace(REMOVE_CLOSING_TAG_RE, '');

								        if (!this.isBeginMarkerInDOM && this.isEndMarkerInDOM) this.isNonClosedComment = false;

								        return htmlChunk;
								    };

								    DocumentWriter._setUnclosedElementFlag = function _setUnclosedElementFlag(el) {
								        if ((0, _dom.isScriptElement)(el) || (0, _dom.isStyleElement)(el)) el[UNCLOSED_ELEMENT_FLAG] = true;
								    };

								    DocumentWriter.hasUnclosedElementFlag = function hasUnclosedElementFlag(el) {
								        return !!el[UNCLOSED_ELEMENT_FLAG];
								    };

								    DocumentWriter._searchBeginMarker = function _searchBeginMarker(container) {
								        var beginMarker = _nativeMethods2.default.elementQuerySelector.call(container, BEGIN_MARKER_TAG_NAME);

								        if (beginMarker) return beginMarker;

								        beginMarker = container;

								        while (_nativeMethods2.default.elementFirstElementChildGetter.call(beginMarker)) {
								            beginMarker = _nativeMethods2.default.elementFirstElementChildGetter.call(beginMarker);
								        }if (_nativeMethods2.default.nodeFirstChildGetter.call(beginMarker.parentNode) !== beginMarker) beginMarker = _nativeMethods2.default.nodeFirstChildGetter.call(beginMarker.parentNode);else if ((0, _dom.isCommentNode)(_nativeMethods2.default.nodeFirstChildGetter.call(beginMarker))) beginMarker = _nativeMethods2.default.nodeFirstChildGetter.call(beginMarker);

								        return beginMarker;
								    };

								    DocumentWriter._searchEndMarker = function _searchEndMarker(container) {
								        var endMarker = _nativeMethods2.default.elementQuerySelector.call(container, END_MARKER_TAG_NAME);

								        if (endMarker) return endMarker;

								        endMarker = container;

								        while (_nativeMethods2.default.elementLastElementChildGetter.call(endMarker)) {
								            endMarker = _nativeMethods2.default.elementLastElementChildGetter.call(endMarker);
								        }if (_nativeMethods2.default.nodeLastChildGetter.call(endMarker.parentNode) !== endMarker) endMarker = _nativeMethods2.default.nodeLastChildGetter.call(endMarker.parentNode);else if ((0, _dom.isCommentNode)(_nativeMethods2.default.nodeLastChildGetter.call(endMarker))) endMarker = _nativeMethods2.default.nodeLastChildGetter.call(endMarker);

								        return endMarker;
								    };

								    DocumentWriter.prototype._updateParentTagChain = function _updateParentTagChain(container, endMarker) {
								        var endMarkerParent = (0, _dom.getTagName)(endMarker) !== END_MARKER_TAG_NAME ? endMarker : endMarker.parentNode;

								        if ((0, _dom.isCommentNode)(endMarker)) {
								            this.isNonClosedComment = true;
								            endMarkerParent = endMarker.parentNode;
								        }

								        this.parentTagChain = [];

								        while (endMarkerParent !== container) {
								            this.parentTagChain.unshift((0, _dom.getTagName)(endMarkerParent));
								            endMarkerParent = endMarkerParent.parentNode;
								        }
								    };

								    DocumentWriter.prototype._processBeginMarkerInContent = function _processBeginMarkerInContent(beginMarker) {
								        var elWithContent = beginMarker;

								        DocumentWriter._setUnclosedElementFlag(elWithContent);

								        if (this.isClosingContentEl && ((0, _dom.isScriptElement)(elWithContent) || (0, _dom.isStyleElement)(elWithContent))) {
								            this.contentForProcessing = _nativeMethods2.default.nodeTextContentGetter.call(this.nonClosedEl) + _nativeMethods2.default.nodeTextContentGetter.call(elWithContent).replace(BEGIN_REMOVE_RE, '');

								            _nativeMethods2.default.nodeTextContentSetter.call(elWithContent, '');
								        } else {
								            var textContent = _nativeMethods2.default.nodeTextContentGetter.call(elWithContent);

								            _nativeMethods2.default.nodeTextContentSetter.call(elWithContent, textContent.replace(BEGIN_REMOVE_RE, ''));
								        }

								        beginMarker = _nativeMethods2.default.createElement.call(document, BEGIN_MARKER_TAG_NAME);

								        _nativeMethods2.default.insertBefore.call(elWithContent.parentNode, beginMarker, elWithContent);
								    };

								    DocumentWriter._createStartsWithClosingTagRegExp = function _createStartsWithClosingTagRegExp(tagName) {
								        var regExpStrParts = [tagName.charAt(tagName.length - 1), '?'];

								        for (var i = tagName.length - 2; i > -1; i--) {
								            regExpStrParts.unshift('(?:', tagName.charAt(i));
								            regExpStrParts.push(')?');
								        }

								        regExpStrParts.unshift('^</');
								        regExpStrParts.push('$');

								        return new RegExp(regExpStrParts.join(''), 'i');
								    };

								    DocumentWriter.prototype._getStartsWithClosingTagRegExp = function _getStartsWithClosingTagRegExp(tagName) {
								        tagName = tagName.toLowerCase();

								        if (!this.cachedStartsWithClosingTagRegExps[tagName]) this.cachedStartsWithClosingTagRegExps[tagName] = DocumentWriter._createStartsWithClosingTagRegExp(tagName);

								        return this.cachedStartsWithClosingTagRegExps[tagName];
								    };

								    DocumentWriter.prototype._processEndMarkerInContent = function _processEndMarkerInContent(endMarker) {
								        var elWithContent = endMarker;
								        var textContent = _nativeMethods2.default.nodeTextContentGetter.call(elWithContent);

								        DocumentWriter._setUnclosedElementFlag(elWithContent);

								        _nativeMethods2.default.nodeTextContentSetter.call(elWithContent, textContent.replace(END_REMOVE_RE, ''));

								        endMarker = _nativeMethods2.default.createElement.call(document, END_MARKER_TAG_NAME);

								        if (this.pending) {
								            var startsWithClosingTagRegExp = this._getStartsWithClosingTagRegExp(elWithContent.tagName);
								            var isPendingStartsWithClosingTagPart = startsWithClosingTagRegExp.test(this.pending);

								            if (!isPendingStartsWithClosingTagPart) {
								                var newContent = _nativeMethods2.default.nodeTextContentGetter.call(elWithContent) + this.pending;

								                _nativeMethods2.default.nodeTextContentSetter.call(elWithContent, newContent);

								                this.pending = '';
								            }
								        }

								        _nativeMethods2.default.appendChild.call(elWithContent.parentNode, endMarker);
								    };

								    DocumentWriter._addOnDocumentRecreationScript = function _addOnDocumentRecreationScript(endMarker) {
								        var span = _nativeMethods2.default.createElement.call(endMarker.ownerDocument, 'span');

								        _nativeMethods2.default.insertBefore.call(endMarker.parentNode, span, endMarker);
								        _nativeMethods2.default.elementOuterHTMLSetter.call(span, ON_WINDOW_RECREATION_SCRIPT_TEMPLATE);
								    };

								    DocumentWriter.prototype._prepareDom = function _prepareDom(container, isDocumentCleaned) {
								        var beginMarker = DocumentWriter._searchBeginMarker(container);
								        var endMarker = DocumentWriter._searchEndMarker(container);

								        this.isBeginMarkerInDOM = (0, _dom.getTagName)(beginMarker) === BEGIN_MARKER_TAG_NAME;
								        this.isEndMarkerInDOM = (0, _dom.getTagName)(endMarker) === END_MARKER_TAG_NAME;
								        this.isAddContentToEl = beginMarker === endMarker;
								        this.isClosingContentEl = !this.isBeginMarkerInDOM && !this.isAddContentToEl;

								        if (!this.isAddContentToEl) {
								            this._updateParentTagChain(container, endMarker);

								            if (isDocumentCleaned) DocumentWriter._addOnDocumentRecreationScript(endMarker);
								        }

								        if (!this.isBeginMarkerInDOM && !this.isEndMarkerInDOM) {
								            this._processBeginMarkerInContent(beginMarker);
								            this._processEndMarkerInContent(endMarker);
								        } else if (this.isBeginMarkerInDOM && !this.isEndMarkerInDOM) this._processEndMarkerInContent(endMarker);else if (!this.isBeginMarkerInDOM && this.isEndMarkerInDOM) this._processBeginMarkerInContent(beginMarker);
								    };

								    DocumentWriter.prototype._processHtmlChunk = function _processHtmlChunk(htmlChunk, isDocumentCleaned) {
								        var _this = this;

								        htmlChunk = this._cutPending(this.pending + htmlChunk);
								        htmlChunk = this._wrapHtmlChunk(htmlChunk);
								        htmlChunk = htmlUtils.processHtml(htmlChunk, {
								            prepareDom: function prepareDom(container) {
								                return _this._prepareDom(container, isDocumentCleaned);
								            },
								            processedContext: this.window
								        });
								        htmlChunk = this._unwrapHtmlChunk(htmlChunk);

								        // NOTE: Firefox and IE recreate a window instance during the document.write function execution (T213930).
								        if (htmlChunk && this.isBeginMarkerInDOM && (_browser.isFirefox || _browser.isIE) && !htmlUtils.isPageHtml(htmlChunk)) htmlChunk = htmlUtils.INIT_SCRIPT_FOR_IFRAME_TEMPLATE + htmlChunk;

								        return htmlChunk;
								    };

								    DocumentWriter.prototype.write = function write(args, ln, isDocumentCleaned) {
								        var htmlChunk = this._processHtmlChunk(_nativeMethods2.default.arrayJoin.call(args, ''), isDocumentCleaned);

								        if (this.nonClosedEl && this.contentForProcessing) {
								            var processedContent = this.contentForProcessing;

								            if ((0, _dom.isScriptElement)(this.nonClosedEl)) processedContent = (0, _script.processScript)(this.contentForProcessing, true);else if ((0, _dom.isStyleElement)(this.nonClosedEl)) processedContent = _style2.default.process(this.contentForProcessing, _url.getProxyUrl, true);

								            _nativeMethods2.default.nodeTextContentSetter.call(this.nonClosedEl, processedContent);

								            this.contentForProcessing = '';
								        }

								        var nativeWriteMethod = ln ? _nativeMethods2.default.documentWriteLn : _nativeMethods2.default.documentWrite;
								        var result = nativeWriteMethod.call(this.document, htmlChunk);

								        if (isDocumentCleaned && _browser.isIE) return result;

								        if (!this.isEndMarkerInDOM && !this.isAddContentToEl) {
								            var el = this.document.documentElement;

								            while (_nativeMethods2.default.elementLastElementChildGetter.call(el)) {
								                el = _nativeMethods2.default.elementLastElementChildGetter.call(el);
								            }this.nonClosedEl = el;
								        }

								        return result;
								    };

								    return DocumentWriter;
								}();

								exports.default = DocumentWriter;
								module.exports = exports['default'];
							}
						},
						"element.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _internalProperties = require('../../../processing/dom/internal-properties');

							var _internalProperties2 = _interopRequireDefault(_internalProperties);

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _index = require('../node/index');

							var _index2 = _interopRequireDefault(_index);

							var _dom = require('../../../processing/dom');

							var _dom2 = _interopRequireDefault(_dom);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _domProcessor = require('../../dom-processor');

							var _domProcessor2 = _interopRequireDefault(_domProcessor);

							var _script = require('../../../processing/script');

							var _style = require('../../../processing/style');

							var _style2 = _interopRequireDefault(_style);

							var _url = require('../../utils/url');

							var urlUtils = _interopRequireWildcard(_url);

							var _dom3 = require('../../utils/dom');

							var domUtils = _interopRequireWildcard(_dom3);

							var _hiddenInfo = require('../upload/hidden-info');

							var hiddenInfo = _interopRequireWildcard(_hiddenInfo);

							var _urlResolver = require('../../utils/url-resolver');

							var urlResolver = _interopRequireWildcard(_urlResolver);

							var _destinationLocation = require('../../utils/destination-location');

							var _event = require('../../utils/event');

							var _html = require('../../utils/html');

							var _querySelector = require('../../utils/query-selector');

							var _url2 = require('../../../utils/url');

							var _stringTrim = require('../../../utils/string-trim');

							var _stringTrim2 = _interopRequireDefault(_stringTrim);

							var _windowsStorage = require('../windows-storage');

							var windowsStorage = _interopRequireWildcard(_windowsStorage);

							var _attributes = require('./attributes');

							var _shadowUi = require('../shadow-ui');

							var _shadowUi2 = _interopRequireDefault(_shadowUi);

							var _domMutationTracker = require('./live-node-list/dom-mutation-tracker');

							var _domMutationTracker2 = _interopRequireDefault(_domMutationTracker);

							var _attributes2 = require('../../../processing/dom/attributes');

							var _settings = require('../../settings');

							var _settings2 = _interopRequireDefault(_settings);

							var _propertyOverriding = require('../../utils/property-overriding');

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var KEYWORD_TARGETS = ['_blank', '_self', '_parent', '_top'];

							var RESTRICTED_META_HTTP_EQUIV_VALUES = ['refresh', 'content-security-policy'];

							var ElementSandbox = function (_SandboxBase) {
							    _inherits(ElementSandbox, _SandboxBase);

							    function ElementSandbox(nodeSandbox, uploadSandbox, iframeSandbox, shadowUI, eventSandbox) {
							        _classCallCheck(this, ElementSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.nodeSandbox = nodeSandbox;
							        _this.shadowUI = shadowUI;
							        _this.uploadSandbox = uploadSandbox;
							        _this.iframeSandbox = iframeSandbox;
							        _this.eventSandbox = eventSandbox;

							        _this.overriddenMethods = null;

							        _this.BEFORE_FORM_SUBMIT_EVENT = 'hammerhead|event|before-form-submit';
							        _this.SCRIPT_ELEMENT_ADDED_EVENT = 'hammerhead|event|script-added';
							        return _this;
							    }

							    ElementSandbox._isKeywordTarget = function _isKeywordTarget(value) {
							        value = value.toLowerCase();

							        return KEYWORD_TARGETS.indexOf(value) !== -1;
							    };

							    ElementSandbox._onTargetChanged = function _onTargetChanged(el) {
							        var tagName = domUtils.getTagName(el);
							        var targetAttr = _domProcessor2.default.getTargetAttr(el);

							        if (!_dom2.default.isIframeFlagTag(tagName)) return;

							        var urlAttr = void 0;

							        if (targetAttr === 'target') urlAttr = tagName === 'form' ? 'action' : 'href';else if (targetAttr === 'formtarget') urlAttr = 'formaction';

							        var storedUrlAttr = _dom2.default.getStoredAttrName(urlAttr);

							        if (el.hasAttribute(storedUrlAttr)) {
							            var url = el.getAttribute(storedUrlAttr);

							            if (urlUtils.isSupportedProtocol(url)) el.setAttribute(urlAttr, url);
							        }
							    };

							    ElementSandbox._setProxiedSrc = function _setProxiedSrc(img) {
							        if (!img[_internalProperties2.default.forceProxySrcForImage]) {
							            var imgSrc = _nativeMethods2.default.imageSrcGetter.call(img);
							            var skipNextLoadEvent = !!imgSrc && img.complete;

							            img[_internalProperties2.default.forceProxySrcForImage] = true;

							            if (imgSrc) img.setAttribute('src', imgSrc);

							            img[_internalProperties2.default.skipNextLoadEventForImage] = skipNextLoadEvent;
							        }
							    };

							    ElementSandbox.prototype.getAttributeCore = function getAttributeCore(el, args, isNs) {
							        var attr = String(args[isNs ? 1 : 0]);
							        var loweredAttr = attr.toLowerCase();
							        var ns = isNs ? args[0] : null;
							        var getAttrMeth = isNs ? _nativeMethods2.default.getAttributeNS : _nativeMethods2.default.getAttribute;
							        var tagName = domUtils.getTagName(el);

							        // OPTIMIZATION: The hasAttribute method is very slow.
							        if (_domProcessor2.default.isUrlAttr(el, loweredAttr, ns) || _domProcessor2.default.EVENTS.indexOf(loweredAttr) !== -1 || _attributes2.ATTRS_WITH_SPECIAL_PROXYING_LOGIC.indexOf(loweredAttr) !== -1) {
							            var storedAttrName = _dom2.default.getStoredAttrName(attr);
							            var storedAttrValue = getAttrMeth.apply(el, isNs ? [ns, storedAttrName] : [storedAttrName]);

							            if (_dom2.default.isAddedAutocompleteAttr(loweredAttr, storedAttrValue)) return null;else if (el.hasAttribute(storedAttrName)) args[isNs ? 1 : 0] = storedAttrName;
							        }
							        // NOTE: We simply remove the 'integrity' attribute because its value will not be relevant after the script
							        // content changes (http://www.w3.org/TR/SRI/). If this causes problems in the future, we will need to generate
							        // the correct SHA for the changed script. (GH-235)
							        else if (!isNs && loweredAttr === 'integrity' && _dom2.default.isTagWithIntegrityAttr(tagName)) {
							                var storedIntegrityAttr = _dom2.default.getStoredAttrName(attr);

							                if (_nativeMethods2.default.hasAttribute.call(el, storedIntegrityAttr)) args[0] = storedIntegrityAttr;
							            }
							            // NOTE: We simply remove the 'rel' attribute if rel='prefetch' and use stored 'rel' attribute, because the prefetch
							            // resource type is unknown. https://github.com/DevExpress/testcafe/issues/2528
							            else if (!isNs && loweredAttr === 'rel' && tagName === 'link') {
							                    var storedRelAttr = _dom2.default.getStoredAttrName(attr);

							                    if (_nativeMethods2.default.hasAttribute.call(el, storedRelAttr)) args[0] = storedRelAttr;
							                } else if (!isNs && loweredAttr === 'required' && domUtils.isFileInput(el)) {
							                    var storedRequiredAttr = _dom2.default.getStoredAttrName(attr);

							                    if (_nativeMethods2.default.hasAttribute.call(el, storedRequiredAttr)) args[0] = storedRequiredAttr;
							                }

							        return getAttrMeth.apply(el, args);
							    };

							    ElementSandbox.prototype.setAttributeCore = function setAttributeCore(el, args, isNs) {
							        var ns = isNs ? args[0] : null;
							        var attr = String(args[isNs ? 1 : 0]);
							        var loweredAttr = attr.toLowerCase();
							        var valueIndex = isNs ? 2 : 1;
							        var value = String(args[valueIndex]);
							        var setAttrMeth = isNs ? _nativeMethods2.default.setAttributeNS : _nativeMethods2.default.setAttribute;
							        var tagName = domUtils.getTagName(el);
							        var isUrlAttr = _domProcessor2.default.isUrlAttr(el, attr, ns);
							        var isEventAttr = _domProcessor2.default.EVENTS.indexOf(attr) !== -1;

							        var needToCallTargetChanged = false;

							        var isSpecialPage = urlUtils.isSpecialPage(value);
							        var isSupportedProtocol = urlUtils.isSupportedProtocol(value);

							        if (isUrlAttr && !isSupportedProtocol && !isSpecialPage || isEventAttr) {
							            var isJsProtocol = _dom2.default.isJsProtocol(value);
							            var storedJsAttr = _dom2.default.getStoredAttrName(attr);

							            if (isUrlAttr && isJsProtocol || isEventAttr) args[valueIndex] = _dom2.default.processJsAttrValue(value, { isJsProtocol: isJsProtocol, isEventAttr: isEventAttr });

							            setAttrMeth.apply(el, isNs ? [ns, storedJsAttr, value] : [storedJsAttr, value]);
							        } else if (isUrlAttr && (isSupportedProtocol || isSpecialPage)) {
							            var storedUrlAttr = _dom2.default.getStoredAttrName(attr);

							            setAttrMeth.apply(el, isNs ? [ns, storedUrlAttr, value] : [storedUrlAttr, value]);

							            if (tagName !== 'img' || el[_internalProperties2.default.forceProxySrcForImage]) {
							                if (tagName === 'img') el[_internalProperties2.default.skipNextLoadEventForImage] = false;

							                if (value !== '' && (!isSpecialPage || tagName === 'a')) {
							                    var isIframe = tagName === 'iframe' || tagName === 'frame';
							                    var isScript = tagName === 'script';
							                    var isCrossDomainUrl = isSupportedProtocol && !(0, _destinationLocation.sameOriginCheck)(location.toString(), value);
							                    var resourceType = _domProcessor2.default.getElementResourceType(el);
							                    var elCharset = isScript && el.charset;
							                    var currentDocument = el.ownerDocument || this.document;

							                    if (loweredAttr === 'formaction' && !_nativeMethods2.default.hasAttribute.call(el, 'formtarget')) {
							                        resourceType = 'f';

							                        if (el.form && _nativeMethods2.default.hasAttribute.call(el.form, 'action')) {
							                            var parsedFormAction = urlUtils.parseProxyUrl(_nativeMethods2.default.formActionGetter.call(el.form));

							                            if (parsedFormAction) resourceType = parsedFormAction.resourceType;
							                        }
							                    }

							                    if (ElementSandbox._isHrefAttrForBaseElement(el, attr) && domUtils.isElementInDocument(el, currentDocument)) urlResolver.updateBase(value, currentDocument);

							                    args[valueIndex] = isIframe && isCrossDomainUrl ? urlUtils.getCrossDomainIframeProxyUrl(value) : urlUtils.getProxyUrl(value, { resourceType: resourceType, charset: elCharset, doc: currentDocument });
							                }
							            } else if (value && !isSpecialPage && !urlUtils.parseProxyUrl(value)) {
							                args[valueIndex] = el[_internalProperties2.default.forceProxySrcForImage] ? urlUtils.getProxyUrl(value) : urlUtils.resolveUrlAsDest(value);
							            }
							        } else if (loweredAttr === 'autocomplete') {
							            var storedAutocompleteAttr = _dom2.default.getStoredAttrName(attr);

							            setAttrMeth.apply(el, isNs ? [ns, storedAutocompleteAttr, value] : [storedAutocompleteAttr, value]);

							            args[valueIndex] = 'off';
							        } else if (loweredAttr === 'target' && _dom2.default.isTagWithTargetAttr(tagName) || loweredAttr === 'formtarget' && _dom2.default.isTagWithFormTargetAttr(tagName)) {
							            var currentTarget = _nativeMethods2.default.getAttribute.call(el, loweredAttr);
							            var newTarget = this.getTarget(el, value);

							            if (newTarget !== currentTarget) {
							                var storedTargetAttr = _dom2.default.getStoredAttrName(attr);

							                setAttrMeth.apply(el, isNs ? [ns, storedTargetAttr, value] : [storedTargetAttr, value]);
							                args[valueIndex] = newTarget;

							                needToCallTargetChanged = true;
							            } else return null;
							        } else if (attr === 'sandbox') {
							            var storedSandboxAttr = _dom2.default.getStoredAttrName(attr);
							            var allowSameOrigin = value.indexOf('allow-same-origin') !== -1;
							            var allowScripts = value.indexOf('allow-scripts') !== -1;

							            setAttrMeth.apply(el, isNs ? [ns, storedSandboxAttr, value] : [storedSandboxAttr, value]);

							            if (!allowSameOrigin || !allowScripts) {
							                args[valueIndex] += !allowSameOrigin ? ' allow-same-origin' : '';
							                args[valueIndex] += !allowScripts ? ' allow-scripts' : '';
							            }

							            if (el[this.nodeSandbox.win.SANDBOX_DOM_TOKEN_LIST_UPDATE_FN]) el[this.nodeSandbox.win.SANDBOX_DOM_TOKEN_LIST_UPDATE_FN](value);
							        }
							        // TODO: remove after https://github.com/DevExpress/testcafe-hammerhead/issues/244 implementation
							        else if (tagName === 'meta' && attr === 'http-equiv') {
							                var loweredValue = value.toLowerCase();

							                if (RESTRICTED_META_HTTP_EQUIV_VALUES.indexOf(loweredValue) !== -1) return null;
							            } else if (loweredAttr === 'xlink:href' && _domProcessor2.default.SVG_XLINK_HREF_TAGS.indexOf(tagName) !== -1 && domUtils.isSVGElement(el)) {
							                var storedXLinkHrefAttr = _dom2.default.getStoredAttrName(attr);

							                setAttrMeth.apply(el, isNs ? [ns, storedXLinkHrefAttr, value] : [storedXLinkHrefAttr, value]);

							                if (!_url2.HASH_RE.test(value)) args[valueIndex] = urlUtils.getProxyUrl(value);
							            } else if (loweredAttr === 'style') {
							                var storedStyleAttr = _dom2.default.getStoredAttrName(attr);

							                setAttrMeth.apply(el, isNs ? [ns, storedStyleAttr, value] : [storedStyleAttr, value]);
							                args[valueIndex] = _style2.default.process(value, urlUtils.getProxyUrl);
							            } else if (!isNs && loweredAttr === 'integrity' && _dom2.default.isTagWithIntegrityAttr(tagName)) {
							                var storedIntegrityAttr = _dom2.default.getStoredAttrName(attr);

							                return setAttrMeth.apply(el, [storedIntegrityAttr, value]);
							            } else if (!isNs && loweredAttr === 'rel' && tagName === 'link') {
							                var formatedValue = (0, _stringTrim2.default)(value.toLowerCase());
							                var storedRelAttr = _dom2.default.getStoredAttrName(attr);

							                if (formatedValue === 'prefetch') {
							                    _nativeMethods2.default.removeAttribute.call(el, attr);
							                    args[0] = storedRelAttr;
							                } else _nativeMethods2.default.removeAttribute.call(el, storedRelAttr);
							            } else if (!isNs && loweredAttr === 'required' && domUtils.isFileInput(el)) {
							                var storedRequiredAttr = _dom2.default.getStoredAttrName(attr);

							                _nativeMethods2.default.removeAttribute.call(el, attr);
							                args[0] = storedRequiredAttr;
							            } else if (!isNs && loweredAttr === 'type' && domUtils.isInputElement(el)) {
							                var currentType = _nativeMethods2.default.getAttribute.call(el, loweredAttr);
							                var newType = value.toLowerCase();
							                var _storedRequiredAttr = _dom2.default.getStoredAttrName('required');
							                var currentRequired = _nativeMethods2.default.hasAttribute.call(el, _storedRequiredAttr) ? _nativeMethods2.default.getAttribute.call(el, _storedRequiredAttr) : _nativeMethods2.default.getAttribute.call(el, 'required');
							                var typeIsChanged = !currentType || newType !== currentType.toLowerCase();

							                if (typeIsChanged && currentRequired !== null) {
							                    if (newType === 'file') {
							                        _nativeMethods2.default.setAttribute.call(el, _storedRequiredAttr, currentRequired);
							                        _nativeMethods2.default.removeAttribute.call(el, 'required');
							                    } else if (currentType === 'file') {
							                        _nativeMethods2.default.setAttribute.call(el, 'required', currentRequired);
							                        _nativeMethods2.default.removeAttribute.call(el, _storedRequiredAttr);
							                    }
							                }
							            }

							        var result = setAttrMeth.apply(el, args);

							        if (needToCallTargetChanged) ElementSandbox._onTargetChanged(el);

							        return result;
							    };

							    ElementSandbox.prototype._hasAttributeCore = function _hasAttributeCore(el, args, isNs) {
							        var attributeNameArgIndex = isNs ? 1 : 0;
							        var hasAttrMeth = isNs ? _nativeMethods2.default.hasAttributeNS : _nativeMethods2.default.hasAttribute;
							        var storedAutocompleteAttrName = _dom2.default.getStoredAttrName('autocomplete');
							        var storedAutocompleteAttrValue = _nativeMethods2.default.getAttribute.call(el, storedAutocompleteAttrName);
							        var tagName = domUtils.getTagName(el);

							        if (typeof args[attributeNameArgIndex] === 'string' && _dom2.default.isAddedAutocompleteAttr(args[attributeNameArgIndex], storedAutocompleteAttrValue)) return false;
							        // NOTE: We simply remove the 'integrity' attribute because its value will not be relevant after the script
							        // content changes (http://www.w3.org/TR/SRI/). If this causes problems in the future, we will need to generate
							        // the correct SHA for the changed script.
							        // _hasAttributeCore returns true for 'integrity' attribute if the stored attribute is exists. (GH-235)
							        else if (!isNs && args[0] === 'integrity' && _dom2.default.isTagWithIntegrityAttr(tagName)) args[0] = _dom2.default.getStoredAttrName('integrity');
							            // NOTE: We simply remove the 'rel' attribute if rel='prefetch' and use stored 'rel' attribute, because the prefetch
							            // resource type is unknown.
							            // _hasAttributeCore returns true for 'rel' attribute if the original 'rel' or stored attribute is exists.
							            // https://github.com/DevExpress/testcafe/issues/2528
							            else if (!isNs && args[0] === 'rel' && tagName === 'link') {
							                    var storedRelAttr = _dom2.default.getStoredAttrName(args[0]);

							                    return hasAttrMeth.apply(el, args) || hasAttrMeth.apply(el, [storedRelAttr]);
							                } else if (!isNs && args[0] === 'required' && domUtils.isFileInput(el)) {
							                    var storedRequiredAttr = _dom2.default.getStoredAttrName(args[0]);

							                    return hasAttrMeth.apply(el, args) || hasAttrMeth.call(el, storedRequiredAttr);
							                }

							        return hasAttrMeth.apply(el, args);
							    };

							    ElementSandbox.prototype._removeAttributeCore = function _removeAttributeCore(el, args, isNs) {
							        var attr = String(args[isNs ? 1 : 0]);
							        var formatedAttr = attr.toLowerCase();
							        var removeAttrFunc = isNs ? _nativeMethods2.default.removeAttributeNS : _nativeMethods2.default.removeAttribute;
							        var tagName = domUtils.getTagName(el);
							        var result = void 0;

							        if (_domProcessor2.default.isUrlAttr(el, formatedAttr, isNs ? args[0] : null) || formatedAttr === 'sandbox' || formatedAttr === 'autocomplete' || _domProcessor2.default.EVENTS.indexOf(formatedAttr) !== -1 || formatedAttr === 'target' && _dom2.default.isTagWithTargetAttr(tagName) || formatedAttr === 'formtarget' && _dom2.default.isTagWithFormTargetAttr(tagName)) {
							            var storedAttr = _dom2.default.getStoredAttrName(attr);

							            if (formatedAttr === 'autocomplete') _nativeMethods2.default.setAttribute.call(el, storedAttr, _domProcessor2.default.AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER);else removeAttrFunc.apply(el, isNs ? [args[0], storedAttr] : [storedAttr]);
							        } else if (!isNs && formatedAttr === 'rel' && tagName === 'link') {
							            var storedRelAttr = _dom2.default.getStoredAttrName(attr);

							            removeAttrFunc.apply(el, [storedRelAttr]);
							        } else if (!isNs && formatedAttr === 'required' && domUtils.isFileInput(el)) {
							            var storedRequiredAttr = _dom2.default.getStoredAttrName(attr);

							            removeAttrFunc.call(el, storedRequiredAttr);
							        } else if (!isNs && formatedAttr === 'type' && domUtils.isInputElement(el)) {
							            var _storedRequiredAttr2 = _dom2.default.getStoredAttrName('required');

							            if (_nativeMethods2.default.hasAttribute.call(el, _storedRequiredAttr2)) {
							                var currentRequired = _nativeMethods2.default.getAttribute.call(el, _storedRequiredAttr2);

							                _nativeMethods2.default.setAttribute.call(el, 'required', currentRequired);
							                _nativeMethods2.default.removeAttribute.call(el, _storedRequiredAttr2);
							            }
							        }

							        if (ElementSandbox._isHrefAttrForBaseElement(el, formatedAttr)) urlResolver.updateBase((0, _destinationLocation.get)(), this.document);

							        if (formatedAttr !== 'autocomplete') result = removeAttrFunc.apply(el, args);

							        if (formatedAttr === 'target' && _dom2.default.isTagWithTargetAttr(tagName) || formatedAttr === 'formtarget' && _dom2.default.isTagWithFormTargetAttr(tagName)) ElementSandbox._onTargetChanged(el);

							        return result;
							    };

							    ElementSandbox.prototype._addNodeCore = function _addNodeCore(_ref) {
							        var parentNode = _ref.parentNode,
							            args = _ref.args,
							            nativeFn = _ref.nativeFn,
							            checkBody = _ref.checkBody;

							        var newNode = args[0];

							        this._prepareNodeForInsertion(newNode, parentNode);

							        var result = null;
							        var childNodesArray = null;

							        if (domUtils.isDocumentFragmentNode(newNode)) childNodesArray = domUtils.nodeListToArray(newNode.childNodes);

							        // NOTE: Before the page's <body> is processed and added to DOM,
							        // some javascript frameworks create their own body element, perform
							        // certain manipulations and then remove it.
							        // Therefore, we need to check if the body element is present in DOM
							        if (checkBody && domUtils.isBodyElementWithChildren(parentNode) && domUtils.isElementInDocument(parentNode)) result = this.shadowUI.insertBeforeRoot(newNode);else result = nativeFn.apply(parentNode, args);

							        if (childNodesArray) {
							            for (var _i2 = 0, _childNodesArray2 = childNodesArray; _i2 < _childNodesArray2.length; _i2++) {
							                var child = _childNodesArray2[_i2];
							                this._onElementAdded(child);
							            }
							        } else this._onElementAdded(newNode);

							        return result;
							    };

							    ElementSandbox.prototype._prepareNodeForInsertion = function _prepareNodeForInsertion(node, parentNode) {
							        if (domUtils.isTextNode(node)) ElementSandbox._processTextNodeContent(node, parentNode);

							        this.nodeSandbox.processNodes(node);
							    };

							    ElementSandbox.prototype._createOverridedMethods = function _createOverridedMethods() {
							        // NOTE: We need the closure because a context of overridden methods is an html element
							        var sandbox = this;

							        this.overriddenMethods = {
							            insertRow: function insertRow() {
							                var nativeMeth = domUtils.isTableElement(this) ? _nativeMethods2.default.insertTableRow : _nativeMethods2.default.insertTBodyRow;
							                var row = nativeMeth.apply(this, arguments);

							                sandbox.nodeSandbox.processNodes(row);

							                return row;
							            },
							            insertCell: function insertCell() {
							                var cell = _nativeMethods2.default.insertCell.apply(this, arguments);

							                sandbox.nodeSandbox.processNodes(cell);

							                return cell;
							            },
							            insertAdjacentHTML: function insertAdjacentHTML() {
							                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
							                    args[_key] = arguments[_key];
							                }

							                var position = args[0];
							                var html = args[1];
							                var el = this;
							                var parentEl = el.parentNode;

							                if (args.length > 1 && html !== null) {
							                    args[1] = (0, _html.processHtml)(String(html), {
							                        parentTag: parentEl && parentEl.tagName,
							                        processedContext: el[_internalProperties2.default.processedContext]
							                    });
							                }

							                _nativeMethods2.default.insertAdjacentHTML.apply(el, args);
							                sandbox.nodeSandbox.processNodes(parentEl || el);

							                if (position === 'afterbegin' || position === 'beforeend') _domMutationTracker2.default.onChildrenChanged(el);else if (parentEl) _domMutationTracker2.default.onChildrenChanged(parentEl);
							            },
							            formSubmit: function formSubmit() {
							                sandbox._ensureTargetContainsExistingBrowsingContext(this);
							                sandbox.emit(sandbox.BEFORE_FORM_SUBMIT_EVENT, { form: this });

							                return _nativeMethods2.default.formSubmit.apply(this, arguments);
							            },
							            insertBefore: function insertBefore() {
							                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
							                    args[_key2] = arguments[_key2];
							                }

							                return sandbox._addNodeCore({
							                    parentNode: this,
							                    nativeFn: _nativeMethods2.default.insertBefore,
							                    checkBody: !args[1],

							                    args: args
							                });
							            },
							            appendChild: function appendChild() {
							                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
							                    args[_key3] = arguments[_key3];
							                }

							                return sandbox._addNodeCore({
							                    parentNode: this,
							                    nativeFn: _nativeMethods2.default.appendChild,
							                    checkBody: true,

							                    args: args
							                });
							            },
							            removeChild: function removeChild() {
							                var child = arguments[0];

							                sandbox._onRemoveFileInputInfo(child);
							                sandbox._onRemoveIframe(child);

							                var result = _nativeMethods2.default.removeChild.apply(this, arguments);

							                sandbox._onElementRemoved(child);

							                return result;
							            },
							            replaceChild: function replaceChild() {
							                var newChild = arguments[0];
							                var oldChild = arguments[1];

							                if (domUtils.isTextNode(newChild)) ElementSandbox._processTextNodeContent(newChild, this);

							                sandbox._onRemoveFileInputInfo(oldChild);

							                var result = _nativeMethods2.default.replaceChild.apply(this, arguments);

							                sandbox._onAddFileInputInfo(newChild);
							                _domMutationTracker2.default.onElementChanged(newChild);
							                _domMutationTracker2.default.onElementChanged(oldChild);

							                return result;
							            },
							            cloneNode: function cloneNode() {
							                var clone = _nativeMethods2.default.cloneNode.apply(this, arguments);

							                sandbox.nodeSandbox.processNodes(clone);

							                return clone;
							            },
							            getAttribute: function getAttribute() {
							                return sandbox.getAttributeCore(this, arguments);
							            },
							            getAttributeNS: function getAttributeNS() {
							                return sandbox.getAttributeCore(this, arguments, true);
							            },
							            setAttribute: function setAttribute() {
							                var result = sandbox.setAttributeCore(this, arguments);

							                (0, _attributes.refreshAttributesWrapper)(this);

							                return result;
							            },
							            setAttributeNS: function setAttributeNS() {
							                var result = sandbox.setAttributeCore(this, arguments, true);

							                (0, _attributes.refreshAttributesWrapper)(this);

							                return result;
							            },
							            removeAttribute: function removeAttribute() {
							                var result = sandbox._removeAttributeCore(this, arguments);

							                (0, _attributes.refreshAttributesWrapper)(this);

							                return result;
							            },
							            removeAttributeNS: function removeAttributeNS() {
							                var result = sandbox._removeAttributeCore(this, arguments, true);

							                (0, _attributes.refreshAttributesWrapper)(this);

							                return result;
							            },
							            querySelector: function querySelector() {
							                if (typeof arguments[0] === 'string') arguments[0] = _index2.default.processSelector(arguments[0]);

							                return (0, _querySelector.getNativeQuerySelector)(this).apply(this, arguments);
							            },
							            querySelectorAll: function querySelectorAll() {
							                if (typeof arguments[0] === 'string') arguments[0] = _index2.default.processSelector(arguments[0]);

							                return (0, _querySelector.getNativeQuerySelectorAll)(this).apply(this, arguments);
							            },
							            hasAttribute: function hasAttribute() {
							                return sandbox._hasAttributeCore(this, arguments, false);
							            },
							            hasAttributeNS: function hasAttributeNS() {
							                return sandbox._hasAttributeCore(this, arguments, true);
							            },
							            hasAttributes: function hasAttributes() {
							                if (_nativeMethods2.default.elementAttributesGetter.call(this).length === 2 && _nativeMethods2.default.elementAttributesGetter.call(this).getNamedItem('autocomplete') && _nativeMethods2.default.elementAttributesGetter.call(this).getNamedItem(_dom2.default.getStoredAttrName('autocomplete'))) return sandbox._hasAttributeCore(this, ['autocomplete'], false);

							                return _nativeMethods2.default.hasAttributes.apply(this, arguments);
							            },
							            anchorToString: function anchorToString() {
							                var href = _nativeMethods2.default.anchorToString.call(this);
							                var parsedProxyHref = urlUtils.parseProxyUrl(href);

							                return parsedProxyHref ? parsedProxyHref.destUrl : href;
							            },
							            registerElement: function registerElement() {
							                for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
							                    args[_key4] = arguments[_key4];
							                }

							                var opts = args[1];

							                if (opts && opts.prototype && opts.prototype.createdCallback) {
							                    var storedCreatedCallback = opts.prototype.createdCallback;

							                    opts.prototype.createdCallback = function () {
							                        if (!(0, _html.isInternalHtmlParserElement)(this)) storedCreatedCallback.call(this);
							                    };
							                }

							                return _nativeMethods2.default.registerElement.apply(this, args);
							            }
							        };
							    };

							    ElementSandbox._processTextNodeContent = function _processTextNodeContent(node, parentNode) {
							        if (!parentNode.tagName) return;

							        if (domUtils.isScriptElement(parentNode)) node.data = (0, _script.processScript)(node.data, true);else if (domUtils.isStyleElement(parentNode)) node.data = _style2.default.process(node.data, urlUtils.getProxyUrl);
							    };

							    ElementSandbox._isHrefAttrForBaseElement = function _isHrefAttrForBaseElement(el, attr) {
							        return domUtils.isBaseElement(el) && attr === 'href';
							    };

							    ElementSandbox._removeFileInputInfo = function _removeFileInputInfo(el) {
							        hiddenInfo.removeInputInfo(el);
							    };

							    ElementSandbox._hasShadowUIParentOrContainsShadowUIClassPostfix = function _hasShadowUIParentOrContainsShadowUIClassPostfix(el) {
							        return el.parentNode && domUtils.isShadowUIElement(el.parentNode) || _shadowUi2.default.containsShadowUIClassPostfix(el);
							    };

							    ElementSandbox.prototype._isFirstBaseTagOnPage = function _isFirstBaseTagOnPage(el) {
							        var doc = el.ownerDocument || this.document;

							        return _nativeMethods2.default.querySelector.call(doc, 'base') === el;
							    };

							    ElementSandbox.prototype._onAddFileInputInfo = function _onAddFileInputInfo(el) {
							        if (!domUtils.isDomElement(el)) return;

							        var fileInputs = domUtils.getFileInputs(el);

							        for (var _i4 = 0; _i4 < fileInputs.length; _i4++) {
							            var fileInput = fileInputs[_i4];
							            this.addFileInputInfo(fileInput);
							        }
							    };

							    ElementSandbox.prototype._onRemoveFileInputInfo = function _onRemoveFileInputInfo(el) {
							        if (!domUtils.isDomElement(el)) return;

							        if (domUtils.isFileInput(el)) ElementSandbox._removeFileInputInfo(el);else domUtils.find(el, 'input[type=file]', ElementSandbox._removeFileInputInfo);
							    };

							    ElementSandbox.prototype._onRemoveIframe = function _onRemoveIframe(el) {
							        if (domUtils.isDomElement(el) && domUtils.isIframeElement(el)) windowsStorage.remove(_nativeMethods2.default.contentWindowGetter.call(el));
							    };

							    ElementSandbox.prototype._onElementAdded = function _onElementAdded(el) {
							        if (ElementSandbox._hasShadowUIParentOrContainsShadowUIClassPostfix(el)) _shadowUi2.default.markElementAndChildrenAsShadow(el);

							        if ((domUtils.isDomElement(el) || domUtils.isDocument(el)) && domUtils.isElementInDocument(el)) {
							            var iframes = domUtils.getIframes(el);

							            for (var _i6 = 0; _i6 < iframes.length; _i6++) {
							                var iframe = iframes[_i6];
							                this.onIframeAddedToDOM(iframe);
							                windowsStorage.add(_nativeMethods2.default.contentWindowGetter.call(iframe));
							            }

							            var scripts = domUtils.getScripts(el);

							            for (var _i8 = 0; _i8 < scripts.length; _i8++) {
							                var script = scripts[_i8];
							                this.emit(this.SCRIPT_ELEMENT_ADDED_EVENT, { el: script });
							            }

							            _domMutationTracker2.default.onElementChanged(el);
							        }

							        // NOTE: recalculate `formaction` attribute value if it placed in the dom
							        if ((domUtils.isInputElement(el) || domUtils.isButtonElement(el)) && el.form && _nativeMethods2.default.hasAttribute.call(el, 'formaction')) el.setAttribute('formaction', el.getAttribute('formaction'));

							        if (domUtils.isBodyElement(el)) this.shadowUI.onBodyElementMutation();

							        this._onAddFileInputInfo(el);

							        if (domUtils.isBaseElement(el) && this._isFirstBaseTagOnPage(el)) {
							            var storedHrefAttrName = _dom2.default.getStoredAttrName('href');
							            var storedHrefAttrValue = el.getAttribute(storedHrefAttrName);

							            if (storedHrefAttrValue !== null) urlResolver.updateBase(storedHrefAttrValue, this.document);
							        }
							    };

							    ElementSandbox.prototype._onElementRemoved = function _onElementRemoved(el) {
							        if (domUtils.isBodyElement(el)) this.shadowUI.onBodyElementMutation();else if (domUtils.isBaseElement(el)) {
							            var firstBaseEl = _nativeMethods2.default.querySelector.call(this.document, 'base');
							            var storedHrefAttr = firstBaseEl && firstBaseEl.getAttribute(_dom2.default.getStoredAttrName('href'));

							            urlResolver.updateBase(storedHrefAttr || (0, _destinationLocation.get)(), this.document);
							        }

							        _domMutationTracker2.default.onElementChanged(el);
							    };

							    ElementSandbox.prototype.addFileInputInfo = function addFileInputInfo(el) {
							        var infoManager = this.uploadSandbox.infoManager;

							        hiddenInfo.addInputInfo(el, infoManager.getFiles(el), infoManager.getValue(el));
							    };

							    ElementSandbox.prototype.onIframeAddedToDOM = function onIframeAddedToDOM(iframe) {
							        if (!domUtils.isCrossDomainIframe(iframe, true)) this.nodeSandbox.mutation.onIframeAddedToDOM({ iframe: iframe });
							    };

							    ElementSandbox.prototype.attach = function attach(window) {
							        _SandboxBase.prototype.attach.call(this, window);

							        this._createOverridedMethods();

							        window.Element.prototype.insertBefore = this.overriddenMethods.insertBefore;
							        window.Element.prototype.appendChild = this.overriddenMethods.appendChild;
							        window.Element.prototype.replaceChild = this.overriddenMethods.replaceChild;
							        window.Element.prototype.removeChild = this.overriddenMethods.removeChild;
							        window.Element.prototype.setAttribute = this.overriddenMethods.setAttribute;
							        window.Element.prototype.setAttributeNS = this.overriddenMethods.setAttributeNS;
							        window.Element.prototype.getAttribute = this.overriddenMethods.getAttribute;
							        window.Element.prototype.getAttributeNS = this.overriddenMethods.getAttributeNS;
							        window.Element.prototype.removeAttribute = this.overriddenMethods.removeAttribute;
							        window.Element.prototype.removeAttributeNS = this.overriddenMethods.removeAttributeNS;
							        window.Element.prototype.cloneNode = this.overriddenMethods.cloneNode;
							        window.Element.prototype.querySelector = this.overriddenMethods.querySelector;
							        window.Element.prototype.querySelectorAll = this.overriddenMethods.querySelectorAll;
							        window.Element.prototype.hasAttribute = this.overriddenMethods.hasAttribute;
							        window.Element.prototype.hasAttributeNS = this.overriddenMethods.hasAttributeNS;
							        window.Element.prototype.hasAttributes = this.overriddenMethods.hasAttributes;
							        window.Node.prototype.cloneNode = this.overriddenMethods.cloneNode;
							        window.Node.prototype.appendChild = this.overriddenMethods.appendChild;
							        window.Node.prototype.removeChild = this.overriddenMethods.removeChild;
							        window.Node.prototype.insertBefore = this.overriddenMethods.insertBefore;
							        window.Node.prototype.replaceChild = this.overriddenMethods.replaceChild;
							        window.DocumentFragment.prototype.querySelector = this.overriddenMethods.querySelector;
							        window.DocumentFragment.prototype.querySelectorAll = this.overriddenMethods.querySelectorAll;
							        window.HTMLTableElement.prototype.insertRow = this.overriddenMethods.insertRow;
							        window.HTMLTableSectionElement.prototype.insertRow = this.overriddenMethods.insertRow;
							        window.HTMLTableRowElement.prototype.insertCell = this.overriddenMethods.insertCell;
							        window.HTMLFormElement.prototype.submit = this.overriddenMethods.formSubmit;
							        window.HTMLAnchorElement.prototype.toString = this.overriddenMethods.anchorToString;

							        if (window.Document.prototype.registerElement) window.Document.prototype.registerElement = this.overriddenMethods.registerElement;

							        if (window.Element.prototype.insertAdjacentHTML) window.Element.prototype.insertAdjacentHTML = this.overriddenMethods.insertAdjacentHTML;else if (window.HTMLElement.prototype.insertAdjacentHTML) window.HTMLElement.prototype.insertAdjacentHTML = this.overriddenMethods.insertAdjacentHTML;

							        this._setValidBrowsingContextOnElementClick(window);

							        // NOTE: Cookie can be set up for the page by using the request initiated by img.
							        // For example: img.src = '<url that responds with the Set-Cookie header>'
							        // If img has the 'load' event handler, we redirect the request through proxy.
							        // For details, see https://github.com/DevExpress/testcafe-hammerhead/issues/651
							        this.eventSandbox.listeners.on(this.eventSandbox.listeners.EVENT_LISTENER_ATTACHED_EVENT, function (e) {
							            if (e.eventType === 'load' && domUtils.isImgElement(e.el)) ElementSandbox._setProxiedSrc(e.el);
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLElement.prototype, 'onload', {
							            getter: null,
							            setter: function setter(handler) {
							                if (domUtils.isImgElement(this) && (0, _event.isValidEventListener)(handler)) ElementSandbox._setProxiedSrc(this);

							                _nativeMethods2.default.htmlElementOnloadSetter.call(this, handler);
							            }
							        });
							    };

							    ElementSandbox.prototype._ensureTargetContainsExistingBrowsingContext = function _ensureTargetContainsExistingBrowsingContext(el) {
							        if (!_nativeMethods2.default.hasAttribute.call(el, 'target')) return;

							        var attr = _nativeMethods2.default.getAttribute.call(el, 'target');
							        var storedAttr = _nativeMethods2.default.getAttribute.call(el, _dom2.default.getStoredAttrName('target'));

							        el.setAttribute('target', storedAttr || attr);
							    };

							    ElementSandbox.prototype._setValidBrowsingContextOnElementClick = function _setValidBrowsingContextOnElementClick(window) {
							        var _this2 = this;

							        this.eventSandbox.listeners.initElementListening(window, ['click']);
							        this.eventSandbox.listeners.addInternalEventListener(window, ['click'], function (e) {
							            var el = e.target;

							            if (domUtils.isInputElement(el) && el.form) el = el.form;

							            var tagName = domUtils.getTagName(el);

							            if (!_dom2.default.isTagWithTargetAttr(tagName)) return;

							            _this2._ensureTargetContainsExistingBrowsingContext(el);
							        });
							    };

							    ElementSandbox.prototype._setProxiedSrcUrlOnError = function _setProxiedSrcUrlOnError(img) {
							        img.addEventListener('error', function (e) {
							            var storedAttr = _nativeMethods2.default.getAttribute.call(img, _dom2.default.getStoredAttrName('src'));
							            var imgSrc = _nativeMethods2.default.imageSrcGetter.call(img);

							            if (storedAttr && !urlUtils.parseProxyUrl(imgSrc) && urlUtils.isSupportedProtocol(imgSrc) && !urlUtils.isSpecialPage(imgSrc)) {
							                _nativeMethods2.default.setAttribute.call(img, 'src', urlUtils.getProxyUrl(storedAttr));
							                (0, _event.stopPropagation)(e);
							            }
							        }, false);
							    };

							    ElementSandbox.prototype.getTarget = function getTarget(el, newTarget) {
							        var target = newTarget || '';

							        if (target && !ElementSandbox._isKeywordTarget(target) && !windowsStorage.findByName(target) || /_blank/i.test(target)) return '_top';

							        return target;
							    };

							    ElementSandbox.prototype.processElement = function processElement(el) {
							        var tagName = domUtils.getTagName(el);

							        switch (tagName) {
							            case 'img':
							                this.eventSandbox.listeners.initElementListening(el, ['load']);
							                this.eventSandbox.listeners.addInternalEventListener(el, ['load'], function (e, dispatched, preventEvent, cancelHandlers, stopEventPropagation) {
							                    if (!el[_internalProperties2.default.skipNextLoadEventForImage]) return;

							                    el[_internalProperties2.default.skipNextLoadEventForImage] = false;

							                    preventEvent();
							                    stopEventPropagation();
							                });

							                if (!el[_internalProperties2.default.forceProxySrcForImage] && !_settings2.default.get().forceProxySrcForImage) this._setProxiedSrcUrlOnError(el);
							                break;
							            case 'iframe':
							            case 'frame':
							                this.iframeSandbox.processIframe(el);
							                break;
							            case 'base':
							                {
							                    if (!this._isFirstBaseTagOnPage(el)) break;

							                    var storedUrlAttr = _nativeMethods2.default.getAttribute.call(el, _dom2.default.getStoredAttrName('href'));

							                    if (storedUrlAttr !== null) urlResolver.updateBase(storedUrlAttr, el.ownerDocument || this.document);

							                    break;
							                }
							        }

							        // NOTE: we need to reprocess a tag client-side if it wasn't processed on the server.
							        // See the usage of Parse5DomAdapter.needToProcessUrl
							        var targetAttr = _domProcessor2.default.getTargetAttr(el);

							        if (_dom2.default.isIframeFlagTag(tagName) && _nativeMethods2.default.getAttribute.call(el, targetAttr) === '_parent') _domProcessor2.default.processElement(el, urlUtils.convertToProxyUrl);
							    };

							    return ElementSandbox;
							}(_base2.default);

							exports.default = ElementSandbox;
							module.exports = exports['default'];
						},
						"index.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _internalProperties = require('../../../processing/dom/internal-properties');

							var _internalProperties2 = _interopRequireDefault(_internalProperties);

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _window = require('./window');

							var _window2 = _interopRequireDefault(_window);

							var _document = require('./document');

							var _document2 = _interopRequireDefault(_document);

							var _element = require('./element');

							var _element2 = _interopRequireDefault(_element);

							var _focusBlur = require('../event/focus-blur');

							var _focusBlur2 = _interopRequireDefault(_focusBlur);

							var _dom = require('../../../processing/dom');

							var _domProcessor = require('../../dom-processor');

							var _domProcessor2 = _interopRequireDefault(_domProcessor);

							var _dom2 = require('../../utils/dom');

							var domUtils = _interopRequireWildcard(_dom2);

							var _querySelector = require('../../utils/query-selector');

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _attributes = require('../../../processing/dom/attributes');

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var ATTRIBUTE_SELECTOR_REG_EX = /\[([\w-]+)(\^?=.+?)]/g;
							var ATTRIBUTE_OPERATOR_WITH_HASH_VALUE = /^\W+\s*#/;

							var NodeSandbox = function (_SandboxBase) {
							    _inherits(NodeSandbox, _SandboxBase);

							    function NodeSandbox(nodeMutation, iframeSandbox, eventSandbox, uploadSandbox, shadowUI, cookieSandbox) {
							        _classCallCheck(this, NodeSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.raiseBodyCreatedEvent = _this._onBodyCreated;

							        // NOTE: We need to define the property with the 'writable' descriptor for testing purposes
							        _nativeMethods2.default.objectDefineProperty.call(window.Object, document, _internalProperties2.default.documentCharset, {
							            value: domUtils.parseDocumentCharset(),
							            writable: true
							        });

							        _this.eventSandbox = eventSandbox;
							        _this.iframeSandbox = iframeSandbox;
							        _this.shadowUI = shadowUI;
							        _this.mutation = nodeMutation;

							        _this.doc = new _document2.default(_this, shadowUI, cookieSandbox);
							        _this.win = new _window2.default(_this, eventSandbox, uploadSandbox, nodeMutation);
							        _this.element = new _element2.default(_this, uploadSandbox, iframeSandbox, shadowUI, eventSandbox);
							        return _this;
							    }

							    NodeSandbox.prototype._onBodyCreated = function _onBodyCreated() {
							        this.eventSandbox.listeners.initDocumentBodyListening(this.document);
							        this.mutation.onBodyCreated({
							            body: this.document.body
							        });
							    };

							    NodeSandbox.prototype._processElement = function _processElement(el) {
							        var processedContext = el[_internalProperties2.default.processedContext];

							        if (domUtils.isShadowUIElement(el) || processedContext === this.window) return;

							        var urlAttrName = null;

							        if (processedContext) {
							            urlAttrName = _domProcessor2.default.getUrlAttr(el);
							            urlAttrName = urlAttrName && el.hasAttribute(urlAttrName) ? urlAttrName : null;
							        }

							        var canAddNewProp = _nativeMethods2.default.objectIsExtensible.call(window.Object, el);
							        var canUpdateExistingProp = processedContext && !_nativeMethods2.default.objectIsFrozen.call(window.Object, el);

							        if (canAddNewProp || canUpdateExistingProp) {
							            _nativeMethods2.default.objectDefineProperty.call(this.window, el, _internalProperties2.default.processedContext, {
							                value: this.window,
							                writable: true
							            });
							        }

							        // NOTE: We need to reprocess url attribute of element, if it's moved to different window (GH-564)
							        if (urlAttrName) el.setAttribute(urlAttrName, el.getAttribute(urlAttrName));

							        this.element.processElement(el);
							    };

							    NodeSandbox.prototype.processNodes = function processNodes(el, doc) {
							        if (!el) {
							            doc = doc || this.document;

							            if (doc.documentElement) this.processNodes(doc.documentElement);
							        } else if (el.querySelectorAll) {
							            this._processElement(el);

							            var children = (0, _querySelector.getNativeQuerySelectorAll)(el).call(el, '*');
							            var length = _nativeMethods2.default.nodeListLengthGetter.call(children);

							            for (var i = 0; i < length; i++) {
							                this._processElement(children[i]);
							            }
							        }
							    };

							    // NOTE: DOM sandbox hides evidence of the content proxying from a page native script. Proxy replaces URLs for
							    // resources. Our goal is to make the native script think that all resources are fetched from the destination
							    // resource, not from proxy, and also provide proxying for dynamically created elements.


							    NodeSandbox.prototype.attach = function attach(window) {
							        var _this2 = this;

							        var document = window.document;
							        var domContentLoadedEventRaised = false;

							        _SandboxBase.prototype.attach.call(this, window, document);

							        this.iframeSandbox.on(this.iframeSandbox.IFRAME_DOCUMENT_CREATED_EVENT, function (_ref) {
							            var iframe = _ref.iframe;

							            var contentWindow = _nativeMethods2.default.contentWindowGetter.call(iframe);
							            var contentDocument = _nativeMethods2.default.contentDocumentGetter.call(iframe);

							            // NOTE: Before overriding the iframe, we must restore native document methods.
							            // Therefore, we save them before they are overridden.
							            var iframeNativeMethods = new _this2.nativeMethods.constructor(contentDocument, contentWindow);

							            contentWindow[_internalProperties2.default.iframeNativeMethods] = iframeNativeMethods;

							            // NOTE: Override only the document (in fact, we only need the 'write' and 'writeln' methods).
							            _this2.doc.attach(contentWindow, contentDocument);
							        });

							        // NOTE: In Google Chrome, iframes whose src contains html code raise the 'load' event twice.
							        // So, we need to define code instrumentation functions as 'configurable' so that they can be redefined.
							        _nativeMethods2.default.objectDefineProperty.call(window.Object, window, _internalProperties2.default.processDomMethodName, {
							            value: function value(el, doc) {
							                // NOTE: TestCafe creates a shadow-ui root before the DOMContentLoaded event (once document.body is
							                // available). Sometimes for a very heavy DOM or a very slow loading the body doesn't contain all
							                // elements at that moment and as a result after a full page loading our root element becomes not
							                // the last child of the body. So we need to make the root last body child manually on every script
							                // loading until the DOMContentLoaded event is raised.
							                if (!domContentLoadedEventRaised) _this2.shadowUI.onBodyElementMutation();

							                _this2.processNodes(el, doc);
							            },

							            configurable: true
							        });

							        // NOTE: In some browsers (for example Firefox), the 'window.document' object is different when iframe is
							        // created and when the document’s ready event is raised. Therefore, we need to update the 'document' object
							        // to override its methods (Q527555).
							        document.addEventListener('DOMContentLoaded', function () {
							            domContentLoadedEventRaised = true;

							            _this2.processNodes(null, document);
							        }, false);

							        this.doc.attach(window, document);
							        this.win.attach(window);
							        this.element.attach(window);
							    };

							    NodeSandbox._processAttributeSelector = function _processAttributeSelector(selector) {
							        if (!ATTRIBUTE_SELECTOR_REG_EX.test(selector)) return selector;

							        return selector.replace(ATTRIBUTE_SELECTOR_REG_EX, function (str, name, operatorWithValue) {
							            if (_attributes.URL_ATTRS.indexOf(name) !== -1 && !ATTRIBUTE_OPERATOR_WITH_HASH_VALUE.test(operatorWithValue)) {
							                name = (0, _dom.getStoredAttrName)(name);

							                return '[' + name + operatorWithValue + ']';
							            }

							            return str;
							        });
							    };

							    NodeSandbox.processSelector = function processSelector(selector) {
							        if (selector) {
							            selector = _focusBlur2.default._processFocusPseudoClassSelector(selector);
							            selector = NodeSandbox._processAttributeSelector(selector);
							        }

							        return selector;
							    };

							    return NodeSandbox;
							}(_base2.default);

							exports.default = NodeSandbox;
							module.exports = exports['default'];
						},
						"live-node-list": {
							"dom-mutation-tracker.js": function (exports, module, require) {
								

								exports.__esModule = true;

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _dom = require('../../../utils/dom');

								var _querySelector = require('../../../utils/query-selector');

								var _integerIdGenerator = require('../../../utils/integer-id-generator');

								var _integerIdGenerator2 = _interopRequireDefault(_integerIdGenerator);

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								var DOMMutationTracker = function () {
								    function DOMMutationTracker() {
								        var _this = this;

								        _classCallCheck(this, DOMMutationTracker);

								        this._mutations = _nativeMethods2.default.objectCreate.call(window.Object, null);
								        this._isDomContentLoaded = false;

								        _nativeMethods2.default.addEventListener.call(document, 'DOMContentLoaded', function () {
								            _this._isDomContentLoaded = true;
								        });
								    }

								    DOMMutationTracker.prototype._updateVersion = function _updateVersion(tagName) {
								        if (tagName in this._mutations) this._mutations[tagName].increment();
								    };

								    DOMMutationTracker.prototype._processElement = function _processElement(el) {
								        if (!el.tagName || (0, _dom.isShadowUIElement)(el)) return;

								        var tagName = (0, _dom.getTagName)(el);

								        this._updateVersion('*');
								        this._updateVersion(tagName);
								    };

								    DOMMutationTracker.prototype._processChildren = function _processChildren(el) {
								        if (!el.querySelectorAll) return;

								        var children = (0, _querySelector.getNativeQuerySelectorAll)(el).call(el, '*');
								        var length = _nativeMethods2.default.nodeListLengthGetter.call(children);

								        for (var i = 0; i < length; i++) {
								            this._processElement(children[i]);
								        }
								    };

								    DOMMutationTracker.prototype.onElementChanged = function onElementChanged(el) {
								        this._processElement(el);
								        this._processChildren(el);
								    };

								    DOMMutationTracker.prototype.onChildrenChanged = function onChildrenChanged(el) {
								        this._processChildren(el);
								    };

								    DOMMutationTracker.prototype.isOutdated = function isOutdated(tagName, version) {
								        if (!this._isDomContentLoaded) return true;

								        var isTagTracked = tagName in this._mutations;

								        if (!isTagTracked) this._mutations[tagName] = (0, _integerIdGenerator2.default)();

								        var lastVersion = this._mutations[tagName].value; // eslint-disable-line no-restricted-properties

								        return version < lastVersion;
								    };

								    DOMMutationTracker.prototype.getVersion = function getVersion(tagName) {
								        if (tagName in this._mutations) return this._mutations[tagName].value; // eslint-disable-line no-restricted-properties

								        return -Infinity;
								    };

								    return DOMMutationTracker;
								}();

								exports.default = new DOMMutationTracker();
								module.exports = exports['default'];
							},
							"html-collection-wrapper.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.default = HTMLCollectionWrapper;

								var _domMutationTracker = require('./dom-mutation-tracker');

								var _domMutationTracker2 = _interopRequireDefault(_domMutationTracker);

								var _nativeMethods = require('../../native-methods');

								var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

								var _dom = require('../../../utils/dom');

								function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

								// NOTE: Tags from https://www.w3schools.com/tags/att_name.asp
								var ELEMENTS_WITH_NAME_ATTRIBUTE = ['button', 'fieldset', 'form', 'iframe', 'input', 'map', 'meta', 'object', 'output', 'param', 'select', 'textarea'];
								var COLLECTION_PROTO_GETTERS_RESERVE = 10;
								var collectionProtoGettersCount = 0;

								function HTMLCollectionWrapper(collection, tagName) {
								    tagName = tagName.toLowerCase();

								    _nativeMethods2.default.objectDefineProperties.call(Object, this, {
								        _collection: { value: collection },
								        _filteredCollection: { value: [] },
								        _tagName: { value: tagName },
								        _version: { value: -Infinity, writable: true },
								        _namedProps: { value: ELEMENTS_WITH_NAME_ATTRIBUTE.indexOf(tagName) !== -1 ? [] : null }
								    });

								    this._refreshCollection();
								}

								HTMLCollectionWrapper.prototype = _nativeMethods2.default.objectCreate.call(Object, HTMLCollection.prototype);

								HTMLCollectionWrapper.prototype.item = function (index) {
								    this._refreshCollection();

								    return this._filteredCollection[index];
								};

								if (HTMLCollection.prototype.namedItem) {
								    HTMLCollectionWrapper.prototype.namedItem = function () {
								        this._refreshCollection();

								        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
								            args[_key] = arguments[_key];
								        }

								        var namedItem = this._collection.namedItem.apply(this._collection, args);

								        return namedItem && (0, _dom.isShadowUIElement)(namedItem) ? null : namedItem;
								    };
								}

								_nativeMethods2.default.objectDefineProperties.call(Object, HTMLCollectionWrapper.prototype, {
								    length: {
								        configurable: true,
								        enumerable: true,
								        get: function get() {
								            this._refreshCollection();

								            return this._filteredCollection.length;
								        }
								    },

								    _refreshCollection: {
								        value: function value() {
								            if (!_domMutationTracker2.default.isOutdated(this._tagName, this._version)) return;

								            var storedFilteredCollectionLength = this._filteredCollection.length;
								            var currentNamedProps = filterCollection(this);

								            this._version = _domMutationTracker2.default.getVersion(this._tagName);

								            updateCollectionIndexGetters(this, storedFilteredCollectionLength, this._filteredCollection.length);
								            updateNamedProps(this, this._namedProps, currentNamedProps);
								        }
								    }
								});

								addShadowGetters(COLLECTION_PROTO_GETTERS_RESERVE);

								function addShadowGetters(count) {
								    var _loop = function _loop(i) {
								        var idx = collectionProtoGettersCount++;

								        _nativeMethods2.default.objectDefineProperty.call(Object, HTMLCollectionWrapper.prototype, idx, {
								            get: function get() {
								                this.item(idx);
								            }
								        });
								    };

								    for (var i = 0; i < count; i++) {
								        _loop(i);
								    }
								}

								function updateCollectionIndexGetters(wrapper, oldLength, currentLength) {
								    if (oldLength === currentLength) return;

								    var _loop2 = function _loop2() {
								        var idx = oldLength++;

								        _nativeMethods2.default.objectDefineProperty.call(Object, wrapper, idx, {
								            enumerable: true,
								            configurable: true,
								            get: function get() {
								                return wrapper.item(idx);
								            }
								        });
								    };

								    while (oldLength < currentLength) {
								        _loop2();
								    }

								    while (oldLength > currentLength) {
								        delete wrapper[--oldLength];
								    }var maxCollectionLength = collectionProtoGettersCount - COLLECTION_PROTO_GETTERS_RESERVE;

								    if (currentLength > maxCollectionLength) addShadowGetters(currentLength - maxCollectionLength);
								}

								function updateNamedProps(wrapper, oldNamedProps, currentNamedProps) {
								    if (!currentNamedProps) return;

								    for (var _i2 = 0; _i2 < oldNamedProps.length; _i2++) {
								        var oldProp = oldNamedProps[_i2];
								        if (currentNamedProps.indexOf(oldProp) === -1) delete wrapper[oldProp];
								    }

								    var _loop3 = function _loop3(_i4) {
								        var prop = currentNamedProps[_i4];
								        if (!wrapper._collection[prop]) return 'continue';

								        _nativeMethods2.default.objectDefineProperty.call(Object, wrapper, prop, {
								            configurable: true,
								            get: function get() {
								                this._refreshCollection();

								                return wrapper._collection[prop];
								            }
								        });
								    };

								    for (var _i4 = 0; _i4 < currentNamedProps.length; _i4++) {
								        var _ret3 = _loop3(_i4);

								        if (_ret3 === 'continue') continue;
								    }
								}

								function filterCollection(wrapper) {
								    var nativeCollection = wrapper._collection;
								    var nativeCollectionLength = _nativeMethods2.default.htmlCollectionLengthGetter.call(nativeCollection);
								    var currentNamedProps = wrapper._namedProps ? [] : null;
								    var filteredCollection = wrapper._filteredCollection;

								    filteredCollection.length = 0;

								    for (var i = 0; i < nativeCollectionLength; i++) {
								        var el = nativeCollection[i];

								        if ((0, _dom.isShadowUIElement)(el)) continue;

								        filteredCollection.push(el);

								        if (!currentNamedProps) continue;

								        var nameAttr = _nativeMethods2.default.getAttribute.call(el, 'name');

								        if (nameAttr !== null) currentNamedProps.push(nameAttr);
								    }

								    return currentNamedProps;
								}
								module.exports = exports['default'];
							}
						},
						"mutation.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _eventEmitter = require('../../utils/event-emitter');

							var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var NodeMutation = function (_EventEmitter) {
							    _inherits(NodeMutation, _EventEmitter);

							    function NodeMutation() {
							        _classCallCheck(this, NodeMutation);

							        var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

							        _this.BEFORE_DOCUMENT_CLEANED_EVENT = 'hammerhead|event|before-document-cleaned';
							        _this.DOCUMENT_CLEANED_EVENT = 'hammerhead|event|document-cleaned';
							        _this.DOCUMENT_CLOSED_EVENT = 'hammerhead|event|document-closed';
							        _this.BODY_CONTENT_CHANGED_EVENT = 'hammerhead|event|body-content-changed';
							        _this.BODY_CREATED_EVENT = 'hammerhead|event|body-created';
							        _this.IFRAME_ADDED_TO_DOM_EVENT = 'hammerhead|event|iframe-added-to-dom';
							        return _this;
							    }

							    NodeMutation.prototype.onIframeAddedToDOM = function onIframeAddedToDOM(e) {
							        this.emit(this.IFRAME_ADDED_TO_DOM_EVENT, e);
							    };

							    NodeMutation.prototype.onBeforeDocumentCleaned = function onBeforeDocumentCleaned(e) {
							        this.emit(this.BEFORE_DOCUMENT_CLEANED_EVENT, e);
							    };

							    NodeMutation.prototype.onDocumentCleaned = function onDocumentCleaned(e) {
							        this.emit(this.DOCUMENT_CLEANED_EVENT, e);
							    };

							    NodeMutation.prototype.onDocumentClosed = function onDocumentClosed(e) {
							        this.emit(this.DOCUMENT_CLOSED_EVENT, e);
							    };

							    NodeMutation.prototype.onBodyContentChanged = function onBodyContentChanged(e) {
							        this.emit(this.BODY_CONTENT_CHANGED_EVENT, e);
							    };

							    NodeMutation.prototype.onBodyCreated = function onBodyCreated(e) {
							        this.emit(this.BODY_CREATED_EVENT, e);
							    };

							    return NodeMutation;
							}(_eventEmitter2.default);

							exports.default = NodeMutation;
							module.exports = exports['default'];
						},
						"window.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _shadowUi = require('../shadow-ui');

							var _shadowUi2 = _interopRequireDefault(_shadowUi);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _script = require('../../../processing/script');

							var _style = require('../../../processing/style');

							var _style2 = _interopRequireDefault(_style);

							var _destinationLocation = require('../../utils/destination-location');

							var destLocation = _interopRequireWildcard(_destinationLocation);

							var _html = require('../../utils/html');

							var _url = require('../../utils/url');

							var _browser = require('../../utils/browser');

							var _dom = require('../../utils/dom');

							var _types = require('../../utils/types');

							var _internalAttributes = require('../../../processing/dom/internal-attributes');

							var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

							var _internalProperties = require('../../../processing/dom/internal-properties');

							var _internalProperties2 = _interopRequireDefault(_internalProperties);

							var _constructorIsCalledWithoutNewKeyword = require('../../utils/constructor-is-called-without-new-keyword');

							var _constructorIsCalledWithoutNewKeyword2 = _interopRequireDefault(_constructorIsCalledWithoutNewKeyword);

							var _instruction = require('../../../processing/script/instruction');

							var _instruction2 = _interopRequireDefault(_instruction);

							var _pinkie = require('pinkie');

							var _pinkie2 = _interopRequireDefault(_pinkie);

							var _getMimeType = require('../../utils/get-mime-type');

							var _getMimeType2 = _interopRequireDefault(_getMimeType);

							var _propertyOverriding = require('../../utils/property-overriding');

							var _featureDetection = require('../../utils/feature-detection');

							var _url2 = require('../../../utils/url');

							var _upload = require('../upload');

							var _upload2 = _interopRequireDefault(_upload);

							var _anchor = require('../code-instrumentation/properties/anchor');

							var _namespaces = require('../../../processing/dom/namespaces');

							var _urlResolver = require('../../utils/url-resolver');

							var _urlResolver2 = _interopRequireDefault(_urlResolver);

							var _header = require('../../../processing/script/header');

							var _domMutationTracker = require('./live-node-list/dom-mutation-tracker');

							var _domMutationTracker2 = _interopRequireDefault(_domMutationTracker);

							var _attributes = require('./attributes');

							var _replaceProxiedUrlsInStack = require('../../utils/replace-proxied-urls-in-stack');

							var _replaceProxiedUrlsInStack2 = _interopRequireDefault(_replaceProxiedUrlsInStack);

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*global history, navigator*/


							var nativeFunctionToString = _nativeMethods2.default.Function.toString();

							var HTTP_PROTOCOL_RE = /^http/i;

							var ALLOWED_SERVICE_WORKER_PROTOCOLS = ['https:', 'wss:', 'file:'];
							var ALLOWED_SERVICE_WORKER_HOST_NAMES = ['localhost', '127.0.0.1'];
							var JAVASCRIPT_MIME_TYPES = ['text/javascript', 'application/javascript', 'application/x-javascript'];

							// NOTE: SVGAnimatedString prototype does not have a way to access the appropriate svg element.
							// This is why we use this property to store svg element for which animVal and baseVal properties were set.
							// It allows us to change the href-hammerhead-stored-value when it needs.
							var CONTEXT_SVG_IMAGE_ELEMENT = 'hammerhead|context-svg-image-element';

							var SANDBOX_DOM_TOKEN_LIST = 'hammerhead|sandbox-dom-token-list';
							var SANDBOX_DOM_TOKEN_LIST_OWNER = 'hammerhead|sandbox-dom-token-list-owner';
							var SANDBOX_DOM_TOKEN_LIST_UPDATE_FN = 'hammerhead|sandbox-dom-token-list-update';

							var NO_STACK_TRACE_AVAILABLE_MESSAGE = 'No stack trace available';

							var WindowSandbox = function (_SandboxBase) {
							    _inherits(WindowSandbox, _SandboxBase);

							    function WindowSandbox(nodeSandbox, eventSandbox, uploadSandbox, nodeMutation) {
							        _classCallCheck(this, WindowSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.nodeSandbox = nodeSandbox;
							        _this.messageSandbox = eventSandbox.message;
							        _this.listenersSandbox = eventSandbox.listeners;
							        _this.elementEditingWatcher = eventSandbox.elementEditingWatcher;
							        _this.uploadSandbox = uploadSandbox;
							        _this.shadowUI = nodeSandbox.shadowUI;
							        _this.nodeMutation = nodeMutation;

							        _this.UNCAUGHT_JS_ERROR_EVENT = 'hammerhead|event|uncaught-js-error';
							        _this.UNHANDLED_REJECTION_EVENT = 'hammerhead|event|unhandled-rejection';
							        _this.SANDBOX_DOM_TOKEN_LIST_UPDATE_FN = SANDBOX_DOM_TOKEN_LIST_UPDATE_FN;

							        _this.isInternalGetter = false;
							        return _this;
							    }

							    WindowSandbox._prepareStack = function _prepareStack(msg, stack) {
							        // NOTE: Firefox does not include an error message in a stack trace (unlike other browsers)
							        // It is possible to get a stack trace for unhandled Promise rejections only if Promise is rejected with the 'Error' instance value.
							        // This is why we should convert the stack to a common format.
							        if (!stack || stack.indexOf(msg) === -1) {
							            stack = stack || '    ' + NO_STACK_TRACE_AVAILABLE_MESSAGE;

							            return msg + ':\n' + stack;
							        }

							        return stack;
							    };

							    WindowSandbox.prototype._raiseUncaughtJsErrorEvent = function _raiseUncaughtJsErrorEvent(type, event, window) {
							        if ((0, _dom.isCrossDomainWindows)(window, window.top)) return;

							        var sendToTopWindow = window !== window.top;
							        var pageUrl = destLocation.get();
							        var msg = null;
							        var stack = null;

							        if (type === this.UNHANDLED_REJECTION_EVENT) {
							            msg = WindowSandbox._formatUnhandledRejectionReason(event.reason);
							            stack = event.reason && event.reason.stack;
							        } else if (type === this.UNCAUGHT_JS_ERROR_EVENT) {
							            msg = event.error ? event.error.message : event.message;
							            stack = event.error && event.error.stack;
							        }

							        stack = WindowSandbox._prepareStack(msg, stack);
							        stack = (0, _replaceProxiedUrlsInStack2.default)(stack);

							        if (sendToTopWindow) {
							            this.emit(type, { msg: msg, pageUrl: pageUrl, stack: stack, inIframe: true });
							            this.messageSandbox.sendServiceMsg({ msg: msg, pageUrl: pageUrl, stack: stack, cmd: type }, window.top);
							        } else this.emit(type, { msg: msg, pageUrl: pageUrl, stack: stack });
							    };

							    WindowSandbox.prototype._reattachHandler = function _reattachHandler(window, eventName) {
							        _nativeMethods2.default.windowRemoveEventListener.call(window, eventName, this);
							        _nativeMethods2.default.windowAddEventListener.call(window, eventName, this);
							    };

							    WindowSandbox._formatUnhandledRejectionReason = function _formatUnhandledRejectionReason(reason) {
							        if (!(0, _types.isPrimitiveType)(reason)) {
							            var reasonStr = _nativeMethods2.default.objectToString.call(reason);

							            if (reasonStr === '[object Error]') return reason.message;

							            return reasonStr;
							        }

							        return String(reason);
							    };

							    WindowSandbox._getUrlAttr = function _getUrlAttr(el, attr) {
							        var attrValue = _nativeMethods2.default.getAttribute.call(el, attr);
							        var currentDocument = el.ownerDocument || document;

							        if (attrValue === '' || attrValue === null && attr === 'action' && _featureDetection.emptyActionAttrFallbacksToTheLocation) return _urlResolver2.default.resolve('', currentDocument);else if (attrValue === null) return '';else if (_url2.HASH_RE.test(attrValue)) return _urlResolver2.default.resolve(attrValue, currentDocument);else if (!(0, _url2.isValidUrl)(attrValue)) return _urlResolver2.default.resolve(attrValue, currentDocument);

							        return (0, _url.resolveUrlAsDest)(attrValue);
							    };

							    WindowSandbox._removeProcessingInstructions = function _removeProcessingInstructions(text) {
							        if (text) {
							            text = (0, _header.remove)(text);

							            return _style2.default.cleanUp(text, _url.parseProxyUrl);
							        }

							        return text;
							    };

							    WindowSandbox._processTextPropValue = function _processTextPropValue(el, text) {
							        var processedText = text !== null && text !== void 0 ? String(text) : text;

							        if (processedText) {
							            if ((0, _dom.isScriptElement)(el)) return (0, _script.processScript)(processedText, true);else if ((0, _dom.isStyleElement)(el)) return _style2.default.process(processedText, _url.getProxyUrl, true);
							        }

							        return processedText;
							    };

							    WindowSandbox.prototype._overrideUrlAttrDescriptors = function _overrideUrlAttrDescriptors(attr, elementConstructors) {
							        var windowSandbox = this;

							        for (var _i2 = 0; _i2 < elementConstructors.length; _i2++) {
							            var _constructor = elementConstructors[_i2];
							            (0, _propertyOverriding.overrideDescriptor)(_constructor.prototype, attr, {
							                getter: function getter() {
							                    return WindowSandbox._getUrlAttr(this, attr);
							                },
							                setter: function setter(value) {
							                    windowSandbox.nodeSandbox.element.setAttributeCore(this, [attr, value]);
							                }
							            });
							        }
							    };

							    WindowSandbox.prototype._overrideAttrDescriptors = function _overrideAttrDescriptors(attr, elementConstructors) {
							        var windowSandbox = this;

							        for (var _i4 = 0; _i4 < elementConstructors.length; _i4++) {
							            var _constructor2 = elementConstructors[_i4];
							            (0, _propertyOverriding.overrideDescriptor)(_constructor2.prototype, attr, {
							                getter: function getter() {
							                    return windowSandbox.nodeSandbox.element.getAttributeCore(this, [attr]) || '';
							                },
							                setter: function setter(value) {
							                    windowSandbox.nodeSandbox.element.setAttributeCore(this, [attr, value]);
							                }
							            });
							        }
							    };

							    WindowSandbox.prototype._overrideUrlPropDescriptor = function _overrideUrlPropDescriptor(prop, nativePropGetter, nativePropSetter) {
							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLAnchorElement.prototype, prop, {
							            getter: function getter() {
							                return (0, _anchor.getAnchorProperty)(this, nativePropGetter);
							            },
							            setter: function setter(value) {
							                (0, _anchor.setAnchorProperty)(this, nativePropSetter, value);
							            }
							        });
							    };

							    WindowSandbox.prototype._overrideErrEventPropDescriptor = function _overrideErrEventPropDescriptor(window, eventName, nativePropSetter) {
							        var _this2 = this;

							        var eventPropsOwner = _nativeMethods2.default.isEventPropsLocatedInProto ? window.Window.prototype : window;

							        (0, _propertyOverriding.overrideDescriptor)(eventPropsOwner, 'on' + eventName, {
							            getter: null,
							            setter: function setter(handler) {
							                nativePropSetter.call(window, handler);

							                _this2.listenersSandbox.emit(_this2.listenersSandbox.EVENT_LISTENER_ATTACHED_EVENT, {
							                    el: window,
							                    listener: handler,
							                    eventType: eventName
							                });
							            }
							        });
							    };

							    WindowSandbox.prototype._createOverriddenDOMTokenListMethod = function _createOverriddenDOMTokenListMethod(nativeMethod) {
							        var windowSandbox = this;

							        return function () {
							            var executionResult = nativeMethod.apply(this, arguments);
							            var tokenListOwner = this[SANDBOX_DOM_TOKEN_LIST_OWNER];

							            if (tokenListOwner)
							                // eslint-disable-next-line no-restricted-properties
							                windowSandbox.nodeSandbox.element.setAttributeCore(tokenListOwner, ['sandbox', this.toString()]);

							            return executionResult;
							        };
							    };

							    WindowSandbox._isSecureOrigin = function _isSecureOrigin(url) {
							        // NOTE: https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features
							        var parsedUrl = (0, _url.parseUrl)((0, _url.resolveUrlAsDest)(url));

							        /*eslint-disable no-restricted-properties*/
							        return ALLOWED_SERVICE_WORKER_PROTOCOLS.indexOf(parsedUrl.protocol) === -1 && ALLOWED_SERVICE_WORKER_HOST_NAMES.indexOf(parsedUrl.hostname) === -1;
							        /*eslint-enable no-restricted-properties*/
							    };

							    WindowSandbox.prototype.handleEvent = function handleEvent(event) {
							        if (event.defaultPrevented) return;

							        if (event.type === 'unhandledrejection') this._raiseUncaughtJsErrorEvent(this.UNHANDLED_REJECTION_EVENT, event, this.window);else if (event.type === 'error') {
							            if (event.message.indexOf('NS_ERROR_NOT_INITIALIZED') !== -1) event.preventDefault();else this._raiseUncaughtJsErrorEvent(this.UNCAUGHT_JS_ERROR_EVENT, event, window);
							        }
							    };

							    WindowSandbox.prototype.attach = function attach(window) {
							        var _this3 = this;

							        _SandboxBase.prototype.attach.call(this, window);

							        var messageSandbox = this.messageSandbox;
							        var nodeSandbox = this.nodeSandbox;
							        var windowSandbox = this;

							        this._reattachHandler(window, 'unhandledrejection');
							        this._reattachHandler(window, 'error');
							        this.listenersSandbox.initElementListening(window, ['error', 'unhandledrejection']);
							        this.listenersSandbox.on(this.listenersSandbox.EVENT_LISTENER_ATTACHED_EVENT, function (e) {
							            if (e.el !== window) return;

							            if (e.eventType === 'unhandledrejection') _this3._reattachHandler(window, 'unhandledrejection');else if (e.eventType === 'error') _this3._reattachHandler(window, 'error');
							        });
							        this._overrideErrEventPropDescriptor(window, 'error', _nativeMethods2.default.winOnErrorSetter);

							        if (_nativeMethods2.default.winOnUnhandledRejectionSetter) this._overrideErrEventPropDescriptor(window, 'unhandledrejection', _nativeMethods2.default.winOnUnhandledRejectionSetter);

							        messageSandbox.on(messageSandbox.SERVICE_MSG_RECEIVED_EVENT, function (e) {
							            var _e$message = e.message,
							                msg = _e$message.msg,
							                pageUrl = _e$message.pageUrl,
							                stack = _e$message.stack,
							                cmd = _e$message.cmd;


							            if (cmd === _this3.UNCAUGHT_JS_ERROR_EVENT || cmd === _this3.UNHANDLED_REJECTION_EVENT) windowSandbox.emit(cmd, { msg: msg, pageUrl: pageUrl, stack: stack });
							        });

							        window.CanvasRenderingContext2D.prototype.drawImage = function () {
							            var _this4 = this;

							            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
							                args[_key] = arguments[_key];
							            }

							            var image = args[0];

							            if ((0, _dom.isImgElement)(image) && !image[_internalProperties2.default.forceProxySrcForImage]) {
							                var src = _nativeMethods2.default.imageSrcGetter.call(image);

							                if (destLocation.sameOriginCheck(location.toString(), src)) {
							                    image = _nativeMethods2.default.createElement.call(window.document, 'img');

							                    _nativeMethods2.default.imageSrcSetter.call(image, (0, _url.getProxyUrl)(src));

							                    args[0] = image;

							                    if (!image.complete) {
							                        _nativeMethods2.default.addEventListener.call(image, 'load', function () {
							                            return _nativeMethods2.default.canvasContextDrawImage.apply(_this4, args);
							                        });
							                    }
							                }
							            }

							            return _nativeMethods2.default.canvasContextDrawImage.apply(this, args);
							        };

							        if (_nativeMethods2.default.objectAssign) {
							            window.Object.assign = function (target) {
							                var args = [];

							                args.push(target);

							                var targetType = typeof target;

							                for (var _len2 = arguments.length, sources = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
							                    sources[_key2 - 1] = arguments[_key2];
							                }

							                if (target && (targetType === 'object' || targetType === 'function') && sources.length) {
							                    for (var _i6 = 0; _i6 < sources.length; _i6++) {
							                        var source = sources[_i6];
							                        var sourceType = typeof source;

							                        if (!source || sourceType !== 'object' && sourceType !== 'function') {
							                            _nativeMethods2.default.objectAssign.call(this, target, source);
							                            continue;
							                        }

							                        var sourceKeys = _nativeMethods2.default.objectKeys.call(window.Object, source);

							                        for (var _i8 = 0; _i8 < sourceKeys.length; _i8++) {
							                            var key = sourceKeys[_i8];
							                            window[_instruction2.default.setProperty](target, key, source[key]);
							                        }
							                    }
							                } else args = _nativeMethods2.default.arrayConcat.call(args, sources);

							                return _nativeMethods2.default.objectAssign.apply(this, args);
							            };
							        }

							        window.open = function () {
							            var newArgs = [];
							            var target = arguments[1] ? nodeSandbox.element.getTarget(null, arguments[1]) : '_self';

							            newArgs.push((0, _url.getProxyUrl)(arguments[0]));
							            newArgs.push(target);

							            if (arguments.length > 2) newArgs.push(arguments[2]);
							            if (arguments.length > 3) newArgs.push(arguments[3]);

							            return _nativeMethods2.default.windowOpen.apply(window, newArgs);
							        };

							        if (window.FontFace) {
							            window.FontFace = function (family, source, descriptors) {
							                source = _style2.default.process(source, _url.convertToProxyUrl);

							                return new _nativeMethods2.default.FontFace(family, source, descriptors);
							            };
							            window.FontFace.prototype = _nativeMethods2.default.FontFace.prototype;
							            window.FontFace.toString = function () {
							                return _nativeMethods2.default.FontFace.toString();
							            };
							        }

							        if (window.Worker) {
							            window.Worker = function (scriptURL, options) {
							                if ((0, _constructorIsCalledWithoutNewKeyword2.default)(this, window.Worker)) _nativeMethods2.default.Worker.apply(this, arguments);

							                if (arguments.length === 0) return new _nativeMethods2.default.Worker();

							                if (typeof scriptURL === 'string') scriptURL = (0, _url.getProxyUrl)(scriptURL, { resourceType: (0, _url.stringifyResourceType)({ isScript: true }) });

							                return arguments.length === 1 ? new _nativeMethods2.default.Worker(scriptURL) : new _nativeMethods2.default.Worker(scriptURL, options);
							            };
							            window.Worker.prototype = _nativeMethods2.default.Worker.prototype;
							            window.Worker.toString = function () {
							                return _nativeMethods2.default.Worker.toString();
							            };
							        }

							        if (window.Blob) {
							            window.Blob = function (array, opts) {
							                if (arguments.length === 0) return new _nativeMethods2.default.Blob();

							                var type = opts && opts.type && opts.type.toString().toLowerCase() || (0, _getMimeType2.default)(array);

							                // NOTE: If we cannot identify the content type of data, we're trying to process it as a script.
							                // Unfortunately, we do not have the ability to exactly identify a script. That's why we make such
							                // an assumption. We cannot solve this problem at the Worker level either, because the operation of
							                // creating a new Blob instance is asynchronous. (GH-231)
							                if (!type || JAVASCRIPT_MIME_TYPES.indexOf(type) !== -1) array = [(0, _script.processScript)(array.join(''), true)];

							                // NOTE: IE11 throws an error when the second parameter of the Blob function is undefined (GH-44)
							                // If the overridden function is called with one parameter, we need to call the original function
							                // with one parameter as well.
							                return arguments.length === 1 ? new _nativeMethods2.default.Blob(array) : new _nativeMethods2.default.Blob(array, opts);
							            };
							            window.Blob.prototype = _nativeMethods2.default.Blob.prototype;
							            window.Blob.toString = function () {
							                return _nativeMethods2.default.Blob.toString();
							            };
							        }

							        if (window.EventSource) {
							            window.EventSource = function (url, opts) {
							                if (arguments.length) {
							                    var proxyUrl = (0, _url.getProxyUrl)(url, { resourceType: (0, _url.stringifyResourceType)({ isEventSource: true }) });

							                    if (arguments.length === 1) return new _nativeMethods2.default.EventSource(proxyUrl);

							                    return new _nativeMethods2.default.EventSource(proxyUrl, opts);
							                }

							                return new _nativeMethods2.default.EventSource();
							            };
							            window.EventSource.prototype = _nativeMethods2.default.EventSource.prototype;
							            window.EventSource.CONNECTING = _nativeMethods2.default.EventSource.CONNECTING;
							            window.EventSource.OPEN = _nativeMethods2.default.EventSource.OPEN;
							            window.EventSource.CLOSED = _nativeMethods2.default.EventSource.CLOSED;
							            window.EventSource.toString = function () {
							                return _nativeMethods2.default.EventSource.toString();
							            };
							        }

							        if (window.MutationObserver) {
							            window.MutationObserver = function (callback) {
							                var wrapper = function wrapper(mutations) {
							                    var result = [];

							                    for (var _i10 = 0; _i10 < mutations.length; _i10++) {
							                        var mutation = mutations[_i10];
							                        if (!_shadowUi2.default.isShadowUIMutation(mutation)) result.push(mutation);
							                    }

							                    if (result.length) callback.call(this, result, this);
							                };

							                return new _nativeMethods2.default.MutationObserver(wrapper);
							            };

							            window.MutationObserver.prototype = _nativeMethods2.default.MutationObserver.prototype;
							            window.MutationObserver.toString = function () {
							                return _nativeMethods2.default.MutationObserver.toString();
							            };
							        }

							        if (window.Proxy) {
							            window.Proxy = function (target, handler) {
							                if (handler.get) {
							                    var storedGet = handler.get;

							                    handler.get = function (getterTarget, name, receiver) {
							                        if (windowSandbox.isInternalGetter) return getterTarget[name];

							                        return storedGet.call(this, getterTarget, name, receiver);
							                    };
							                }

							                return new _nativeMethods2.default.Proxy(target, handler);
							            };
							            window.Proxy.toString = function () {
							                return _nativeMethods2.default.Proxy.toString();
							            };
							            window.Proxy.revocable = _nativeMethods2.default.Proxy.revocable;
							        }

							        if (_nativeMethods2.default.registerServiceWorker) {
							            window.navigator.serviceWorker.register = function () {
							                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
							                    args[_key3] = arguments[_key3];
							                }

							                var url = args[0];

							                if (typeof url === 'string') {
							                    if (WindowSandbox._isSecureOrigin(url)) {
							                        // NOTE: We cannot create an instance of the DOMException in the Android 6.0 and in the Edge 17 browsers.
							                        // The 'TypeError: Illegal constructor' error is raised if we try to call the constructor.
							                        return _pinkie2.default.reject(_browser.isAndroid || _browser.isMSEdge && _browser.version >= 17 ? new Error('Only secure origins are allowed.') : new DOMException('Only secure origins are allowed.', 'SecurityError'));
							                    }

							                    args[0] = (0, _url.getProxyUrl)(url, { resourceType: (0, _url.stringifyResourceType)({ isScript: true }) });
							                }

							                if (args[1] && typeof args[1].scope === 'string') {
							                    args[1].scope = (0, _url.getProxyUrl)(args[1].scope, {
							                        resourceType: (0, _url.stringifyResourceType)({ isScript: true })
							                    });
							                }

							                return _nativeMethods2.default.registerServiceWorker.apply(window.navigator.serviceWorker, args);
							            };
							        }

							        if (_nativeMethods2.default.getRegistrationServiceWorker) {
							            window.navigator.serviceWorker.getRegistration = function () {
							                for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
							                    args[_key4] = arguments[_key4];
							                }

							                var scopeUrl = args[0];

							                if (typeof scopeUrl === 'string') {
							                    args[0] = (0, _url.getProxyUrl)(scopeUrl, {
							                        resourceType: (0, _url.stringifyResourceType)({ isScript: true })
							                    });
							                }

							                return _nativeMethods2.default.getRegistrationServiceWorker.apply(window.navigator.serviceWorker, args);
							            };
							        }

							        if (window.Range.prototype.createContextualFragment) {
							            window.Range.prototype.createContextualFragment = function () {
							                for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
							                    args[_key5] = arguments[_key5];
							                }

							                var tagString = args[0];

							                if (typeof tagString === 'string') {
							                    args[0] = (0, _html.processHtml)(tagString, {
							                        processedContext: this.startContainer && this.startContainer[_internalProperties2.default.processedContext]
							                    });
							                }

							                var fragment = _nativeMethods2.default.createContextualFragment.apply(this, args);

							                nodeSandbox.processNodes(fragment);

							                return fragment;
							            };
							        }

							        window.Image = function () {
							            var image = null;

							            if (!arguments.length) image = new _nativeMethods2.default.Image();else if (arguments.length === 1) image = new _nativeMethods2.default.Image(arguments[0]);else image = new _nativeMethods2.default.Image(arguments[0], arguments[1]);

							            image[_internalProperties2.default.forceProxySrcForImage] = true;

							            nodeSandbox.processNodes(image);

							            return image;
							        };
							        window.Image.prototype = _nativeMethods2.default.Image.prototype;
							        window.Image.toString = function () {
							            return _nativeMethods2.default.Image.toString();
							        };

							        var FunctionWrapper = function FunctionWrapper() {
							            for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
							                args[_key6] = arguments[_key6];
							            }

							            var functionBodyArgIndex = args.length - 1;

							            if (typeof args[functionBodyArgIndex] === 'string') args[functionBodyArgIndex] = (0, _script.processScript)(args[functionBodyArgIndex], false);

							            return _nativeMethods2.default.Function.apply(this, args);
							        };

							        window.Function = FunctionWrapper;
							        window.Function.prototype = _nativeMethods2.default.Function.prototype;
							        window.Function.prototype.constructor = FunctionWrapper;

							        // NOTE: We need to create function which returns string without calling toString every time
							        // because if the Function.prototype.toString is overridden it can be the cause of recursion
							        window.Function.toString = function () {
							            return this === FunctionWrapper ? nativeFunctionToString : _nativeMethods2.default.functionToString.call(this);
							        };

							        if (typeof window.history.pushState === 'function' && typeof window.history.replaceState === 'function') {
							            var createWrapperForHistoryStateManipulationFn = function createWrapperForHistoryStateManipulationFn(nativeFn) {
							                return function () {
							                    for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
							                        args[_key7] = arguments[_key7];
							                    }

							                    var url = args[2];

							                    if (args.length > 2 && url !== null && (_browser.isIE || url !== void 0)) args[2] = (0, _url.getProxyUrl)(String(url));

							                    return nativeFn.apply(this, args);
							                };
							            };

							            window.history.pushState = createWrapperForHistoryStateManipulationFn(_nativeMethods2.default.historyPushState);
							            window.history.replaceState = createWrapperForHistoryStateManipulationFn(_nativeMethods2.default.historyReplaceState);
							        }

							        if (window.navigator.sendBeacon) {
							            window.navigator.sendBeacon = function () {
							                if (typeof arguments[0] === 'string') arguments[0] = (0, _url.getProxyUrl)(arguments[0]);

							                return _nativeMethods2.default.sendBeacon.apply(this, arguments);
							            };
							        }

							        if (window.navigator.registerProtocolHandler) {
							            window.navigator.registerProtocolHandler = function () {
							                var urlIndex = 1;

							                for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
							                    args[_key8] = arguments[_key8];
							                }

							                if (typeof args[urlIndex] === 'string') {
							                    // eslint-disable-next-line no-restricted-properties
							                    var destHostname = destLocation.getParsed().hostname;

							                    var isDestUrl = '';

							                    if (_browser.isFirefox) {
							                        var parsedUrl = (0, _url.parseUrl)(args[urlIndex]);

							                        // eslint-disable-next-line no-restricted-properties
							                        isDestUrl = parsedUrl.hostname && (0, _url.isSubDomain)(destHostname, parsedUrl.hostname);
							                    } else isDestUrl = destLocation.sameOriginCheck(destLocation.get(), args[urlIndex]);

							                    if (isDestUrl) args[urlIndex] = (0, _url.getProxyUrl)(args[urlIndex]);
							                }

							                return _nativeMethods2.default.registerProtocolHandler.apply(navigator, args);
							            };
							        }

							        if (window.FormData) {
							            window.FormData.prototype.append = function (name, value) {
							                // NOTE: We should not send our hidden input's value along with the file info,
							                // because our input may have incorrect value if the input with the file has been removed from DOM.
							                if (name === _internalAttributes2.default.uploadInfoHiddenInputName) return;

							                // NOTE: If we append our file wrapper to FormData, we will lose the file name.
							                // This happens because the file wrapper is an instance of Blob
							                // and a browser thinks that Blob does not contain the "name" property.
							                if (arguments.length === 2 && (0, _dom.isBlob)(value) && 'name' in value) _nativeMethods2.default.formDataAppend.call(this, name, value, value.name);else _nativeMethods2.default.formDataAppend.apply(this, arguments);
							            };
							        }

							        if (window.WebSocket) {
							            window.WebSocket = function (url, protocols) {
							                if (arguments.length === 0) return new _nativeMethods2.default.WebSocket();

							                var proxyUrl = (0, _url.getProxyUrl)(url, { resourceType: (0, _url.stringifyResourceType)({ isWebSocket: true }) });

							                if (arguments.length === 1) return new _nativeMethods2.default.WebSocket(proxyUrl);else if (arguments.length === 2) return new _nativeMethods2.default.WebSocket(proxyUrl, protocols);

							                return new _nativeMethods2.default.WebSocket(proxyUrl, protocols, arguments[2]);
							            };

							            window.WebSocket.prototype = _nativeMethods2.default.WebSocket.prototype;
							            window.WebSocket.CONNECTING = _nativeMethods2.default.WebSocket.CONNECTING;
							            window.WebSocket.OPEN = _nativeMethods2.default.WebSocket.OPEN;
							            window.WebSocket.CLOSING = _nativeMethods2.default.WebSocket.CLOSING;
							            window.WebSocket.CLOSED = _nativeMethods2.default.WebSocket.CLOSED;

							            if (_nativeMethods2.default.webSocketUrlGetter) {
							                (0, _propertyOverriding.overrideDescriptor)(window.WebSocket.prototype, 'url', {
							                    getter: function getter() {
							                        var url = _nativeMethods2.default.webSocketUrlGetter.call(this);
							                        var parsedUrl = (0, _url.parseProxyUrl)(url);

							                        if (parsedUrl && parsedUrl.destUrl) return parsedUrl.destUrl.replace(HTTP_PROTOCOL_RE, 'ws');

							                        return url;
							                    }
							                });
							            }

							            window.WebSocket.toString = function () {
							                return _nativeMethods2.default.WebSocket.toString();
							            };
							        }

							        (0, _propertyOverriding.overrideDescriptor)(window.MessageEvent.prototype, 'origin', {
							            getter: function getter() {
							                var target = this.target;
							                var origin = _nativeMethods2.default.messageEventOriginGetter.call(this);

							                if ((0, _dom.isWebSocket)(target)) {
							                    var parsedUrl = (0, _url.parseUrl)(target.url);

							                    if (parsedUrl)
							                        // eslint-disable-next-line no-restricted-properties
							                        return parsedUrl.protocol + '//' + parsedUrl.host;
							                } else if ((0, _dom.isWindow)(target)) {
							                    var data = _nativeMethods2.default.messageEventDataGetter.call(this);

							                    if (data) return data.originUrl;
							                }

							                return origin;
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLCollection.prototype, 'length', {
							            getter: function getter() {
							                var length = _nativeMethods2.default.htmlCollectionLengthGetter.call(this);

							                if (_shadowUi2.default.isShadowContainerCollection(this)) return windowSandbox.shadowUI.getShadowUICollectionLength(this, length);
							                // IE11 and Edge have a strange behavior: shadow container collection flag may be lost (GH-1763)
							                else if (_browser.isIE && length && (0, _dom.isHeadOrBodyElement)(this[0].parentNode)) {
							                        _shadowUi2.default.markAsShadowContainerCollection(this);

							                        return windowSandbox.shadowUI.getShadowUICollectionLength(this, length);
							                    }

							                return length;
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.NodeList.prototype, 'length', {
							            getter: function getter() {
							                var length = _nativeMethods2.default.nodeListLengthGetter.call(this);

							                if (_shadowUi2.default.isShadowContainerCollection(this)) return windowSandbox.shadowUI.getShadowUICollectionLength(this, length);

							                return length;
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.Element.prototype, 'childElementCount', {
							            getter: function getter() {
							                if (_shadowUi2.default.isShadowContainer(this)) {
							                    var childrenLength = _nativeMethods2.default.htmlCollectionLengthGetter.call(this.children);

							                    return windowSandbox.shadowUI.getShadowUICollectionLength(this.children, childrenLength);
							                }

							                return _nativeMethods2.default.elementChildElementCountGetter.call(this);
							            }
							        });

							        if (_nativeMethods2.default.performanceEntryNameGetter) {
							            (0, _propertyOverriding.overrideDescriptor)(window.PerformanceEntry.prototype, 'name', {
							                getter: function getter() {
							                    var name = _nativeMethods2.default.performanceEntryNameGetter.call(this);

							                    if ((0, _dom.isPerformanceNavigationTiming)(this)) {
							                        var parsedProxyUrl = (0, _url.parseProxyUrl)(name);

							                        if (parsedProxyUrl) return parsedProxyUrl.destUrl;
							                    }

							                    return name;
							                }
							            });
							        }

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLInputElement.prototype, 'files', {
							            getter: function getter() {
							                if (this.type.toLowerCase() === 'file') return _upload2.default.getFiles(this);

							                return _nativeMethods2.default.inputFilesGetter.call(this);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLInputElement.prototype, 'value', {
							            getter: function getter() {
							                if (this.type.toLowerCase() === 'file') return _upload2.default.getUploadElementValue(this);

							                return _nativeMethods2.default.inputValueGetter.call(this);
							            },
							            setter: function setter(value) {
							                if (this.type.toLowerCase() !== 'file') {

							                    _nativeMethods2.default.inputValueSetter.call(this, value);

							                    var valueChanged = value !== _nativeMethods2.default.inputValueGetter.call(this);

							                    if (valueChanged && !(0, _dom.isShadowUIElement)(this) && (0, _dom.isTextEditableElementAndEditingAllowed)(this)) windowSandbox.elementEditingWatcher.restartWatchingElementEditing(this);
							                } else windowSandbox.uploadSandbox.setUploadElementValue(this, value);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLInputElement.prototype, 'required', {
							            getter: function getter() {
							                return windowSandbox.nodeSandbox.element.getAttributeCore(this, ['required']) !== null;
							            },
							            setter: function setter(value) {
							                if (this.type.toLowerCase() !== 'file') _nativeMethods2.default.inputRequiredSetter.call(this, value);else if (value) windowSandbox.nodeSandbox.element.setAttributeCore(this, ['required', '']);else windowSandbox.nodeSandbox.element._removeAttributeCore(this, ['required']);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLTextAreaElement.prototype, 'value', {
							            getter: null,
							            setter: function setter(value) {
							                _nativeMethods2.default.textAreaValueSetter.call(this, value);

							                if (!(0, _dom.isShadowUIElement)(this) && (0, _dom.isTextEditableElementAndEditingAllowed)(this)) windowSandbox.elementEditingWatcher.restartWatchingElementEditing(this);
							            }
							        });

							        this._overrideUrlAttrDescriptors('data', [window.HTMLObjectElement]);

							        this._overrideUrlAttrDescriptors('src', [window.HTMLImageElement, window.HTMLScriptElement, window.HTMLEmbedElement, window.HTMLSourceElement, window.HTMLMediaElement, window.HTMLInputElement, window.HTMLFrameElement, window.HTMLIFrameElement]);

							        this._overrideUrlAttrDescriptors('action', [window.HTMLFormElement]);

							        this._overrideUrlAttrDescriptors('formAction', [window.HTMLInputElement, window.HTMLButtonElement]);

							        this._overrideUrlAttrDescriptors('href', [window.HTMLAnchorElement, window.HTMLLinkElement, window.HTMLAreaElement, window.HTMLBaseElement]);

							        if (_nativeMethods2.default.htmlManifestGetter) this._overrideUrlAttrDescriptors('manifest', [window.HTMLHtmlElement]);

							        this._overrideAttrDescriptors('target', [window.HTMLAnchorElement, window.HTMLFormElement, window.HTMLAreaElement, window.HTMLBaseElement]);

							        this._overrideAttrDescriptors('formTarget', [window.HTMLInputElement, window.HTMLButtonElement]);

							        this._overrideAttrDescriptors('autocomplete', [window.HTMLInputElement]);

							        // NOTE: Some browsers (for example, Edge, Internet Explorer 11, Safari) don't support the 'integrity' property.
							        if (_nativeMethods2.default.scriptIntegrityGetter && _nativeMethods2.default.linkIntegrityGetter) {
							            this._overrideAttrDescriptors('integrity', [window.HTMLScriptElement]);
							            this._overrideAttrDescriptors('integrity', [window.HTMLLinkElement]);
							        }

							        this._overrideAttrDescriptors('rel', [window.HTMLLinkElement]);

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLInputElement.prototype, 'type', {
							            getter: null,
							            setter: function setter(value) {
							                windowSandbox.nodeSandbox.element.setAttributeCore(this, ['type', value]);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLIFrameElement.prototype, 'sandbox', {
							            getter: function getter() {
							                var domTokenList = this[SANDBOX_DOM_TOKEN_LIST];

							                if (!domTokenList) {
							                    var span = _nativeMethods2.default.createElement.call(document, 'span');

							                    domTokenList = span.classList;
							                    span.className = windowSandbox.nodeSandbox.element.getAttributeCore(this, ['sandbox']) || '';

							                    _nativeMethods2.default.objectDefineProperty.call(window.Object, domTokenList, SANDBOX_DOM_TOKEN_LIST_OWNER, { value: this });
							                    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, SANDBOX_DOM_TOKEN_LIST, { value: domTokenList });
							                    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, SANDBOX_DOM_TOKEN_LIST_UPDATE_FN, {
							                        value: function value(_value) {
							                            span.className = _value;
							                        }
							                    });
							                }

							                return domTokenList;
							            },
							            setter: function setter(value) {
							                windowSandbox.nodeSandbox.element.setAttributeCore(this, ['sandbox', value]);

							                if (this[SANDBOX_DOM_TOKEN_LIST_UPDATE_FN]) this[SANDBOX_DOM_TOKEN_LIST_UPDATE_FN](windowSandbox.nodeSandbox.element.getAttributeCore(this, ['sandbox']) || '');
							            }
							        });

							        this._overrideUrlPropDescriptor('port', _nativeMethods2.default.anchorPortGetter, _nativeMethods2.default.anchorPortSetter);
							        this._overrideUrlPropDescriptor('host', _nativeMethods2.default.anchorHostGetter, _nativeMethods2.default.anchorHostSetter);
							        this._overrideUrlPropDescriptor('hostname', _nativeMethods2.default.anchorHostnameGetter, _nativeMethods2.default.anchorHostnameSetter);
							        this._overrideUrlPropDescriptor('pathname', _nativeMethods2.default.anchorPathnameGetter, _nativeMethods2.default.anchorPathnameSetter);
							        this._overrideUrlPropDescriptor('protocol', _nativeMethods2.default.anchorProtocolGetter, _nativeMethods2.default.anchorProtocolSetter);
							        this._overrideUrlPropDescriptor('search', _nativeMethods2.default.anchorSearchGetter, _nativeMethods2.default.anchorSearchSetter);

							        (0, _propertyOverriding.overrideDescriptor)(window.SVGImageElement.prototype, 'href', {
							            getter: function getter() {
							                var imageHref = _nativeMethods2.default.svgImageHrefGetter.call(this);

							                if (!imageHref[CONTEXT_SVG_IMAGE_ELEMENT]) {
							                    _nativeMethods2.default.objectDefineProperty(imageHref, CONTEXT_SVG_IMAGE_ELEMENT, {
							                        value: this,
							                        configurable: true
							                    });
							                }

							                return imageHref;
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.SVGAnimatedString.prototype, 'baseVal', {
							            getter: function getter() {
							                var baseVal = _nativeMethods2.default.svgAnimStrBaseValGetter.call(this);

							                if (this[CONTEXT_SVG_IMAGE_ELEMENT]) {
							                    var parsedHref = (0, _url.parseProxyUrl)(baseVal);

							                    baseVal = parsedHref ? parsedHref.destUrl : baseVal;
							                }

							                return baseVal;
							            },
							            setter: function setter(value) {
							                var contextSVGImageElement = this[CONTEXT_SVG_IMAGE_ELEMENT];

							                if (contextSVGImageElement) {
							                    var hasXlinkHrefAttr = _nativeMethods2.default.hasAttributeNS.call(contextSVGImageElement, _namespaces.XLINK_NAMESPACE, 'href');

							                    windowSandbox.nodeSandbox.element.setAttributeCore(contextSVGImageElement, [hasXlinkHrefAttr ? 'xlink:href' : 'href', value]);
							                    value = (0, _url.getProxyUrl)(value);
							                }

							                _nativeMethods2.default.svgAnimStrBaseValSetter.call(this, value);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.SVGAnimatedString.prototype, 'animVal', {
							            getter: function getter() {
							                var animVal = _nativeMethods2.default.svgAnimStrAnimValGetter.call(this);

							                if (this[CONTEXT_SVG_IMAGE_ELEMENT]) {
							                    var parsedAnimVal = (0, _url.parseProxyUrl)(animVal);

							                    return parsedAnimVal ? parsedAnimVal.destUrl : animVal;
							                }

							                return animVal;
							            }
							        });

							        if (_nativeMethods2.default.anchorOriginGetter) {
							            (0, _propertyOverriding.overrideDescriptor)(window.HTMLAnchorElement.prototype, 'origin', {
							                getter: function getter() {
							                    return (0, _anchor.getAnchorProperty)(this, _nativeMethods2.default.anchorOriginGetter);
							                }
							            });
							        }

							        (0, _propertyOverriding.overrideDescriptor)(window.StyleSheet.prototype, 'href', {
							            getter: function getter() {
							                var href = _nativeMethods2.default.styleSheetHrefGetter.call(this);
							                var parsedUrl = (0, _url.parseProxyUrl)(href);

							                return parsedUrl ? parsedUrl.destUrl : href;
							            }
							        });

							        if (_nativeMethods2.default.cssStyleSheetHrefGetter) {
							            (0, _propertyOverriding.overrideDescriptor)(window.CSSStyleSheet.prototype, 'href', {
							                getter: function getter() {
							                    var href = _nativeMethods2.default.cssStyleSheetHrefGetter.call(this);
							                    var parsedUrl = (0, _url.parseProxyUrl)(href);

							                    return parsedUrl ? parsedUrl.destUrl : href;
							                }
							            });
							        }

							        if (_nativeMethods2.default.nodeBaseURIGetter) {
							            (0, _propertyOverriding.overrideDescriptor)(window.Node.prototype, 'baseURI', {
							                getter: function getter() {
							                    var baseURI = _nativeMethods2.default.nodeBaseURIGetter.call(this);
							                    var parsedUrl = (0, _url.parseProxyUrl)(baseURI);

							                    return parsedUrl ? parsedUrl.destUrl : baseURI;
							                }
							            });
							        }

							        if (window.DOMParser) {
							            window.DOMParser.prototype.parseFromString = function () {
							                for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
							                    args[_key9] = arguments[_key9];
							                }

							                var str = args[0];
							                var type = args[1];
							                var processedHtml = void 0;

							                if (args.length > 1 && typeof str === 'string' && type === 'text/html') {
							                    processedHtml = (0, _html.processHtml)(str);
							                    args[0] = processedHtml;
							                }

							                var document = _nativeMethods2.default.DOMParserParseFromString.apply(this, args);

							                if (processedHtml) _shadowUi2.default.removeSelfRemovingScripts(document);

							                return document;
							            };
							        }

							        (0, _propertyOverriding.overrideDescriptor)(window.Node.prototype, 'firstChild', {
							            getter: function getter() {
							                if (_shadowUi2.default.isShadowContainer(this)) return windowSandbox.shadowUI.getFirstChild(this);

							                return _nativeMethods2.default.nodeFirstChildGetter.call(this);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.Element.prototype, 'firstElementChild', {
							            getter: function getter() {
							                if (_shadowUi2.default.isShadowContainer(this)) return windowSandbox.shadowUI.getFirstElementChild(this);

							                return _nativeMethods2.default.elementFirstElementChildGetter.call(this);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.Node.prototype, 'lastChild', {
							            getter: function getter() {
							                if (_shadowUi2.default.isShadowContainer(this)) return windowSandbox.shadowUI.getLastChild(this);

							                return _nativeMethods2.default.nodeLastChildGetter.call(this);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.Element.prototype, 'lastElementChild', {
							            getter: function getter() {
							                if (_shadowUi2.default.isShadowContainer(this)) return windowSandbox.shadowUI.getLastElementChild(this);

							                return _nativeMethods2.default.elementLastElementChildGetter.call(this);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.Node.prototype, 'nextSibling', {
							            getter: function getter() {
							                return windowSandbox.shadowUI.getNextSibling(this);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.Node.prototype, 'previousSibling', {
							            getter: function getter() {
							                return windowSandbox.shadowUI.getPrevSibling(this);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.Element.prototype, 'nextElementSibling', {
							            getter: function getter() {
							                return windowSandbox.shadowUI.getNextElementSibling(this);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.Element.prototype, 'previousElementSibling', {
							            getter: function getter() {
							                return windowSandbox.shadowUI.getPrevElementSibling(this);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window[_nativeMethods2.default.elementHTMLPropOwnerName].prototype, 'innerHTML', {
							            getter: function getter() {
							                var innerHTML = _nativeMethods2.default.elementInnerHTMLGetter.call(this);

							                if ((0, _dom.isScriptElement)(this)) return (0, _header.remove)(innerHTML);else if ((0, _dom.isStyleElement)(this)) return _style2.default.cleanUp(innerHTML, _url.parseProxyUrl);

							                return (0, _html.cleanUpHtml)(innerHTML, this.tagName);
							            },
							            setter: function setter(value) {
							                var el = this;
							                var isStyleEl = (0, _dom.isStyleElement)(el);
							                var isScriptEl = (0, _dom.isScriptElement)(el);

							                var processedValue = value !== null && value !== void 0 ? String(value) : value;

							                if (processedValue) {
							                    if (isStyleEl) processedValue = _style2.default.process(processedValue, _url.getProxyUrl, true);else if (isScriptEl) processedValue = (0, _script.processScript)(processedValue, true);else {
							                        processedValue = (0, _html.processHtml)(processedValue, {
							                            parentTag: el.tagName,
							                            processedContext: el[_internalProperties2.default.processedContext]
							                        });
							                    }
							                }

							                if (!isStyleEl && !isScriptEl) _domMutationTracker2.default.onChildrenChanged(el);

							                _nativeMethods2.default.elementInnerHTMLSetter.call(el, processedValue);

							                if (isStyleEl || isScriptEl) return;

							                _domMutationTracker2.default.onChildrenChanged(el);

							                if (windowSandbox.document.body === el) {
							                    var shadowUIRoot = windowSandbox.shadowUI.getRoot();

							                    windowSandbox.shadowUI.markShadowUIContainers(windowSandbox.document.head, el);
							                    _shadowUi2.default.markElementAndChildrenAsShadow(shadowUIRoot);
							                } else if ((0, _dom.isShadowUIElement)(el)) _shadowUi2.default.markElementAndChildrenAsShadow(el);

							                var parentDocument = (0, _dom.findDocument)(el);
							                var parentWindow = parentDocument ? parentDocument.defaultView : null;

							                // NOTE: For the iframe with an empty src.
							                if (parentWindow && parentWindow !== window && parentWindow[_internalProperties2.default.processDomMethodName]) parentWindow[_internalProperties2.default.processDomMethodName](el, parentDocument);else if (window[_internalProperties2.default.processDomMethodName]) window[_internalProperties2.default.processDomMethodName](el);

							                // NOTE: Fix for B239138 - unroll.me 'Cannot read property 'document' of null' error raised
							                // during recording. There was an issue when the document.body was replaced, so we need to
							                // reattach UI to a new body manually.

							                // NOTE: This check is required because jQuery calls the set innerHTML method for an element
							                // in an unavailable window.
							                if (window.self) {
							                    // NOTE: Use timeout, so that changes take effect.
							                    if ((0, _dom.isHtmlElement)(el) || (0, _dom.isBodyElement)(el)) _nativeMethods2.default.setTimeout.call(window, function () {
							                        return windowSandbox.nodeMutation.onBodyContentChanged(el);
							                    }, 0);
							                }
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window[_nativeMethods2.default.elementHTMLPropOwnerName].prototype, 'outerHTML', {
							            getter: function getter() {
							                var outerHTML = _nativeMethods2.default.elementOuterHTMLGetter.call(this);

							                return (0, _html.cleanUpHtml)(outerHTML, this.parentNode && this.parentNode.tagName);
							            },
							            setter: function setter(value) {
							                var el = this;
							                var parentEl = el.parentNode;

							                _domMutationTracker2.default.onElementChanged(el);

							                if (parentEl && value !== null && value !== void 0) {
							                    var parentDocument = (0, _dom.findDocument)(parentEl);
							                    var parentWindow = parentDocument ? parentDocument.defaultView : null;

							                    _nativeMethods2.default.elementOuterHTMLSetter.call(el, (0, _html.processHtml)(String(value), {
							                        parentTag: parentEl && parentEl.tagName,
							                        processedContext: el[_internalProperties2.default.processedContext]
							                    }));

							                    _domMutationTracker2.default.onChildrenChanged(parentEl);

							                    // NOTE: For the iframe with an empty src.
							                    if (parentWindow && parentWindow !== window && parentWindow[_internalProperties2.default.processDomMethodName]) parentWindow[_internalProperties2.default.processDomMethodName](parentEl, parentDocument);else if (window[_internalProperties2.default.processDomMethodName]) window[_internalProperties2.default.processDomMethodName](parentEl);

							                    // NOTE: This check is required for an element in an unavailable window.
							                    // NOTE: Use timeout, so that changes take effect.
							                    if (window.self && (0, _dom.isBodyElement)(el)) _nativeMethods2.default.setTimeout.call(window, function () {
							                        return windowSandbox.shadowUI.onBodyElementMutation();
							                    }, 0);
							                } else _nativeMethods2.default.elementOuterHTMLSetter.call(el, value);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLElement.prototype, 'innerText', {
							            getter: function getter() {
							                var textContent = _nativeMethods2.default.htmlElementInnerTextGetter.call(this);

							                return WindowSandbox._removeProcessingInstructions(textContent);
							            },
							            setter: function setter(value) {
							                var processedValue = WindowSandbox._processTextPropValue(this, value);

							                _domMutationTracker2.default.onChildrenChanged(this);

							                _nativeMethods2.default.htmlElementInnerTextSetter.call(this, processedValue);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLScriptElement.prototype, 'text', {
							            getter: function getter() {
							                var text = _nativeMethods2.default.scriptTextGetter.call(this);

							                return (0, _header.remove)(text);
							            },
							            setter: function setter(value) {
							                var processedValue = value ? (0, _script.processScript)(String(value), true) : value;

							                _nativeMethods2.default.scriptTextSetter.call(this, processedValue);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.HTMLAnchorElement.prototype, 'text', {
							            getter: function getter() {
							                var textContent = _nativeMethods2.default.anchorTextGetter.call(this);

							                return WindowSandbox._removeProcessingInstructions(textContent);
							            },
							            setter: function setter(value) {
							                var processedValue = WindowSandbox._processTextPropValue(this, value);

							                _domMutationTracker2.default.onChildrenChanged(this);

							                _nativeMethods2.default.anchorTextSetter.call(this, processedValue);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.Node.prototype, 'textContent', {
							            getter: function getter() {
							                var textContent = _nativeMethods2.default.nodeTextContentGetter.call(this);

							                return WindowSandbox._removeProcessingInstructions(textContent);
							            },
							            setter: function setter(value) {
							                var processedValue = WindowSandbox._processTextPropValue(this, value);

							                _domMutationTracker2.default.onChildrenChanged(this);

							                _nativeMethods2.default.nodeTextContentSetter.call(this, processedValue);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window[_nativeMethods2.default.elementAttributesPropOwnerName].prototype, 'attributes', {
							            getter: function getter() {
							                return (0, _attributes.getAttributes)(this);
							            }
							        });

							        window.DOMTokenList.prototype.add = this._createOverriddenDOMTokenListMethod(_nativeMethods2.default.tokenListAdd);
							        window.DOMTokenList.prototype.remove = this._createOverriddenDOMTokenListMethod(_nativeMethods2.default.tokenListRemove);
							        window.DOMTokenList.prototype.toggle = this._createOverriddenDOMTokenListMethod(_nativeMethods2.default.tokenListToggle);

							        if (_nativeMethods2.default.tokenListReplace) window.DOMTokenList.prototype.replace = this._createOverriddenDOMTokenListMethod(_nativeMethods2.default.tokenListReplace);

							        if (_nativeMethods2.default.tokenListSupports) {
							            window.DOMTokenList.prototype.supports = function () {
							                if (this[SANDBOX_DOM_TOKEN_LIST_OWNER]) {
							                    var nativeTokenList = _nativeMethods2.default.iframeSandboxGetter.call(this[SANDBOX_DOM_TOKEN_LIST_OWNER]);

							                    return _nativeMethods2.default.tokenListSupports.apply(nativeTokenList, arguments);
							                }

							                return _nativeMethods2.default.tokenListSupports.apply(this, arguments);
							            };
							        }

							        window.DOMImplementation.prototype.createHTMLDocument = function () {
							            for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
							                args[_key10] = arguments[_key10];
							            }

							            var doc = _nativeMethods2.default.createHTMLDocument.apply(this, args);

							            _urlResolver2.default.init(doc);

							            return doc;
							        };

							        (0, _propertyOverriding.overrideDescriptor)(window.MutationRecord.prototype, 'nextSibling', {
							            getter: function getter() {
							                var originNextSibling = _nativeMethods2.default.mutationRecordNextSiblingGetter.call(this);

							                return windowSandbox.shadowUI.getNextSibling(originNextSibling);
							            }
							        });

							        (0, _propertyOverriding.overrideDescriptor)(window.MutationRecord.prototype, 'previousSibling', {
							            getter: function getter() {
							                var originPrevSibling = _nativeMethods2.default.mutationRecordPrevSiblingGetter.call(this);

							                return windowSandbox.shadowUI.getPrevSibling(originPrevSibling);
							            }
							        });
							    };

							    return WindowSandbox;
							}(_base2.default);

							exports.default = WindowSandbox;
							module.exports = exports['default'];
						}
					},
					"shadow-ui.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _internalProperties = require('../../processing/dom/internal-properties');

						var _internalProperties2 = _interopRequireDefault(_internalProperties);

						var _base = require('./base');

						var _base2 = _interopRequireDefault(_base);

						var _index = require('./node/index');

						var _index2 = _interopRequireDefault(_index);

						var _nativeMethods = require('./native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _dom = require('../utils/dom');

						var domUtils = _interopRequireWildcard(_dom);

						var _domProcessor = require('../dom-processor');

						var _position = require('../utils/position');

						var _className = require('../../shadow-ui/class-name');

						var _className2 = _interopRequireDefault(_className);

						var _style = require('../utils/style');

						var _event = require('../utils/event');

						var _querySelector = require('../utils/query-selector');

						var _htmlCollectionWrapper = require('./node/live-node-list/html-collection-wrapper');

						var _htmlCollectionWrapper2 = _interopRequireDefault(_htmlCollectionWrapper);

						var _featureDetection = require('../utils/feature-detection');

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var IS_NON_STATIC_POSITION_RE = /fixed|relative|absolute/;
						var CLASSNAME_RE = /\.((?:\\.|[-\w]|[^\x00-\xa0])+)/g;

						var IS_SHADOW_CONTAINER_FLAG = 'hammerhead|shadow-ui|container-flag';
						var IS_SHADOW_CONTAINER_COLLECTION_FLAG = 'hammerhead|shadow-ui|container-collection-flag';
						var HTML_COLLECTION_WRAPPER = 'hammerhead|shadow-ui|html-collection-wrapper';

						var ShadowUI = function (_SandboxBase) {
						    _inherits(ShadowUI, _SandboxBase);

						    function ShadowUI(nodeMutation, messageSandbox, iframeSandbox, ieDebugSandbox) {
						        _classCallCheck(this, ShadowUI);

						        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

						        _this.BODY_CONTENT_CHANGED_COMMAND = 'hammerhead|command|body-content-changed';

						        _this.ROOT_CLASS = 'root';
						        _this.ROOT_ID = 'root';
						        _this.HIDDEN_CLASS = 'hidden';
						        _this.BLIND_CLASS = 'blind';

						        _this.nodeMutation = nodeMutation;
						        _this.messageSandbox = messageSandbox;
						        _this.iframeSandbox = iframeSandbox;
						        _this.ieDebugSandbox = ieDebugSandbox;

						        _this.root = null;
						        _this.lastActiveElement = null;
						        _this.uiStyleSheetsHtmlBackup = null;
						        _this.wrapperCreators = _this._createWrapperCreators();

						        _this._initEventCallbacks();
						        return _this;
						    }

						    ShadowUI.prototype._initEventCallbacks = function _initEventCallbacks() {
						        var _this2 = this;

						        this.runTaskScriptEventCallback = function (e) {
						            var contentDocument = _nativeMethods2.default.contentDocumentGetter.call(e.iframe);
						            var iframeHead = contentDocument.head;
						            var iframeBody = contentDocument.body;

						            _this2._restoreUIStyleSheets(iframeHead, _this2._getUIStyleSheetsHtml());
						            _this2.markShadowUIContainers(iframeHead, iframeBody);
						        };

						        this.beforeDocumentCleanedEventCallback = function () {
						            _this2.uiStyleSheetsHtmlBackup = _this2._getUIStyleSheetsHtml();
						        };

						        this.documentCleanedEventCallback = function (e) {
						            _this2._restoreUIStyleSheets(e.document.head, _this2.uiStyleSheetsHtmlBackup);
						            _this2.uiStyleSheetsHtmlBackup = null;

						            _this2.markShadowUIContainers(_this2.document.head, _this2.document.body);
						        };

						        this.documentClosedEventCallback = function (e) {
						            _this2._restoreUIStyleSheets(e.document.head, _this2.uiStyleSheetsHtmlBackup);
						            _this2.uiStyleSheetsHtmlBackup = null;

						            _this2.markShadowUIContainers(e.document.head, e.document.body);
						        };

						        this.bodyContentChangedEventCallback = function (el) {
						            var elContextWindow = el[_internalProperties2.default.processedContext];

						            if (elContextWindow !== window) {
						                _this2.messageSandbox.sendServiceMsg({
						                    cmd: _this2.BODY_CONTENT_CHANGED_COMMAND
						                }, elContextWindow);
						            } else _this2.onBodyElementMutation();
						        };

						        this.serviceMsgReceivedEventCallback = function (e) {
						            if (e.message.cmd === _this2.BODY_CONTENT_CHANGED_COMMAND) _this2.onBodyElementMutation();
						        };

						        this.bodyCreatedEventCallback = function (_ref) {
						            var body = _ref.body;
						            return _this2.markShadowUIContainers(_this2.document.head, body);
						        };
						    };

						    ShadowUI._filterElement = function _filterElement(el) {
						        return el && domUtils.isShadowUIElement(el) ? null : el;
						    };

						    ShadowUI.prototype._filterList = function _filterList(list, listLength, predicate) {
						        var filteredList = [];

						        for (var i = 0; i < listLength; i++) {
						            var el = predicate(list[i]);

						            if (el) filteredList.push(list[i]);
						        }

						        _nativeMethods2.default.objectDefineProperty.call(this.window.Object, filteredList, 'item', {
						            value: function value(index) {
						                return index >= filteredList.length ? null : filteredList[index];
						            }
						        });

						        if (list.namedItem) {
						            _nativeMethods2.default.objectDefineProperty.call(this.window.Object, filteredList, 'namedItem', {
						                value: function value(name) {
						                    return list.namedItem(name);
						                }
						            });
						        }

						        return filteredList.length === listLength ? list : filteredList;
						    };

						    ShadowUI.prototype._filterNodeList = function _filterNodeList(nodeList, originLength) {
						        return this._filterList(nodeList, originLength, function (item) {
						            return ShadowUI._filterElement(item);
						        });
						    };

						    ShadowUI.prototype._filterStyleSheetList = function _filterStyleSheetList(styleSheetList, originLength) {
						        return this._filterList(styleSheetList, originLength, function (item) {
						            return ShadowUI._filterElement(item.ownerNode);
						        });
						    };

						    ShadowUI._getFirstNonShadowElement = function _getFirstNonShadowElement(nodeList) {
						        var length = _nativeMethods2.default.nodeListLengthGetter.call(nodeList);

						        for (var i = 0; i < length; i++) {
						            if (ShadowUI._filterElement(nodeList[i])) return nodeList[i];
						        }

						        return null;
						    };

						    ShadowUI.prototype._createWrapperCreators = function _createWrapperCreators() {
						        var sandbox = this;

						        return {
						            getElementsByClassName: function getElementsByClassName(nativeGetElementsByClassNameFnName) {
						                return function () {
						                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						                        args[_key] = arguments[_key];
						                    }

						                    var elements = _nativeMethods2.default[nativeGetElementsByClassNameFnName].apply(this, args);
						                    var length = _nativeMethods2.default.htmlCollectionLengthGetter.call(elements);

						                    return sandbox._filterNodeList(elements, length);
						                };
						            },
						            getElementsByTagName: function getElementsByTagName(nativeGetElementsByTagNameFnName) {
						                return function () {
						                    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						                        args[_key2] = arguments[_key2];
						                    }

						                    var nativeCollection = _nativeMethods2.default[nativeGetElementsByTagNameFnName].apply(this, args);
						                    var tagName = args[0];

						                    if (typeof tagName !== 'string') return nativeCollection;

						                    if (!nativeCollection[HTML_COLLECTION_WRAPPER]) nativeCollection[HTML_COLLECTION_WRAPPER] = new _htmlCollectionWrapper2.default(nativeCollection, tagName);else nativeCollection[HTML_COLLECTION_WRAPPER]._refreshCollection();

						                    return nativeCollection[HTML_COLLECTION_WRAPPER];
						                };
						            },
						            querySelector: function querySelector(nativeQuerySelectorFnName, nativeQuerySelectorAllFnName) {
						                return function () {
						                    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
						                        args[_key3] = arguments[_key3];
						                    }

						                    if (typeof args[0] === 'string') args[0] = _index2.default.processSelector(args[0]);

						                    var element = _nativeMethods2.default[nativeQuerySelectorFnName].apply(this, args);
						                    var filteredElement = ShadowUI._filterElement(element);

						                    if (!element || filteredElement) return filteredElement;

						                    return ShadowUI._getFirstNonShadowElement(_nativeMethods2.default[nativeQuerySelectorAllFnName].apply(this, args));
						                };
						            },
						            querySelectorAll: function querySelectorAll(nativeQuerySelectorAllFnName) {
						                return function () {
						                    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
						                        args[_key4] = arguments[_key4];
						                    }

						                    if (typeof args[0] === 'string') args[0] = _index2.default.processSelector(args[0]);

						                    var list = _nativeMethods2.default[nativeQuerySelectorAllFnName].apply(this, args);
						                    var length = _nativeMethods2.default.nodeListLengthGetter.call(list);

						                    return sandbox._filterNodeList(list, length);
						                };
						            }
						        };
						    };

						    ShadowUI.prototype._markShadowUIContainerAndCollections = function _markShadowUIContainerAndCollections(containerEl) {
						        ShadowUI._markAsShadowContainer(containerEl);
						        ShadowUI.markAsShadowContainerCollection(containerEl.children);
						        ShadowUI.markAsShadowContainerCollection(containerEl.childNodes);
						    };

						    ShadowUI.prototype.markShadowUIContainers = function markShadowUIContainers(head, body) {
						        if (head) this._markShadowUIContainerAndCollections(head);

						        if (body) this._markShadowUIContainerAndCollections(body);
						    };

						    ShadowUI.prototype._bringRootToWindowTopLeft = function _bringRootToWindowTopLeft() {
						        var rootHasParentWithNonStaticPosition = false;
						        var parent = this.root.parentNode;

						        while (parent) {
						            var elementPosition = (0, _style.get)(parent, 'position');

						            if (IS_NON_STATIC_POSITION_RE.test(elementPosition)) rootHasParentWithNonStaticPosition = true;

						            parent = parent.parentNode;
						        }

						        if (rootHasParentWithNonStaticPosition) {
						            var rootOffset = (0, _position.getOffsetPosition)(this.root);

						            if (rootOffset.left !== 0 || rootOffset.top !== 0) {
						                var currentRootLeft = parseFloat((0, _style.get)(this.root, 'left')) || 0;
						                var currentRootTop = parseFloat((0, _style.get)(this.root, 'top')) || 0;
						                var newRootLeft = currentRootLeft - rootOffset.left + 'px';
						                var newRootTop = currentRootTop - rootOffset.top + 'px';

						                (0, _style.set)(this.root, 'left', newRootLeft);
						                (0, _style.set)(this.root, 'top', newRootTop);
						            }
						        }
						    };

						    ShadowUI.prototype._overrideDocumentMethods = function _overrideDocumentMethods(window, document) {
						        var shadowUI = this;
						        var docProto = window.Document.prototype;

						        docProto.elementFromPoint = function () {
						            // NOTE: T212974
						            shadowUI.addClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);

						            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
						                args[_key5] = arguments[_key5];
						            }

						            var res = ShadowUI._filterElement(_nativeMethods2.default.elementFromPoint.apply(this, args));

						            shadowUI.removeClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);

						            return res;
						        };

						        if (document.caretRangeFromPoint) {
						            docProto.caretRangeFromPoint = function () {
						                shadowUI.addClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);

						                for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
						                    args[_key6] = arguments[_key6];
						                }

						                var res = _nativeMethods2.default.caretRangeFromPoint.apply(this, args);

						                if (res && res.startContainer && !ShadowUI._filterElement(res.startContainer)) res = null;

						                shadowUI.removeClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);

						                return res;
						            };
						        }

						        if (document.caretPositionFromPoint) {
						            docProto.caretPositionFromPoint = function () {
						                shadowUI.addClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);

						                for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
						                    args[_key7] = arguments[_key7];
						                }

						                var res = _nativeMethods2.default.caretPositionFromPoint.apply(this, args);

						                if (res && res.offsetNode && !ShadowUI._filterElement(res.offsetNode)) res = null;

						                shadowUI.removeClass(shadowUI.getRoot(), shadowUI.HIDDEN_CLASS);

						                return res;
						            };
						        }

						        docProto.getElementById = function () {
						            for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
						                args[_key8] = arguments[_key8];
						            }

						            return ShadowUI._filterElement(_nativeMethods2.default.getElementById.apply(this, args));
						        };

						        docProto.getElementsByName = function () {
						            for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
						                args[_key9] = arguments[_key9];
						            }

						            var elements = _nativeMethods2.default.getElementsByName.apply(this, args);
						            var length = _featureDetection.getElementsByNameReturnsHTMLCollection ? _nativeMethods2.default.htmlCollectionLengthGetter.call(elements) : _nativeMethods2.default.nodeListLengthGetter.call(elements);

						            return shadowUI._filterNodeList(elements, length);
						        };

						        docProto.getElementsByClassName = this.wrapperCreators.getElementsByClassName('getElementsByClassName');
						        docProto.getElementsByTagName = this.wrapperCreators.getElementsByTagName('getElementsByTagName');
						        docProto.querySelector = this.wrapperCreators.querySelector('querySelector', 'querySelectorAll');
						        docProto.querySelectorAll = this.wrapperCreators.querySelectorAll('querySelectorAll');

						        // NOTE: T195358
						        docProto.querySelectorAll.toString = function () {
						            return _nativeMethods2.default.querySelectorAll.toString();
						        };
						        docProto.getElementsByClassName.toString = function () {
						            return _nativeMethods2.default.getElementsByClassName.toString();
						        };
						    };

						    ShadowUI.prototype._overrideElementMethods = function _overrideElementMethods(window) {
						        var bodyProto = window.HTMLBodyElement.prototype;
						        var headProto = window.HTMLHeadElement.prototype;

						        bodyProto.getElementsByClassName = this.wrapperCreators.getElementsByClassName('elementGetElementsByClassName');
						        bodyProto.getElementsByTagName = this.wrapperCreators.getElementsByTagName('elementGetElementsByTagName');
						        bodyProto.querySelector = this.wrapperCreators.querySelector('elementQuerySelector', 'elementQuerySelectorAll');
						        bodyProto.querySelectorAll = this.wrapperCreators.querySelectorAll('elementQuerySelectorAll');

						        headProto.getElementsByClassName = bodyProto.getElementsByClassName;
						        headProto.getElementsByTagName = bodyProto.getElementsByTagName;
						        headProto.querySelector = bodyProto.querySelector;
						        headProto.querySelectorAll = bodyProto.querySelectorAll;
						    };

						    ShadowUI.prototype._getUIStyleSheetsHtml = function _getUIStyleSheetsHtml() {
						        var stylesSelector = 'link.' + _className2.default.uiStylesheet;
						        var stylesheets = this.nativeMethods.querySelectorAll.call(this.document, stylesSelector);
						        var length = this.nativeMethods.nodeListLengthGetter.call(stylesheets);
						        var result = '';

						        for (var i = 0; i < length; i++) {
						            result += _nativeMethods2.default.elementOuterHTMLGetter.call(stylesheets[i]);
						        }return result;
						    };

						    ShadowUI.prototype._restoreUIStyleSheets = function _restoreUIStyleSheets(head, uiStyleSheetsHtml) {
						        if (!head || !uiStyleSheetsHtml) return;

						        var parser = this.nativeMethods.createElement.call(this.document, 'div');

						        _nativeMethods2.default.elementInnerHTMLSetter.call(parser, uiStyleSheetsHtml);

						        var length = _nativeMethods2.default.htmlCollectionLengthGetter.call(parser.children);

						        for (var i = 0; i < length; i++) {
						            var refNode = head.children[i] || null;
						            var newNode = _nativeMethods2.default.cloneNode.call(parser.children[i]);

						            ShadowUI._markElementAsShadow(newNode);
						            this.nativeMethods.insertBefore.call(head, newNode, refNode);
						        }
						    };

						    ShadowUI.prototype._markScriptsAndStylesAsShadowInHead = function _markScriptsAndStylesAsShadowInHead(head) {
						        // NOTE: document.head equals null after call 'document.open' function
						        if (!head) return;

						        var length = _nativeMethods2.default.htmlCollectionLengthGetter.call(head.children);

						        for (var i = 0; i < length; i++) {
						            var headChild = head.children[i];

						            if (ShadowUI.containsShadowUIClassPostfix(headChild)) ShadowUI._markElementAsShadow(headChild);
						        }
						    };

						    ShadowUI.prototype.getRoot = function getRoot() {
						        var _this3 = this;

						        if (!this.root || /* NOTE: T225944 */!this.document.body.contains(this.root)) {
						            if (!this.root) {
						                // NOTE: B254893
						                this.root = _nativeMethods2.default.createElement.call(this.document, 'div');
						                _nativeMethods2.default.setAttribute.call(this.root, 'id', ShadowUI.patchId(this.ROOT_ID));
						                _nativeMethods2.default.setAttribute.call(this.root, 'contenteditable', 'false');
						                this.addClass(this.root, this.ROOT_CLASS);
						                ShadowUI._markElementAsShadow(this.root);
						                _nativeMethods2.default.appendChild.call(this.document.body, this.root);

						                for (var _i2 = 0; _i2 < _domProcessor.EVENTS.length; _i2++) {
						                    var event = _domProcessor.EVENTS[_i2];
						                    this.root.addEventListener(event, _event.stopPropagation);
						                }

						                this._bringRootToWindowTopLeft();
						                _nativeMethods2.default.documentAddEventListener.call(this.document, 'DOMContentLoaded', function () {
						                    _this3.onBodyElementMutation();
						                    _this3._bringRootToWindowTopLeft();
						                });
						            } else _nativeMethods2.default.appendChild.call(this.document.body, this.root);
						        }

						        return this.root;
						    };

						    ShadowUI.prototype.attach = function attach(window) {
						        _SandboxBase.prototype.attach.call(this, window, window.document);

						        this.markShadowUIContainers(this.document.head, this.document.body);
						        this._overrideDocumentMethods(window, window.document);
						        this._overrideElementMethods(window);
						        this._markScriptsAndStylesAsShadowInHead(window.document.head);
						        this._initEvents();
						    };

						    ShadowUI.prototype._initEvents = function _initEvents() {
						        this.iframeSandbox.on(this.iframeSandbox.RUN_TASK_SCRIPT_EVENT, this.runTaskScriptEventCallback);
						        this.nodeMutation.on(this.nodeMutation.BEFORE_DOCUMENT_CLEANED_EVENT, this.beforeDocumentCleanedEventCallback);
						        this.nodeMutation.on(this.nodeMutation.DOCUMENT_CLEANED_EVENT, this.documentCleanedEventCallback);
						        this.nodeMutation.on(this.nodeMutation.DOCUMENT_CLOSED_EVENT, this.documentClosedEventCallback);
						        this.nodeMutation.on(this.nodeMutation.BODY_CONTENT_CHANGED_EVENT, this.bodyContentChangedEventCallback);
						        this.messageSandbox.on(this.messageSandbox.SERVICE_MSG_RECEIVED_EVENT, this.serviceMsgReceivedEventCallback);
						        this.nodeMutation.on(this.nodeMutation.BODY_CREATED_EVENT, this.bodyCreatedEventCallback);
						    };

						    ShadowUI.prototype.onBodyElementMutation = function onBodyElementMutation() {
						        if (!this.root || !this.document.body) return;

						        var isRootInDom = domUtils.closest(this.root, 'html');
						        var isRootLastChild = !this.nativeMethods.elementNextElementSiblingGetter.call(this.root);
						        // NOTE: Fix for B239138 - The 'Cannot read property 'document' of null' error
						        // is thrown on recording on the unroll.me site. There was an issue when
						        // document.body was replaced, so we need to reattach a UI to a new body manually.
						        var isRootInBody = this.root.parentNode === this.document.body;

						        if (!(isRootInDom && isRootLastChild && isRootInBody)) this.nativeMethods.appendChild.call(this.document.body, this.root);

						        this.markShadowUIContainers(this.document.head, this.document.body);
						    };

						    // Accessors


						    ShadowUI.prototype.getFirstChild = function getFirstChild(el) {
						        var length = _nativeMethods2.default.nodeListLengthGetter.call(el.childNodes);
						        var filteredNodes = this._filterNodeList(el.childNodes, length);

						        return filteredNodes[0] || null;
						    };

						    ShadowUI.prototype.getFirstElementChild = function getFirstElementChild(el) {
						        var length = _nativeMethods2.default.htmlCollectionLengthGetter.call(el.children);
						        var filteredNodes = this._filterNodeList(el.children, length);

						        return filteredNodes[0] || null;
						    };

						    ShadowUI.prototype.getLastChild = function getLastChild(el) {
						        var length = _nativeMethods2.default.nodeListLengthGetter.call(el.childNodes);
						        var filteredNodes = this._filterNodeList(el.childNodes, length);
						        var index = el.childNodes === filteredNodes ? length - 1 : filteredNodes.length - 1;

						        return index >= 0 ? filteredNodes[index] : null;
						    };

						    ShadowUI.prototype.getLastElementChild = function getLastElementChild(el) {
						        var length = _nativeMethods2.default.htmlCollectionLengthGetter.call(el.children);
						        var filteredNodes = this._filterNodeList(el.children, length);
						        var index = el.children === filteredNodes ? length - 1 : filteredNodes.length - 1;

						        return index >= 0 ? filteredNodes[index] : null;
						    };

						    ShadowUI.prototype.getNextSibling = function getNextSibling(el) {
						        if (!el) return el;

						        do {
						            el = _nativeMethods2.default.nodeNextSiblingGetter.call(el);
						        } while (el && domUtils.isShadowUIElement(el));

						        return el;
						    };

						    ShadowUI.prototype.getPrevSibling = function getPrevSibling(el) {
						        if (!el) return el;

						        do {
						            el = _nativeMethods2.default.nodePrevSiblingGetter.call(el);
						        } while (el && domUtils.isShadowUIElement(el));

						        return el;
						    };

						    ShadowUI.prototype.getNextElementSibling = function getNextElementSibling(el) {
						        do {
						            el = _nativeMethods2.default.elementNextElementSiblingGetter.call(el);
						        } while (el && domUtils.isShadowUIElement(el));

						        return el;
						    };

						    ShadowUI.prototype.getPrevElementSibling = function getPrevElementSibling(el) {
						        do {
						            el = _nativeMethods2.default.elementPrevElementSiblingGetter.call(el);
						        } while (el && domUtils.isShadowUIElement(el));

						        return el;
						    };

						    // Utils


						    ShadowUI._checkElementsPosition = function _checkElementsPosition(collection, length) {
						        if (!length) return;

						        var shadowUIElements = [];

						        for (var i = 0; i < length; i++) {
						            var item = collection[i];

						            if (domUtils.isShadowUIElement(item)) shadowUIElements.push(item);
						        }

						        var collectionOwner = shadowUIElements.length && shadowUIElements[0].parentNode;

						        for (var _i4 = 0; _i4 < shadowUIElements.length; _i4++) {
						            var shadowUIElement = shadowUIElements[_i4];
						            _nativeMethods2.default.appendChild.call(collectionOwner, shadowUIElement);
						        }
						    };

						    ShadowUI._hasFlag = function _hasFlag(obj, flag) {
						        try {
						            return !!obj[flag];
						        } catch (e) {
						            return false;
						        }
						    };

						    ShadowUI.isShadowContainer = function isShadowContainer(el) {
						        return ShadowUI._hasFlag(el, IS_SHADOW_CONTAINER_FLAG);
						    };

						    ShadowUI.isShadowContainerCollection = function isShadowContainerCollection(collection) {
						        return ShadowUI._hasFlag(collection, IS_SHADOW_CONTAINER_COLLECTION_FLAG);
						    };

						    ShadowUI._isShadowUIChildListMutation = function _isShadowUIChildListMutation(mutation) {
						        if (domUtils.isShadowUIElement(mutation.target)) return true;

						        var removedNodesLength = _nativeMethods2.default.nodeListLengthGetter.call(mutation.removedNodes);

						        for (var i = 0; i < removedNodesLength; i++) {
						            if (domUtils.isShadowUIElement(mutation.removedNodes[i])) return true;
						        }

						        var addedNodesLength = _nativeMethods2.default.nodeListLengthGetter.call(mutation.addedNodes);

						        for (var _i5 = 0; _i5 < addedNodesLength; _i5++) {
						            if (domUtils.isShadowUIElement(mutation.addedNodes[_i5])) return true;
						        }

						        return false;
						    };

						    ShadowUI._isShadowUIAttributeMutation = function _isShadowUIAttributeMutation(mutation) {
						        return domUtils.isShadowUIElement(mutation.target) || domUtils.isHammerheadAttr(mutation.attributeName);
						    };

						    ShadowUI._isShadowUICharacterDataMutation = function _isShadowUICharacterDataMutation(mutation) {
						        return domUtils.isShadowUIElement(mutation.target);
						    };

						    ShadowUI.isShadowUIMutation = function isShadowUIMutation(mutation) {
						        switch (mutation.type) {
						            case 'childList':
						                return ShadowUI._isShadowUIChildListMutation(mutation);
						            case 'attributes':
						                return ShadowUI._isShadowUIAttributeMutation(mutation);
						            case 'characterData':
						                return ShadowUI._isShadowUICharacterDataMutation(mutation);
						            default:
						                return false;
						        }
						    };

						    ShadowUI.removeSelfRemovingScripts = function removeSelfRemovingScripts(document) {
						        var selfRemovingScripts = _nativeMethods2.default.querySelectorAll.call(document, '.' + _className2.default.selfRemovingScript);
						        var length = _nativeMethods2.default.nodeListLengthGetter.call(selfRemovingScripts);

						        for (var i = 0; i < length; i++) {
						            _nativeMethods2.default.removeChild.call(selfRemovingScripts[i].parentNode, selfRemovingScripts[i]);
						        }
						    };

						    // API


						    ShadowUI.prototype.getShadowUICollectionLength = function getShadowUICollectionLength(collection, length) {
						        var shadowUIElementCount = 0;

						        for (var i = 0; i < length; i++) {
						            if (domUtils.isShadowUIElement(collection[i])) shadowUIElementCount++;
						        }

						        if (shadowUIElementCount && !this.ieDebugSandbox.isDebuggerInitiator()) ShadowUI._checkElementsPosition(collection, length);

						        return length - shadowUIElementCount;
						    };

						    // NOTE: this method cannot be static because it is a part of the public API


						    ShadowUI.prototype.addClass = function addClass(el, value) {
						        var patchedClass = ShadowUI.patchClassNames(value);

						        domUtils.addClass(el, patchedClass);
						    };

						    // NOTE: this method cannot be static because it is a part of the public API


						    ShadowUI.prototype.removeClass = function removeClass(elem, value) {
						        var patchedClass = ShadowUI.patchClassNames(value);

						        domUtils.removeClass(elem, patchedClass);
						    };

						    ShadowUI.hasClass = function hasClass(el, value) {
						        var patchedClass = ShadowUI.patchClassNames(value);

						        return domUtils.hasClass(el, patchedClass);
						    };

						    ShadowUI.patchId = function patchId(value) {
						        return value + _className2.default.postfix;
						    };

						    ShadowUI.patchClassNames = function patchClassNames(value) {
						        var names = value.split(/\s+/);

						        for (var i = 0; i < names.length; i++) {
						            names[i] += _className2.default.postfix;
						        }return names.join(' ');
						    };

						    ShadowUI.prototype.select = function select(selector, context) {
						        var patchedSelector = selector.replace(CLASSNAME_RE, function (className) {
						            return className + _className2.default.postfix;
						        });

						        return context ? _nativeMethods2.default.elementQuerySelectorAll.call(context, patchedSelector) : _nativeMethods2.default.querySelectorAll.call(this.document, patchedSelector);
						    };

						    ShadowUI.prototype.setBlind = function setBlind(value) {
						        if (value) this.addClass(this.getRoot(), this.BLIND_CLASS);else this.removeClass(this.getRoot(), this.BLIND_CLASS);
						    };

						    ShadowUI.prototype.getLastActiveElement = function getLastActiveElement() {
						        return this.lastActiveElement;
						    };

						    ShadowUI.prototype.setLastActiveElement = function setLastActiveElement(el) {
						        this.lastActiveElement = el;
						    };

						    ShadowUI.prototype.insertBeforeRoot = function insertBeforeRoot(el) {
						        var rootParent = this.getRoot().parentNode;
						        var lastParentChild = this.nativeMethods.nodeLastChildGetter.call(rootParent);

						        return _nativeMethods2.default.insertBefore.call(rootParent, el, lastParentChild);
						    };

						    ShadowUI._markElementAsShadow = function _markElementAsShadow(el) {
						        el[_internalProperties2.default.shadowUIElement] = true;
						    };

						    ShadowUI.markElementAndChildrenAsShadow = function markElementAndChildrenAsShadow(el) {
						        ShadowUI._markElementAsShadow(el);

						        // NOTE: For Text, Comment and ProcessingInstruction nodes
						        if (!el.querySelectorAll) return;

						        var childElements = (0, _querySelector.getNativeQuerySelectorAll)(el).call(el, '*');
						        var length = _nativeMethods2.default.nodeListLengthGetter.call(childElements);

						        for (var i = 0; i < length; i++) {
						            ShadowUI._markElementAsShadow(childElements[i]);
						        }
						    };

						    ShadowUI._markAsShadowContainer = function _markAsShadowContainer(container) {
						        _nativeMethods2.default.objectDefineProperty(container, IS_SHADOW_CONTAINER_FLAG, { value: true });
						    };

						    ShadowUI.markAsShadowContainerCollection = function markAsShadowContainerCollection(collection) {
						        _nativeMethods2.default.objectDefineProperty(collection, IS_SHADOW_CONTAINER_COLLECTION_FLAG, { value: true });
						    };

						    ShadowUI.containsShadowUIClassPostfix = function containsShadowUIClassPostfix(element) {
						        return typeof element.className === 'string' && element.className.indexOf(_className2.default.postfix) !== -1;
						    };

						    return ShadowUI;
						}(_base2.default);

						exports.default = ShadowUI;
						module.exports = exports['default'];
					},
					"storages": {
						"index.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _wrapper = require('./wrapper');

							var _wrapper2 = _interopRequireDefault(_wrapper);

							var _settings = require('../../settings');

							var _settings2 = _interopRequireDefault(_settings);

							var _destinationLocation = require('../../utils/destination-location');

							var destLocation = _interopRequireWildcard(_destinationLocation);

							var _nativeMethods = require('../native-methods');

							var nativeMethods = _interopRequireWildcard(_nativeMethods);

							var _dom = require('../../utils/dom');

							var _getStorageKey = require('../../../utils/get-storage-key');

							var _getStorageKey2 = _interopRequireDefault(_getStorageKey);

							var _internalProperties = require('../../../processing/dom/internal-properties');

							var _internalProperties2 = _interopRequireDefault(_internalProperties);

							var _json = require('../../json');

							var JSON = _interopRequireWildcard(_json);

							var _propertyOverriding = require('../../utils/property-overriding');

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var StorageSandbox = function (_SandboxBase) {
							    _inherits(StorageSandbox, _SandboxBase);

							    function StorageSandbox(listeners, unloadSandbox, eventSimulator) {
							        _classCallCheck(this, StorageSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.localStorageWrapper = null;
							        _this.sessionStorageWrapper = null;
							        _this.listeners = listeners;
							        _this.unloadSandbox = unloadSandbox;
							        _this.eventSimulator = eventSimulator;
							        _this.storages = {};
							        _this.isLocked = false;
							        return _this;
							    }

							    StorageSandbox.prototype._simulateStorageEventIfNecessary = function _simulateStorageEventIfNecessary(event, storageArea) {
							        if (this.isDeactivated()) return;

							        if (storageArea && storageArea.getContext() !== this.window) {
							            event.storageArea = storageArea;
							            this.eventSimulator.storage(this.window, event);
							        }
							    };

							    // NOTE: We are using a single storage wrapper instance for all same-domain windows.
							    // This wrapper is saved in the top same-domain window's sandbox.


							    StorageSandbox.prototype._createStorageWrappers = function _createStorageWrappers() {
							        var _this2 = this;

							        // eslint-disable-next-line no-restricted-properties
							        var host = destLocation.getParsed().host;

							        var sessionId = _settings2.default.get().sessionId;
							        var storageKey = (0, _getStorageKey2.default)(sessionId, host);
							        var topSameDomainWindow = (0, _dom.getTopSameDomainWindow)(this.window);
							        var topSameDomainStorages = topSameDomainWindow[_internalProperties2.default.hammerhead].sandbox.storageSandbox.storages;

							        // NOTE: Use the already created wrappers.
							        if (topSameDomainStorages[storageKey]) {
							            this.localStorageWrapper = topSameDomainStorages[storageKey].localStorageWrapper;
							            this.sessionStorageWrapper = topSameDomainStorages[storageKey].sessionStorageWrapper;
							        }
							        // NOTE: Or create new.
							        else {
							                this.localStorageWrapper = new _wrapper2.default(this.window, nativeMethods.winLocalStorageGetter.call(this.window), storageKey);
							                this.sessionStorageWrapper = new _wrapper2.default(this.window, nativeMethods.winSessionStorageGetter.call(this.window), storageKey);

							                this.unloadSandbox.on(this.unloadSandbox.BEFORE_UNLOAD_EVENT, function () {
							                    if (!_this2.isLocked) {
							                        _this2.localStorageWrapper.saveToNativeStorage();
							                        _this2.sessionStorageWrapper.saveToNativeStorage();
							                    }
							                });

							                // NOTE: Push to the top same-domain sandbox.
							                topSameDomainStorages[storageKey] = {
							                    localStorageWrapper: this.localStorageWrapper,
							                    sessionStorageWrapper: this.sessionStorageWrapper
							                };
							            }
							    };

							    StorageSandbox.prototype._overrideStorageEvent = function _overrideStorageEvent() {
							        var win = this.window;

							        this.window.StorageEvent = function (type, opts) {
							            if (arguments.length === 0) throw new TypeError();

							            var storedArea = opts.storageArea || null;

							            if (storedArea) delete opts.storageArea;

							            var event = new nativeMethods.StorageEvent(type, opts);

							            if (storedArea) {
							                nativeMethods.objectDefineProperty.call(win.Object, event, 'storageArea', {
							                    get: function get() {
							                        return storedArea;
							                    },
							                    set: function set() {
							                        return void 0;
							                    }
							                });
							            }

							            return event;
							        };

							        window.StorageEvent.toString = function () {
							            return nativeMethods.StorageEvent.toString();
							        };
							    };

							    StorageSandbox.prototype.clear = function clear() {
							        nativeMethods.winLocalStorageGetter.call(this.window).removeItem(this.localStorageWrapper.nativeStorageKey);
							        nativeMethods.winSessionStorageGetter.call(this.window).removeItem(this.sessionStorageWrapper.nativeStorageKey);
							    };

							    StorageSandbox.prototype.lock = function lock() {
							        this.isLocked = true;
							    };

							    StorageSandbox.prototype.backup = function backup() {
							        return {
							            localStorage: JSON.stringify(this.localStorageWrapper.getCurrentState()),
							            sessionStorage: JSON.stringify(this.sessionStorageWrapper.getCurrentState())
							        };
							    };

							    StorageSandbox.prototype.restore = function restore(_ref) {
							        var localStorage = _ref.localStorage,
							            sessionStorage = _ref.sessionStorage;

							        this.localStorageWrapper.restore(localStorage);
							        this.sessionStorageWrapper.restore(sessionStorage);
							    };

							    StorageSandbox.prototype.attach = function attach(window) {
							        var _this3 = this;

							        _SandboxBase.prototype.attach.call(this, window);

							        this._createStorageWrappers();

							        this.onLocalStorageChangeListener = this.localStorageWrapper.on(this.localStorageWrapper.STORAGE_CHANGED_EVENT, function (e) {
							            return _this3._simulateStorageEventIfNecessary(e, _this3.localStorageWrapper);
							        });
							        this.onSessionStorageListener = this.sessionStorageWrapper.on(this.sessionStorageWrapper.STORAGE_CHANGED_EVENT, function (e) {
							            return _this3._simulateStorageEventIfNecessary(e, _this3.sessionStorageWrapper);
							        });

							        this.listeners.initElementListening(window, ['storage']);
							        this.listeners.addInternalEventListener(window, ['storage'], function (e, dispatched, preventEvent) {
							            if (!dispatched) preventEvent();
							        });

							        this._overrideStorageEvent();

							        var storagesPropsOwner = this.nativeMethods.getStoragesPropsOwner(window);

							        // NOTE: Storage properties is located in Window.prototype in the IE11 and these are non configurable.
							        // We define descriptors from a prototype with an overridden getter on a window instance.
							        // We don't need define descriptors again if these was overridden.
							        var shouldDefineStorageProps = !nativeMethods.isStoragePropsLocatedInProto || !nativeMethods.objectHasOwnProperty.call(window, 'localStorage');

							        if (shouldDefineStorageProps) {
							            nativeMethods.objectDefineProperties.call(window.Object, window, {
							                'localStorage': (0, _propertyOverriding.createOverriddenDescriptor)(storagesPropsOwner, 'localStorage', {
							                    getter: function getter() {
							                        _this3.localStorageWrapper.setContext(window);

							                        return _this3.localStorageWrapper;
							                    }
							                }),

							                'sessionStorage': (0, _propertyOverriding.createOverriddenDescriptor)(storagesPropsOwner, 'sessionStorage', {
							                    getter: function getter() {
							                        _this3.sessionStorageWrapper.setContext(window);

							                        return _this3.sessionStorageWrapper;
							                    }
							                })
							            });
							        }
							    };

							    StorageSandbox.prototype.dispose = function dispose() {
							        this.localStorageWrapper.off(this.localStorageWrapper.STORAGE_CHANGED_EVENT, this.onLocalStorageChangeListener);
							        this.sessionStorageWrapper.off(this.sessionStorageWrapper.STORAGE_CHANGED_EVENT, this.onSessionStorageListener);

							        var topSameDomainWindow = (0, _dom.getTopSameDomainWindow)(this.window);

							        // NOTE: For removed iframe without src in IE11 window.top equals iframe's window
							        if (this.window === topSameDomainWindow && !topSameDomainWindow.frameElement) {
							            this.localStorageWrapper.dispose();
							            this.sessionStorageWrapper.dispose();
							        }
							    };

							    return StorageSandbox;
							}(_base2.default);

							exports.default = StorageSandbox;
							module.exports = exports['default'];
						},
						"wrapper.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _eventEmitter = require('../../utils/event-emitter');

							var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

							var _browser = require('../../utils/browser');

							var _url = require('../../utils/url');

							var _destinationLocation = require('../../utils/destination-location');

							var destLocation = _interopRequireWildcard(_destinationLocation);

							var _json = require('../../json');

							var JSON = _interopRequireWildcard(_json);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							var STORAGES_SANDBOX_TEMP = 'hammerhead|storages-sandbox-temp';
							var API_KEY_PREFIX = 'hammerhead|api-key-prefix|';
							var KEY = 0;
							var VALUE = 1;

							function getWrapperMethods() {
							    var methods = [];

							    for (var key in StorageWrapper.prototype) {
							        methods.push(key);
							    }return methods;
							}

							var StorageWrapper = function StorageWrapper(window, nativeStorage, nativeStorageKey) {
							    var _this = this,
							        _arguments = arguments;

							    _classCallCheck(this, StorageWrapper);

							    this.eventEmitter = new _eventEmitter2.default();
							    this.on = function (ev, handler) {
							        return _this.eventEmitter.on(ev, handler);
							    };
							    this.off = function (ev, handler) {
							        return _this.eventEmitter.off(ev, handler);
							    };
							    this.emit = function (ev, e) {
							        return _this.eventEmitter.emit(ev, e);
							    };
							    this.nativeStorage = nativeStorage;
							    this.nativeStorageKey = nativeStorageKey;
							    this.lastState = null;
							    this.window = window;
							    this.initialProperties = [];
							    this.wrapperMethods = [];
							    this.context = window;
							    this.intervalId = null;

							    this.STORAGE_CHANGED_EVENT = 'hammerhead|event|storage-changed';
							    this.EMPTY_OLD_VALUE_ARG = _browser.isIE ? '' : null;

							    var getAddedProperties = function getAddedProperties() {
							        // NOTE: The standard doesn't regulate the order in which properties are enumerated.
							        // But we rely on the fact that they are enumerated in the order they were created in all the supported browsers.
							        // In this case we cannot use Object.getOwnPropertyNames
							        // because the enumeration order in Android 6.0 is different from all other browsers.
							        var properties = [];

							        for (var property in _this) {
							            if (_nativeMethods2.default.objectHasOwnProperty.call(_this, property) && _this.initialProperties.indexOf(property) === -1) properties.push(property);
							        }

							        return properties;
							    };

							    _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'length', {
							        get: function get() {
							            return getAddedProperties().length;
							        },
							        set: function set() {
							            return void 0;
							        }
							    });

							    var loadStorage = function loadStorage(storage) {
							        if (!storage) storage = _this.nativeStorage[_this.nativeStorageKey];

							        storage = JSON.parse(storage || '[[],[]]');

							        for (var i = 0; i < storage[KEY].length; i++) {
							            _this[storage[KEY][i]] = storage[VALUE][i];
							        }
							    };

							    var raiseStorageChanged = function raiseStorageChanged(key, oldValue, newValue) {
							        var url = null;

							        try {
							            var parsedContextUrl = (0, _url.parseProxyUrl)(_this.context.location.toString());

							            url = parsedContextUrl ? parsedContextUrl.destUrl : destLocation.get();
							        } catch (e) {
							            _this.context = _this.window;
							            url = destLocation.get();
							        }

							        _this.emit(_this.STORAGE_CHANGED_EVENT, { key: key, oldValue: oldValue, newValue: newValue, url: url });
							    };

							    var checkStorageChanged = function checkStorageChanged() {
							        var currentState = _this.getCurrentState();

							        for (var i = 0; i < _this.lastState[KEY].length; i++) {
							            var lastStateKey = _this.lastState[KEY][i];
							            var lastStateValue = _this.lastState[VALUE][i];

							            var keyIndex = currentState[KEY].indexOf(lastStateKey);

							            if (keyIndex !== -1) {
							                if (currentState[VALUE][keyIndex] !== lastStateValue) raiseStorageChanged(currentState[KEY][keyIndex], lastStateValue, currentState[VALUE][keyIndex]);

							                currentState[KEY].splice(keyIndex, 1);
							                currentState[VALUE].splice(keyIndex, 1);
							            } else raiseStorageChanged(lastStateKey, lastStateValue, null);
							        }

							        for (var j = 0; j < currentState[KEY].length; j++) {
							            raiseStorageChanged(currentState[KEY][j], _this.EMPTY_OLD_VALUE_ARG, currentState[VALUE][j]);
							        }_this.lastState = _this.getCurrentState();
							    };

							    var clearStorage = function clearStorage() {
							        var addedProperties = getAddedProperties();
							        var changed = false;

							        for (var _i2 = 0; _i2 < addedProperties.length; _i2++) {
							            var addedProperty = addedProperties[_i2];
							            delete _this[addedProperty];
							            changed = true;
							        }

							        return changed;
							    };

							    var init = function init() {
							        loadStorage();
							        _this.lastState = _this.getCurrentState();

							        _this.intervalId = _nativeMethods2.default.setInterval.call(_this.window, function () {
							            return checkStorageChanged();
							        }, 10);
							    };

							    this.setContext = function (context) {
							        _this.context = context;
							    };

							    this.getContext = function () {
							        return _this.context;
							    };

							    this.saveToNativeStorage = function () {
							        var state = JSON.stringify(_this.getCurrentState());

							        if (_this.nativeStorage[_this.nativeStorageKey] !== state) _this.nativeStorage[_this.nativeStorageKey] = state;
							    };

							    this.getCurrentState = function () {
							        var addedProperties = getAddedProperties();
							        var state = [[], []];

							        for (var _i4 = 0; _i4 < addedProperties.length; _i4++) {
							            var addedProperty = addedProperties[_i4];
							            state[KEY].push(addedProperty);
							            state[VALUE].push(_this[addedProperty]);
							        }

							        return state;
							    };

							    this.restore = function (storage) {
							        clearStorage();
							        loadStorage(storage);

							        _this.lastState = _this.getCurrentState();
							    };

							    this.dispose = function () {
							        _nativeMethods2.default.clearInterval.call(_this.window, _this.intervalId);
							    };

							    var castToString = function castToString(value) {
							        // NOTE: The browser automatically translates the key and the value to a string. To repeat this behavior,
							        // we use native storage:
							        // localStorage.setItem(null, null) equivalently to localStorage.setItem('null', 'null')
							        _this.nativeStorage[STORAGES_SANDBOX_TEMP] = value;

							        return _this.nativeStorage[STORAGES_SANDBOX_TEMP];
							    };

							    var getValidKey = function getValidKey(key) {
							        var isWrapperMember = _this.wrapperMethods.indexOf(key) !== -1 || _this.initialProperties.indexOf(key) !== -1;

							        key = isWrapperMember ? API_KEY_PREFIX + key : key;

							        return castToString(key);
							    };

							    // API
							    this.clear = function () {
							        if (clearStorage()) {
							            raiseStorageChanged(null, null, null);
							            _this.lastState = _this.getCurrentState();
							        }
							    };

							    this.getItem = function (key) {
							        if (_arguments.length === 0) throw new TypeError();

							        key = getValidKey(key);

							        return _nativeMethods2.default.objectHasOwnProperty.call(_this, key) ? _this[key] : null;
							    };

							    this.key = function (keyNum) {
							        if (keyNum === void 0) throw new TypeError();

							        // NOTE: http://w3c-test.org/webstorage/storage_key.html
							        keyNum %= 0x100000000;

							        var addedProperties = getAddedProperties();

							        return keyNum >= 0 && keyNum < addedProperties.length ? addedProperties[keyNum] : null;
							    };

							    this.removeItem = function (key) {
							        if (_arguments.length === 0) throw new TypeError();

							        key = getValidKey(key);

							        delete _this[key];
							        checkStorageChanged();
							    };

							    this.setItem = function (key, value) {
							        if (_arguments.length < 2) throw new TypeError();

							        key = getValidKey(key);
							        value = castToString(value);

							        _this[key] = value;
							        checkStorageChanged();
							    };

							    // NOTE: Save wrapper properties and methods to be able to distinguish them from
							    // properties that will be created from the outside.
							    this.initialProperties = _nativeMethods2.default.objectGetOwnPropertyNames.call(window.Object, this);
							    this.wrapperMethods = getWrapperMethods();

							    init();
							};

							exports.default = StorageWrapper;


							StorageWrapper.prototype = Storage.prototype;
							module.exports = exports['default'];
						}
					},
					"style.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _base = require('./base');

						var _base2 = _interopRequireDefault(_base);

						var _propertyOverriding = require('./../utils/property-overriding');

						var _style = require('./../../processing/style');

						var _style2 = _interopRequireDefault(_style);

						var _url = require('./../utils/url');

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var CSS_STYLE_IS_PROCESSED = 'hammerhead|style|is-processed';
						var CSS_STYLE_PROXY_OBJECT = 'hammerhead|style|proxy-object';
						var CSS_STYLE_PROXY_TARGET = 'hammerhead|style|proxy-target';

						var StyleSandbox = function (_SandboxBase) {
						    _inherits(StyleSandbox, _SandboxBase);

						    function StyleSandbox() {
						        _classCallCheck(this, StyleSandbox);

						        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

						        _this.URL_PROPS = ['background', 'backgroundImage', 'borderImage', 'borderImageSource', 'listStyle', 'listStyleImage', 'cursor'];
						        _this.DASHED_URL_PROPS = StyleSandbox._generateDashedProps(_this.URL_PROPS);
						        _this.FEATURES = _this._detectBrowserFeatures();
						        return _this;
						    }

						    StyleSandbox._convertToDashed = function _convertToDashed(prop) {
						        return prop.replace(/[A-Z]/g, '-$&').toLowerCase();
						    };

						    StyleSandbox._generateDashedProps = function _generateDashedProps(props) {
						        var dashedProps = [];

						        for (var _i2 = 0; _i2 < props.length; _i2++) {
						            var prop = props[_i2];
						            var dashedProp = StyleSandbox._convertToDashed(prop);

						            if (prop !== dashedProp) dashedProps.push(dashedProp);
						        }

						        return dashedProps;
						    };

						    StyleSandbox.prototype._detectBrowserFeatures = function _detectBrowserFeatures() {
						        var features = {};

						        // NOTE: The CSS2Properties class is supported only in the Firefox
						        // and its prototype contains all property descriptors
						        features.protoContainsAllProps = !!window.CSS2Properties;

						        // NOTE: The CSSStyleDeclaration class contains not dashed url properties only in the IE
						        features.protoContainsUrlProps = this.nativeMethods.objectHasOwnProperty.call(window.CSSStyleDeclaration.prototype, 'background');

						        if (!features.protoContainsAllProps && !features.protoContainsUrlProps) {
						            var testDiv = this.nativeMethods.createElement.call(document, 'div');
						            var propertySetterIsCalled = false;
						            var testDivDescriptor = this.nativeMethods.objectGetOwnPropertyDescriptor.call(window.Object, testDiv.style, 'background');

						            if (testDivDescriptor.configurable) {
						                // eslint-disable-next-line no-restricted-properties
						                delete testDivDescriptor.value;
						                delete testDivDescriptor.writable;
						                testDivDescriptor.set = function () {
						                    propertySetterIsCalled = true;
						                };

						                this.nativeMethods.objectDefineProperty.call(window.Object, testDiv.style, 'background', testDivDescriptor);

						                testDiv.style.background = 'url';
						            }

						            // NOTE: A style instance contains all url properties.
						            // They are non-configurable in Safari less than 11.1.
						            // Their setter cannot be called in Safari 11.1.
						            features.propsCannotBeOverridden = !testDivDescriptor.configurable || !propertySetterIsCalled;
						        }

						        return features;
						    };

						    StyleSandbox.prototype._overrideStyleProp = function _overrideStyleProp(proto, prop) {
						        var nativeMethods = this.nativeMethods;
						        var dashedProp = StyleSandbox._convertToDashed(prop);

						        (0, _propertyOverriding.overrideDescriptor)(proto, prop, {
						            getter: function getter() {
						                var value = nativeMethods.styleGetPropertyValue.call(this, dashedProp);

						                return _style2.default.cleanUp(value, _url.parseProxyUrl);
						            },
						            setter: function setter(value) {
						                if (typeof value === 'string') value = _style2.default.process(value, _url.getProxyUrl);

						                nativeMethods.styleSetProperty.call(this, dashedProp, value);
						            }
						        });
						    };

						    StyleSandbox.prototype._overrideStyleInstanceProp = function _overrideStyleInstanceProp(style, prop) {
						        var nativeMethods = this.nativeMethods;
						        var dashedProp = StyleSandbox._convertToDashed(prop);

						        (0, _propertyOverriding.overrideDescriptor)(style, prop, {
						            getter: function getter() {
						                var value = nativeMethods.styleGetPropertyValue.call(this, dashedProp);

						                return _style2.default.cleanUp(value, _url.parseProxyUrl);
						            },
						            setter: function setter(value) {
						                if (typeof value === 'string') value = _style2.default.process(value, _url.getProxyUrl);

						                nativeMethods.styleSetProperty.call(this, dashedProp, value);
						            }
						        });
						    };

						    StyleSandbox.prototype._processStyleInstance = function _processStyleInstance(style) {
						        var isProcessed = style[CSS_STYLE_IS_PROCESSED];

						        if (!isProcessed) {
						            for (var _i4 = 0, _DASHED_URL_PROPS2 = this.DASHED_URL_PROPS; _i4 < _DASHED_URL_PROPS2.length; _i4++) {
						                var prop = _DASHED_URL_PROPS2[_i4];
						                this._overrideStyleInstanceProp(style, prop);
						            }

						            if (!this.FEATURES.protoContainsUrlProps) {
						                for (var _i6 = 0, _URL_PROPS2 = this.URL_PROPS; _i6 < _URL_PROPS2.length; _i6++) {
						                    var _prop = _URL_PROPS2[_i6];
						                    this._overrideStyleInstanceProp(style, _prop);
						                }
						            }

						            this.nativeMethods.objectDefineProperty.call(window.Object, style, CSS_STYLE_IS_PROCESSED, { value: true });
						        }

						        return style;
						    };

						    StyleSandbox.prototype._getStyleProxy = function _getStyleProxy(style) {
						        var _this2 = this;

						        var proxyObject = style[CSS_STYLE_PROXY_OBJECT];

						        if (!proxyObject) {
						            proxyObject = new this.nativeMethods.Proxy(style, {
						                get: function get(target, prop) {
						                    if (_this2.URL_PROPS.indexOf(prop) !== -1 || _this2.DASHED_URL_PROPS.indexOf(prop) !== -1) return _style2.default.cleanUp(target[prop], _url.parseProxyUrl);

						                    if (prop === CSS_STYLE_PROXY_TARGET) return target;

						                    return target[prop];
						                },
						                set: function set(target, prop, value) {
						                    if (_this2.URL_PROPS.indexOf(prop) !== -1 || _this2.DASHED_URL_PROPS.indexOf(prop) !== -1) {
						                        if (typeof value === 'string') value = _style2.default.process(value, _url.getProxyUrl);
						                    }

						                    target[prop] = value;

						                    return true;
						                }
						            });

						            this.nativeMethods.objectDefineProperty.call(window.Object, style, CSS_STYLE_PROXY_OBJECT, { value: proxyObject });
						        }

						        return proxyObject;
						    };

						    StyleSandbox.prototype._overrideCSSStyleDeclarationFunctionsCtx = function _overrideCSSStyleDeclarationFunctionsCtx(window) {
						        var _this3 = this;

						        var styleDeclarationProto = window.CSSStyleDeclaration.prototype;

						        var _loop = function _loop(prop) {
						            // eslint-disable-next-line no-restricted-properties
						            var nativeFn = _this3.nativeMethods.objectGetOwnPropertyDescriptor.call(window.Object, styleDeclarationProto, prop).value;

						            if (_this3.nativeMethods.objectHasOwnProperty.call(styleDeclarationProto, prop) && typeof nativeFn === 'function') {
						                styleDeclarationProto[prop] = function () {
						                    return nativeFn.apply(this[CSS_STYLE_PROXY_TARGET] || this, arguments);
						                };
						            }
						        };

						        for (var prop in styleDeclarationProto) {
						            _loop(prop);
						        }
						    };

						    StyleSandbox.prototype.attach = function attach(window) {
						        _SandboxBase.prototype.attach.call(this, window);

						        var nativeMethods = this.nativeMethods;
						        var styleSandbox = this;

						        (0, _propertyOverriding.overrideDescriptor)(window[nativeMethods.htmlElementStylePropOwnerName].prototype, 'style', {
						            getter: this.FEATURES.protoContainsAllProps ? null : function () {
						                var style = nativeMethods.htmlElementStyleGetter.call(this);

						                if (styleSandbox.FEATURES.propsCannotBeOverridden) return styleSandbox._getStyleProxy(style);

						                return styleSandbox._processStyleInstance(style);
						            },
						            setter: nativeMethods.htmlElementStyleSetter ? function (value) {
						                var processedCss = _style2.default.process(value, _url.getProxyUrl);

						                nativeMethods.htmlElementStyleSetter.call(this, processedCss);
						            } : null
						        });

						        if (this.FEATURES.protoContainsAllProps) {
						            for (var _i8 = 0, _URL_PROPS4 = this.URL_PROPS; _i8 < _URL_PROPS4.length; _i8++) {
						                var prop = _URL_PROPS4[_i8];
						                this._overrideStyleProp(window.CSS2Properties.prototype, prop);
						            }

						            for (var _i10 = 0, _DASHED_URL_PROPS4 = this.DASHED_URL_PROPS; _i10 < _DASHED_URL_PROPS4.length; _i10++) {
						                var _prop2 = _DASHED_URL_PROPS4[_i10];
						                this._overrideStyleProp(window.CSS2Properties.prototype, _prop2);
						            }
						        } else if (this.FEATURES.protoContainsUrlProps) {
						            for (var _i12 = 0, _URL_PROPS6 = this.URL_PROPS; _i12 < _URL_PROPS6.length; _i12++) {
						                var _prop3 = _URL_PROPS6[_i12];
						                this._overrideStyleProp(window.CSSStyleDeclaration.prototype, _prop3);
						            }
						        }

						        (0, _propertyOverriding.overrideDescriptor)(window.CSSStyleDeclaration.prototype, 'cssText', {
						            getter: function getter() {
						                var cssText = nativeMethods.styleCssTextGetter.call(this);

						                return _style2.default.cleanUp(cssText, _url.parseProxyUrl);
						            },
						            setter: function setter(value) {
						                if (typeof value === 'string') value = _style2.default.process(value, _url.getProxyUrl);

						                nativeMethods.styleCssTextSetter.call(this, value);
						            }
						        });

						        window.CSSStyleDeclaration.prototype.getPropertyValue = function () {
						            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						                args[_key] = arguments[_key];
						            }

						            var value = nativeMethods.styleGetPropertyValue.apply(this, args);

						            return _style2.default.cleanUp(value, _url.parseProxyUrl);
						        };

						        window.CSSStyleDeclaration.prototype.setProperty = function () {
						            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						                args[_key2] = arguments[_key2];
						            }

						            var value = args[1];

						            if (typeof value === 'string') args[1] = _style2.default.process(value, _url.getProxyUrl);

						            return nativeMethods.styleSetProperty.apply(this, args);
						        };

						        window.CSSStyleDeclaration.prototype.removeProperty = function () {
						            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
						                args[_key3] = arguments[_key3];
						            }

						            var oldValue = nativeMethods.styleRemoveProperty.apply(this, args);

						            return _style2.default.cleanUp(oldValue, _url.parseProxyUrl);
						        };

						        // NOTE: We need to override context of all functions from the CSSStyleDeclaration prototype if we use the Proxy feature.
						        // Can only call CSSStyleDeclaration.<function name> on instances of CSSStyleDeclaration
						        // The error above occurs if functions will be called on a proxy instance.
						        if (this.FEATURES.propsCannotBeOverridden) this._overrideCSSStyleDeclarationFunctionsCtx(window);
						    };

						    return StyleSandbox;
						}(_base2.default);

						exports.default = StyleSandbox;
						module.exports = exports['default'];
					},
					"timers.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _base = require('./base');

						var _base2 = _interopRequireDefault(_base);

						var _nativeMethods = require('./native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _script = require('../../processing/script');

						var _browser = require('../utils/browser');

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						// NOTE: When you call the focus and blur function for some elements in IE, the event handlers  must be raised
						// asynchronously, but before executing functions that are called by using the window.setTimeout function. So,
						// we need to raise the handlers with a timeout, but do it before calling other asynchronous functions.
						var TimersSandbox = function (_SandboxBase) {
						    _inherits(TimersSandbox, _SandboxBase);

						    function TimersSandbox() {
						        _classCallCheck(this, TimersSandbox);

						        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

						        _this.timeouts = [];
						        _this.deferredFunctions = [];
						        _this.setTimeout = _nativeMethods2.default.setTimeout;
						        return _this;
						    }

						    TimersSandbox.prototype._wrapTimeoutFunctionsArguments = function _wrapTimeoutFunctionsArguments(args) {
						        var _this2 = this;

						        var isScriptFirstArg = typeof args[0] === 'string';
						        var func = !isScriptFirstArg ? args[0] : null;
						        var script = isScriptFirstArg ? (0, _script.processScript)(args[0], false) : null;

						        if (_browser.isIE && _browser.version < 12) {
						            var timersSandbox = this;
						            var fnToRun = isScriptFirstArg ? function () {
						                // NOTE: We are switching eval to the global context with this assignment.
						                // Unlike eval, the setTimeout/setInterval functions always work in the global context.
						                var ev = _this2.window.eval;

						                return ev(script);
						            } : func;

						            args[0] = function () {
						                return timersSandbox._callDeferredFunction(fnToRun, arguments);
						            };
						        } else if (isScriptFirstArg) args[0] = script;

						        return args;
						    };

						    TimersSandbox.prototype._callDeferredFunction = function _callDeferredFunction(fn, args) {
						        if (this.timeouts.length) {
						            var curTimeouts = [];
						            var curHandlers = [];

						            for (var i = 0; i < this.timeouts.length; i++) {
						                curTimeouts.push(this.timeouts[i]);
						                curHandlers.push(this.deferredFunctions[i]);
						            }

						            this.timeouts = [];
						            this.deferredFunctions = [];

						            for (var j = 0; j < curTimeouts.length; j++) {
						                _nativeMethods2.default.clearInterval.call(this.window, curTimeouts[j]);
						                curHandlers[j]();
						            }

						            // NOTE: Handlers can create new deferred functions.
						            return this._callDeferredFunction(fn, args);
						        }

						        return fn.apply(this.window, args);
						    };

						    TimersSandbox.prototype.attach = function attach(window) {
						        _SandboxBase.prototype.attach.call(this, window);

						        var timersSandbox = this;

						        window.setTimeout = function () {
						            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						                args[_key] = arguments[_key];
						            }

						            return _nativeMethods2.default.setTimeout.apply(window, timersSandbox._wrapTimeoutFunctionsArguments(args));
						        };

						        window.setInterval = function () {
						            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						                args[_key2] = arguments[_key2];
						            }

						            return _nativeMethods2.default.setInterval.apply(window, timersSandbox._wrapTimeoutFunctionsArguments(args));
						        };

						        // NOTE: We are saving the setTimeout wrapper for internal use in case the page-script replaces
						        // it with an invalid value.
						        this.setTimeout = window.setTimeout;
						    };

						    TimersSandbox.prototype.deferFunction = function deferFunction(fn) {
						        var _this3 = this;

						        var deferredFunction = function deferredFunction() {
						            fn();

						            for (var i = 0; i < _this3.deferredFunctions.length; i++) {
						                if (_this3.deferredFunctions[i] === deferredFunction) {
						                    _this3.deferredFunctions.splice(i, 1);
						                    _this3.timeouts.splice(i, 1);

						                    break;
						                }
						            }
						        };

						        this.deferredFunctions.push(deferredFunction);
						        this.timeouts.push(_nativeMethods2.default.setTimeout.call(window, deferredFunction, 0));
						    };

						    return TimersSandbox;
						}(_base2.default);

						exports.default = TimersSandbox;
						module.exports = exports['default'];
					},
					"upload": {
						"file-list-wrapper.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							var FileListWrapper = function () {
							    function FileListWrapper(fileList) {
							        var _this = this;

							        _classCallCheck(this, FileListWrapper);

							        _nativeMethods2.default.objectDefineProperty.call(window.Object, this, 'length', {
							            get: function get() {
							                return fileList.length;
							            }
							        });

							        for (var i = 0; i < fileList.length; i++) {
							            this[i] = FileListWrapper._createFileWrapper(fileList[i]);
							        }this.item = function (index) {
							            return _this[index];
							        };
							    }

							    FileListWrapper._base64ToBlob = function _base64ToBlob(base64Data, mimeType, sliceSize) {
							        mimeType = mimeType || '';
							        sliceSize = sliceSize || 512;

							        var byteCharacters = atob(base64Data);
							        var byteArrays = [];

							        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
							            var slice = byteCharacters.slice(offset, offset + sliceSize);
							            var byteNumbers = new Array(slice.length);

							            for (var i = 0; i < slice.length; i++) {
							                byteNumbers[i] = slice.charCodeAt(i);
							            }byteArrays.push(new Uint8Array(byteNumbers));
							        }

							        return new Blob(byteArrays, { type: mimeType });
							    };

							    FileListWrapper._createFileWrapper = function _createFileWrapper(fileInfo) {
							        var wrapper = null;

							        if (!window.Blob) {
							            wrapper = {
							                size: fileInfo.info.size,
							                type: fileInfo.info.type
							            };
							        } else if (fileInfo.blob) wrapper = new Blob([fileInfo.blob], { type: fileInfo.info.type });else wrapper = FileListWrapper._base64ToBlob(fileInfo.data, fileInfo.info.type);

							        wrapper.name = fileInfo.info.name;
							        wrapper.lastModifiedDate = new Date(fileInfo.info.lastModifiedDate);
							        wrapper.base64 = fileInfo.data;

							        return wrapper;
							    };

							    return FileListWrapper;
							}();

							exports.default = FileListWrapper;


							if (window.FileList) FileListWrapper.prototype = FileList.prototype;
							module.exports = exports['default'];
						},
						"hidden-info.js": function (exports, module, require) {
							

							exports.__esModule = true;
							exports.addInputInfo = addInputInfo;
							exports.getFormInfo = getFormInfo;
							exports.setFormInfo = setFormInfo;
							exports.removeInputInfo = removeInputInfo;

							var _internalAttributes = require('../../../processing/dom/internal-attributes');

							var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							var _json = require('../../json');

							var JSON = _interopRequireWildcard(_json);

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function createInput(form) {
							    var hiddenInput = _nativeMethods2.default.createElement.call(document, 'input');

							    hiddenInput.type = 'hidden';
							    hiddenInput.name = _internalAttributes2.default.uploadInfoHiddenInputName;

							    _nativeMethods2.default.inputValueSetter.call(hiddenInput, '[]');
							    _nativeMethods2.default.appendChild.call(form, hiddenInput);

							    return hiddenInput;
							}

							function getInput(form) {
							    var inputSelector = '[name="' + _internalAttributes2.default.uploadInfoHiddenInputName + '"]';

							    return _nativeMethods2.default.elementQuerySelector.call(form, inputSelector) || createInput(form);
							}

							function indexOf(info, input) {
							    for (var index = 0; index < info.length; index++) {
							        if (info[index].id === input.id || info[index].name === input.name) return index;
							    }

							    return -1;
							}

							function addInputInfo(input, fileList, value) {
							    var formInfo = getFormInfo(input);

							    if (formInfo) {
							        var files = [];

							        fileList = _nativeMethods2.default.arraySlice.call(fileList);

							        for (var i = 0, len = fileList.length; i < len; i++) {
							            var file = fileList[i];

							            files.push({
							                name: file.name,
							                type: file.type,
							                data: file.base64
							            });
							        }

							        var inputInfoIndex = indexOf(formInfo, input);
							        var inputInfo = {
							            id: input.id,
							            name: input.name,
							            files: files,
							            value: value
							        };

							        if (inputInfoIndex === -1) formInfo.push(inputInfo);else formInfo[inputInfoIndex] = inputInfo;

							        setFormInfo(input, formInfo);
							    }
							}

							function getFormInfo(input) {
							    return input.form ? JSON.parse(_nativeMethods2.default.inputValueGetter.call(getInput(input.form))) : null;
							}

							function setFormInfo(input, info) {
							    if (input.form) {
							        var hiddenInput = getInput(input.form);

							        _nativeMethods2.default.inputValueSetter.call(hiddenInput, JSON.stringify(info));
							    }
							}

							function removeInputInfo(input) {
							    var uploadInfo = getFormInfo(input);

							    if (uploadInfo) {
							        var inputInfoIndex = indexOf(uploadInfo, input);

							        if (inputInfoIndex !== -1) {
							            uploadInfo.splice(inputInfoIndex, 1);
							            setFormInfo(input, uploadInfo);

							            return true;
							        }
							    }

							    return false;
							}
						},
						"index.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _internalProperties = require('../../../processing/dom/internal-properties');

							var _internalProperties2 = _interopRequireDefault(_internalProperties);

							var _base = require('../base');

							var _base2 = _interopRequireDefault(_base);

							var _infoManager = require('./info-manager');

							var _infoManager2 = _interopRequireDefault(_infoManager);

							var _dom = require('../../utils/dom');

							var _browser = require('../../utils/browser');

							var _event = require('../../utils/event');

							var _backup = require('../backup');

							var _nativeMethods = require('../native-methods');

							var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

							function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

							var UploadSandbox = function (_SandboxBase) {
							    _inherits(UploadSandbox, _SandboxBase);

							    function UploadSandbox(listeners, eventSimulator, shadowUI) {
							        _classCallCheck(this, UploadSandbox);

							        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

							        _this.START_FILE_UPLOADING_EVENT = 'hammerhead|event|start-file-uploading';
							        _this.END_FILE_UPLOADING_EVENT = 'hammerhead|event|end-file-uploading';

							        _this.infoManager = new _infoManager2.default(shadowUI);

							        _this.listeners = listeners;
							        _this.eventSimulator = eventSimulator;
							        return _this;
							    }

							    UploadSandbox.prototype._riseChangeEvent = function _riseChangeEvent(input) {
							        this.eventSimulator.change(input);
							    };

							    UploadSandbox._getCurrentInfoManager = function _getCurrentInfoManager(input) {
							        var contextWindow = input[_internalProperties2.default.processedContext];

							        return (0, _backup.get)(contextWindow).upload.infoManager;
							    };

							    /*eslint-disable max-nested-callbacks */


							    UploadSandbox.prototype.attach = function attach(window) {
							        var _this2 = this;

							        _SandboxBase.prototype.attach.call(this, window);

							        this.listeners.addInternalEventListener(window, ['change'], function (e, dispatched) {
							            var input = e.target;
							            var currentInfoManager = UploadSandbox._getCurrentInfoManager(input);

							            if ((0, _dom.isFileInput)(input) && !dispatched) {
							                (0, _event.stopPropagation)(e);
							                (0, _event.preventDefault)(e);

							                var value = _nativeMethods2.default.inputValueGetter.call(input);

							                if (!!value || !!currentInfoManager.getValue(input)) {
							                    var files = _nativeMethods2.default.inputFilesGetter.call(input);
							                    var fileNames = _infoManager2.default.getFileNames(files, value);

							                    _this2.emit(_this2.START_FILE_UPLOADING_EVENT, fileNames, input);

							                    currentInfoManager.loadFileListData(input, files).then(function (fileList) {
							                        currentInfoManager.setUploadInfo(input, fileList, value);

							                        return _infoManager2.default.sendFilesInfoToServer(fileList, fileNames);
							                    }).then(function (uploadInfo) {
							                        _this2._riseChangeEvent(input);
							                        _this2.emit(_this2.END_FILE_UPLOADING_EVENT, uploadInfo);
							                    });
							                }
							            }
							        });

							        if (_browser.isIE) {
							            // NOTE: Prevent the browser's open file dialog.
							            this.listeners.addInternalEventListener(window, ['click'], function (e, dispatched) {
							                var input = e.target || e.srcElement;

							                if ((0, _dom.isFileInput)(input) && dispatched) (0, _event.preventDefault)(e, true);
							            });
							        }
							    };

							    /*eslint-enable max-nested-callbacks */

							    UploadSandbox.getFiles = function getFiles(input) {
							        var files = _nativeMethods2.default.inputFilesGetter.call(input);

							        return files !== void 0 ? UploadSandbox._getCurrentInfoManager(input).getFiles(input) : void 0;
							    };

							    UploadSandbox.getUploadElementValue = function getUploadElementValue(input) {
							        return UploadSandbox._getCurrentInfoManager(input).getValue(input);
							    };

							    UploadSandbox.prototype.setUploadElementValue = function setUploadElementValue(input, value) {
							        if (value === '') {
							            if (UploadSandbox._getCurrentInfoManager(input).clearUploadInfo(input) && _browser.isIE && _browser.version > 10) this._riseChangeEvent(input);
							        }

							        return value;
							    };

							    UploadSandbox.prototype.doUpload = function doUpload(input, filePaths) {
							        var _this3 = this;

							        var currentInfoManager = UploadSandbox._getCurrentInfoManager(input);

							        filePaths = filePaths || [];

							        return _infoManager2.default.loadFilesInfoFromServer(filePaths).then(function (filesInfo) {
							            return _infoManager2.default.prepareFileListWrapper(filesInfo);
							        }).then(function (data) {
							            if (!data.errs.length) {
							                var value = _infoManager2.default.formatValue(filePaths);

							                currentInfoManager.setUploadInfo(input, data.fileList, value);
							                _this3._riseChangeEvent(input);
							            }

							            return data.errs;
							        });
							    };

							    return UploadSandbox;
							}(_base2.default);

							exports.default = UploadSandbox;
							module.exports = exports['default'];
						},
						"info-manager.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _command = require('../../../session/command');

							var _command2 = _interopRequireDefault(_command);

							var _fileListWrapper = require('./file-list-wrapper');

							var _fileListWrapper2 = _interopRequireDefault(_fileListWrapper);

							var _transport = require('../../transport');

							var _transport2 = _interopRequireDefault(_transport);

							var _browser = require('../../utils/browser');

							var Browser = _interopRequireWildcard(_browser);

							var _hiddenInfo = require('./hidden-info');

							var HiddenInfo = _interopRequireWildcard(_hiddenInfo);

							var _pinkie = require('pinkie');

							var _pinkie2 = _interopRequireDefault(_pinkie);

							function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

							// NOTE: https://html.spec.whatwg.org/multipage/forms.html#fakepath-srsly.
							var FAKE_PATH_STRING = 'C:\\fakepath\\';

							var UploadInfoManager = function () {
							    function UploadInfoManager(shadowUI) {
							        _classCallCheck(this, UploadInfoManager);

							        this.shadowUI = shadowUI;
							        this.uploadInfo = [];
							    }

							    UploadInfoManager._getFileListData = function _getFileListData(fileList) {
							        var data = [];

							        for (var _i2 = 0; _i2 < fileList.length; _i2++) {
							            var file = fileList[_i2];
							            data.push(file.base64);
							        }

							        return data;
							    };

							    UploadInfoManager.formatValue = function formatValue(fileNames) {
							        var value = '';

							        fileNames = typeof fileNames === 'string' ? [fileNames] : fileNames;

							        if (fileNames && fileNames.length) {
							            if (Browser.isWebKit) value = FAKE_PATH_STRING + fileNames[0].split('/').pop();else return fileNames[0].split('/').pop();
							        }

							        return value;
							    };

							    UploadInfoManager.getFileNames = function getFileNames(fileList, value) {
							        var result = [];

							        if (fileList) {
							            for (var _i4 = 0; _i4 < fileList.length; _i4++) {
							                var file = fileList[_i4];
							                result.push(file.name);
							            }
							        } else if (value.lastIndexOf('\\') !== -1) result.push(value.substr(value.lastIndexOf('\\') + 1));

							        return result;
							    };

							    UploadInfoManager.loadFilesInfoFromServer = function loadFilesInfoFromServer(filePaths) {
							        return _transport2.default.asyncServiceMsg({
							            cmd: _command2.default.getUploadedFiles,
							            filePaths: typeof filePaths === 'string' ? [filePaths] : filePaths
							        });
							    };

							    UploadInfoManager.prepareFileListWrapper = function prepareFileListWrapper(filesInfo) {
							        var errs = [];
							        var validFilesInfo = [];

							        for (var _i6 = 0; _i6 < filesInfo.length; _i6++) {
							            var fileInfo = filesInfo[_i6];
							            if (fileInfo.err) errs.push(fileInfo);else validFilesInfo.push(fileInfo);
							        }

							        return {
							            errs: errs,
							            fileList: new _fileListWrapper2.default(validFilesInfo)
							        };
							    };

							    UploadInfoManager.sendFilesInfoToServer = function sendFilesInfoToServer(fileList, fileNames) {
							        return _transport2.default.asyncServiceMsg({
							            cmd: _command2.default.uploadFiles,
							            data: UploadInfoManager._getFileListData(fileList),
							            fileNames: fileNames
							        });
							    };

							    UploadInfoManager.prototype.clearUploadInfo = function clearUploadInfo(input) {
							        var inputInfo = this.getUploadInfo(input);

							        if (inputInfo) {
							            /*eslint-disable no-restricted-properties*/
							            inputInfo.files = new _fileListWrapper2.default([]);
							            inputInfo.value = '';
							            /*eslint-enable no-restricted-properties*/

							            return HiddenInfo.removeInputInfo(input);
							        }

							        return null;
							    };

							    UploadInfoManager.prototype.getFiles = function getFiles(input) {
							        var inputInfo = this.getUploadInfo(input);

							        // eslint-disable-next-line no-restricted-properties
							        return inputInfo ? inputInfo.files : new _fileListWrapper2.default([]);
							    };

							    UploadInfoManager.prototype.getUploadInfo = function getUploadInfo(input) {
							        for (var _i8 = 0, _uploadInfo2 = this.uploadInfo; _i8 < _uploadInfo2.length; _i8++) {
							            var uploadInfoItem = _uploadInfo2[_i8];
							            if (uploadInfoItem.input === input) return uploadInfoItem;
							        }

							        return null;
							    };

							    UploadInfoManager.prototype.getValue = function getValue(input) {
							        var inputInfo = this.getUploadInfo(input);

							        // eslint-disable-next-line no-restricted-properties
							        return inputInfo ? inputInfo.value : '';
							    };

							    UploadInfoManager.prototype.loadFileListData = function loadFileListData(input, fileList) {
							        if (!fileList.length) return _pinkie2.default.resolve(new _fileListWrapper2.default([]));

							        return new _pinkie2.default(function (resolve) {
							            var fileReader = new FileReader();
							            var readedFiles = [];
							            var index = 0;
							            var file = fileList[index];

							            fileReader.addEventListener('load', function (e) {
							                readedFiles.push({
							                    data: e.target.result.substr(e.target.result.indexOf(',') + 1),
							                    blob: file.slice(0, file.size),
							                    info: {
							                        type: file.type,
							                        name: file.name,
							                        lastModifiedDate: file.lastModifiedDate
							                    }
							                });

							                if (fileList[++index]) {
							                    file = fileList[index];
							                    fileReader.readAsDataURL(file);
							                } else resolve(new _fileListWrapper2.default(readedFiles));
							            });
							            fileReader.readAsDataURL(file);
							        });
							    };

							    UploadInfoManager.prototype.setUploadInfo = function setUploadInfo(input, fileList, value) {
							        var inputInfo = this.getUploadInfo(input);

							        if (!inputInfo) {
							            inputInfo = { input: input };
							            this.uploadInfo.push(inputInfo);
							        }

							        /*eslint-disable no-restricted-properties*/
							        inputInfo.files = fileList;
							        inputInfo.value = value;
							        /*eslint-enable no-restricted-properties*/

							        HiddenInfo.addInputInfo(input, fileList, value);
							    };

							    return UploadInfoManager;
							}();

							exports.default = UploadInfoManager;
							module.exports = exports['default'];
						}
					},
					"windows-storage.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.add = add;
						exports.remove = remove;
						exports.findByName = findByName;

						var _dom = require('../utils/dom');

						var _nativeMethods = require('./native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var WINDOWS_STORAGE = 'hammerhead|windows-storage';

						function getStorage() {
						    var topSameDomainWindow = (0, _dom.getTopSameDomainWindow)(window);
						    var storage = topSameDomainWindow[WINDOWS_STORAGE];

						    if (!storage) {
						        storage = [];
						        _nativeMethods2.default.objectDefineProperty.call(window.Object, topSameDomainWindow, WINDOWS_STORAGE, { value: storage });
						    }

						    return storage;
						}

						function add(wnd) {
						    var storage = getStorage();

						    for (var i = storage.length - 1; i >= 0; i--) {
						        try {
						            if (storage[i] === wnd) return;
						        } catch (e) {
						            storage.splice(i, 1);
						        }
						    }

						    storage.push(wnd);
						}

						function remove(wnd) {
						    var storage = getStorage();
						    var index = storage.indexOf(wnd);

						    if (index !== -1) storage.splice(index, 1);
						}

						function findByName(name) {
						    var storage = getStorage();

						    for (var i = 0; i < storage.length; i++) {
						        try {
						            if (storage[i].name === name) return storage[i];
						        } catch (e) {
						            // NOTE: During loading, an iframe can be changed from same-domain to cross-domain.
						            // Iframe's window is reinitialized, and we add 2 windows to the window storages:
						            // one to the same-domain storage and another one to the cross-domain storage.
						            // We remove the cross-domain window from this storage
						            // because it is already added to the cross-domain window storage.
						            storage.splice(i, 1);
						            i--;
						        }
						    }

						    return null;
						}
					},
					"xhr.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _base = require('./base');

						var _base2 = _interopRequireDefault(_base);

						var _nativeMethods = require('./native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _url = require('../utils/url');

						var _headers = require('../../request-pipeline/xhr/headers');

						var _headers2 = _interopRequireDefault(_headers);

						var _authorization = require('../../request-pipeline/xhr/authorization');

						var _authorization2 = _interopRequireDefault(_authorization);

						var _destinationLocation = require('../utils/destination-location');

						var _propertyOverriding = require('../utils/property-overriding');

						var _sameOriginCheckFailedStatusCode = require('../../request-pipeline/xhr/same-origin-check-failed-status-code');

						var _sameOriginCheckFailedStatusCode2 = _interopRequireDefault(_sameOriginCheckFailedStatusCode);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

						function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

						var XHR_READY_STATES = ['UNSENT', 'OPENED', 'HEADERS_RECEIVED', 'LOADING', 'DONE'];

						var XhrSandbox = function (_SandboxBase) {
						    _inherits(XhrSandbox, _SandboxBase);

						    function XhrSandbox(cookieSandbox) {
						        _classCallCheck(this, XhrSandbox);

						        var _this = _possibleConstructorReturn(this, _SandboxBase.call(this));

						        _this.XHR_COMPLETED_EVENT = 'hammerhead|event|xhr-completed';
						        _this.XHR_ERROR_EVENT = 'hammerhead|event|xhr-error';
						        _this.BEFORE_XHR_SEND_EVENT = 'hammerhead|event|before-xhr-send';

						        _this.cookieSandbox = cookieSandbox;
						        return _this;
						    }

						    XhrSandbox.createNativeXHR = function createNativeXHR() {
						        var xhr = new _nativeMethods2.default.XMLHttpRequest();

						        xhr.open = _nativeMethods2.default.xhrOpen;
						        xhr.abort = _nativeMethods2.default.xhrAbort;
						        xhr.send = _nativeMethods2.default.xhrSend;
						        xhr.addEventListener = _nativeMethods2.default.xhrAddEventListener;
						        xhr.removeEventListener = _nativeMethods2.default.xhrRemoveEventListener;
						        xhr.setRequestHeader = _nativeMethods2.default.xhrSetRequestHeader;
						        xhr.getResponseHeader = _nativeMethods2.default.xhrGetResponseHeader;
						        xhr.getAllResponseHeaders = _nativeMethods2.default.xhrGetAllResponseHeaders;
						        xhr.overrideMimeType = _nativeMethods2.default.xhrOverrideMimeType;
						        xhr.dispatchEvent = _nativeMethods2.default.xhrDispatchEvent;

						        return xhr;
						    };

						    XhrSandbox.openNativeXhr = function openNativeXhr(xhr, url, isAsync) {
						        xhr.open('POST', url, isAsync);
						        xhr.setRequestHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
						    };

						    XhrSandbox.prototype.attach = function attach(window) {
						        _SandboxBase.prototype.attach.call(this, window);

						        var xhrSandbox = this;
						        var xmlHttpRequestProto = window.XMLHttpRequest.prototype;
						        var xmlHttpRequestToString = _nativeMethods2.default.XMLHttpRequest.toString();

						        var emitXhrCompletedEventIfNecessary = function emitXhrCompletedEventIfNecessary() {
						            if (this.readyState === this.DONE) {
						                xhrSandbox.emit(xhrSandbox.XHR_COMPLETED_EVENT, { xhr: this });
						                _nativeMethods2.default.xhrRemoveEventListener.call(this, 'readystatechange', emitXhrCompletedEventIfNecessary);
						            }
						        };

						        var syncCookieWithClientIfNecessary = function syncCookieWithClientIfNecessary() {
						            if (this.readyState < this.HEADERS_RECEIVED) return;

						            xhrSandbox.cookieSandbox.syncCookie();

						            _nativeMethods2.default.xhrRemoveEventListener.call(this, 'readystatechange', syncCookieWithClientIfNecessary);
						        };

						        var xmlHttpRequestWrapper = function xmlHttpRequestWrapper() {
						            var xhr = new _nativeMethods2.default.XMLHttpRequest();

						            _nativeMethods2.default.xhrAddEventListener.call(xhr, 'readystatechange', emitXhrCompletedEventIfNecessary);
						            _nativeMethods2.default.xhrAddEventListener.call(xhr, 'readystatechange', syncCookieWithClientIfNecessary);

						            return xhr;
						        };

						        for (var _i2 = 0; _i2 < XHR_READY_STATES.length; _i2++) {
						            var readyState = XHR_READY_STATES[_i2];
						            _nativeMethods2.default.objectDefineProperty.call(window.Object, xmlHttpRequestWrapper, readyState, {
						                value: XMLHttpRequest[readyState],
						                enumerable: true
						            });
						        }

						        window.XMLHttpRequest = xmlHttpRequestWrapper;
						        xmlHttpRequestWrapper.prototype = xmlHttpRequestProto;
						        xmlHttpRequestWrapper.toString = function () {
						            return xmlHttpRequestToString;
						        };

						        // NOTE: We cannot just assign constructor property in OS X 10.11 safari 9.0
						        _nativeMethods2.default.objectDefineProperty.call(window.Object, xmlHttpRequestProto, 'constructor', {
						            value: xmlHttpRequestWrapper
						        });

						        xmlHttpRequestProto.abort = function () {
						            _nativeMethods2.default.xhrAbort.apply(this, arguments);
						            xhrSandbox.emit(xhrSandbox.XHR_ERROR_EVENT, {
						                err: new Error('XHR aborted'),
						                xhr: this
						            });
						        };

						        // NOTE: Redirect all requests to the Hammerhead proxy and ensure that requests don't
						        // violate Same Origin Policy.
						        xmlHttpRequestProto.open = function () {
						            var url = arguments[1];
						            var urlIsString = typeof input === 'string';

						            arguments[1] = (0, _url.getProxyUrl)(urlIsString ? url : String(url));

						            _nativeMethods2.default.xhrOpen.apply(this, arguments);
						        };

						        xmlHttpRequestProto.send = function () {
						            xhrSandbox.emit(xhrSandbox.BEFORE_XHR_SEND_EVENT, { xhr: this });

						            // NOTE: Add the XHR request mark, so that a proxy can recognize a request as a XHR request. As all
						            // requests are passed to the proxy, we need to perform Same Origin Policy compliance checks on the
						            // server side. So, we pass the CORS support flag to inform the proxy that it can analyze the
						            // Access-Control_Allow_Origin flag and skip "preflight" requests.
						            _nativeMethods2.default.xhrSetRequestHeader.call(this, _headers2.default.requestMarker, 'true');
						            // eslint-disable-next-line no-restricted-properties
						            _nativeMethods2.default.xhrSetRequestHeader.call(this, _headers2.default.origin, (0, _destinationLocation.getOriginHeader)());

						            if (this.withCredentials) _nativeMethods2.default.xhrSetRequestHeader.call(this, _headers2.default.withCredentials, 'true');

						            _nativeMethods2.default.xhrSend.apply(this, arguments);

						            // NOTE: For xhr with the sync mode
						            emitXhrCompletedEventIfNecessary.call(this);
						            syncCookieWithClientIfNecessary.call(this);
						        };

						        xmlHttpRequestProto.setRequestHeader = function (header, value) {
						            if (typeof header === 'string' && _authorization2.default.headers.indexOf(header.toLowerCase()) !== -1) value = _authorization2.default.valuePrefix + value;

						            return _nativeMethods2.default.xhrSetRequestHeader.call(this, header, value);
						        };

						        (0, _propertyOverriding.overrideDescriptor)(window.XMLHttpRequest.prototype, 'status', {
						            getter: function getter() {
						                var status = _nativeMethods2.default.xhrStatusGetter.call(this);

						                return status === _sameOriginCheckFailedStatusCode2.default ? 0 : status;
						            }
						        });

						        if (_nativeMethods2.default.xhrResponseURLGetter) {
						            (0, _propertyOverriding.overrideDescriptor)(window.XMLHttpRequest.prototype, 'responseURL', {
						                getter: function getter() {
						                    var responseUrl = _nativeMethods2.default.xhrResponseURLGetter.call(this);
						                    var parsedProxyUrl = responseUrl && (0, _url.parseProxyUrl)(responseUrl);

						                    return parsedProxyUrl ? parsedProxyUrl.destUrl : responseUrl;
						                }
						            });
						        }
						    };

						    return XhrSandbox;
						}(_base2.default);

						exports.default = XhrSandbox;
						module.exports = exports['default'];
					}
				},
				"settings.js": function (exports, module, require) {
					

					exports.__esModule = true;
					var settings = {
					    settings: {},

					    set: function set(value) {
					        this.settings = value;
					    },

					    get: function get() {
					        return this.settings;
					    }
					};

					exports.default = settings;
					module.exports = exports['default'];
				},
				"transport.js": function (exports, module, require) {
					

					exports.__esModule = true;

					var _nativeMethods = require('./sandbox/native-methods');

					var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

					var _settings = require('./settings');

					var _settings2 = _interopRequireDefault(_settings);

					var _xhr = require('./sandbox/xhr');

					var _xhr2 = _interopRequireDefault(_xhr);

					var _json = require('./json');

					var _browser = require('./utils/browser');

					var _createUnresolvablePromise = require('./utils/create-unresolvable-promise');

					var _createUnresolvablePromise2 = _interopRequireDefault(_createUnresolvablePromise);

					var _noop = require('./utils/noop');

					var _noop2 = _interopRequireDefault(_noop);

					var _pinkie = require('pinkie');

					var _pinkie2 = _interopRequireDefault(_pinkie);

					var _dom = require('./utils/dom');

					function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

					function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

					var SERVICE_MESSAGES_WAITING_INTERVAL = 50;

					var Transport = function () {
					    function Transport() {
					        _classCallCheck(this, Transport);

					        this.msgQueue = {};
					        this.activeServiceMessagesCounter = 0;

					        var frameElement = (0, _dom.getFrameElement)(window);

					        this.shouldAddRefferer = frameElement && (0, _dom.isIframeWithoutSrc)(frameElement);
					    }

					    Transport._storeMessage = function _storeMessage(msg) {
					        var storedMessages = Transport._getStoredMessages();

					        storedMessages.push(msg);

					        _nativeMethods2.default.winLocalStorageGetter.call(window).setItem(_settings2.default.get().sessionId, (0, _json.stringify)(storedMessages));
					    };

					    Transport._getStoredMessages = function _getStoredMessages() {
					        var storedMessagesStr = _nativeMethods2.default.winLocalStorageGetter.call(window).getItem(_settings2.default.get().sessionId);

					        return storedMessagesStr ? (0, _json.parse)(storedMessagesStr) : [];
					    };

					    Transport._removeMessageFromStore = function _removeMessageFromStore(cmd) {
					        var messages = Transport._getStoredMessages();

					        for (var i = 0; i < messages.length; i++) {
					            if (messages[i].cmd === cmd) {
					                messages.splice(i, 1);

					                break;
					            }
					        }

					        _nativeMethods2.default.winLocalStorageGetter.call(window).setItem(_settings2.default.get().sessionId, (0, _json.stringify)(messages));
					    };

					    // TODO: Rewrite this using Promise after getting rid of syncServiceMsg.


					    Transport.prototype._performRequest = function _performRequest(msg, callback) {
					        var _this = this;

					        msg.sessionId = _settings2.default.get().sessionId;

					        if (this.shouldAddRefferer) msg.referer = _settings2.default.get().referer;

					        var sendMsg = function sendMsg(forced) {
					            _this.activeServiceMessagesCounter++;

					            var isAsyncRequest = !forced;
					            var transport = _this;
					            var request = _xhr2.default.createNativeXHR();

					            var msgCallback = function msgCallback() {
					                // NOTE: The 500 status code is returned by server when an error occurred into service message handler
					                if (_nativeMethods2.default.xhrStatusGetter.call(this) === 500 && this.responseText) {
					                    msg.disableResending = true;
					                    errorHandler.call(this); // eslint-disable-line no-use-before-define
					                    return;
					                }

					                transport.activeServiceMessagesCounter--;

					                var response = this.responseText && (0, _json.parse)(this.responseText);

					                request = null;
					                callback(null, response);
					            };

					            var errorHandler = function errorHandler() {
					                if (msg.disableResending) {
					                    transport.activeServiceMessagesCounter--;

					                    var errorMsg = 'XHR request failed with ' + request.status + ' status code.';

					                    if (this.responseText) errorMsg += '\nError message: ' + this.responseText;

					                    callback(new Error(errorMsg));

					                    return;
					                }

					                if (_browser.isWebKit || _browser.isFirefox) {
					                    Transport._storeMessage(msg);
					                    msgCallback.call(this);
					                } else sendMsg(true);
					            };

					            _xhr2.default.openNativeXhr(request, _settings2.default.get().serviceMsgUrl, isAsyncRequest);

					            if (forced) {
					                request.addEventListener('readystatechange', function () {
					                    if (this.readyState !== 4) return;

					                    msgCallback.call(this);
					                });
					            } else {
					                request.addEventListener('load', msgCallback);
					                request.addEventListener('abort', errorHandler);
					                request.addEventListener('error', errorHandler);
					                request.addEventListener('timeout', errorHandler);
					            }

					            request.send((0, _json.stringify)(msg));
					        };

					        Transport._removeMessageFromStore(msg.cmd);
					        sendMsg();
					    };

					    Transport.prototype.waitForServiceMessagesCompleted = function waitForServiceMessagesCompleted(timeout) {
					        var _this2 = this;

					        return new _pinkie2.default(function (resolve) {
					            if (!_this2.activeServiceMessagesCounter) {
					                resolve();
					                return;
					            }

					            var intervalId = null;
					            var timeoutId = window.setTimeout(function () {
					                _nativeMethods2.default.clearInterval.call(window, intervalId);
					                resolve();
					            }, timeout);

					            intervalId = window.setInterval(function () {
					                if (!_this2.activeServiceMessagesCounter) {
					                    _nativeMethods2.default.clearInterval.call(window, intervalId);
					                    _nativeMethods2.default.clearTimeout.call(window, timeoutId);
					                    resolve();
					                }
					            }, SERVICE_MESSAGES_WAITING_INTERVAL);
					        });
					    };

					    Transport.prototype.asyncServiceMsg = function asyncServiceMsg(msg) {
					        var _this3 = this;

					        return new _pinkie2.default(function (resolve, reject) {
					            _this3._performRequest(msg, function (err, data) {
					                if (!err) resolve(data);else if (msg.allowRejecting) reject(err);
					            });
					        });
					    };

					    Transport.prototype.batchUpdate = function batchUpdate() {
					        var storedMessages = Transport._getStoredMessages();

					        if (storedMessages.length) {
					            var tasks = [];

					            _nativeMethods2.default.winLocalStorageGetter.call(window).removeItem(_settings2.default.get().sessionId);

					            for (var _i2 = 0; _i2 < storedMessages.length; _i2++) {
					                var storedMessage = storedMessages[_i2];
					                tasks.push(this.queuedAsyncServiceMsg(storedMessage));
					            }

					            return _pinkie2.default.all(tasks);
					        }
					        return _pinkie2.default.resolve();
					    };

					    Transport.prototype.queuedAsyncServiceMsg = function queuedAsyncServiceMsg(msg) {
					        var _this4 = this;

					        if (!this.msgQueue[msg.cmd]) this.msgQueue[msg.cmd] = _pinkie2.default.resolve();

					        var isRejectingAllowed = msg.allowRejecting;

					        msg.allowRejecting = true;

					        this.msgQueue[msg.cmd] = this.msgQueue[msg.cmd].catch(_noop2.default).then(function () {
					            return _this4.asyncServiceMsg(msg);
					        });

					        return this.msgQueue[msg.cmd].catch(function (err) {
					            if (isRejectingAllowed) return _pinkie2.default.reject(err);

					            return (0, _createUnresolvablePromise2.default)();
					        });
					    };

					    return Transport;
					}();

					exports.default = new Transport();
					module.exports = exports['default'];
				},
				"utils": {
					"browser.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.isElectron = exports.isWebKit = exports.isSafari = exports.isChrome = exports.isMSEdge = exports.isFirefox = exports.isIE9 = exports.isIE10 = exports.isIE11 = exports.isIE = exports.webkitVersion = exports.fullVersion = exports.version = exports.isTablet = exports.isMobile = exports.isIOS = exports.isAndroid = exports.isMacPlatform = exports.compareVersions = undefined;

						var _bowser = require('bowser');

						var _bowser2 = _interopRequireDefault(_bowser);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var userAgent = navigator.userAgent.toLowerCase();
						var info = _bowser2.default._detect(userAgent);
						var webkitVersionMatch = userAgent.match(/applewebkit\/(\d+(:?\.\d+)*)/);

						//Helper
						var compareVersions = exports.compareVersions = _bowser2.default.compareVersions;

						//Platforms
						var isMacPlatform = exports.isMacPlatform = !!info.mac;
						var isAndroid = exports.isAndroid = !!info.android;
						var isIOS = exports.isIOS = !!info.ios;
						var isMobile = exports.isMobile = !!info.mobile;
						var isTablet = exports.isTablet = !!info.tablet;

						//Browsers
						var version = exports.version = parseInt(info.version, 10);
						var fullVersion = exports.fullVersion = info.version;
						var webkitVersion = exports.webkitVersion = webkitVersionMatch && webkitVersionMatch[1] || '';
						var isIE = exports.isIE = !!(info.msie || info.msedge);
						var isIE11 = exports.isIE11 = isIE && version === 11;
						var isIE10 = exports.isIE10 = isIE && version === 10;
						var isIE9 = exports.isIE9 = isIE && version === 9;
						var isFirefox = exports.isFirefox = !!info.firefox;
						var isMSEdge = exports.isMSEdge = !!info.msedge;
						var isChrome = exports.isChrome = !!info.chrome;
						var isSafari = exports.isSafari = !!info.safari;
						var isWebKit = exports.isWebKit = !!(info.webkit || info.blink);
						var isElectron = exports.isElectron = /electron/g.test(userAgent);
					},
					"constructor-is-called-without-new-keyword.js": function (exports, module, require) {
						

						exports.__esModule = true;

						exports.default = function (callingContext, constructor) {
						    return callingContext instanceof constructor === false;
						};

						module.exports = exports['default'];
					},
					"cookie.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.parse = parse;
						exports.formatClientString = formatClientString;
						exports.setDefaultValues = setDefaultValues;
						exports.domainMatch = domainMatch;
						exports.pathMatch = pathMatch;
						exports.getUTCDate = getUTCDate;

						var _stringTrim = require('../../utils/string-trim');

						var _stringTrim2 = _interopRequireDefault(_stringTrim);

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var COOKIE_PAIR_REGEX = /^((?:=)?([^=;]*)\s*=\s*)?([^\n\r\0]*)/;
						var TRAILING_SEMICOLON_REGEX = /;+$/;
						var FIX_COOKIE_DATE = /((?:\s|,)[0-9]{1,2})(?:\s|-)([A-Za-z]{3})(?:\s|-)([0-9]{4}\s)/;

						function parse(str) {
						    str = (0, _stringTrim2.default)(str);

						    var trailingSemicolonCheck = TRAILING_SEMICOLON_REGEX.exec(str);

						    if (trailingSemicolonCheck) str = str.slice(0, trailingSemicolonCheck.index);

						    var firstSemicolonIdx = str.indexOf(';');
						    var keyValueString = firstSemicolonIdx > -1 ? str.substr(0, firstSemicolonIdx) : str;
						    var keyValueParsingResult = COOKIE_PAIR_REGEX.exec(keyValueString);

						    if (!keyValueParsingResult) return null;

						    var parsedCookie = {
						        key: keyValueParsingResult[1] ? (0, _stringTrim2.default)(keyValueParsingResult[2]) : '',
						        value: (0, _stringTrim2.default)(keyValueParsingResult[3])
						    };

						    if (firstSemicolonIdx === -1) return parsedCookie;

						    var attributesString = (0, _stringTrim2.default)(str.slice(firstSemicolonIdx).replace(/^\s*;\s*/, ''));

						    if (attributesString.length === 0) return parsedCookie;

						    var attrValStrings = attributesString.split(/\s*;\s*/);

						    while (attrValStrings.length) {
						        var attrValueStr = attrValStrings.shift();
						        var separatorIdx = attrValueStr.indexOf('=');
						        var key = null;
						        var value = null;
						        var date = null;

						        if (separatorIdx === -1) key = attrValueStr;else {
						            key = attrValueStr.substr(0, separatorIdx);
						            value = (0, _stringTrim2.default)(attrValueStr.substr(separatorIdx + 1));
						        }

						        key = (0, _stringTrim2.default)(key.toLowerCase());

						        switch (key) {
						            case 'expires':
						                value = value.replace(FIX_COOKIE_DATE, '$1 $2 $3');
						                date = getUTCDate(Date.parse(value));

						                if (date) parsedCookie.expires = date;

						                break;

						            case 'max-age':
						                parsedCookie.maxAge = value;
						                break;

						            case 'path':
						                parsedCookie.path = value;
						                break;

						            case 'secure':
						                parsedCookie.secure = true;
						                break;

						            case 'httponly':
						                parsedCookie.httpOnly = true;
						                break;

						            case 'domain':
						                // NOTE: Remove leading '.'.
						                parsedCookie.domain = (0, _stringTrim2.default)(value.replace(/^\./, ''));
						                break;

						            default:
						                break;
						        }
						    }

						    return parsedCookie;
						}

						function formatClientString(parsedCookie) {
						    // eslint-disable-next-line no-restricted-properties
						    var cookieStr = parsedCookie.value || '';

						    if (parsedCookie.key !== '') cookieStr = parsedCookie.key + '=' + cookieStr;

						    return cookieStr;
						}

						function setDefaultValues(parsedCookie, _ref) {
						    var hostname = _ref.hostname,
						        pathname = _ref.pathname;

						    if (!parsedCookie.domain) parsedCookie.domain = hostname; // eslint-disable-line no-restricted-properties

						    if (!parsedCookie.path || parsedCookie.path.charAt(0) !== '/') {
						        var path = pathname; // eslint-disable-line no-restricted-properties
						        var defaultPath = path.slice(0, path.lastIndexOf('/'));

						        parsedCookie.path = defaultPath || '/';
						    }

						    if (!parsedCookie.expires) parsedCookie.expires = 'Infinity';
						}

						function domainMatch(currentDomain, cookieDomain) {
						    if (!cookieDomain) return true;

						    currentDomain = currentDomain.toLowerCase();
						    cookieDomain = cookieDomain.toLowerCase();

						    if (currentDomain === cookieDomain) return true;

						    var cookieDomainIdx = currentDomain.indexOf(cookieDomain);

						    return cookieDomainIdx > 0 && currentDomain.length === cookieDomain.length + cookieDomainIdx && currentDomain.charAt(cookieDomainIdx - 1) === '.';
						}

						function pathMatch(currentPath, cookiePath) {
						    if (!cookiePath || cookiePath.charAt(0) !== '/' || currentPath === cookiePath) return true;

						    return currentPath.length > cookiePath.length && currentPath.indexOf(cookiePath) === 0 && (cookiePath.charAt(cookiePath.length - 1) === '/' || currentPath.charAt(cookiePath.length) === '/');
						}

						function getUTCDate(timestamp) {
						    if (!arguments.length) timestamp = _nativeMethods2.default.dateNow();else if (isNaN(timestamp)) return null;

						    // NOTE: remove milliseconds
						    timestamp = Math.floor(timestamp / 1000) * 1000;

						    return new _nativeMethods2.default.date(timestamp); // eslint-disable-line new-cap
						}
					},
					"create-property-desc.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.default = createPropertyDesc;
						function createPropertyDesc(descBase) {
						    descBase.configurable = true;
						    descBase.enumerable = true;

						    return descBase;
						}
						module.exports = exports['default'];
					},
					"create-unresolvable-promise.js": function (exports, module, require) {
						

						exports.__esModule = true;

						exports.default = function () {
						    return new _pinkie2.default(_noop2.default);
						};

						var _noop = require('./noop');

						var _noop2 = _interopRequireDefault(_noop);

						var _pinkie = require('pinkie');

						var _pinkie2 = _interopRequireDefault(_pinkie);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						module.exports = exports['default'];
					},
					"destination-location.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.getLocation = getLocation;
						exports.forceLocation = forceLocation;
						exports.sameOriginCheck = sameOriginCheck;
						exports.resolveUrl = resolveUrl;
						exports.get = get;
						exports.withHash = withHash;
						exports.getParsed = getParsed;
						exports.getOriginHeader = getOriginHeader;

						var _url = require('../../utils/url');

						var sharedUrlUtils = _interopRequireWildcard(_url);

						var _dom = require('./dom');

						var domUtils = _interopRequireWildcard(_dom);

						var _urlResolver = require('./url-resolver');

						var urlResolver = _interopRequireWildcard(_urlResolver);

						var _settings = require('../settings');

						var _settings2 = _interopRequireDefault(_settings);

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						var forcedLocation = null;

						// NOTE: exposed only for tests
						function getLocation() {
						    // NOTE: Used for testing. Unfortunately, we cannot override the 'getLocation' method in a test.
						    if (forcedLocation) return forcedLocation;

						    var frameElement = domUtils.getFrameElement(window);

						    // NOTE: Fallback to the owner page's URL if we are in an iframe without src.
						    if (frameElement && domUtils.isIframeWithoutSrc(frameElement)) return _settings2.default.get().referer;

						    return window.location.toString();
						}

						// NOTE: We need to be able to force the page location. During the test, Hammerhead should think that it is on the
						// proxied page, not in the test environment. Unfortunately, we cannot do it in any other way.
						function forceLocation(url) {
						    forcedLocation = url;
						}

						function sameOriginCheck(location, checkedUrl, rejectForSubdomains) {
						    if (checkedUrl) checkedUrl = resolveUrl(checkedUrl);

						    return sharedUrlUtils.sameOriginCheck(location, checkedUrl, rejectForSubdomains);
						}

						function resolveUrl(url, doc) {
						    url = sharedUrlUtils.getURLString(url);

						    if (url && url.indexOf('//') === 0) {
						        // eslint-disable-next-line no-restricted-properties
						        var pageProtocol = getParsed().protocol;

						        url = pageProtocol + sharedUrlUtils.correctMultipleSlashes(url, pageProtocol);
						    } else url = sharedUrlUtils.correctMultipleSlashes(url);

						    return urlResolver.resolve(url, doc || document);
						}

						function get() {
						    var location = getLocation();
						    var parsedProxyUrl = sharedUrlUtils.parseProxyUrl(location);

						    return parsedProxyUrl ? parsedProxyUrl.destUrl : location;
						}

						function withHash(hash) {
						    var location = get();

						    // NOTE: Remove the previous hash if there is any.
						    location = location.replace(/(#.*)$/, '');

						    return location + hash;
						}

						function getParsed() {
						    var resolver = urlResolver.getResolverElement(document);
						    var dest = get();

						    // eslint-disable-next-line no-restricted-properties
						    var destPort = sharedUrlUtils.parseUrl(dest).port;

						    // NOTE: IE browser adds the default port for the https protocol while resolving.
						    _nativeMethods2.default.anchorHrefSetter.call(resolver, get());

						    var hostname = _nativeMethods2.default.anchorHostnameGetter.call(resolver);
						    var pathname = _nativeMethods2.default.anchorPathnameGetter.call(resolver);

						    // NOTE: IE ignores the first '/' symbol in the pathname.
						    if (pathname.charAt(0) !== '/') pathname = '/' + pathname;

						    // TODO: Describe default ports logic.
						    return {
						        protocol: _nativeMethods2.default.anchorProtocolGetter.call(resolver),
						        // NOTE: Remove the default port.
						        port: destPort ? _nativeMethods2.default.anchorPortGetter.call(resolver) : '',
						        hostname: hostname,
						        // NOTE: Remove the default port from the host.
						        host: destPort ? _nativeMethods2.default.anchorHostGetter.call(resolver) : hostname,
						        pathname: pathname,
						        hash: resolver.hash,
						        search: _nativeMethods2.default.anchorSearchGetter.call(resolver)
						    };
						}

						function getOriginHeader() {
						    var parsedDest = getParsed();

						    // eslint-disable-next-line no-restricted-properties
						    return parsedDest.protocol === 'file:' ? get() : sharedUrlUtils.getDomain(parsedDest);
						}
					},
					"dom.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.instanceToString = instanceToString;
						exports.getActiveElement = getActiveElement;
						exports.getChildVisibleIndex = getChildVisibleIndex;
						exports.getIframeByElement = getIframeByElement;
						exports.getIframeLocation = getIframeLocation;
						exports.getFrameElement = getFrameElement;
						exports.getMapContainer = getMapContainer;
						exports.getParentWindowWithSrc = getParentWindowWithSrc;
						exports.getScrollbarSize = getScrollbarSize;
						exports.getSelectParent = getSelectParent;
						exports.getSelectVisibleChildren = getSelectVisibleChildren;
						exports.getTopSameDomainWindow = getTopSameDomainWindow;
						exports.find = find;
						exports.findDocument = findDocument;
						exports.isContentEditableElement = isContentEditableElement;
						exports.isCrossDomainIframe = isCrossDomainIframe;
						exports.isCrossDomainWindows = isCrossDomainWindows;
						exports.isDomElement = isDomElement;
						exports.getTagName = getTagName;
						exports.isElementInDocument = isElementInDocument;
						exports.isElementInIframe = isElementInIframe;
						exports.isHammerheadAttr = isHammerheadAttr;
						exports.isIframeElement = isIframeElement;
						exports.isIframeWithoutSrc = isIframeWithoutSrc;
						exports.isImgElement = isImgElement;
						exports.isInputElement = isInputElement;
						exports.isButtonElement = isButtonElement;
						exports.isHtmlElement = isHtmlElement;
						exports.isBodyElement = isBodyElement;
						exports.isHeadElement = isHeadElement;
						exports.isHeadOrBodyElement = isHeadOrBodyElement;
						exports.isBaseElement = isBaseElement;
						exports.isScriptElement = isScriptElement;
						exports.isStyleElement = isStyleElement;
						exports.isLabelElement = isLabelElement;
						exports.isTextAreaElement = isTextAreaElement;
						exports.isOptionElement = isOptionElement;
						exports.isSelectElement = isSelectElement;
						exports.isFormElement = isFormElement;
						exports.isFileInput = isFileInput;
						exports.isBodyElementWithChildren = isBodyElementWithChildren;
						exports.isMapElement = isMapElement;
						exports.isRenderedNode = isRenderedNode;
						exports.getTabIndex = getTabIndex;
						exports.isElementFocusable = isElementFocusable;
						exports.isShadowUIElement = isShadowUIElement;
						exports.isWindow = isWindow;
						exports.isDocument = isDocument;
						exports.isBlob = isBlob;
						exports.isLocation = isLocation;
						exports.isSVGElement = isSVGElement;
						exports.isSVGElementOrChild = isSVGElementOrChild;
						exports.isFetchHeaders = isFetchHeaders;
						exports.isFetchRequest = isFetchRequest;
						exports.isElementReadOnly = isElementReadOnly;
						exports.isTextEditableInput = isTextEditableInput;
						exports.isTextEditableElement = isTextEditableElement;
						exports.isTextEditableElementAndEditingAllowed = isTextEditableElementAndEditingAllowed;
						exports.isElementNode = isElementNode;
						exports.isTextNode = isTextNode;
						exports.isProcessingInstructionNode = isProcessingInstructionNode;
						exports.isCommentNode = isCommentNode;
						exports.isDocumentFragmentNode = isDocumentFragmentNode;
						exports.isShadowRoot = isShadowRoot;
						exports.isAnchorElement = isAnchorElement;
						exports.isTableElement = isTableElement;
						exports.isTableDataCellElement = isTableDataCellElement;
						exports.isWebSocket = isWebSocket;
						exports.isMessageEvent = isMessageEvent;
						exports.isPerformanceNavigationTiming = isPerformanceNavigationTiming;
						exports.isArrayBuffer = isArrayBuffer;
						exports.isArrayBufferView = isArrayBufferView;
						exports.isDataView = isDataView;
						exports.matches = matches;
						exports.closest = closest;
						exports.addClass = addClass;
						exports.removeClass = removeClass;
						exports.hasClass = hasClass;
						exports.parseDocumentCharset = parseDocumentCharset;
						exports.getParents = getParents;
						exports.nodeListToArray = nodeListToArray;
						exports.getFileInputs = getFileInputs;
						exports.getIframes = getIframes;
						exports.getScripts = getScripts;

						var _internalAttributes = require('../../processing/dom/internal-attributes');

						var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

						var _internalProperties = require('../../processing/dom/internal-properties');

						var _internalProperties2 = _interopRequireDefault(_internalProperties);

						var _className = require('../../shadow-ui/class-name');

						var _className2 = _interopRequireDefault(_className);

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _url = require('./url');

						var urlUtils = _interopRequireWildcard(_url);

						var _style = require('./style');

						var _destinationLocation = require('./destination-location');

						var _browser = require('./browser');

						var _querySelector = require('./query-selector');

						var _featureDetection = require('../utils/feature-detection');

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var scrollbarSize = null;

						var NATIVE_MAP_ELEMENT_STRINGS = ['[object HTMLMapElement]', '[object HTMLAreaElement]'];

						var NATIVE_WINDOW_STR = instanceToString(window);
						var IS_DOCUMENT_RE = /^\[object .*?Document]$/i;
						var IS_PROCESSING_INSTRUCTION_RE = /^\[object .*?ProcessingInstruction]$/i;
						var IS_SVG_ELEMENT_RE = /^\[object SVG\w+?Element]$/i;
						var IS_HTML_ELEMENT_RE = /^\[object HTML.*?Element]$/i;
						var IS_ARRAY_BUFFER_RE = /^\[object ArrayBuffer]$/i;
						var IS_DATA_VIEW_RE = /^\[object DataView]$/i;
						var NATIVE_TABLE_CELL_STR = instanceToString(_nativeMethods2.default.createElement.call(document, 'td'));
						var ELEMENT_NODE_TYPE = Node.ELEMENT_NODE;
						var NOT_CONTENT_EDITABLE_ELEMENTS_RE = /^(select|option|applet|area|audio|canvas|datalist|keygen|map|meter|object|progress|source|track|video|img)$/;
						var INPUT_ELEMENTS_RE = /^(input|textarea|button)$/;
						var SCRIPT_OR_STYLE_RE = /^(script|style)$/i;
						var EDITABLE_INPUT_TYPES_RE = /^(email|number|password|search|tel|text|url)$/;

						function getFocusableSelector() {
						    // NOTE: We don't take into account the case of embedded contentEditable elements, and we
						    // specify the contentEditable attribute for focusable elements.
						    return 'input, select, textarea, button, body, iframe, [contenteditable="true"], [contenteditable=""], [tabIndex]';
						}

						function isHidden(el) {
						    return el.offsetWidth <= 0 && el.offsetHeight <= 0;
						}

						function isAlwaysNotEditableElement(el) {
						    var tagName = getTagName(el);

						    return tagName && (NOT_CONTENT_EDITABLE_ELEMENTS_RE.test(tagName) || INPUT_ELEMENTS_RE.test(tagName));
						}

						function closestFallback(el, selector) {
						    while (el) {
						        if (matches(el, selector)) return el;

						        el = el.parentNode;
						    }

						    return null;
						}

						function instanceToString(instance) {
						    if (!_featureDetection.instanceAndPrototypeToStringAreEqual) return _nativeMethods2.default.objectToString.call(instance);

						    return instance && typeof instance === 'object' ? _nativeMethods2.default.objectToString.call(_nativeMethods2.default.objectGetPrototypeOf.call(window.Object, instance)) : '';
						}

						function getActiveElement(currentDocument) {
						    // NOTE: Sometimes document.activeElement returns an empty object or null (IE11).
						    // https://github.com/DevExpress/testcafe-hammerhead/issues/768
						    var doc = currentDocument || document;
						    var activeElement = _nativeMethods2.default.documentActiveElementGetter.call(doc);

						    var el = isDomElement(activeElement) ? activeElement : doc.body;

						    while (el && el.shadowRoot) {
						        // eslint-disable-next-line no-restricted-properties
						        var shadowEl = el.shadowRoot.activeElement;

						        if (!shadowEl) break;

						        el = shadowEl;
						    }

						    return el;
						}

						function getChildVisibleIndex(select, child) {
						    var childrenArray = getSelectVisibleChildren(select);

						    return childrenArray.indexOf(child);
						}

						function getIframeByElement(el) {
						    var elWindow = el[_internalProperties2.default.processedContext];

						    return getFrameElement(elWindow);
						}

						function getIframeLocation(iframe) {
						    var documentLocation = null;

						    try {
						        // eslint-disable-next-line no-restricted-properties
						        documentLocation = _nativeMethods2.default.contentDocumentGetter.call(iframe).location.href;
						    } catch (e) {
						        documentLocation = null;
						    }

						    var srcLocation = _nativeMethods2.default.getAttribute.call(iframe, 'src' + _internalAttributes2.default.storedAttrPostfix) || _nativeMethods2.default.getAttribute.call(iframe, 'src') || _nativeMethods2.default.iframeSrcGetter.call(iframe);

						    var parsedProxyDocumentLocation = documentLocation && urlUtils.isSupportedProtocol(documentLocation) && urlUtils.parseProxyUrl(documentLocation);
						    var parsedProxySrcLocation = srcLocation && urlUtils.isSupportedProtocol(srcLocation) && urlUtils.parseProxyUrl(srcLocation);

						    return {
						        documentLocation: parsedProxyDocumentLocation ? parsedProxyDocumentLocation.destUrl : documentLocation,
						        srcLocation: parsedProxySrcLocation ? parsedProxySrcLocation.destUrl : srcLocation
						    };
						}

						function getFrameElement(win) {
						    try {
						        return win.frameElement;
						    } catch (e) {
						        return null;
						    }
						}

						function getMapContainer(el) {
						    var closestMap = closest(el, 'map');
						    var closestMapName = _nativeMethods2.default.getAttribute.call(closestMap, 'name');
						    var containerSelector = '[usemap="#' + closestMapName + '"]';

						    return _nativeMethods2.default.querySelector.call(findDocument(el), containerSelector);
						}

						function getParentWindowWithSrc(window) {
						    var parent = window.parent;
						    var parentFrameElement = null;

						    if (window === window.top) return window;

						    if (parent === window.top || isCrossDomainWindows(window, parent)) return parent;

						    try {
						        parentFrameElement = parent.frameElement;
						    } catch (e) {
						        parentFrameElement = null;
						    }

						    if (parentFrameElement === null || !isIframeWithoutSrc(parentFrameElement)) return parent;

						    return getParentWindowWithSrc(parent);
						}

						function getScrollbarSize() {
						    if (!scrollbarSize) {
						        var scrollDiv = _nativeMethods2.default.createElement.call(document, 'div');

						        scrollDiv.style.height = '100px';
						        scrollDiv.style.overflow = 'scroll';
						        scrollDiv.style.position = 'absolute';
						        scrollDiv.style.top = '-9999px';
						        scrollDiv.style.width = '100px';
						        _nativeMethods2.default.appendChild.call(document.body, scrollDiv);

						        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;

						        scrollbarSize = scrollbarWidth;
						        scrollDiv.parentNode.removeChild(scrollDiv);
						    }

						    return scrollbarSize;
						}

						function getSelectParent(child) {
						    return closest(child.parentNode, 'select');
						}

						function getSelectVisibleChildren(select) {
						    var children = _nativeMethods2.default.elementQuerySelectorAll.call(select, 'optgroup, option');
						    var result = [];
						    var length = _nativeMethods2.default.nodeListLengthGetter.call(children);

						    for (var i = 0; i < length; i++) {
						        var child = children[i];
						        // NOTE: Firefox does not display groups without a label and with an empty label.
						        var shouldAdd = _browser.isFirefox ? getTagName(child) !== 'optgroup' || child.label : true;

						        if (shouldAdd) result.push(child);
						    }

						    return result;
						}

						function getTopSameDomainWindow(window) {
						    var result = window;
						    var currentWindow = window.parent;

						    if (result === window.top) return result;

						    while (currentWindow) {
						        if (!isCrossDomainWindows(window, currentWindow)) {
						            var frameElement = getFrameElement(currentWindow);

						            if (!frameElement || !isIframeWithoutSrc(frameElement)) result = currentWindow;
						        }

						        currentWindow = currentWindow !== window.top ? currentWindow.parent : null;
						    }

						    return result;
						}

						function find(parent, selector, handler) {
						    var nodeList = (0, _querySelector.getNativeQuerySelectorAll)(parent).call(parent, selector);

						    if (handler) {
						        var length = _nativeMethods2.default.nodeListLengthGetter.call(nodeList);

						        for (var i = 0; i < length; i++) {
						            handler(nodeList[i]);
						        }
						    }

						    return nodeList;
						}

						function findDocument(el) {
						    if (el.documentElement) return el;

						    if (el.ownerDocument && el.ownerDocument.defaultView) return el.ownerDocument;

						    return el.parentNode ? findDocument(el.parentNode) : document;
						}

						function isContentEditableElement(el) {
						    var isContentEditable = false;
						    var element = null;

						    if (isTextNode(el)) element = el.parentElement || el.parentNode;else element = el;

						    if (element) {
						        isContentEditable = element.isContentEditable && !isAlwaysNotEditableElement(element);

						        return isRenderedNode(element) && (isContentEditable || findDocument(el).designMode === 'on');
						    }

						    return false;
						}

						function isCrossDomainIframe(iframe, bySrc) {
						    var iframeLocation = getIframeLocation(iframe);

						    if (!bySrc && iframeLocation.documentLocation === null) return true;

						    var currentLocation = bySrc ? iframeLocation.srcLocation : iframeLocation.documentLocation;

						    if (currentLocation && urlUtils.isSupportedProtocol(currentLocation)) return !(0, _destinationLocation.sameOriginCheck)(location.toString(), currentLocation);

						    return false;
						}

						function isCrossDomainWindows(window1, window2) {
						    try {
						        if (window1 === window2) return false;

						        var window1Location = window1.location.toString();
						        var window2Location = window2.location.toString();

						        if (!urlUtils.isSupportedProtocol(window1Location) || !urlUtils.isSupportedProtocol(window2Location)) return false;

						        return !(0, _destinationLocation.sameOriginCheck)(window1Location, window2Location);
						    } catch (e) {
						        return true;
						    }
						}

						function isDomElement(el) {
						    if (el instanceof _nativeMethods2.default.elementClass) return true;

						    return el && IS_HTML_ELEMENT_RE.test(instanceToString(el)) && isElementNode(el) && el.tagName;
						}

						function getTagName(el) {
						    // NOTE: Check for tagName being a string, because it may be a function in an Angular app (T175340).
						    return el && typeof el.tagName === 'string' ? el.tagName.toLowerCase() : '';
						}

						function isElementInDocument(el, currentDocument) {
						    var doc = currentDocument || document;

						    return doc.documentElement.contains(el);
						}

						function isElementInIframe(el, currentDocument) {
						    var doc = currentDocument || findDocument(el);

						    return window.document !== doc;
						}

						function isHammerheadAttr(attr) {
						    return attr === _internalAttributes2.default.focusPseudoClass || attr === _internalAttributes2.default.hoverPseudoClass || attr.indexOf(_internalAttributes2.default.storedAttrPostfix) !== -1;
						}

						function isIframeElement(el) {
						    return instanceToString(el) === '[object HTMLIFrameElement]';
						}

						function isIframeWithoutSrc(iframe) {
						    var iframeLocation = getIframeLocation(iframe);
						    var iframeSrcLocation = iframeLocation.srcLocation;
						    var iframeDocumentLocation = iframeLocation.documentLocation;

						    // NOTE: is a cross-domain iframe
						    if (iframeDocumentLocation === null) return false;

						    // NOTE: after 'document.write' or 'document.open' call for iframe with/without src
						    // we will process it as iframe without src
						    if (_nativeMethods2.default.contentWindowGetter.call(iframe)[_internalProperties2.default.documentWasCleaned]) return true;

						    var iframeDocumentLocationHaveSupportedProtocol = urlUtils.isSupportedProtocol(iframeDocumentLocation);

						    // NOTE: When an iframe has an empty src attribute (<iframe src></iframe>) or has no src attribute (<iframe></iframe>),
						    // the iframe.src property is not empty but has different values in different browsers.
						    // Its document location is 'about:blank'. Therefore, we should check the src attribute.
						    if (!iframeDocumentLocationHaveSupportedProtocol && !_nativeMethods2.default.getAttribute.call(iframe, 'src')) return true;

						    // In Chrome, when an iframe with the src attribute is added to DOM,
						    // its documentLocation is set to "about:blank" until the iframe has been loaded.
						    // So, we should check srcLocation in this case.
						    if (iframeSrcLocation && urlUtils.isSupportedProtocol(iframeSrcLocation)) return false;

						    return !iframeDocumentLocationHaveSupportedProtocol;
						}

						function isImgElement(el) {
						    return instanceToString(el) === '[object HTMLImageElement]';
						}

						function isInputElement(el) {
						    return instanceToString(el) === '[object HTMLInputElement]';
						}

						function isButtonElement(el) {
						    return instanceToString(el) === '[object HTMLButtonElement]';
						}

						function isHtmlElement(el) {
						    return instanceToString(el) === '[object HTMLHtmlElement]';
						}

						function isBodyElement(el) {
						    return instanceToString(el) === '[object HTMLBodyElement]';
						}

						function isHeadElement(el) {
						    return instanceToString(el) === '[object HTMLHeadElement]';
						}

						function isHeadOrBodyElement(el) {
						    var elString = instanceToString(el);

						    return elString === '[object HTMLHeadElement]' || elString === '[object HTMLBodyElement]';
						}

						function isBaseElement(el) {
						    return instanceToString(el) === '[object HTMLBaseElement]';
						}

						function isScriptElement(el) {
						    return instanceToString(el) === '[object HTMLScriptElement]';
						}

						function isStyleElement(el) {
						    return instanceToString(el) === '[object HTMLStyleElement]';
						}

						function isLabelElement(el) {
						    return instanceToString(el) === '[object HTMLLabelElement]';
						}

						function isTextAreaElement(el) {
						    return instanceToString(el) === '[object HTMLTextAreaElement]';
						}

						function isOptionElement(el) {
						    return instanceToString(el) === '[object HTMLOptionElement]';
						}

						function isSelectElement(el) {
						    return instanceToString(el) === '[object HTMLSelectElement]';
						}

						function isFormElement(el) {
						    return instanceToString(el) === '[object HTMLFormElement]';
						}

						function isFileInput(el) {
						    return isInputElement(el) && el.type.toLowerCase() === 'file';
						}

						function isBodyElementWithChildren(el) {
						    return isBodyElement(el) && _nativeMethods2.default.htmlCollectionLengthGetter.call(el.children);
						}

						function isMapElement(el) {
						    return NATIVE_MAP_ELEMENT_STRINGS.indexOf(instanceToString(el)) !== -1;
						}

						function isRenderedNode(node) {
						    return !(isProcessingInstructionNode(node) || isCommentNode(node) || SCRIPT_OR_STYLE_RE.test(node.nodeName));
						}

						function getTabIndex(el) {
						    // NOTE: we obtain the tabIndex value from an attribute because the el.tabIndex
						    // property returns -1 for some elements (e.g. for body) with no tabIndex assigned
						    var tabIndex = _nativeMethods2.default.getAttribute.call(el, 'tabIndex');

						    tabIndex = parseInt(tabIndex, 10);

						    return isNaN(tabIndex) ? null : tabIndex;
						}

						function isElementFocusable(el) {
						    if (!el) return false;

						    var tabIndex = getTabIndex(el);
						    var isDisabledElement = matches(el, ':disabled');
						    var isInvisibleElement = (0, _style.get)(el, 'visibility') === 'hidden';
						    var isNotDisplayedElement = (0, _style.get)(el, 'display') === 'none';
						    var isHiddenElement = _browser.isWebKit ? isHidden(el) && !isOptionElement(el) : isHidden(el);

						    if (isDisabledElement || isInvisibleElement || isNotDisplayedElement || isHiddenElement) return false;

						    if (isOptionElement(el) && _browser.isIE) return false;

						    if (isAnchorElement(el)) {
						        if (tabIndex !== null) return true;

						        return matches(el, 'a[href]');
						    }

						    if (isTableDataCellElement(el) && _browser.isIE) return true;

						    return matches(el, getFocusableSelector()) || tabIndex !== null;
						}

						function isShadowUIElement(element) {
						    return !!element[_internalProperties2.default.shadowUIElement];
						}

						function isWindow(instance) {
						    if (instance instanceof _nativeMethods2.default.windowClass) return true;

						    try {
						        // NOTE: The instanceToString call result has a strange values for the MessageEvent.target property:
						        // * [object DispHTMLWindow2] for IE11
						        // * [object Object] for MSEdge.
						        if ((_browser.isIE || _browser.isMSEdge) && instance && instance === instance.window) instance = instance.window;

						        return instance && instance.toString && NATIVE_WINDOW_STR === instanceToString(instance);
						    } catch (e) {
						        try {
						            // NOTE: If a cross-domain object has the 'top' field, this object is a window
						            // (not a document or location).
						            return !!instance.top;
						        } catch (x) {
						            return false;
						        }
						    }
						}

						function isDocument(instance) {
						    if (instance instanceof _nativeMethods2.default.documentClass) return true;

						    try {
						        return instance && IS_DOCUMENT_RE.test(instanceToString(instance));
						    } catch (e) {
						        // NOTE: For cross-domain objects (windows, documents or locations), we return false because
						        // it's impossible to work with them in any case.
						        return false;
						    }
						}

						function isBlob(instance) {
						    return instance && instanceToString(instance) === '[object Blob]';
						}

						function isLocation(instance) {
						    if (instance instanceof _nativeMethods2.default.locationClass) return true;

						    try {
						        // eslint-disable-next-line no-restricted-properties
						        return instance && typeof instance === 'object' && instance.href !== void 0 && instance.assign !== void 0;
						    } catch (e) {
						        // NOTE: Try to detect cross-domain window location.
						        return instance.replace && instance.assign;
						    }
						}

						function isSVGElement(instance) {
						    if (instance instanceof _nativeMethods2.default.svgElementClass) return true;

						    return instance && IS_SVG_ELEMENT_RE.test(instanceToString(instance));
						}

						function isSVGElementOrChild(el) {
						    return !!closest(el, 'svg');
						}

						function isFetchHeaders(instance) {
						    if (_nativeMethods2.default.Headers && instance instanceof _nativeMethods2.default.Headers) return true;

						    return instance && instanceToString(instance) === '[object Headers]';
						}

						function isFetchRequest(instance) {
						    if (_nativeMethods2.default.Request && instance instanceof _nativeMethods2.default.Request) return true;

						    return instance && instanceToString(instance) === '[object Request]';
						}

						function isElementReadOnly(el) {
						    return el.readOnly || el.getAttribute('readonly') === 'readonly';
						}

						function isTextEditableInput(el) {
						    var attrType = el.getAttribute('type');

						    return isInputElement(el) && attrType ? EDITABLE_INPUT_TYPES_RE.test(attrType) : EDITABLE_INPUT_TYPES_RE.test(el.type);
						}

						function isTextEditableElement(el) {
						    return isTextEditableInput(el) || isTextAreaElement(el);
						}

						function isTextEditableElementAndEditingAllowed(el) {
						    return isTextEditableElement(el) && !isElementReadOnly(el);
						}

						function isElementNode(node) {
						    return node && node.nodeType === ELEMENT_NODE_TYPE;
						}

						function isTextNode(node) {
						    return instanceToString(node) === '[object Text]';
						}

						function isProcessingInstructionNode(node) {
						    return IS_PROCESSING_INSTRUCTION_RE.test(instanceToString(node));
						}

						function isCommentNode(node) {
						    return instanceToString(node) === '[object Comment]';
						}

						function isDocumentFragmentNode(node) {
						    return instanceToString(node) === '[object DocumentFragment]';
						}

						function isShadowRoot(root) {
						    return instanceToString(root) === '[object ShadowRoot]';
						}

						function isAnchorElement(el) {
						    return instanceToString(el) === '[object HTMLAnchorElement]';
						}

						function isTableElement(el) {
						    return instanceToString(el) === '[object HTMLTableElement]';
						}

						function isTableDataCellElement(el) {
						    return instanceToString(el) === NATIVE_TABLE_CELL_STR;
						}

						function isWebSocket(ws) {
						    return instanceToString(ws) === '[object WebSocket]';
						}

						function isMessageEvent(e) {
						    return instanceToString(e) === '[object MessageEvent]';
						}

						function isPerformanceNavigationTiming(entry) {
						    return instanceToString(entry) === '[object PerformanceNavigationTiming]';
						}

						function isArrayBuffer(data) {
						    if (data instanceof _nativeMethods2.default.ArrayBuffer) return true;

						    return data && IS_ARRAY_BUFFER_RE.test(instanceToString(data));
						}

						function isArrayBufferView(data) {
						    return data && _nativeMethods2.default.arrayBufferIsView(data);
						}

						function isDataView(data) {
						    if (data instanceof _nativeMethods2.default.DataView) return true;

						    return data && IS_DATA_VIEW_RE.test(instanceToString(data));
						}

						function matches(el, selector) {
						    if (!isElementNode(el)) return false;

						    return _nativeMethods2.default.matches.call(el, selector);
						}

						function closest(el, selector) {
						    if (!isElementNode(el)) return null;

						    if (_nativeMethods2.default.closest) return _nativeMethods2.default.closest.call(el, selector);

						    return closestFallback(el, selector);
						}

						function addClass(el, className) {
						    if (!el) return;

						    var classNames = className.split(/\s+/);

						    for (var _i2 = 0; _i2 < classNames.length; _i2++) {
						        var currentClassName = classNames[_i2];
						        _nativeMethods2.default.tokenListAdd.call(el.classList, currentClassName);
						    }
						}

						function removeClass(el, className) {
						    if (!el) return;

						    var classNames = className.split(/\s+/);

						    for (var _i4 = 0; _i4 < classNames.length; _i4++) {
						        var currentClassName = classNames[_i4];
						        _nativeMethods2.default.tokenListRemove.call(el.classList, currentClassName);
						    }
						}

						function hasClass(el, className) {
						    if (!el) return false;

						    return _nativeMethods2.default.tokenListContains.call(el.classList, className);
						}

						function parseDocumentCharset() {
						    var metaCharset = _nativeMethods2.default.querySelector.call(document, '.' + _className2.default.charset);

						    return metaCharset && metaCharset.getAttribute('charset');
						}

						function getParents(el, selector) {
						    // eslint-disable-next-line no-restricted-properties
						    var parent = el.parentNode || el.host;

						    var parents = [];

						    while (parent) {
						        if (!selector && isElementNode(parent) || selector && matches(parent, selector)) parents.push(parent);

						        // eslint-disable-next-line no-restricted-properties
						        parent = parent.parentNode || parent.host;
						    }

						    return parents;
						}

						function nodeListToArray(nodeList) {
						    var result = [];
						    var length = _nativeMethods2.default.nodeListLengthGetter.call(nodeList);

						    for (var i = 0; i < length; i++) {
						        result.push(nodeList[i]);
						    }return result;
						}

						function getFileInputs(el) {
						    return isFileInput(el) ? [el] : nodeListToArray((0, _querySelector.getNativeQuerySelectorAll)(el).call(el, 'input[type=file]'));
						}

						function getIframes(el) {
						    return isIframeElement(el) ? [el] : nodeListToArray((0, _querySelector.getNativeQuerySelectorAll)(el).call(el, 'iframe,frame'));
						}

						function getScripts(el) {
						    return isScriptElement(el) ? [el] : nodeListToArray((0, _querySelector.getNativeQuerySelectorAll)(el).call(el, 'script'));
						}
					},
					"event-emitter.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						var EventEmitter = function () {
						    function EventEmitter() {
						        _classCallCheck(this, EventEmitter);

						        this.eventsListeners = _nativeMethods2.default.objectCreate(null);
						    }

						    EventEmitter.prototype.emit = function emit(evt) {
						        var listeners = this.eventsListeners[evt];

						        if (!listeners) return;

						        for (var i = 0; i < listeners.length; i++) {
						            try {
						                listeners[i].apply(this, _nativeMethods2.default.arraySlice.apply(arguments, [1]));
						            } catch (e) {
						                // HACK: For IE: after calling document.write, the IFrameSandbox event handler throws the
						                // 'Can't execute code from a freed script' exception because the document has been
						                // recreated.
						                if (e.message && e.message.indexOf('freed script') > -1) listeners[i] = null;else throw e;
						            }
						        }
						    };

						    EventEmitter.prototype.off = function off(evt, listener) {
						        var listeners = this.eventsListeners[evt];

						        if (!listeners) return;

						        this.eventsListeners[evt] = _nativeMethods2.default.arrayFilter.call(listeners, function (currentListener) {
						            return currentListener !== listener;
						        });
						    };

						    EventEmitter.prototype.on = function on(evt, listener) {
						        this.eventsListeners[evt] = this.eventsListeners[evt] || [];

						        if (this.eventsListeners[evt].indexOf(listener) === -1) this.eventsListeners[evt].push(listener);

						        return listener;
						    };

						    return EventEmitter;
						}();

						exports.default = EventEmitter;
						module.exports = exports['default'];
					},
					"event.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.hasPointerEvents = exports.DOM_EVENTS = exports.KEYBOARD_MODIFIERS_PARAMETER = exports.WHICH_PARAMETER = exports.BUTTONS_PARAMETER = exports.BUTTON = undefined;
						exports.preventDefault = preventDefault;
						exports.stopPropagation = stopPropagation;
						exports.isObjectEventListener = isObjectEventListener;
						exports.isValidEventListener = isValidEventListener;
						exports.callEventListener = callEventListener;

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var BUTTON = exports.BUTTON = {
						    left: 0,
						    middle: 1,
						    right: 2
						};

						var BUTTONS_PARAMETER = exports.BUTTONS_PARAMETER = {
						    noButton: 0,
						    leftButton: 1,
						    rightButton: 2
						};

						var WHICH_PARAMETER = exports.WHICH_PARAMETER = {
						    noButton: 0,
						    leftButton: 1,
						    middleButton: 2,
						    rightButton: 3
						};

						var KEYBOARD_MODIFIERS_PARAMETER = exports.KEYBOARD_MODIFIERS_PARAMETER = {
						    altKey: 'Alt',
						    ctrlKey: 'Control',
						    shiftKey: 'Shift',
						    metaKey: 'Meta'
						};

						var DOM_EVENTS = exports.DOM_EVENTS = ['click', 'mousedown', 'mouseup', 'dblclick', 'contextmenu', 'mousemove', 'mouseover', 'mouseout', 'touchstart', 'touchmove', 'touchend', 'keydown', 'keypress', 'textInput', 'textinput', 'input', 'keyup', 'change', 'focus', 'blur', 'MSPointerDown', 'MSPointerMove', 'MSPointerOver', 'MSPointerOut', 'MSPointerUp', 'pointerdown', 'pointermove', 'pointerover', 'pointerout', 'pointerup', 'focusin', 'focusout', 'mouseenter', 'mouseleave', 'pointerenter', 'pointerleave'];

						function preventDefault(ev, allowBubbling) {
						    if (ev.preventDefault) ev.preventDefault();else ev.returnValue = false;

						    if (!allowBubbling) stopPropagation(ev);
						}

						function stopPropagation(ev) {
						    if (ev.stopImmediatePropagation) ev.stopImmediatePropagation();else if (ev.stopPropagation) ev.stopPropagation();

						    ev.cancelBubble = true;
						}

						function isObjectEventListener(listener) {
						    return typeof listener === 'object' && listener && typeof listener.handleEvent === 'function';
						}

						function isValidEventListener(listener) {
						    return typeof listener === 'function' || isObjectEventListener(listener);
						}

						function callEventListener(ctx, listener, e) {
						    if (isObjectEventListener(listener)) return listener.handleEvent.call(listener, e);

						    return listener.call(ctx, e);
						}

						var hasPointerEvents = exports.hasPointerEvents = !!(_nativeMethods2.default.WindowPointerEvent || _nativeMethods2.default.WindowMSPointerEvent);
					},
					"extend.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.default = extend;
						function extend() {
						    var target = arguments[0] || {};
						    var currentObj = null;
						    var copy = null;

						    if (typeof target !== 'object' && target.toString() !== '[object Function]') target = {};

						    for (var i = 1; i < arguments.length; i++) {
						        currentObj = arguments[i];

						        if (currentObj !== null) {
						            for (var name in currentObj) {
						                copy = currentObj[name];

						                if (target !== copy && copy !== void 0) target[name] = copy;
						            }
						        }
						    }

						    return target;
						}
						module.exports = exports['default'];
					},
					"fast-apply.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.default = fastApply;
						// OPTIMIZATION: http://jsperf.com/call-apply-optimization
						function fastApply(owner, methName, args) {
						    var meth = owner[methName];

						    switch (args.length) {
						        case 1:
						            return meth.call(owner, args[0]);
						        case 2:
						            return meth.call(owner, args[0], args[1]);
						        case 3:
						            return meth.call(owner, args[0], args[1], args[2]);
						        case 4:
						            return meth.call(owner, args[0], args[1], args[2], args[3]);
						        case 5:
						            return meth.call(owner, args[0], args[1], args[2], args[3], args[4]);
						        default:
						            return meth.apply(owner, args);
						    }
						}
						module.exports = exports['default'];
					},
					"feature-detection.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.getElementsByNameReturnsHTMLCollection = exports.attrGetNamedItemIsNotEnumerable = exports.hasDataTransfer = exports.isTouchDevice = exports.hasTouchPoints = exports.hasTouchEvents = exports.instanceAndPrototypeToStringAreEqual = exports.emptyActionAttrFallbacksToTheLocation = undefined;

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _browser = require('./browser');

						var browserUtils = _interopRequireWildcard(_browser);

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var form = _nativeMethods2.default.createElement.call(document, 'form');
						var elements = _nativeMethods2.default.getElementsByName.call(document, '');

						// NOTE: In some browsers, elements without the url attribute return the location url
						// when accessing this attribute directly. See form.action in Edge 25 as an example.
						var emptyActionAttrFallbacksToTheLocation = exports.emptyActionAttrFallbacksToTheLocation = _nativeMethods2.default.formActionGetter.call(form) === window.location.toString();

						// NOTE: In Chrome, toString(window) equals '[object Window]' and toString(Window.prototype) equals '[object Blob]',
						// this condition is also satisfied for Blob, Document, XMLHttpRequest, etc
						var instanceAndPrototypeToStringAreEqual = exports.instanceAndPrototypeToStringAreEqual = _nativeMethods2.default.objectToString.call(window) === _nativeMethods2.default.objectToString.call(Window.prototype);

						var hasTouchEvents = exports.hasTouchEvents = 'ontouchstart' in window;

						// NOTE: We need to check touch points only for IE, because it has PointerEvent and MSPointerEvent (IE10, IE11)
						// instead of TouchEvent (T109295).
						var hasTouchPoints = exports.hasTouchPoints = browserUtils.isIE && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);
						var isTouchDevice = exports.isTouchDevice = (browserUtils.isMobile || browserUtils.isTablet) && hasTouchEvents;

						var hasDataTransfer = exports.hasDataTransfer = !!window.DataTransfer;

						// NOTE: In the Edge 17, the getNamedItem method of attributes object is not enumerable
						var attrGetNamedItemIsNotEnumerable = exports.attrGetNamedItemIsNotEnumerable = _nativeMethods2.default.objectGetOwnPropertyDescriptor.call(window.Object, NamedNodeMap.prototype, 'getNamedItem');

						// Both IE and Edge return an HTMLCollection, not a NodeList
						var getElementsByNameReturnsHTMLCollection = exports.getElementsByNameReturnsHTMLCollection = _nativeMethods2.default.objectGetPrototypeOf.call(window.Object, elements) === _nativeMethods2.default.HTMLCollection.prototype;
					},
					"fn-bind.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.default = fnBind;
						// OPTIMIZATION: http://jsperf.com/bind-apply
						function fnBind(func, thisObj) {
						    return function () {
						        return func.apply(thisObj, arguments);
						    };
						}
						module.exports = exports['default'];
					},
					"get-mime-type.js": function (exports, module, require) {
						

						exports.__esModule = true;

						exports.default = function (data) {
						    return matchMime(IMAGE_TYPE_PATTERNS, data) || matchMime(AUDIO_VIDEO_TYPE_PATTERNS, data) || matchMime(FONT_TYPE_PATTERNS, data) || matchMime(ARCHIVE_TYPE_PATTERNS, data);
						};

						var _dom = require('./dom');

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						// https://mimesniff.spec.whatwg.org/

						var IMAGE_TYPE_PATTERNS = [{
						    mime: 'image/x-icon',
						    pattern: [0x00, 0x00, 0x01, 0x00],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'image/x-icon',
						    pattern: [0x00, 0x00, 0x02, 0x00],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'image/bmp',
						    pattern: [0x42, 0x4D],
						    mask: [0xFF, 0xFF]
						}, {
						    mime: 'image/gif',
						    pattern: [0x47, 0x49, 0x46, 0x38, 0x37, 0x61],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'image/gif',
						    pattern: [0x47, 0x49, 0x46, 0x38, 0x39, 0x61],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'image/webp',
						    pattern: [0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50, 0x56, 0x50],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'image/png',
						    pattern: [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'image/jpeg',
						    pattern: [0xFF, 0xD8, 0xFF],
						    mask: [0xFF, 0xFF, 0xFF]
						}];
						var AUDIO_VIDEO_TYPE_PATTERNS = [{
						    mime: 'audio/basic',
						    pattern: [0x2E, 0x73, 0x6E, 0x64],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'audio/aiff',
						    pattern: [0x46, 0x4F, 0x52, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x41, 0x49, 0x46, 0x46],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'audio/mpeg',
						    pattern: [0x49, 0x44, 0x33],
						    mask: [0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'application/ogg',
						    pattern: [0x4F, 0x67, 0x67, 0x53, 0x00],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'audio/midi',
						    pattern: [0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'video/avi',
						    pattern: [0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x41, 0x56, 0x49, 0x20],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'audio/wave',
						    pattern: [0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]
						}];
						var FONT_TYPE_PATTERNS = [{
						    mime: 'application/vnd.ms-fontobject',
						    pattern: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x50],
						    mask: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF]
						}, {
						    mime: 'application/octet-stream', // TrueType font  does not have an assigned MIME type
						    pattern: [0x00, 0x01, 0x00, 0x00],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'application/octet-stream', // OpenType font  does not have an assigned MIME type
						    pattern: [0x4F, 0x54, 0x54, 0x4F],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'application/octet-stream', // TrueType Collection
						    pattern: [0x74, 0x74, 0x63, 0x66],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'application/font-woff',
						    pattern: [0x77, 0x4F, 0x46, 0x46],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}];
						var ARCHIVE_TYPE_PATTERNS = [{
						    mime: 'application/x-gzip',
						    pattern: [0x1F, 0x8B, 0x08],
						    mask: [0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'application/zip',
						    pattern: [0x50, 0x4B, 0x03, 0x04],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF]
						}, {
						    mime: 'application/x-rar-compressed',
						    pattern: [0x52, 0x61, 0x72, 0x20, 0x1A, 0x07, 0x00],
						    mask: [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
						}];

						function matchPattern(pattern, data) {
						    if (data.length < pattern.pattern.length) return false;

						    var p = 0;
						    var s = 0;
						    var maskedData = null;

						    while (p < pattern.pattern.length) {
						        maskedData = data[s] & pattern.mask[p];

						        if (maskedData !== pattern.pattern[p]) return false;

						        s++;
						        p++;
						    }

						    return true;
						}

						function matchMime(patternGroup, data) {
						    // Now, we don't support the cases when the data is is divided into several parts and its parts have different types
						    if ((0, _dom.isArrayBuffer)(data[0])) data = data[0];else if ((0, _dom.isArrayBufferView)(data[0])) data = (0, _dom.isDataView)(data[0]) ? data[0].buffer : data[0];

						    var byteArray = new _nativeMethods2.default.Uint8Array(data);

						    for (var _i2 = 0; _i2 < patternGroup.length; _i2++) {
						        var pattern = patternGroup[_i2];
						        if (matchPattern(pattern, byteArray)) return pattern.mime;
						    }

						    byteArray = null;

						    return '';
						}

						module.exports = exports['default'];
					},
					"html.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.INIT_SCRIPT_FOR_IFRAME_TEMPLATE = undefined;
						exports.isPageHtml = isPageHtml;
						exports.cleanUpHtml = cleanUpHtml;
						exports.processHtml = processHtml;
						exports.dispose = dispose;
						exports.isInternalHtmlParserElement = isInternalHtmlParserElement;

						var _internalAttributes = require('../../processing/dom/internal-attributes');

						var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

						var _className = require('../../shadow-ui/class-name');

						var _className2 = _interopRequireDefault(_className);

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _dom = require('../../processing/dom');

						var _dom2 = _interopRequireDefault(_dom);

						var _domProcessor = require('../dom-processor');

						var _domProcessor2 = _interopRequireDefault(_domProcessor);

						var _header = require('../../processing/script/header');

						var _style = require('../../processing/style');

						var _style2 = _interopRequireDefault(_style);

						var _dom3 = require('./dom');

						var _url = require('./url');

						var _browser = require('./browser');

						var _urlResolver = require('./url-resolver');

						var urlResolver = _interopRequireWildcard(_urlResolver);

						var _internalProperties = require('../../processing/dom/internal-properties');

						var _internalProperties2 = _interopRequireDefault(_internalProperties);

						var _attributes = require('../../processing/dom/attributes');

						var _createSelfRemovingScript = require('../../utils/create-self-removing-script');

						var _createSelfRemovingScript2 = _interopRequireDefault(_createSelfRemovingScript);

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var FAKE_TAG_NAME_PREFIX = 'hh_fake_tag_name_';
						var FAKE_DOCTYPE_TAG_NAME = 'hh_fake_doctype';
						var FAKE_HEAD_TAG_NAME = FAKE_TAG_NAME_PREFIX + 'head';
						var FAKE_BODY_TAG_NAME = FAKE_TAG_NAME_PREFIX + 'body';
						var FAKE_ATTR_WITH_TAG_NAME = 'hh_fake_attr';

						var FAKE_TAG_NAME_RE = new RegExp('(<\\/?)' + FAKE_TAG_NAME_PREFIX, 'ig');
						var WRAP_TAGS_RE = /(<\/?)(html|head|body|table|tbody|tfoot|thead|tr|td|th|caption|colgroup)((?:\s[^>]*)?>)/ig;
						var WRAP_TAGS_TEMPLATE = '$1' + FAKE_TAG_NAME_PREFIX + '$2$3';

						var WRAP_COL_NOSCRIPT_TAGS_RE = /<(\/?(?:col|noscript))(\s[^>]*?)?(\s?\/)?>/ig;
						var WRAP_COL_NOSCRIPT_TAGS_TEMPLATE = '<br ' + FAKE_ATTR_WITH_TAG_NAME + '="$1|$3"$2>';
						var UNWRAP_COL_NOSCRIPT_TAGS_RE = new RegExp('<br([^>]*?) ' + FAKE_ATTR_WITH_TAG_NAME + '="([^|]+)\\|([^"]*)"([^>]*)', 'ig');

						var WRAP_DOCTYPE_RE = /<!doctype([^>]*)>/ig;
						var WRAP_DOCTYPE_TEMPLATE = '<' + FAKE_DOCTYPE_TAG_NAME + '>$1</' + FAKE_DOCTYPE_TAG_NAME + '>';
						var UNWRAP_DOCTYPE_RE = new RegExp('<' + FAKE_DOCTYPE_TAG_NAME + '>([\\S\\s]*?)</' + FAKE_DOCTYPE_TAG_NAME + '>', 'ig');

						var FIND_SVG_RE = /<svg\s?[^>]*>/ig;
						var FIND_NS_ATTRS_RE = /\s(?:NS[0-9]+:[^"']+('|")[\S\s]*?\1|[^:]+:NS[0-9]+=(?:""|''))/g;

						var STORED_ATTRS_SELECTOR = function () {
						    var storedAttrs = [];

						    for (var _i2 = 0; _i2 < _attributes.URL_ATTRS.length; _i2++) {
						        var attr = _attributes.URL_ATTRS[_i2];
						        storedAttrs.push(_dom2.default.getStoredAttrName(attr));
						    }

						    for (var _i4 = 0; _i4 < _attributes.ATTRS_WITH_SPECIAL_PROXYING_LOGIC.length; _i4++) {
						        var _attr = _attributes.ATTRS_WITH_SPECIAL_PROXYING_LOGIC[_i4];
						        storedAttrs.push(_dom2.default.getStoredAttrName(_attr));
						    }

						    return '[' + storedAttrs.join('],[') + ']';
						}();

						var SHADOW_UI_ELEMENTS_SELECTOR = '[class*="' + _className2.default.postfix + '"]';
						var HOVER_AND_FOCUS_PSEUDO_CLASS_ELEMENTS_SELECTOR = '[' + _internalAttributes2.default.hoverPseudoClass + '],[' + _internalAttributes2.default.focusPseudoClass + ']';
						var FAKE_ELEMENTS_SELECTOR = FAKE_HEAD_TAG_NAME + ', ' + FAKE_BODY_TAG_NAME;
						var HTML_PARSER_ELEMENT_FLAG = 'hammerhead|html-parser-element-flag';

						var INIT_SCRIPT_FOR_IFRAME_TEMPLATE = exports.INIT_SCRIPT_FOR_IFRAME_TEMPLATE = (0, _createSelfRemovingScript2.default)('\n    var parentHammerhead = null;\n    \n    if (!window["' + _internalProperties2.default.hammerhead + '"])\n        Object.defineProperty(window, "' + _internalProperties2.default.documentWasCleaned + '", { value: true, configurable: true });\n\n    try {\n        parentHammerhead = window.parent["' + _internalProperties2.default.hammerhead + '"];\n    } catch(e) {}\n\n    if (parentHammerhead)\n        parentHammerhead.sandbox.onIframeDocumentRecreated(window.frameElement);\n');

						var htmlDocument = _nativeMethods2.default.createHTMLDocument.call(document.implementation, 'title');
						var htmlParser = _nativeMethods2.default.createDocumentFragment.call(htmlDocument);

						htmlParser[HTML_PARSER_ELEMENT_FLAG] = true;

						function getHtmlDocument() {
						    try {
						        // NOTE: IE bug: access denied.
						        if (htmlDocument.location) htmlDocument.location.toString();
						    } catch (e) {
						        htmlDocument = _nativeMethods2.default.createHTMLDocument.call(document.implementation, 'title');
						        htmlParser = _nativeMethods2.default.createDocumentFragment.call(htmlDocument);

						        htmlParser[HTML_PARSER_ELEMENT_FLAG] = true;
						    }

						    return htmlDocument;
						}

						function wrapHtmlText(html) {
						    return html.replace(WRAP_DOCTYPE_RE, WRAP_DOCTYPE_TEMPLATE).replace(WRAP_COL_NOSCRIPT_TAGS_RE, WRAP_COL_NOSCRIPT_TAGS_TEMPLATE).replace(WRAP_TAGS_RE, WRAP_TAGS_TEMPLATE);
						}

						function unwrapHtmlText(html) {
						    return html.replace(UNWRAP_DOCTYPE_RE, '<!doctype$1>').replace(UNWRAP_COL_NOSCRIPT_TAGS_RE, '<$2$1$4$3').replace(FAKE_TAG_NAME_RE, '$1');
						}

						function isPageHtml(html) {
						    return (/^\s*(<\s*(!doctype|html|head|body)[^>]*>)/i.test(html)
						    );
						}

						function processHtmlInternal(html, process) {
						    var container = _nativeMethods2.default.createElement.call(getHtmlDocument(), 'div');

						    html = wrapHtmlText(html);

						    _nativeMethods2.default.appendChild.call(htmlParser, container);
						    _nativeMethods2.default.elementInnerHTMLSetter.call(container, html);

						    var processedHtml = process(container) ? _nativeMethods2.default.elementInnerHTMLGetter.call(container) : html;

						    _nativeMethods2.default.removeChild.call(container.parentNode, container);
						    processedHtml = unwrapHtmlText(processedHtml);

						    // NOTE: hack for IE (GH-1083)
						    if (_browser.isIE && !_browser.isMSEdge && html !== processedHtml) processedHtml = removeExtraSvgNamespaces(html, processedHtml);

						    return processedHtml;
						}

						function cleanUpUrlAttr(el) {
						    var urlAttr = _domProcessor2.default.getUrlAttr(el);

						    if (!urlAttr || !_nativeMethods2.default.hasAttribute.call(el, urlAttr)) return;

						    var storedAttr = _dom2.default.getStoredAttrName(urlAttr);

						    if (_nativeMethods2.default.hasAttribute.call(el, storedAttr)) {
						        _nativeMethods2.default.setAttribute.call(el, urlAttr, _nativeMethods2.default.getAttribute.call(el, storedAttr));
						        _nativeMethods2.default.removeAttribute.call(el, storedAttr);
						    }
						}

						function cleanUpAutocompleteAttr(el) {
						    if (!_nativeMethods2.default.hasAttribute.call(el, 'autocomplete')) return;

						    var storedAttr = _dom2.default.getStoredAttrName('autocomplete');

						    if (_nativeMethods2.default.hasAttribute.call(el, storedAttr)) {
						        var storedAttrValue = _nativeMethods2.default.getAttribute.call(el, storedAttr);

						        if (_dom2.default.isAddedAutocompleteAttr('autocomplete', storedAttrValue)) _nativeMethods2.default.removeAttribute.call(el, 'autocomplete');else _nativeMethods2.default.setAttribute.call(el, 'autocomplete', storedAttrValue);

						        _nativeMethods2.default.removeAttribute.call(el, storedAttr);
						    }
						}

						function cleanUpTargetAttr(el) {
						    var targetAttr = _domProcessor2.default.getTargetAttr(el);

						    if (!targetAttr || !_nativeMethods2.default.hasAttribute.call(el, targetAttr)) return;

						    var storedAttr = _dom2.default.getStoredAttrName(targetAttr);

						    if (_nativeMethods2.default.hasAttribute.call(el, storedAttr)) {
						        _nativeMethods2.default.setAttribute.call(el, targetAttr, _nativeMethods2.default.getAttribute.call(el, storedAttr));
						        _nativeMethods2.default.removeAttribute.call(el, storedAttr);
						    }
						}

						function cleanUpSandboxAttr(el) {
						    if (_domProcessor2.default.adapter.getTagName(el) !== 'iframe' || !_nativeMethods2.default.hasAttribute.call(el, 'sandbox')) return;

						    var storedAttr = _dom2.default.getStoredAttrName('sandbox');

						    if (_nativeMethods2.default.hasAttribute.call(el, storedAttr)) {
						        _nativeMethods2.default.setAttribute.call(el, 'sandbox', _nativeMethods2.default.getAttribute.call(el, storedAttr));
						        _nativeMethods2.default.removeAttribute.call(el, storedAttr);
						    }
						}

						function cleanUpStyleAttr(el) {
						    if (!_nativeMethods2.default.hasAttribute.call(el, 'style')) return;

						    var storedAttr = _dom2.default.getStoredAttrName('style');

						    if (_nativeMethods2.default.hasAttribute.call(el, storedAttr)) {
						        _nativeMethods2.default.setAttribute.call(el, 'style', _nativeMethods2.default.getAttribute.call(el, storedAttr));
						        _nativeMethods2.default.removeAttribute.call(el, storedAttr);
						    }
						}

						function cleanUpHtml(html) {
						    return processHtmlInternal(html, function (container) {
						        var changed = false;

						        (0, _dom3.find)(container, STORED_ATTRS_SELECTOR, function (el) {
						            cleanUpUrlAttr(el);
						            cleanUpAutocompleteAttr(el);
						            cleanUpTargetAttr(el);
						            cleanUpSandboxAttr(el);
						            cleanUpStyleAttr(el);

						            changed = true;
						        });

						        (0, _dom3.find)(container, SHADOW_UI_ELEMENTS_SELECTOR, function (el) {
						            if (el.parentNode) {
						                _nativeMethods2.default.removeChild.call(el.parentNode, el);
						                changed = true;
						            }
						        });

						        (0, _dom3.find)(container, 'script', function (el) {
						            var textContent = _nativeMethods2.default.nodeTextContentGetter.call(el);
						            var cleanedTextContent = (0, _header.remove)(textContent);

						            if (textContent !== cleanedTextContent) {
						                _nativeMethods2.default.nodeTextContentSetter.call(el, cleanedTextContent);

						                changed = true;
						            }
						        });

						        (0, _dom3.find)(container, 'style', function (el) {
						            var textContent = _nativeMethods2.default.nodeTextContentGetter.call(el);
						            var cleanedTextContent = _style2.default.cleanUp(textContent, _url.parseProxyUrl);

						            if (textContent !== cleanedTextContent) {
						                _nativeMethods2.default.nodeTextContentSetter.call(el, cleanedTextContent);

						                changed = true;
						            }
						        });

						        (0, _dom3.find)(container, HOVER_AND_FOCUS_PSEUDO_CLASS_ELEMENTS_SELECTOR, function (el) {
						            _nativeMethods2.default.removeAttribute.call(el, _internalAttributes2.default.hoverPseudoClass);
						            _nativeMethods2.default.removeAttribute.call(el, _internalAttributes2.default.focusPseudoClass);

						            changed = true;
						        });

						        (0, _dom3.find)(container, FAKE_ELEMENTS_SELECTOR, function (el) {
						            var innerHtml = _nativeMethods2.default.elementInnerHTMLGetter.call(el);

						            if (innerHtml.indexOf(INIT_SCRIPT_FOR_IFRAME_TEMPLATE) !== -1) {
						                _nativeMethods2.default.elementInnerHTMLSetter.call(el, innerHtml.replace(INIT_SCRIPT_FOR_IFRAME_TEMPLATE, ''));

						                changed = true;
						            }
						        });

						        return changed;
						    });
						}

						function processHtml(html) {
						    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
						        parentTag = _ref.parentTag,
						        prepareDom = _ref.prepareDom,
						        processedContext = _ref.processedContext;

						    return processHtmlInternal(html, function (container) {
						        var doctypeElement = null;
						        var htmlElements = [];
						        var children = [];
						        var length = 0;
						        var storedBaseUrl = urlResolver.getBaseUrl(document);

						        if (prepareDom) prepareDom(container);

						        if (_nativeMethods2.default.htmlCollectionLengthGetter.call(container.children)) {
						            children = _nativeMethods2.default.elementQuerySelectorAll.call(container, '*');
						            length = _nativeMethods2.default.nodeListLengthGetter.call(children);
						        }

						        var base = _nativeMethods2.default.elementQuerySelector.call(container, 'base');

						        if (base) urlResolver.updateBase(_nativeMethods2.default.getAttribute.call(base, 'href'), document);

						        for (var i = 0; i < length; i++) {
						            var child = children[i];

						            if ((0, _dom3.isScriptElement)(child)) {
						                var scriptContent = _nativeMethods2.default.nodeTextContentGetter.call(child);

						                _nativeMethods2.default.nodeTextContentSetter.call(child, unwrapHtmlText(scriptContent));
						            }

						            child[_internalProperties2.default.processedContext] = processedContext;
						            _domProcessor2.default.processElement(child, _url.convertToProxyUrl);

						            var elTagName = (0, _dom3.getTagName)(child);

						            if (elTagName === FAKE_HEAD_TAG_NAME || elTagName === FAKE_BODY_TAG_NAME) htmlElements.push(child);else if (elTagName === FAKE_DOCTYPE_TAG_NAME) doctypeElement = child;
						        }

						        if (!parentTag) {
						            if (htmlElements.length) {
						                for (var _i6 = 0; _i6 < htmlElements.length; _i6++) {
						                    var htmlElement = htmlElements[_i6];
						                    _nativeMethods2.default.insertAdjacentHTML.call(htmlElement, 'afterbegin', INIT_SCRIPT_FOR_IFRAME_TEMPLATE);
						                }
						            } else if (doctypeElement && _browser.isIE) _nativeMethods2.default.insertAdjacentHTML.call(doctypeElement, 'afterend', INIT_SCRIPT_FOR_IFRAME_TEMPLATE);
						        }

						        urlResolver.updateBase(storedBaseUrl, document);

						        return true;
						    });
						}

						function dispose() {
						    htmlParser = null;
						    htmlDocument = null;
						}

						function isInternalHtmlParserElement(el) {
						    while (el.parentNode) {
						        el = el.parentNode;
						    }return !!el[HTML_PARSER_ELEMENT_FLAG];
						}

						function removeExtraSvgNamespaces(html, processedHtml) {
						    var initialSvgStrs = html.match(FIND_SVG_RE);
						    var index = 0;

						    if (!initialSvgStrs) return processedHtml;

						    return processedHtml.replace(FIND_SVG_RE, function (svgStr) {
						        var initialSvgStr = initialSvgStrs[index];
						        var initialNSAttrs = initialSvgStr ? initialSvgStr.match(FIND_NS_ATTRS_RE) : null;

						        if (initialSvgStr) index++;

						        return initialSvgStr ? svgStr.replace(FIND_NS_ATTRS_RE, function () {
						            var replacement = initialNSAttrs ? initialNSAttrs.join('') : '';

						            if (initialNSAttrs) initialNSAttrs = null;

						            return replacement;
						        }) : svgStr;
						    });
						}
					},
					"integer-id-generator.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.default = createIntegerIdGenerator;
						var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
						var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;

						function createIntegerIdGenerator() {
						    var id = MIN_SAFE_INTEGER;

						    return {
						        increment: function increment() {
						            id = id === MAX_SAFE_INTEGER ? MIN_SAFE_INTEGER : id + 1;

						            return id;
						        },

						        get value() {
						            return id;
						        }
						    };
						}
						module.exports = exports['default'];
					},
					"is-jquery-object.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.default = isJQueryObj;
						// NOTE: We can't use 'obj instanceof $' check because it depends on instance of the jQuery.
						function isJQueryObj(obj) {
						    return obj && !!obj.jquery;
						}
						module.exports = exports['default'];
					},
					"next-tick.js": function (exports, module, require) {
						

						exports.__esModule = true;

						exports.default = function () {
						    return new _pinkie2.default(function (resolve) {
						        return _nativeMethods2.default.setTimeout.call(window, resolve, 0);
						    });
						};

						var _pinkie = require('pinkie');

						var _pinkie2 = _interopRequireDefault(_pinkie);

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						module.exports = exports['default'];
					},
					"noop.js": function (exports, module, require) {
						

						exports.__esModule = true;

						exports.default = function () {
						    // NOTE: empty function
						};

						module.exports = exports['default'];
					},
					"position.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.getElementRectangle = getElementRectangle;
						exports.shouldIgnoreMouseEventInsideIframe = shouldIgnoreMouseEventInsideIframe;
						exports.getOffsetPosition = getOffsetPosition;
						exports.offsetToClientCoords = offsetToClientCoords;

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _dom = require('./dom');

						var domUtils = _interopRequireWildcard(_dom);

						var _style = require('./style');

						var styleUtils = _interopRequireWildcard(_style);

						var _browser = require('./browser');

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function getAreaElementRectangle(el, mapContainer) {
						    var shape = _nativeMethods2.default.getAttribute.call(el, 'shape');
						    var coords = _nativeMethods2.default.getAttribute.call(el, 'coords');
						    var i = 0;

						    if (shape === 'default') return getElementRectangle(mapContainer);

						    if (!shape || !coords) return null;

						    coords = coords.split(',');

						    if (!coords.length) return null;

						    for (i = 0; i < coords.length; i++) {
						        coords[i] = parseInt(coords[i], 10);

						        if (typeof coords[i] !== 'number') return null;
						    }

						    var rectangle = null;

						    switch (shape) {
						        case 'rect':
						            if (coords.length === 4) {
						                rectangle = {
						                    height: coords[3] - coords[1],
						                    left: coords[0],
						                    top: coords[1],
						                    width: coords[2] - coords[0]
						                };
						            }
						            break;

						        case 'circle':
						            if (coords.length === 3) {
						                rectangle = {
						                    height: coords[2] * 2,
						                    left: coords[0] - coords[2],
						                    top: coords[1] - coords[2],
						                    width: coords[2] * 2
						                };
						            }

						            break;

						        case 'poly':
						            if (coords.length >= 6 && coords.length % 2 === 0) {
						                rectangle = {};
						                rectangle.left = rectangle.right = coords[0];
						                rectangle.top = rectangle.bottom = coords[1];

						                for (i = 2; i < coords.length; i += 2) {
						                    rectangle.left = coords[i] < rectangle.left ? coords[i] : rectangle.left;
						                    rectangle.right = coords[i] > rectangle.right ? coords[i] : rectangle.right;
						                }

						                for (i = 3; i < coords.length; i += 2) {
						                    rectangle.top = coords[i] < rectangle.top ? coords[i] : rectangle.top;
						                    rectangle.bottom = coords[i] > rectangle.bottom ? coords[i] : rectangle.bottom;
						                }

						                rectangle.height = rectangle.bottom - rectangle.top;
						                rectangle.width = rectangle.right - rectangle.left;
						            }

						            break;
						    }

						    if (rectangle) {
						        var containerOffset = getOffsetPosition(mapContainer);

						        rectangle.left += containerOffset.left;
						        rectangle.top += containerOffset.top;
						    }

						    return rectangle;
						}

						function getMapElementRectangle(el) {
						    var mapContainer = domUtils.getMapContainer(el);

						    if (mapContainer) {
						        if (/^map$/i.test(el.tagName)) return getElementRectangle(mapContainer);else if (/^area$/i.test(el.tagName)) {
						            var areaElementRectangle = getAreaElementRectangle(el, mapContainer);

						            if (areaElementRectangle) return areaElementRectangle;
						        }
						    }

						    return {
						        height: 0,
						        left: 0,
						        top: 0,
						        width: 0
						    };
						}

						function getSelectChildRectangle(el) {
						    var select = domUtils.getSelectParent(el);

						    if (select) {
						        var selectRectangle = getElementRectangle(select);
						        var selectBorders = styleUtils.getBordersWidth(select);
						        var selectRightScrollbar = styleUtils.getInnerWidth(select) === select.clientWidth ? 0 : domUtils.getScrollbarSize();
						        var optionHeight = styleUtils.getOptionHeight(select);
						        var optionRealIndex = domUtils.getChildVisibleIndex(select, el);
						        var optionVisibleIndex = Math.max(optionRealIndex - styleUtils.getScrollTop(select) / optionHeight, 0);

						        return {
						            height: optionHeight,
						            left: selectRectangle.left + selectBorders.left,
						            top: selectRectangle.top + selectBorders.top + styleUtils.getElementPadding(select).top + optionVisibleIndex * optionHeight,

						            width: selectRectangle.width - (selectBorders.left + selectBorders.right) - selectRightScrollbar
						        };
						    }

						    return getElementRectangle(el);
						}

						function getSvgElementRelativeRectangle(el) {
						    var isSvgTextElement = domUtils.matches(el, 'tspan') || domUtils.matches(el, 'tref') || domUtils.getTagName(el) === 'textpath';
						    var boundingClientRect = el.getBoundingClientRect();
						    var elementRect = {
						        height: !isSvgTextElement ? boundingClientRect.height : el.offsetHeight,
						        left: boundingClientRect.left + (document.body.scrollLeft || document.documentElement.scrollLeft),
						        top: boundingClientRect.top + (document.body.scrollTop || document.documentElement.scrollTop),
						        width: !isSvgTextElement ? boundingClientRect.width : el.offsetWidth
						    };

						    if (isSvgTextElement) {
						        var offsetParent = styleUtils.getOffsetParent(el);
						        var elOffset = styleUtils.getOffset(el);
						        var offsetParentOffset = styleUtils.getOffset(offsetParent);
						        var offsetParentIsBody = domUtils.matches(offsetParent, 'body');

						        return {
						            height: elementRect.height || boundingClientRect.height,
						            left: offsetParentIsBody ? el.offsetLeft || elOffset.left : offsetParentOffset.left + el.offsetLeft,
						            top: offsetParentIsBody ? el.offsetTop || elOffset.top : offsetParentOffset.top + el.offsetTop,
						            width: elementRect.width || boundingClientRect.width
						        };
						    }

						    if (_browser.isFirefox || _browser.isIE) return elementRect;

						    var strokeWidth = _nativeMethods2.default.getAttribute.call(el, 'stroke-width') || styleUtils.get(el, 'stroke-width');

						    // NOTE: We assume that the 'stroke-width' attribute can only be set in pixels.
						    strokeWidth = strokeWidth ? +strokeWidth.replace(/px|em|ex|pt|pc|cm|mm|in/, '') : 1;

						    if (strokeWidth && +strokeWidth % 2 !== 0) strokeWidth = +strokeWidth + 1;

						    if ((domUtils.matches(el, 'line') || domUtils.matches(el, 'polyline') || domUtils.matches(el, 'polygon') || domUtils.matches(el, 'path')) && (!elementRect.width || !elementRect.height)) {
						        if (!elementRect.width && elementRect.height) {
						            elementRect.left -= strokeWidth / 2;
						            elementRect.width = strokeWidth;
						        } else if (elementRect.width && !elementRect.height) {
						            elementRect.height = strokeWidth;
						            elementRect.top -= strokeWidth / 2;
						        }
						    } else {
						        if (domUtils.matches(el, 'polygon')) {
						            elementRect.height += 2 * strokeWidth;
						            elementRect.left -= strokeWidth;
						            elementRect.top -= strokeWidth;
						            elementRect.width += 2 * strokeWidth;
						        }

						        elementRect.height += strokeWidth;
						        elementRect.left -= strokeWidth / 2;
						        elementRect.top -= strokeWidth / 2;
						        elementRect.width += strokeWidth;
						    }

						    return elementRect;
						}

						function getElementRectangle(el) {
						    var rectangle = {};

						    if (domUtils.isMapElement(el)) rectangle = getMapElementRectangle(el);else if (styleUtils.isVisibleChild(el)) rectangle = getSelectChildRectangle(el);else {
						        var elementOffset = getOffsetPosition(el);
						        var relativeRectangle = domUtils.isSVGElementOrChild(el) ? getSvgElementRelativeRectangle(el) : el.getBoundingClientRect();

						        rectangle = {
						            height: relativeRectangle.height,
						            left: elementOffset.left,
						            top: elementOffset.top,
						            width: relativeRectangle.width
						        };
						    }

						    rectangle.height = Math.round(rectangle.height);
						    rectangle.left = Math.round(rectangle.left);
						    rectangle.top = Math.round(rectangle.top);
						    rectangle.width = Math.round(rectangle.width);

						    return rectangle;
						}

						function shouldIgnoreMouseEventInsideIframe(el, x, y) {
						    if (domUtils.getTagName(el) !== 'iframe') return false;

						    var rect = getElementRectangle(el);
						    var borders = styleUtils.getBordersWidth(el);
						    var padding = styleUtils.getElementPadding(el);

						    // NOTE: we detect element's 'content' position: left, right, top and bottom
						    // which does not consider borders and paddings, so we need to
						    // subtract it for right and bottom, and add for left and top

						    var left = rect.left + borders.left + padding.left;
						    var top = rect.top + borders.top + padding.top;
						    var right = rect.left + rect.width - borders.right - padding.right;
						    var bottom = rect.top + rect.height - borders.bottom - padding.bottom;

						    return x >= left && x <= right && y >= top && y <= bottom;
						}

						function calcOffsetPosition(el, borders, offsetPosition) {
						    var isSvg = domUtils.isSVGElementOrChild(el);

						    var relativeRectangle = isSvg ? getSvgElementRelativeRectangle(el) : null;

						    return {
						        left: isSvg ? relativeRectangle.left + borders.left : offsetPosition.left + borders.left,
						        top: isSvg ? relativeRectangle.top + borders.top : offsetPosition.top + borders.top
						    };
						}

						function calcOffsetPositionInIframe(el, borders, offsetPosition, doc, currentIframe) {
						    var iframeBorders = styleUtils.getBordersWidth(currentIframe);

						    borders.left += iframeBorders.left;
						    borders.top += iframeBorders.top;

						    var iframeOffset = getOffsetPosition(currentIframe);
						    var iframePadding = styleUtils.getElementPadding(currentIframe);
						    var clientPosition = null;

						    if (domUtils.isSVGElementOrChild(el)) {
						        var relativeRectangle = getSvgElementRelativeRectangle(el);

						        clientPosition = {
						            x: relativeRectangle.left - (document.body.scrollLeft || document.documentElement.scrollLeft) + borders.left,
						            y: relativeRectangle.top - (document.body.scrollTop || document.documentElement.scrollTop) + borders.top
						        };
						    } else {
						        clientPosition = offsetToClientCoords({
						            x: offsetPosition.left + borders.left,
						            y: offsetPosition.top + borders.top
						        }, doc);
						    }

						    return {
						        left: iframeOffset.left + clientPosition.x + iframePadding.left,
						        top: iframeOffset.top + clientPosition.y + iframePadding.top
						    };
						}

						function getOffsetPosition(el) {
						    var roundFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.round;

						    if (domUtils.isMapElement(el)) {
						        var rectangle = getMapElementRectangle(el);

						        return {
						            left: rectangle.left,
						            top: rectangle.top
						        };
						    }

						    var doc = domUtils.findDocument(el);
						    var isInIframe = domUtils.isElementInIframe(el, doc);
						    var currentIframe = isInIframe ? domUtils.getIframeByElement(doc) : null;
						    var offsetPosition = doc === el ? styleUtils.getOffset(doc.documentElement) : styleUtils.getOffset(el);

						    // NOTE: The jquery .offset() function doesn't take the body's border into account (except IE7)
						    // http://bugs.jquery.com/ticket/7948.

						    // NOTE: Sometimes, in IE, the getElementFromPoint method returns a cross-domain iframe's documentElement,
						    // but there’s no way to access its body.
						    var borders = doc.body ? styleUtils.getBordersWidth(doc.body) : {
						        left: 0,
						        top: 0
						    };

						    var calcOffsetPositionFn = !isInIframe || !currentIframe ? calcOffsetPosition : calcOffsetPositionInIframe;

						    var _calcOffsetPositionFn = calcOffsetPositionFn(el, borders, offsetPosition, doc, currentIframe),
						        left = _calcOffsetPositionFn.left,
						        top = _calcOffsetPositionFn.top;

						    if (typeof roundFn === 'function') {
						        left = roundFn(left);
						        top = roundFn(top);
						    }

						    return { left: left, top: top };
						}

						function offsetToClientCoords(coords, currentDocument) {
						    var doc = currentDocument || document;
						    var documentScrollLeft = styleUtils.getScrollLeft(doc);
						    var documentScrollTop = styleUtils.getScrollTop(doc);
						    var bodyScrollLeft = styleUtils.getScrollLeft(doc.body);
						    var bodyScrollTop = styleUtils.getScrollTop(doc.body);

						    var scrollLeft = documentScrollLeft === 0 && bodyScrollLeft !== 0 ? bodyScrollLeft : documentScrollLeft;
						    var scrollTop = documentScrollTop === 0 && bodyScrollTop !== 0 ? bodyScrollTop : documentScrollTop;

						    return {
						        x: coords.x - scrollLeft,
						        y: coords.y - scrollTop
						    };
						}
					},
					"property-overriding.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.createOverriddenDescriptor = createOverriddenDescriptor;
						exports.overrideDescriptor = overrideDescriptor;

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function replaceNativeAccessor(descriptor, accessorName, newAccessor) {
						    if (newAccessor && descriptor[accessorName]) {
						        var stringifiedNativeAccessor = descriptor[accessorName].toString();

						        newAccessor.toString = function () {
						            return stringifiedNativeAccessor;
						        };
						    }

						    descriptor[accessorName] = newAccessor;
						}

						function createOverriddenDescriptor(obj, prop, _ref) {
						    var getter = _ref.getter,
						        setter = _ref.setter,
						        value = _ref.value;

						    var descriptor = _nativeMethods2.default.objectGetOwnPropertyDescriptor(obj, prop);

						    if ((getter || setter) && value) throw new Error('Cannot both specify accessors and a value or writable attribute.');

						    if (value) {
						        if (!_nativeMethods2.default.objectHasOwnProperty.call(descriptor, 'writable')) {
						            descriptor.writable = !!descriptor.set;

						            delete descriptor.get;
						            delete descriptor.set;
						        }

						        descriptor.value = value; // eslint-disable-line no-restricted-properties
						    } else {
						        if (_nativeMethods2.default.objectHasOwnProperty.call(descriptor, 'writable')) {
						            delete descriptor.value; // eslint-disable-line no-restricted-properties
						            delete descriptor.writable;
						        }

						        if (getter !== null) replaceNativeAccessor(descriptor, 'get', getter);

						        if (setter !== null) replaceNativeAccessor(descriptor, 'set', setter);
						    }

						    return descriptor;
						}

						function overrideDescriptor(obj, prop, propertyAccessors) {
						    var descriptor = createOverriddenDescriptor(obj, prop, propertyAccessors);

						    _nativeMethods2.default.objectDefineProperty(obj, prop, descriptor);
						}
					},
					"query-selector.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.getNativeQuerySelector = getNativeQuerySelector;
						exports.getNativeQuerySelectorAll = getNativeQuerySelectorAll;

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _dom = require('./dom');

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function getNativeQuerySelector(el) {
						    if ((0, _dom.isDomElement)(el)) return _nativeMethods2.default.elementQuerySelector;

						    return (0, _dom.isDocumentFragmentNode)(el) || (0, _dom.isShadowRoot)(el) ? _nativeMethods2.default.documentFragmentQuerySelector : _nativeMethods2.default.querySelector;
						}

						function getNativeQuerySelectorAll(el) {
						    // NOTE: Do not return the isDocument function instead of the isDomElement
						    // it leads to the `Invalid calling object` error in some cases in IE11 (GH-1846)
						    if ((0, _dom.isDomElement)(el)) return _nativeMethods2.default.elementQuerySelectorAll;

						    return (0, _dom.isDocumentFragmentNode)(el) || (0, _dom.isShadowRoot)(el) ? _nativeMethods2.default.documentFragmentQuerySelectorAll : _nativeMethods2.default.querySelectorAll;
						}
					},
					"replace-proxied-urls-in-stack.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.default = replaceProxiedUrlsInStack;

						var _url = require('./url');

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var STACK_FRAME_REG_EXPS = [/^\s*at .*\((\S+)\)/, // Chrome, IE (with function name)
						/^\s*at (\S+)/, // Chrome, IE (without function name)
						/^.*@(\S+)/, // Safari
						/(.+)/ // Any string
						];

						var ROW_COLUMN_NUMBER_REG_EX = /:\d+:\d+$/;

						function replaceUrlWithProxied(str, source) {
						    var proxiedUrl = null;
						    var rowColumnSuffix = '';

						    if (ROW_COLUMN_NUMBER_REG_EX.test(source)) {
						        var sourceMatch = source.match(ROW_COLUMN_NUMBER_REG_EX);

						        proxiedUrl = source.substring(0, sourceMatch.index);
						        rowColumnSuffix = sourceMatch[0];
						    } else proxiedUrl = source;

						    var parsedProxiedUrl = (0, _url.parseProxyUrl)(proxiedUrl);
						    var destUrl = parsedProxiedUrl && parsedProxiedUrl.destUrl;

						    if (!destUrl) return str;

						    var newSource = destUrl + rowColumnSuffix;

						    return str.replace(source, newSource);
						}

						function replaceProxiedUrlsInStack(stack) {
						    if (!stack) return stack;

						    var stackFrames = stack.split('\n');

						    var _loop = function _loop(i) {
						        var stackFrame = stackFrames[i];

						        var targetStackFrameRegExp = _nativeMethods2.default.arrayFilter.call(STACK_FRAME_REG_EXPS, function (stackFrameRegExp) {
						            return stackFrameRegExp.test(stackFrame);
						        })[0];

						        stackFrames[i] = stackFrame.replace(targetStackFrameRegExp, replaceUrlWithProxied);
						    };

						    for (var i = 0; i < stackFrames.length; i++) {
						        _loop(i);
						    }

						    return stackFrames.join('\n');
						}
						module.exports = exports['default'];
					},
					"style.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.get = get;
						exports.set = set;
						exports.getBordersWidth = getBordersWidth;
						exports.getComputedStyle = getComputedStyle;
						exports.getElementMargin = getElementMargin;
						exports.getElementPadding = getElementPadding;
						exports.getElementScroll = getElementScroll;
						exports.getWidth = getWidth;
						exports.getHeight = getHeight;
						exports.getInnerWidth = getInnerWidth;
						exports.getInnerHeight = getInnerHeight;
						exports.getOptionHeight = getOptionHeight;
						exports.getSelectElementSize = getSelectElementSize;
						exports.isVisibleChild = isVisibleChild;
						exports.getScrollLeft = getScrollLeft;
						exports.getScrollTop = getScrollTop;
						exports.setScrollLeft = setScrollLeft;
						exports.setScrollTop = setScrollTop;
						exports.getOffsetParent = getOffsetParent;
						exports.getOffset = getOffset;
						exports.isElementVisible = isElementVisible;
						exports.isElementInInvisibleIframe = isElementInInvisibleIframe;

						var _dom = require('./dom');

						var domUtils = _interopRequireWildcard(_dom);

						var _browser = require('./browser');

						var browserUtils = _interopRequireWildcard(_browser);

						var _featureDetection = require('./feature-detection');

						var featureDetection = _interopRequireWildcard(_featureDetection);

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						// NOTE: For Chrome.
						var MIN_SELECT_SIZE_VALUE = 4;

						function getIntValue(value) {
						    value = value || '';

						    var parsedValue = parseInt(value.replace('px', ''), 10);

						    return isNaN(parsedValue) ? 0 : parsedValue;
						}

						function get(el, property, doc, win) {
						    el = el.documentElement || el;

						    var computedStyle = getComputedStyle(el, doc, win);

						    return computedStyle && computedStyle[property];
						}

						function set(el, property, value) {
						    el = el.documentElement || el;
						    el.style[property] = value;
						}

						function getBordersWidth(el) {
						    return {
						        bottom: getIntValue(get(el, 'borderBottomWidth')),
						        left: getIntValue(get(el, 'borderLeftWidth')),
						        right: getIntValue(get(el, 'borderRightWidth')),
						        top: getIntValue(get(el, 'borderTopWidth'))
						    };
						}

						function getComputedStyle(el, doc, win) {
						    // NOTE: In Firefox, after calling the 'document.write' function for nested iframes with html src value
						    // document.defaultView equals 'null'. But 'window.document' equals 'document'.
						    // This is why, we are forced to calculate the targetWindow instead of use document.defaultView.
						    doc = doc || document;
						    win = win || window;

						    var targetWin = doc.defaultView || win;

						    return targetWin.getComputedStyle(el, null);
						}

						function getElementMargin(el) {
						    return {
						        bottom: getIntValue(get(el, 'marginBottom')),
						        left: getIntValue(get(el, 'marginLeft')),
						        right: getIntValue(get(el, 'marginRight')),
						        top: getIntValue(get(el, 'marginTop'))
						    };
						}

						function getElementPadding(el) {
						    return {
						        bottom: getIntValue(get(el, 'paddingBottom')),
						        left: getIntValue(get(el, 'paddingLeft')),
						        right: getIntValue(get(el, 'paddingRight')),
						        top: getIntValue(get(el, 'paddingTop'))
						    };
						}

						function getElementScroll(el) {
						    var isHtmlElement = domUtils.isHtmlElement(el);
						    var currentWindow = window;

						    if (isHtmlElement && domUtils.isElementInIframe(el)) {
						        var currentIframe = domUtils.getIframeByElement(el);

						        if (currentIframe) currentWindow = _nativeMethods2.default.contentWindowGetter.call(currentIframe);
						    }

						    var targetEl = isHtmlElement ? currentWindow : el;

						    return {
						        left: getScrollLeft(targetEl),
						        top: getScrollTop(targetEl)
						    };
						}

						function getWidth(el) {
						    if (!el) return null;

						    if (domUtils.isWindow(el)) return el.document.documentElement.clientWidth;

						    if (domUtils.isDocument(el)) {
						        var doc = el.documentElement;
						        var clientProp = 'clientWidth';
						        var scrollProp = 'scrollWidth';
						        var offsetProp = 'offsetWidth';

						        if (doc[clientProp] >= doc[scrollProp]) return doc[clientProp];

						        return Math.max(el.body[scrollProp], doc[scrollProp], el.body[offsetProp], doc[offsetProp]);
						    }

						    var value = el.offsetWidth;

						    value -= getIntValue(get(el, 'paddingLeft'));
						    value -= getIntValue(get(el, 'paddingRight'));
						    value -= getIntValue(get(el, 'borderLeftWidth'));
						    value -= getIntValue(get(el, 'borderRightWidth'));

						    return value;
						}

						function getHeight(el) {
						    if (!el) return null;

						    if (domUtils.isWindow(el)) return el.document.documentElement.clientHeight;

						    if (domUtils.isDocument(el)) {
						        var doc = el.documentElement;
						        var clientProp = 'clientHeight';
						        var scrollProp = 'scrollHeight';
						        var offsetProp = 'offsetHeight';

						        if (doc[clientProp] >= doc[scrollProp]) return doc[clientProp];

						        return Math.max(el.body[scrollProp], doc[scrollProp], el.body[offsetProp], doc[offsetProp]);
						    }

						    var value = el.offsetHeight;

						    value -= getIntValue(get(el, 'paddingTop'));
						    value -= getIntValue(get(el, 'paddingBottom'));
						    value -= getIntValue(get(el, 'borderTopWidth'));
						    value -= getIntValue(get(el, 'borderBottomWidth'));

						    return value;
						}

						function getInnerWidth(el) {
						    if (!el) return null;

						    if (domUtils.isWindow(el)) return el.document.documentElement.clientWidth;

						    if (domUtils.isDocument(el)) return el.documentElement.clientWidth;

						    var value = el.offsetWidth;

						    value -= getIntValue(get(el, 'borderLeftWidth'));
						    value -= getIntValue(get(el, 'borderRightWidth'));

						    return value;
						}

						function getInnerHeight(el) {
						    if (!el) return null;

						    if (domUtils.isWindow(el)) return el.document.documentElement.clientHeight;

						    if (domUtils.isDocument(el)) return el.documentElement.clientHeight;

						    var value = el.offsetHeight;

						    value -= getIntValue(get(el, 'borderTopWidth'));
						    value -= getIntValue(get(el, 'borderBottomWidth'));

						    return value;
						}

						function getOptionHeight(select) {
						    var realSizeValue = getSelectElementSize(select);
						    var selectPadding = getElementPadding(select);
						    var selectScrollHeight = select.scrollHeight - (selectPadding.top + selectPadding.bottom);
						    var childrenCount = domUtils.getSelectVisibleChildren(select).length;

						    if (realSizeValue === 1) return getHeight(select);

						    return browserUtils.isIE && realSizeValue > childrenCount ? Math.round(selectScrollHeight / childrenCount) : Math.round(selectScrollHeight / Math.max(childrenCount, realSizeValue));
						}

						function getSelectElementSize(select) {
						    // NOTE: iOS and Android ignore 'size' and 'multiple' attributes,
						    // all select elements behave like a select with size=1.
						    if (browserUtils.isSafari && featureDetection.hasTouchEvents || browserUtils.isAndroid) return 1;

						    var sizeAttr = _nativeMethods2.default.getAttribute.call(select, 'size');
						    var multipleAttr = _nativeMethods2.default.getAttribute.call(select, 'multiple');
						    var size = !sizeAttr ? 1 : parseInt(sizeAttr, 10);

						    if (multipleAttr && (!sizeAttr || size < 1)) size = MIN_SELECT_SIZE_VALUE;

						    return size;
						}

						function isVisibleChild(el) {
						    var select = domUtils.getSelectParent(el);
						    var tagName = domUtils.getTagName(el);

						    return domUtils.isSelectElement(select) && getSelectElementSize(select) > 1 && (tagName === 'option' || tagName === 'optgroup') && (
						    // NOTE: Firefox does not display groups without a label or with an empty label.
						    !browserUtils.isFirefox || el.label);
						}

						function getScrollLeft(el) {
						    if (!el) return null;

						    if (domUtils.isWindow(el)) return el.pageXOffset;

						    if (domUtils.isDocument(el)) return el.defaultView.pageXOffset;

						    return el.scrollLeft;
						}

						function getScrollTop(el) {
						    if (!el) return null;

						    if (domUtils.isWindow(el)) return el.pageYOffset;

						    if (domUtils.isDocument(el)) return el.defaultView.pageYOffset;

						    return el.scrollTop;
						}

						function setScrollLeft(el, value) {
						    if (!el) return;

						    if (domUtils.isWindow(el) || domUtils.isDocument(el)) {
						        var win = domUtils.findDocument(el).defaultView;
						        var scrollTop = getScrollTop(el);

						        win.scrollTo(value, scrollTop);
						    } else el.scrollLeft = value;
						}

						function setScrollTop(el, value) {
						    if (!el) return;

						    if (domUtils.isWindow(el) || domUtils.isDocument(el)) {
						        var win = domUtils.findDocument(el).defaultView;
						        var scrollLeft = getScrollLeft(el);

						        win.scrollTo(scrollLeft, value);
						    } else el.scrollTop = value;
						}

						function getOffsetParent(el) {
						    if (el) {
						        var offsetParent = el.offsetParent || document.body;

						        while (offsetParent && !/^(?:body|html)$/i.test(offsetParent.nodeName) && get(offsetParent, 'position') === 'static') {
						            offsetParent = offsetParent.offsetParent;
						        }return offsetParent;
						    }

						    return void 0;
						}

						function getOffset(el) {
						    if (!el || domUtils.isWindow(el) || domUtils.isDocument(el)) return null;

						    var clientRect = el.getBoundingClientRect();

						    // NOTE: A detached node or documentElement.
						    var doc = el.ownerDocument;
						    var docElement = doc.documentElement;

						    if (!docElement.contains(el) || el === docElement) {
						        return {
						            top: clientRect.top,
						            left: clientRect.left
						        };
						    }

						    var win = doc.defaultView;
						    var clientTop = docElement.clientTop || doc.body.clientTop || 0;
						    var clientLeft = docElement.clientLeft || doc.body.clientLeft || 0;
						    var scrollTop = win.pageYOffset || docElement.scrollTop || doc.body.scrollTop;
						    var scrollLeft = win.pageXOffset || docElement.scrollLeft || doc.body.scrollLeft;

						    clientRect = el.getBoundingClientRect();

						    return {
						        top: clientRect.top + scrollTop - clientTop,
						        left: clientRect.left + scrollLeft - clientLeft
						    };
						}

						function isElementVisible(el, doc) {
						    if (!domUtils.isElementInDocument(el, doc)) return false;

						    while (el) {
						        if (get(el, 'display', doc) === 'none' || get(el, 'visibility', doc) === 'hidden') return false;

						        el = el.parentNode;
						    }

						    return true;
						}

						function isElementInInvisibleIframe(el) {
						    var frameElement = domUtils.getIframeByElement(el);

						    return frameElement && !isElementVisible(frameElement, domUtils.findDocument(frameElement));
						}
					},
					"types.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.inaccessibleTypeToStr = inaccessibleTypeToStr;
						exports.isNullOrUndefined = isNullOrUndefined;
						exports.isPrimitiveType = isPrimitiveType;
						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						function inaccessibleTypeToStr(obj) {
						    return obj === null ? 'null' : 'undefined';
						}

						function isNullOrUndefined(obj) {
						    return obj === null || obj === void 0;
						}

						function isPrimitiveType(obj) {
						    var objType = typeof obj;

						    return objType !== 'object' && objType !== 'function';
						}
					},
					"url-resolver.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _nativeMethods = require('../sandbox/native-methods');

						var _nativeMethods2 = _interopRequireDefault(_nativeMethods);

						var _destinationLocation = require('../utils/destination-location');

						var destLocation = _interopRequireWildcard(_destinationLocation);

						var _url = require('../../utils/url');

						var _dom = require('../utils/dom');

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var DOCUMENT_URL_RESOLVER = 'hammerhead|document-url-resolver';

						exports.default = {
						    _createResolver: function _createResolver(doc) {
						        var htmlDocument = _nativeMethods2.default.createHTMLDocument.call(doc.implementation, 'title');
						        var a = _nativeMethods2.default.createElement.call(htmlDocument, 'a');
						        var base = _nativeMethods2.default.createElement.call(htmlDocument, 'base');

						        _nativeMethods2.default.appendChild.call(htmlDocument.body, a);
						        _nativeMethods2.default.appendChild.call(htmlDocument.head, base);

						        return htmlDocument;
						    },
						    _getResolver: function _getResolver(doc) {
						        // NOTE: Once a document is recreated (document.open, document.write is called), nativeMethods will be refreshed.
						        // If we call urlResolve.updateBase after this,
						        // we will use native methods from an actual document.
						        // However, a document that contains an element for url resolving is created using a previous version of nativeMethods.
						        if (!doc[DOCUMENT_URL_RESOLVER]) {
						            _nativeMethods2.default.objectDefineProperty.call(window.Object, doc, DOCUMENT_URL_RESOLVER, {
						                value: this._createResolver(doc),
						                writable: true
						            });
						        }

						        return doc[DOCUMENT_URL_RESOLVER];
						    },
						    _isNestedIframeWithoutSrc: function _isNestedIframeWithoutSrc(win) {
						        if (!win || !win.parent || win.parent === win || win.parent.parent === win.parent) return false;

						        var iframeElement = (0, _dom.getFrameElement)(window);

						        return !!iframeElement && (0, _dom.isIframeWithoutSrc)(iframeElement);
						    },
						    init: function init(doc) {
						        this.updateBase(destLocation.get(), doc);
						    },
						    getResolverElement: function getResolverElement(doc) {
						        return _nativeMethods2.default.nodeFirstChildGetter.call(this._getResolver(doc).body);
						    },
						    resolve: function resolve(url, doc) {
						        var resolver = this.getResolverElement(doc);
						        var href = null;

						        if (url === null) _nativeMethods2.default.removeAttribute.call(resolver, 'href');else {
						            _nativeMethods2.default.anchorHrefSetter.call(resolver, url);

						            href = _nativeMethods2.default.anchorHrefGetter.call(resolver);

						            // NOTE: It looks like a Chrome bug: in a nested iframe without src (when an iframe is placed into another
						            // iframe) you cannot set a relative link href while the iframe loading is not completed. So, we'll do it with
						            // the parent's urlResolver Safari demonstrates similar behavior, but urlResolver.href has a relative URL value.
						            var needUseParentResolver = url && (!href || href.charAt(0) === '/') && this._isNestedIframeWithoutSrc(doc.defaultView);

						            if (needUseParentResolver) return this.resolve(url, window.parent.document);
						        }

						        return (0, _url.ensureTrailingSlash)(url, href);
						    },
						    updateBase: function updateBase(url, doc) {
						        var resolverDocument = this._getResolver(doc);
						        var baseElement = _nativeMethods2.default.elementGetElementsByTagName.call(resolverDocument.head, 'base')[0];

						        url = url || destLocation.get();

						        /*eslint-disable no-restricted-properties*/
						        var parsedUrl = (0, _url.parseUrl)(url);
						        var isRelativeUrl = parsedUrl.protocol !== 'file:' && !parsedUrl.host;
						        var isProtocolRelativeUrl = /^\/\//.test(url) && !!parsedUrl.host;
						        /*eslint-enable no-restricted-properties*/

						        if (isRelativeUrl || isProtocolRelativeUrl) {
						            var destinationLocation = destLocation.get();

						            this.updateBase(destinationLocation, doc);
						            url = this.resolve(url, doc);
						        }

						        _nativeMethods2.default.setAttribute.call(baseElement, 'href', url);
						    },
						    getBaseUrl: function getBaseUrl(doc) {
						        var baseElement = _nativeMethods2.default.elementGetElementsByTagName.call(this._getResolver(doc).head, 'base')[0];

						        return _nativeMethods2.default.getAttribute.call(baseElement, 'href');
						    },
						    changeUrlPart: function changeUrlPart(url, nativePropSetter, value, doc) {
						        var resolver = this.getResolverElement(doc);

						        _nativeMethods2.default.anchorHrefSetter.call(resolver, url);
						        nativePropSetter.call(resolver, value);

						        return _nativeMethods2.default.anchorHrefGetter.call(resolver);
						    },
						    dispose: function dispose(doc) {
						        doc[DOCUMENT_URL_RESOLVER] = null;
						    }
						};
						module.exports = exports['default'];
					},
					"url.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.REQUEST_DESCRIPTOR_VALUES_SEPARATOR = undefined;
						exports.getProxyUrl = getProxyUrl;
						exports.getNavigationUrl = getNavigationUrl;
						exports.getCrossDomainIframeProxyUrl = getCrossDomainIframeProxyUrl;
						exports.getCrossDomainProxyPort = getCrossDomainProxyPort;
						exports.getCrossDomainProxyUrl = getCrossDomainProxyUrl;
						exports.resolveUrlAsDest = resolveUrlAsDest;
						exports.formatUrl = formatUrl;
						exports.parseProxyUrl = parseProxyUrl;
						exports.parseUrl = parseUrl;
						exports.convertToProxyUrl = convertToProxyUrl;
						exports.changeDestUrlPart = changeDestUrlPart;
						exports.isValidWebSocketUrl = isValidWebSocketUrl;
						exports.isSubDomain = isSubDomain;
						exports.isSupportedProtocol = isSupportedProtocol;
						exports.isSpecialPage = isSpecialPage;
						exports.parseResourceType = parseResourceType;
						exports.stringifyResourceType = stringifyResourceType;
						exports.isChangedOnlyHash = isChangedOnlyHash;

						var _internalProperties = require('../../processing/dom/internal-properties');

						var _internalProperties2 = _interopRequireDefault(_internalProperties);

						var _url = require('../../utils/url');

						var sharedUrlUtils = _interopRequireWildcard(_url);

						var _destinationLocation = require('./destination-location');

						var destLocation = _interopRequireWildcard(_destinationLocation);

						var _urlResolver = require('./url-resolver');

						var urlResolver = _interopRequireWildcard(_urlResolver);

						var _settings = require('../settings');

						var _settings2 = _interopRequireDefault(_settings);

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var HASH_RE = /#[\S\s]*$/;
						var SUPPORTED_WEB_SOCKET_PROTOCOL_RE = /^wss?:/i;

						// NOTE: The window.location equals 'about:blank' in iframes without src
						// therefore we need to find a window with src to get the proxy settings
						var DEFAULT_PROXY_SETTINGS = function () {
						    /*eslint-disable no-restricted-properties*/
						    var locationWindow = window;
						    var proxyLocation = locationWindow.location;

						    while (!proxyLocation.hostname) {
						        locationWindow = locationWindow.parent;
						        proxyLocation = locationWindow.location;
						    }

						    return {
						        hostname: proxyLocation.hostname,
						        port: proxyLocation.port.toString(),
						        protocol: proxyLocation.protocol
						    };
						    /*eslint-enable no-restricted-properties*/
						}();

						var REQUEST_DESCRIPTOR_VALUES_SEPARATOR = exports.REQUEST_DESCRIPTOR_VALUES_SEPARATOR = sharedUrlUtils.REQUEST_DESCRIPTOR_VALUES_SEPARATOR;

						function getProxyUrl(url, opts) {
						    var resourceType = opts && opts.resourceType;
						    var parsedResourceType = sharedUrlUtils.parseResourceType(resourceType);

						    if (!parsedResourceType.isWebSocket && !isSupportedProtocol(url) && !isSpecialPage(url)) return url;

						    // NOTE: Resolves relative URLs.
						    var resolvedUrl = destLocation.resolveUrl(url, opts && opts.doc);

						    if (parsedResourceType.isWebSocket && !isValidWebSocketUrl(resolvedUrl) || !sharedUrlUtils.isValidUrl(resolvedUrl)) return url;

						    /*eslint-disable no-restricted-properties*/
						    var proxyHostname = opts && opts.proxyHostname || DEFAULT_PROXY_SETTINGS.hostname;
						    var proxyPort = opts && opts.proxyPort || DEFAULT_PROXY_SETTINGS.port;
						    var proxyServerProtocol = opts && opts.proxyProtocol || DEFAULT_PROXY_SETTINGS.protocol;
						    /*eslint-enable no-restricted-properties*/

						    var proxyProtocol = parsedResourceType.isWebSocket ? proxyServerProtocol.replace('http', 'ws') : proxyServerProtocol;

						    var sessionId = opts && opts.sessionId || _settings2.default.get().sessionId;
						    var charset = opts && opts.charset;
						    var reqOrigin = opts && opts.reqOrigin;

						    var crossDomainPort = getCrossDomainProxyPort(proxyPort);

						    // NOTE: If the relative URL contains no slash (e.g. 'img123'), the resolver will keep
						    // the original proxy information, so that we can return such URL as is.
						    // TODO: Implement the isProxyURL function.
						    var parsedProxyUrl = sharedUrlUtils.parseProxyUrl(resolvedUrl);

						    /*eslint-disable no-restricted-properties*/
						    var isValidProxyUrl = !!parsedProxyUrl && parsedProxyUrl.proxy.hostname === proxyHostname && (parsedProxyUrl.proxy.port === proxyPort || parsedProxyUrl.proxy.port === crossDomainPort);
						    /*eslint-enable no-restricted-properties*/

						    if (isValidProxyUrl) {
						        if (resourceType && parsedProxyUrl.resourceType === resourceType) return resolvedUrl;

						        // NOTE: Need to change the proxy URL resource type.
						        var destUrl = sharedUrlUtils.formatUrl(parsedProxyUrl.destResourceInfo);

						        return getProxyUrl(destUrl, {
						            proxyProtocol: proxyProtocol,
						            proxyHostname: proxyHostname,
						            proxyPort: proxyPort,
						            sessionId: sessionId,
						            resourceType: resourceType,
						            charset: charset,
						            reqOrigin: reqOrigin
						        });
						    }

						    var parsedUrl = sharedUrlUtils.parseUrl(resolvedUrl);

						    charset = charset || parsedResourceType.isScript && document[_internalProperties2.default.documentCharset];

						    // NOTE: It seems that the relative URL had the leading slash or dots, so that the proxy info path part was
						    // removed by the resolver and we have an origin URL with the incorrect host and protocol.
						    /*eslint-disable no-restricted-properties*/
						    if (parsedUrl.protocol === proxyServerProtocol && parsedUrl.hostname === proxyHostname && parsedUrl.port === proxyPort) {
						        var parsedDestLocation = destLocation.getParsed();

						        parsedUrl.protocol = parsedDestLocation.protocol;
						        parsedUrl.host = parsedDestLocation.host;
						        parsedUrl.hostname = parsedDestLocation.hostname;
						        parsedUrl.port = parsedDestLocation.port || '';

						        resolvedUrl = sharedUrlUtils.formatUrl(parsedUrl);
						    }
						    /*eslint-enable no-restricted-properties*/

						    if (parsedResourceType.isWebSocket) {
						        // eslint-disable-next-line no-restricted-properties
						        parsedUrl.protocol = parsedUrl.protocol.replace('ws', 'http');

						        resolvedUrl = sharedUrlUtils.formatUrl(parsedUrl);
						        reqOrigin = reqOrigin || encodeURIComponent(destLocation.getOriginHeader());
						    }

						    return sharedUrlUtils.getProxyUrl(resolvedUrl, {
						        proxyProtocol: proxyProtocol,
						        proxyHostname: proxyHostname,
						        proxyPort: proxyPort,
						        sessionId: sessionId,
						        resourceType: resourceType,
						        charset: charset,
						        reqOrigin: reqOrigin
						    });
						}

						function getNavigationUrl(url, win) {
						    // NOTE: For the 'about:blank' page, we perform url proxing only for the top window, 'location' object and links.
						    // For images and iframes, we keep urls as they were.
						    // See details in https://github.com/DevExpress/testcafe-hammerhead/issues/339
						    var destinationLocation = null;

						    var isIframe = win.top !== win;
						    var winLocation = win.location.toString();

						    if (isIframe) destinationLocation = winLocation;else {
						        var parsedProxyUrl = parseProxyUrl(winLocation);

						        destinationLocation = parsedProxyUrl && parsedProxyUrl.destUrl;
						    }

						    if (isSpecialPage(destinationLocation) && sharedUrlUtils.isRelativeUrl(url)) return '';

						    url = sharedUrlUtils.prepareUrl(url);

						    return getProxyUrl(url);
						}

						function getCrossDomainIframeProxyUrl(url) {
						    return getProxyUrl(url, {
						        proxyPort: _settings2.default.get().crossDomainProxyPort,
						        resourceType: sharedUrlUtils.getResourceTypeString({ isIframe: true })
						    });
						}

						function getCrossDomainProxyPort(proxyPort) {
						    return _settings2.default.get().crossDomainProxyPort === proxyPort
						    // eslint-disable-next-line no-restricted-properties
						    ? location.port.toString() : _settings2.default.get().crossDomainProxyPort;
						}

						function getCrossDomainProxyUrl() {
						    // eslint-disable-next-line no-restricted-properties
						    return location.protocol + '//' + location.hostname + ':' + _settings2.default.get().crossDomainProxyPort + '/';
						}

						function resolveUrlAsDest(url) {
						    return sharedUrlUtils.resolveUrlAsDest(url, getProxyUrl);
						}

						function formatUrl(parsedUrl) {
						    return sharedUrlUtils.formatUrl(parsedUrl);
						}

						function parseProxyUrl(proxyUrl) {
						    return sharedUrlUtils.parseProxyUrl(proxyUrl);
						}

						function parseUrl(url) {
						    return sharedUrlUtils.parseUrl(url);
						}

						function convertToProxyUrl(url, resourceType, charset) {
						    return getProxyUrl(url, { resourceType: resourceType, charset: charset });
						}

						function changeDestUrlPart(proxyUrl, nativePropSetter, value, resourceType) {
						    var parsed = sharedUrlUtils.parseProxyUrl(proxyUrl);

						    if (parsed) {
						        var sessionId = parsed.sessionId;
						        var proxy = parsed.proxy;
						        var destUrl = urlResolver.changeUrlPart(parsed.destUrl, nativePropSetter, value, document);

						        return getProxyUrl(destUrl, {
						            /*eslint-disable no-restricted-properties*/
						            proxyHostname: proxy.hostname,
						            proxyPort: proxy.port,
						            /*eslint-enable no-restricted-properties*/

						            sessionId: sessionId,
						            resourceType: resourceType
						        });
						    }

						    return proxyUrl;
						}

						function isValidWebSocketUrl(url) {
						    var resolvedUrl = resolveUrlAsDest(url);

						    return SUPPORTED_WEB_SOCKET_PROTOCOL_RE.test(resolvedUrl);
						}

						function isSubDomain(domain, subDomain) {
						    return sharedUrlUtils.isSubDomain(domain, subDomain);
						}

						function isSupportedProtocol(url) {
						    return sharedUrlUtils.isSupportedProtocol(url);
						}

						function isSpecialPage(url) {
						    return sharedUrlUtils.isSpecialPage(url);
						}

						function parseResourceType(resourceType) {
						    return sharedUrlUtils.parseResourceType(resourceType);
						}

						function stringifyResourceType(resourceType) {
						    return sharedUrlUtils.getResourceTypeString(resourceType);
						}

						function isChangedOnlyHash(currentUrl, newUrl) {
						    // NOTE: we compare proxied urls because urls passed into the function may be proxied, non-proxied
						    // or relative. The getProxyUrl function solves all the corresponding problems.
						    return getProxyUrl(currentUrl).replace(HASH_RE, '') === getProxyUrl(newUrl).replace(HASH_RE, '');
						}
					}
				}
			},
			"processing": {
				"dom": {
					"attributes.js": function (exports, module, require) {
						

						exports.__esModule = true;
						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						var URL_ATTR_TAGS = exports.URL_ATTR_TAGS = {
						    href: ['a', 'link', 'image', 'area', 'base'],
						    src: ['img', 'embed', 'script', 'source', 'video', 'audio', 'input', 'frame', 'iframe'],
						    action: ['form'],
						    formaction: ['button', 'input'],
						    manifest: ['html'],
						    data: ['object']
						};

						var URL_ATTRS = exports.URL_ATTRS = ['href', 'src', 'action', 'formaction', 'manifest', 'data'];

						var TARGET_ATTR_TAGS = exports.TARGET_ATTR_TAGS = {
						    target: ['a', 'form', 'area', 'base'],
						    formtarget: ['input', 'button']
						};

						var TARGET_ATTRS = exports.TARGET_ATTRS = ['target', 'formtarget'];

						var ATTRS_WITH_SPECIAL_PROXYING_LOGIC = exports.ATTRS_WITH_SPECIAL_PROXYING_LOGIC = ['sandbox', 'autocomplete', 'target', 'formtarget', 'style'];
					},
					"base-dom-adapter.js": function (exports, module, require) {
						

						exports.__esModule = true;

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						var BaseDomAdapter = function () {
						    function BaseDomAdapter() {
						        _classCallCheck(this, BaseDomAdapter);

						        this.EVENTS = ['onblur', 'onchange', 'onclick', 'oncontextmenu', 'oncopy', 'oncut', 'ondblclick', 'onerror', 'onfocus', 'onfocusin', 'onfocusout', 'onhashchange', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onpaste', 'onreset', 'onresize', 'onscroll', 'onselect', 'onsubmit', 'ontextinput', 'onunload', 'onwheel', 'onpointerdown', 'onpointerup', 'onpointercancel', 'onpointermove', 'onpointerover', 'onpointerout', 'onpointerenter', 'onpointerleave', 'ongotpointercapture', 'onlostpointercapture', 'onmspointerdown', 'onmspointerup', 'onmspointercancel', 'onmspointermove', 'onmspointerover', 'onmspointerout', 'onmspointerenter', 'onmspointerleave', 'onmsgotpointercapture', 'onmslostpointercapture'];
						    }

						    BaseDomAdapter.prototype.removeAttr = function removeAttr() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.getAttr = function getAttr() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.hasAttr = function hasAttr() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.isSVGElement = function isSVGElement() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.hasEventHandler = function hasEventHandler() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.getTagName = function getTagName() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.setAttr = function setAttr() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.setScriptContent = function setScriptContent() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.getScriptContent = function getScriptContent() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.getStyleContent = function getStyleContent() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.setStyleContent = function setStyleContent() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.needToProcessContent = function needToProcessContent() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.needToProcessUrl = function needToProcessUrl() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.attachEventEmitter = function attachEventEmitter() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.hasIframeParent = function hasIframeParent() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.getCrossDomainPort = function getCrossDomainPort() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.getProxyUrl = function getProxyUrl() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.isTopParentIframe = function isTopParentIframe() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.sameOriginCheck = function sameOriginCheck() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.getClassName = function getClassName() {
						        throw new Error('Not implemented');
						    };

						    BaseDomAdapter.prototype.isExistingTarget = function isExistingTarget() {
						        throw new Error('Not implemented');
						    };

						    return BaseDomAdapter;
						}();

						exports.default = BaseDomAdapter;
						module.exports = exports['default'];
					},
					"index.js": function (exports, module, require) {
						

						exports.__esModule = true;

						var _internalAttributes = require('../../processing/dom/internal-attributes');

						var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

						var _className = require('../../shadow-ui/class-name');

						var _className2 = _interopRequireDefault(_className);

						var _script = require('../script');

						var _style = require('../../processing/style');

						var _style2 = _interopRequireDefault(_style);

						var _url = require('../../utils/url');

						var urlUtils = _interopRequireWildcard(_url);

						var _stringTrim = require('../../utils/string-trim');

						var _stringTrim2 = _interopRequireDefault(_stringTrim);

						var _namespaces = require('./namespaces');

						var _attributes = require('./attributes');

						function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						var CDATA_REG_EX = /^(\s)*\/\/<!\[CDATA\[([\s\S]*)\/\/\]\]>(\s)*$/;
						var HTML_COMMENT_POSTFIX_REG_EX = /(\/\/[^\n]*|\n\s*)-->[^\n]*([\n\s]*)?$/;
						var HTML_COMMENT_PREFIX_REG_EX = /^(\s)*<!--[^\n]*\n/;
						var HTML_COMMENT_SIMPLE_POSTFIX_REG_EX = /-->\s*$/;
						var JAVASCRIPT_PROTOCOL_REG_EX = /^\s*javascript\s*:/i;
						var EXECUTABLE_SCRIPT_TYPES_REG_EX = /^\s*(application\/(x-)?(ecma|java)script|text\/(javascript(1\.[0-5])?|((x-)?ecma|x-java|js|live)script))\s*$/;

						var SVG_XLINK_HREF_TAGS = ['animate', 'animateColor', 'animateMotion', 'animateTransform', 'mpath', 'set', //animation elements
						'linearGradient', 'radialGradient', 'stop', //gradient elements
						'a', 'altglyph', 'color-profile', 'cursor', 'feimage', 'filter', 'font-face-uri', 'glyphref', 'image', 'mpath', 'pattern', 'script', 'textpath', 'use', 'tref'];

						var INTEGRITY_ATTR_TAGS = ['script', 'link'];
						var IFRAME_FLAG_TAGS = ['a', 'form', 'area', 'input', 'button'];

						var ELEMENT_PROCESSED = 'hammerhead|element-processed';

						var AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER = 'hammerhead|autocomplete-attribute-absence-marker';

						var DomProcessor = function () {
						    function DomProcessor(adapter) {
						        _classCallCheck(this, DomProcessor);

						        this.adapter = adapter;
						        this.adapter.attachEventEmitter(this);

						        this.SVG_XLINK_HREF_TAGS = SVG_XLINK_HREF_TAGS;
						        this.AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER = AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER;

						        this.EVENTS = this.adapter.EVENTS;

						        this.elementProcessorPatterns = this._createProcessorPatterns(this.adapter);
						        this.forceProxySrcForImage = false;
						    }

						    DomProcessor.isTagWithTargetAttr = function isTagWithTargetAttr(tagName) {
						        return tagName && _attributes.TARGET_ATTR_TAGS.target.indexOf(tagName) > -1;
						    };

						    DomProcessor.isTagWithFormTargetAttr = function isTagWithFormTargetAttr(tagName) {
						        return tagName && _attributes.TARGET_ATTR_TAGS.formtarget.indexOf(tagName) > -1;
						    };

						    DomProcessor.isTagWithIntegrityAttr = function isTagWithIntegrityAttr(tagName) {
						        return tagName && INTEGRITY_ATTR_TAGS.indexOf(tagName) !== -1;
						    };

						    DomProcessor.isIframeFlagTag = function isIframeFlagTag(tagName) {
						        return tagName && IFRAME_FLAG_TAGS.indexOf(tagName) !== -1;
						    };

						    DomProcessor.isAddedAutocompleteAttr = function isAddedAutocompleteAttr(attrName, storedAttrValue) {
						        return attrName === 'autocomplete' && storedAttrValue === AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER;
						    };

						    DomProcessor.processJsAttrValue = function processJsAttrValue(value, _ref) {
						        var isJsProtocol = _ref.isJsProtocol,
						            isEventAttr = _ref.isEventAttr;

						        if (isJsProtocol) value = value.replace(JAVASCRIPT_PROTOCOL_REG_EX, '');

						        value = (0, _script.processScript)(value, false, isJsProtocol && !isEventAttr);

						        if (isJsProtocol)
						            // eslint-disable-next-line no-script-url
						            value = 'javascript:' + value;

						        return value;
						    };

						    DomProcessor.getStoredAttrName = function getStoredAttrName(attr) {
						        return attr + _internalAttributes2.default.storedAttrPostfix;
						    };

						    DomProcessor.isJsProtocol = function isJsProtocol(value) {
						        return JAVASCRIPT_PROTOCOL_REG_EX.test(value);
						    };

						    DomProcessor._isHtmlImportLink = function _isHtmlImportLink(tagName, relAttr) {
						        return tagName && relAttr && tagName === 'link' && relAttr === 'import';
						    };

						    DomProcessor.prototype._getRelAttribute = function _getRelAttribute(el) {
						        return String(this.adapter.getAttr(el, 'rel')).toLocaleLowerCase();
						    };

						    DomProcessor.prototype._createProcessorPatterns = function _createProcessorPatterns(adapter) {
						        var _this = this;

						        var selectors = {
						            HAS_HREF_ATTR: function HAS_HREF_ATTR(el) {
						                return _this.isUrlAttr(el, 'href');
						            },

						            HAS_SRC_ATTR: function HAS_SRC_ATTR(el) {
						                return _this.isUrlAttr(el, 'src');
						            },

						            HAS_ACTION_ATTR: function HAS_ACTION_ATTR(el) {
						                return _this.isUrlAttr(el, 'action');
						            },

						            HAS_FORMACTION_ATTR: function HAS_FORMACTION_ATTR(el) {
						                return _this.isUrlAttr(el, 'formaction');
						            },

						            HAS_FORMTARGET_ATTR: function HAS_FORMTARGET_ATTR(el) {
						                return DomProcessor.isTagWithFormTargetAttr(adapter.getTagName(el)) && adapter.hasAttr(el, 'formtarget');
						            },

						            HAS_MANIFEST_ATTR: function HAS_MANIFEST_ATTR(el) {
						                return _this.isUrlAttr(el, 'manifest');
						            },

						            HAS_DATA_ATTR: function HAS_DATA_ATTR(el) {
						                return _this.isUrlAttr(el, 'data');
						            },

						            HTTP_EQUIV_META: function HTTP_EQUIV_META(el) {
						                var tagName = adapter.getTagName(el);

						                return tagName === 'meta' && adapter.hasAttr(el, 'http-equiv');
						            },

						            ALL: function ALL() {
						                return true;
						            },

						            IS_SCRIPT: function IS_SCRIPT(el) {
						                return adapter.getTagName(el) === 'script';
						            },

						            IS_LINK: function IS_LINK(el) {
						                return adapter.getTagName(el) === 'link';
						            },

						            IS_INPUT: function IS_INPUT(el) {
						                return adapter.getTagName(el) === 'input';
						            },

						            IS_FILE_INPUT: function IS_FILE_INPUT(el) {
						                return adapter.getTagName(el) === 'input' && adapter.hasAttr(el, 'type') && adapter.getAttr(el, 'type').toLowerCase() === 'file';
						            },

						            IS_STYLE: function IS_STYLE(el) {
						                return adapter.getTagName(el) === 'style';
						            },

						            HAS_EVENT_HANDLER: function HAS_EVENT_HANDLER(el) {
						                return adapter.hasEventHandler(el);
						            },

						            IS_SANDBOXED_IFRAME: function IS_SANDBOXED_IFRAME(el) {
						                var tagName = adapter.getTagName(el);

						                return (tagName === 'iframe' || tagName === 'frame') && adapter.hasAttr(el, 'sandbox');
						            },

						            IS_SVG_ELEMENT_WITH_XLINK_HREF_ATTR: function IS_SVG_ELEMENT_WITH_XLINK_HREF_ATTR(el) {
						                return adapter.isSVGElement(el) && adapter.hasAttr(el, 'xlink:href') && SVG_XLINK_HREF_TAGS.indexOf(adapter.getTagName(el)) !== -1;
						            },

						            IS_SVG_ELEMENT_WITH_XML_BASE_ATTR: function IS_SVG_ELEMENT_WITH_XML_BASE_ATTR(el) {
						                return adapter.isSVGElement(el) && adapter.hasAttr(el, 'xml:base');
						            }
						        };

						        return [{
						            selector: selectors.HAS_FORMTARGET_ATTR,
						            targetAttr: 'formtarget',
						            elementProcessors: [this._processTargetBlank]
						        }, {
						            selector: selectors.HAS_HREF_ATTR,
						            urlAttr: 'href',
						            targetAttr: 'target',
						            elementProcessors: [this._processTargetBlank, this._processUrlAttrs, this._processUrlJsAttr]
						        }, {
						            selector: selectors.HAS_SRC_ATTR,
						            urlAttr: 'src',
						            targetAttr: 'target',
						            elementProcessors: [this._processTargetBlank, this._processUrlAttrs, this._processUrlJsAttr]
						        }, {
						            selector: selectors.HAS_ACTION_ATTR,
						            urlAttr: 'action',
						            targetAttr: 'target',
						            elementProcessors: [this._processTargetBlank, this._processUrlAttrs, this._processUrlJsAttr]
						        }, {
						            selector: selectors.HAS_FORMACTION_ATTR,
						            urlAttr: 'formaction',
						            targetAttr: 'formtarget',
						            elementProcessors: [this._processUrlAttrs, this._processUrlJsAttr]
						        }, {
						            selector: selectors.HAS_MANIFEST_ATTR,
						            urlAttr: 'manifest',
						            elementProcessors: [this._processUrlAttrs, this._processUrlJsAttr]
						        }, {
						            selector: selectors.HAS_DATA_ATTR,
						            urlAttr: 'data',
						            elementProcessors: [this._processUrlAttrs, this._processUrlJsAttr]
						        }, {
						            selector: selectors.HTTP_EQUIV_META,
						            urlAttr: 'content',
						            elementProcessors: [this._processMetaElement]
						        }, {
						            selector: selectors.IS_SCRIPT,
						            elementProcessors: [this._processScriptElement, this._processIntegrityAttr]
						        }, { selector: selectors.ALL, elementProcessors: [this._processStyleAttr] }, {
						            selector: selectors.IS_LINK,
						            relAttr: 'rel',
						            elementProcessors: [this._processIntegrityAttr, this._processRelPrefetch]
						        }, { selector: selectors.IS_STYLE, elementProcessors: [this._processStylesheetElement] }, { selector: selectors.IS_INPUT, elementProcessors: [this._processAutoComplete] }, { selector: selectors.IS_FILE_INPUT, elementProcessors: [this._processRequired] }, { selector: selectors.HAS_EVENT_HANDLER, elementProcessors: [this._processEvtAttr] }, { selector: selectors.IS_SANDBOXED_IFRAME, elementProcessors: [this._processSandboxedIframe] }, {
						            selector: selectors.IS_SVG_ELEMENT_WITH_XLINK_HREF_ATTR,
						            urlAttr: 'xlink:href',
						            elementProcessors: [this._processSVGXLinkHrefAttr, this._processUrlAttrs]
						        }, {
						            selector: selectors.IS_SVG_ELEMENT_WITH_XML_BASE_ATTR,
						            urlAttr: 'xml:base',
						            elementProcessors: [this._processUrlAttrs]
						        }];
						    };

						    // API


						    DomProcessor.prototype.processElement = function processElement(el, urlReplacer) {
						        if (el[ELEMENT_PROCESSED]) return;

						        for (var i = 0; i < this.elementProcessorPatterns.length; i++) {
						            var pattern = this.elementProcessorPatterns[i];

						            if (pattern.selector(el) && !this._isShadowElement(el)) {
						                for (var j = 0; j < pattern.elementProcessors.length; j++) {
						                    pattern.elementProcessors[j].call(this, el, urlReplacer, pattern);
						                }el[ELEMENT_PROCESSED] = true;
						            }
						        }
						    };

						    // Utils


						    DomProcessor.prototype.getElementResourceType = function getElementResourceType(el) {
						        var tagName = this.adapter.getTagName(el);

						        return urlUtils.getResourceTypeString({
						            isIframe: tagName === 'iframe' || tagName === 'frame' || this._isOpenLinkInIframe(el),
						            isForm: tagName === 'form' || tagName === 'input' || tagName === 'button',
						            isScript: tagName === 'script',
						            isHtmlImport: tagName === 'link' && this._getRelAttribute(el) === 'import'
						        });
						    };

						    DomProcessor.prototype.isUrlAttr = function isUrlAttr(el, attr, ns) {
						        var tagName = this.adapter.getTagName(el);

						        attr = attr ? attr.toLowerCase() : attr;

						        if (_attributes.URL_ATTR_TAGS[attr] && _attributes.URL_ATTR_TAGS[attr].indexOf(tagName) !== -1) return true;

						        return this.adapter.isSVGElement(el) && (attr === 'xml:base' || attr === 'base' && ns === _namespaces.XML_NAMESPACE);
						    };

						    DomProcessor.prototype.getUrlAttr = function getUrlAttr(el) {
						        var tagName = this.adapter.getTagName(el);

						        for (var _i2 = 0; _i2 < _attributes.URL_ATTRS.length; _i2++) {
						            var urlAttr = _attributes.URL_ATTRS[_i2];
						            if (_attributes.URL_ATTR_TAGS[urlAttr].indexOf(tagName) !== -1) return urlAttr;
						        }

						        return null;
						    };

						    DomProcessor.prototype.getTargetAttr = function getTargetAttr(el) {
						        var tagName = this.adapter.getTagName(el);

						        for (var _i4 = 0; _i4 < _attributes.TARGET_ATTRS.length; _i4++) {
						            var targetAttr = _attributes.TARGET_ATTRS[_i4];
						            if (_attributes.TARGET_ATTR_TAGS[targetAttr].indexOf(tagName) > -1) return targetAttr;
						        }

						        return null;
						    };

						    DomProcessor.prototype._isOpenLinkInIframe = function _isOpenLinkInIframe(el) {
						        var tagName = this.adapter.getTagName(el);
						        var targetAttr = this.getTargetAttr(el);
						        var target = this.adapter.getAttr(el, targetAttr);
						        var rel = this._getRelAttribute(el);

						        if (target !== '_top') {
						            var mustProcessTag = DomProcessor.isIframeFlagTag(tagName) || DomProcessor._isHtmlImportLink(tagName, rel);
						            var isNameTarget = target ? target[0] !== '_' : false;

						            if (target === '_parent') return mustProcessTag && !this.adapter.isTopParentIframe(el);

						            if (mustProcessTag && (this.adapter.hasIframeParent(el) || isNameTarget && this.adapter.isExistingTarget(target))) return true;
						        }

						        return false;
						    };

						    DomProcessor.prototype._isShadowElement = function _isShadowElement(el) {
						        var className = this.adapter.getClassName(el);

						        return typeof className === 'string' && className.indexOf(_className2.default.postfix) > -1;
						    };

						    // Element processors


						    DomProcessor.prototype._processAutoComplete = function _processAutoComplete(el) {
						        var storedUrlAttr = DomProcessor.getStoredAttrName('autocomplete');
						        var processed = this.adapter.hasAttr(el, storedUrlAttr);
						        var attrValue = this.adapter.getAttr(el, processed ? storedUrlAttr : 'autocomplete');

						        if (!processed) {
						            this.adapter.setAttr(el, storedUrlAttr, attrValue || attrValue === '' ? attrValue : AUTOCOMPLETE_ATTRIBUTE_ABSENCE_MARKER);
						        }

						        this.adapter.setAttr(el, 'autocomplete', 'off');
						    };

						    DomProcessor.prototype._processRequired = function _processRequired(el) {
						        var storedRequired = DomProcessor.getStoredAttrName('required');
						        var hasRequiredAttr = this.adapter.hasAttr(el, 'required');
						        var processed = this.adapter.hasAttr(el, storedRequired) && !hasRequiredAttr;

						        if (!processed && hasRequiredAttr) {
						            var attrValue = this.adapter.getAttr(el, 'required');

						            this.adapter.setAttr(el, storedRequired, attrValue);
						            this.adapter.removeAttr(el, 'required');
						        }
						    };

						    // NOTE: We simply remove the 'integrity' attribute because its value will not be relevant after the script
						    // content changes (http://www.w3.org/TR/SRI/). If this causes problems in the future, we will need to generate
						    // the correct SHA for the changed script.
						    // In addition, we create stored 'integrity' attribute with the current 'integrity' attribute value. (GH-235)


						    DomProcessor.prototype._processIntegrityAttr = function _processIntegrityAttr(el) {
						        var storedIntegrityAttr = DomProcessor.getStoredAttrName('integrity');
						        var processed = this.adapter.hasAttr(el, storedIntegrityAttr) && !this.adapter.hasAttr(el, 'integrity');
						        var attrValue = this.adapter.getAttr(el, processed ? storedIntegrityAttr : 'integrity');

						        if (attrValue) this.adapter.setAttr(el, storedIntegrityAttr, attrValue);

						        if (!processed) this.adapter.removeAttr(el, 'integrity');
						    };

						    // NOTE: We simply remove the 'rel' attribute if rel='prefetch' and use stored 'rel' attribute, because the prefetch
						    // resource type is unknown. https://github.com/DevExpress/testcafe/issues/2528


						    DomProcessor.prototype._processRelPrefetch = function _processRelPrefetch(el, urlReplacer, pattern) {
						        var storedRelAttr = DomProcessor.getStoredAttrName(pattern.relAttr);
						        var processed = this.adapter.hasAttr(el, storedRelAttr) && !this.adapter.hasAttr(el, pattern.relAttr);
						        var attrValue = this.adapter.getAttr(el, processed ? storedRelAttr : pattern.relAttr);

						        if (attrValue) {
						            var formatedValue = (0, _stringTrim2.default)(attrValue.toLowerCase());

						            if (formatedValue === 'prefetch') {
						                this.adapter.setAttr(el, storedRelAttr, attrValue);

						                if (!processed) this.adapter.removeAttr(el, pattern.relAttr);
						            }
						        }
						    };

						    DomProcessor.prototype._processJsAttr = function _processJsAttr(el, attrName, _ref2) {
						        var isJsProtocol = _ref2.isJsProtocol,
						            isEventAttr = _ref2.isEventAttr;

						        var storedUrlAttr = DomProcessor.getStoredAttrName(attrName);
						        var processed = this.adapter.hasAttr(el, storedUrlAttr);
						        var attrValue = this.adapter.getAttr(el, processed ? storedUrlAttr : attrName);
						        var processedValue = DomProcessor.processJsAttrValue(attrValue, { isJsProtocol: isJsProtocol, isEventAttr: isEventAttr });

						        if (attrValue !== processedValue) {
						            this.adapter.setAttr(el, storedUrlAttr, attrValue);

						            this.adapter.setAttr(el, attrName, processedValue);
						        }
						    };

						    DomProcessor.prototype._processEvtAttr = function _processEvtAttr(el) {
						        var events = this.adapter.EVENTS;

						        for (var i = 0; i < events.length; i++) {
						            var attrValue = this.adapter.getAttr(el, events[i]);

						            if (attrValue) {
						                this._processJsAttr(el, events[i], {
						                    isJsProtocol: DomProcessor.isJsProtocol(attrValue),
						                    isEventAttr: true
						                });
						            }
						        }
						    };

						    DomProcessor.prototype._processMetaElement = function _processMetaElement(el, urlReplacer, pattern) {
						        var httpEquivAttrValue = this.adapter.getAttr(el, 'http-equiv').toLowerCase();

						        if (httpEquivAttrValue === 'refresh') {
						            var attr = this.adapter.getAttr(el, pattern.urlAttr);

						            attr = attr.replace(/(url=)(.*)$/i, function (match, prefix, url) {
						                return prefix + urlReplacer(url);
						            });

						            this.adapter.setAttr(el, pattern.urlAttr, attr);
						        }
						        // TODO: remove after https://github.com/DevExpress/testcafe-hammerhead/issues/244 implementation
						        else if (httpEquivAttrValue === 'content-security-policy') {
						                this.adapter.removeAttr(el, 'http-equiv');
						                this.adapter.removeAttr(el, 'content');
						            }
						    };

						    DomProcessor.prototype._processSandboxedIframe = function _processSandboxedIframe(el) {
						        var attrValue = this.adapter.getAttr(el, 'sandbox');
						        var allowSameOrigin = attrValue.indexOf('allow-same-origin') !== -1;
						        var allowScripts = attrValue.indexOf('allow-scripts') !== -1;
						        var storedAttr = DomProcessor.getStoredAttrName('sandbox');

						        this.adapter.setAttr(el, storedAttr, attrValue);

						        if (!allowSameOrigin || !allowScripts) {
						            attrValue += !allowSameOrigin ? ' allow-same-origin' : '';
						            attrValue += !allowScripts ? ' allow-scripts' : '';
						        }

						        this.adapter.setAttr(el, 'sandbox', attrValue);
						    };

						    DomProcessor.prototype._processScriptElement = function _processScriptElement(script) {
						        var scriptContent = this.adapter.getScriptContent(script);

						        if (!scriptContent || !this.adapter.needToProcessContent(script)) return;

						        var scriptProcessedOnServer = (0, _script.isScriptProcessed)(scriptContent);

						        if (scriptProcessedOnServer) return;

						        // NOTE: We do not process scripts that are not executed during page load. We process scripts of types like
						        // text/javascript, application/javascript etc. (a complete list of MIME types is specified in the w3c.org
						        // html5 specification). If the type is not set, it is considered 'text/javascript' by default.
						        var scriptType = this.adapter.getAttr(script, 'type');
						        var isExecutableScript = !scriptType || EXECUTABLE_SCRIPT_TYPES_REG_EX.test(scriptType);

						        if (isExecutableScript) {
						            var result = scriptContent;
						            var commentPrefix = '';
						            var commentPrefixMatch = result.match(HTML_COMMENT_PREFIX_REG_EX);
						            var commentPostfix = '';
						            var commentPostfixMatch = null;
						            var hasCDATA = CDATA_REG_EX.test(result);

						            if (commentPrefixMatch) {
						                commentPrefix = commentPrefixMatch[0];
						                commentPostfixMatch = result.match(HTML_COMMENT_POSTFIX_REG_EX);

						                if (commentPostfixMatch) commentPostfix = commentPostfixMatch[0];else if (!HTML_COMMENT_SIMPLE_POSTFIX_REG_EX.test(commentPrefix)) commentPostfix = '//-->';

						                result = result.replace(commentPrefix, '').replace(commentPostfix, '');
						            }

						            if (hasCDATA) result = result.replace(CDATA_REG_EX, '$2');

						            result = commentPrefix + (0, _script.processScript)(result, true) + commentPostfix;

						            if (hasCDATA) result = '\n//<![CDATA[\n' + result + '//]]>';

						            this.adapter.setScriptContent(script, result);
						        }
						    };

						    DomProcessor.prototype._processStyleAttr = function _processStyleAttr(el, urlReplacer) {
						        var style = this.adapter.getAttr(el, 'style');

						        if (style) this.adapter.setAttr(el, 'style', _style2.default.process(style, urlReplacer));
						    };

						    DomProcessor.prototype._processStylesheetElement = function _processStylesheetElement(el, urlReplacer) {
						        var content = this.adapter.getStyleContent(el);

						        if (content && urlReplacer && this.adapter.needToProcessContent(el)) {
						            content = _style2.default.process(content, urlReplacer, true);

						            this.adapter.setStyleContent(el, content);
						        }
						    };

						    DomProcessor.prototype._processTargetBlank = function _processTargetBlank(el, urlReplacer, pattern) {
						        var storedTargetAttr = DomProcessor.getStoredAttrName(pattern.targetAttr);
						        var processed = this.adapter.hasAttr(el, storedTargetAttr);

						        if (!processed) {
						            var attrValue = this.adapter.getAttr(el, pattern.targetAttr);

						            // NOTE: Value may have whitespace.
						            attrValue = attrValue && attrValue.replace(/\s/g, '');

						            if (attrValue === '_blank' || attrValue === 'blank') {
						                this.adapter.setAttr(el, pattern.targetAttr, '_top');
						                this.adapter.setAttr(el, storedTargetAttr, attrValue);
						            }
						        }
						    };

						    DomProcessor.prototype._processUrlAttrs = function _processUrlAttrs(el, urlReplacer, pattern) {
						        if (urlReplacer && pattern.urlAttr) {
						            var storedUrlAttr = DomProcessor.getStoredAttrName(pattern.urlAttr);
						            var resourceUrl = this.adapter.getAttr(el, pattern.urlAttr);
						            var isSpecialPage = urlUtils.isSpecialPage(resourceUrl);
						            var processedOnServer = this.adapter.hasAttr(el, storedUrlAttr);

						            // NOTE: Page resource URL with proxy URL.
						            if ((resourceUrl || resourceUrl === '') && !processedOnServer) {
						                if (urlUtils.isSupportedProtocol(resourceUrl) || isSpecialPage) {
						                    var elTagName = this.adapter.getTagName(el);
						                    var isIframe = elTagName === 'iframe' || elTagName === 'frame';
						                    var isScript = elTagName === 'script';
						                    var isAnchor = elTagName === 'a';
						                    var target = this.adapter.getAttr(el, pattern.targetAttr);

						                    // NOTE: Elements with target=_parent shouldn’t be processed on the server,because we don't
						                    // know what is the parent of the processed page (an iframe or the top window).
						                    if (!this.adapter.needToProcessUrl(elTagName, target)) return;

						                    var resourceType = this.getElementResourceType(el);
						                    var parsedResourceUrl = urlUtils.parseUrl(resourceUrl);
						                    var isRelativePath = parsedResourceUrl.protocol !== 'file:' && !parsedResourceUrl.host;
						                    var proxyUrl = '';
						                    var charsetAttrValue = isScript && this.adapter.getAttr(el, 'charset');

						                    // NOTE: Only a non-relative iframe src can be cross-domain.
						                    if (isIframe && !isSpecialPage && !isRelativePath) {
						                        var location = urlReplacer('/');
						                        var proxyUrlObj = urlUtils.parseProxyUrl(location);
						                        var destUrl = proxyUrlObj.destUrl;

						                        if (!parsedResourceUrl.protocol) resourceUrl = proxyUrlObj.destResourceInfo.protocol + resourceUrl;

						                        // NOTE: Cross-domain iframe.
						                        if (!this.adapter.sameOriginCheck(destUrl, resourceUrl)) {
						                            var proxyHostname = urlUtils.parseUrl(location).hostname;
						                            var proxyPort = this.adapter.getCrossDomainPort();
						                            var iframeResourceType = urlUtils.getResourceTypeString({ isIframe: true });

						                            proxyUrl = resourceUrl ? this.adapter.getProxyUrl(resourceUrl, {
						                                proxyHostname: proxyHostname,
						                                proxyPort: proxyPort,

						                                sessionId: proxyUrlObj.sessionId,
						                                resourceType: iframeResourceType
						                            }) : '';
						                        }
						                    }

						                    if (isSpecialPage && !isAnchor) proxyUrl = resourceUrl;

						                    proxyUrl = proxyUrl === '' && resourceUrl ? urlReplacer(resourceUrl, resourceType, charsetAttrValue) : proxyUrl;

						                    this.adapter.setAttr(el, storedUrlAttr, resourceUrl);

						                    if (elTagName === 'img' && proxyUrl !== '' && !isSpecialPage) {
						                        var attrValue = this.forceProxySrcForImage ? proxyUrl : urlUtils.resolveUrlAsDest(resourceUrl, urlReplacer);

						                        this.adapter.setAttr(el, pattern.urlAttr, attrValue);
						                    } else this.adapter.setAttr(el, pattern.urlAttr, proxyUrl);
						                }
						            }
						        }
						    };

						    DomProcessor.prototype._processUrlJsAttr = function _processUrlJsAttr(el, urlReplacer, pattern) {
						        if (DomProcessor.isJsProtocol(this.adapter.getAttr(el, pattern.urlAttr))) this._processJsAttr(el, pattern.urlAttr, { isJsProtocol: true, isEventAttr: false });
						    };

						    DomProcessor.prototype._processSVGXLinkHrefAttr = function _processSVGXLinkHrefAttr(el, urlReplacer, pattern) {
						        var attrValue = this.adapter.getAttr(el, pattern.urlAttr);

						        if (urlUtils.HASH_RE.test(attrValue)) {
						            var storedUrlAttr = DomProcessor.getStoredAttrName(pattern.urlAttr);

						            this.adapter.setAttr(el, storedUrlAttr, attrValue);
						        }
						    };

						    return DomProcessor;
						}();

						exports.default = DomProcessor;
						module.exports = exports['default'];
					},
					"internal-attributes.js": function (exports, module, require) {
						

						exports.__esModule = true;
						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						exports.default = {
						    storedAttrPostfix: '-hammerhead-stored-value',
						    hoverPseudoClass: 'data-hammerhead-hovered',
						    focusPseudoClass: 'data-hammerhead-focused',
						    uploadInfoHiddenInputName: 'hammerhead|upload-info-hidden-input-name'
						};
						module.exports = exports['default'];
					},
					"internal-properties.js": function (exports, module, require) {
						

						exports.__esModule = true;
						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						exports.default = {
						    processDomMethodName: 'hammerhead|process-dom-method',
						    processedContext: 'hammerhead|processed-context',
						    documentWasCleaned: 'hammerhead|document-was-cleaned',
						    documentCharset: 'hammerhead|document-charset',
						    iframeNativeMethods: 'hammerhead|iframe-native-methods',
						    hammerhead: '%hammerhead%',
						    selection: 'hammerhead|selection',
						    shadowUIElement: 'hammerhead|shadow-ui-element',
						    forceProxySrcForImage: 'hammerhead|image|force-proxy-src-flag',
						    skipNextLoadEventForImage: 'hammerhead|image|skip-next-load-event-flag'
						};
						module.exports = exports['default'];
					},
					"namespaces.js": function (exports, module, require) {
						

						exports.__esModule = true;
						var SVG_NAMESPACE = exports.SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
						var XML_NAMESPACE = exports.XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
						var XMLNS_NAMESPACE = exports.XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
						var XLINK_NAMESPACE = exports.XLINK_NAMESPACE = 'http://www.w3.org/1999/xlink';

						var NAMESPACE_PREFIX_MAP = exports.NAMESPACE_PREFIX_MAP = {
						    xml: XML_NAMESPACE,
						    xlink: XLINK_NAMESPACE,
						    xmlns: XMLNS_NAMESPACE
						};
					}
				},
				"script": {
					"header.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.SCRIPT_PROCESSING_END_HEADER_COMMENT = exports.SCRIPT_PROCESSING_END_COMMENT = exports.SCRIPT_PROCESSING_START_COMMENT = undefined;
						exports.remove = remove;
						exports.add = add;

						var _regexpEscape = require('../../utils/regexp-escape');

						var _regexpEscape2 = _interopRequireDefault(_regexpEscape);

						var _internalProperties = require('../../processing/dom/internal-properties');

						var _internalProperties2 = _interopRequireDefault(_internalProperties);

						var _instruction = require('./instruction');

						var _instruction2 = _interopRequireDefault(_instruction);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						var SCRIPT_PROCESSING_START_COMMENT = exports.SCRIPT_PROCESSING_START_COMMENT = '/*hammerhead|script|start*/'; // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						var SCRIPT_PROCESSING_END_COMMENT = exports.SCRIPT_PROCESSING_END_COMMENT = '/*hammerhead|script|end*/';
						var SCRIPT_PROCESSING_END_HEADER_COMMENT = exports.SCRIPT_PROCESSING_END_HEADER_COMMENT = '/*hammerhead|script|processing-header-end*/';

						var STRICT_MODE_PLACEHOLDER = '{strict-placeholder}';

						var HEADER = [SCRIPT_PROCESSING_START_COMMENT, STRICT_MODE_PLACEHOLDER, 'if(typeof window!=="undefined"&&window){', 'window["' + _internalProperties2.default.processDomMethodName + '"] && window["' + _internalProperties2.default.processDomMethodName + '"]();', '}', 'else{', 'var ' + _instruction2.default.getLocation + '=function(l){return l},', _instruction2.default.setLocation + '=function(l,v){return l = v},', _instruction2.default.setProperty + '=function(o,p,v){return o[p] = v},', _instruction2.default.getProperty + '=function(o,p){return o[p]},', _instruction2.default.callMethod + '=function(o,p,a){return o[p].apply(o,a)},', _instruction2.default.getEval + '=function(e){return e},', _instruction2.default.processScript + '=function(s){return s},', _instruction2.default.processHtml + '=function(h){return h},', _instruction2.default.getPostMessage + '=function(w,p){return arguments.length===1?w.postMessage:p};', '}', SCRIPT_PROCESSING_END_HEADER_COMMENT, '\n'].join('');

						// NOTE: IE removes trailing newlines in script.textContent,
						// so a trailing newline in RegExp is optional
						var HEADER_RE = new RegExp((0, _regexpEscape2.default)(SCRIPT_PROCESSING_START_COMMENT) + '[\\S\\s]+?' + (0, _regexpEscape2.default)(SCRIPT_PROCESSING_END_HEADER_COMMENT) + '\n?', 'gi');
						var PROCESSING_END_COMMENT_RE = new RegExp('\n?' + (0, _regexpEscape2.default)(SCRIPT_PROCESSING_END_COMMENT) + '\\s*', 'gi');

						function remove(code) {
						    return code.replace(HEADER_RE, '').replace(PROCESSING_END_COMMENT_RE, '');
						}

						function add(code, isStrictMode) {
						    var header = HEADER.replace(STRICT_MODE_PLACEHOLDER, isStrictMode ? '"use strict";' : '');

						    return header + code + '\n' + SCRIPT_PROCESSING_END_COMMENT;
						}
					},
					"index.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.isScriptProcessed = isScriptProcessed;
						exports.processScript = processScript;

						var _transform = require('./transform');

						var _transform2 = _interopRequireDefault(_transform);

						var _instruction = require('./instruction');

						var _instruction2 = _interopRequireDefault(_instruction);

						var _header = require('./header');

						var _acorn = require('./tools/acorn');

						var _esotope = require('./tools/esotope');

						var _regexpEscape = require('../../utils/regexp-escape');

						var _regexpEscape2 = _interopRequireDefault(_regexpEscape);

						var _getBom = require('../../utils/get-bom');

						var _getBom2 = _interopRequireDefault(_getBom);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						// Const
						var HTML_COMMENT_RE = /(^|\n)\s*<!--[^\n]*(\n|$)/g; // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						var OBJECT_RE = /^\s*\{.*\}\s*$/;
						var TRAILING_SEMICOLON_RE = /;\s*$/;
						var OBJECT_WRAPPER_RE = /^\s*\((.*)\);\s*$/;
						var SOURCEMAP_RE = /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)/gm;

						var PROCESSED_SCRIPT_RE = new RegExp([(0, _regexpEscape2.default)(_instruction2.default.getLocation), (0, _regexpEscape2.default)(_instruction2.default.setLocation), (0, _regexpEscape2.default)(_instruction2.default.getProperty), (0, _regexpEscape2.default)(_instruction2.default.setProperty), (0, _regexpEscape2.default)(_instruction2.default.callMethod), (0, _regexpEscape2.default)(_instruction2.default.processScript), (0, _regexpEscape2.default)(_instruction2.default.processHtml), (0, _regexpEscape2.default)(_instruction2.default.getPostMessage)].join('|'));

						var PARSER_OPTIONS = {
						    allowReturnOutsideFunction: true,
						    ecmaVersion: 8
						};

						// Code pre/post-processing
						function removeHtmlComments(code) {
						    // NOTE: The JS parser removes the line that follows'<!--'. (T226589)
						    do {
						        code = code.replace(HTML_COMMENT_RE, '\n');
						    } while (HTML_COMMENT_RE.test(code));

						    return code;
						}

						function preprocess(code) {
						    var bom = (0, _getBom2.default)(code);
						    var preprocessed = bom ? code.substring(bom.length) : code;

						    preprocessed = (0, _header.remove)(preprocessed);
						    preprocessed = removeSourceMapIfNecessary(preprocessed);

						    return { bom: bom, preprocessed: preprocessed };
						}

						function removeSourceMapIfNecessary(code) {
						    return SOURCEMAP_RE.test(code) ? code.replace(SOURCEMAP_RE, '') : code;
						}

						function postprocess(processed, withHeader, bom, strictMode) {
						    // NOTE: If the 'use strict' directive is not in the beginning of the file, it is ignored.
						    // As we insert our header in the beginning of the script, we must put a new 'use strict'
						    // before the header, otherwise it will be ignored.
						    if (withHeader) processed = (0, _header.add)(processed, strictMode);

						    return bom ? bom + processed : processed;
						}

						// Parse/generate code
						function removeTrailingSemicolonIfNecessary(processed, src) {
						    return TRAILING_SEMICOLON_RE.test(src) ? processed : processed.replace(TRAILING_SEMICOLON_RE, '');
						}

						function getAst(src, isObject) {
						    // NOTE: In case of objects (e.g.eval('{ 1: 2}')) without wrapping
						    // object will be parsed as label. To avoid this we parenthesize src
						    src = isObject ? '(' + src + ')' : src;

						    try {
						        return (0, _acorn.parse)(src, PARSER_OPTIONS);
						    } catch (err) {
						        return null;
						    }
						}

						function getCode(ast, src) {
						    var code = (0, _esotope.generate)(ast, {
						        format: {
						            quotes: 'double',
						            escapeless: true,
						            compact: true
						        }
						    });

						    return src ? removeTrailingSemicolonIfNecessary(code, src) : code;
						}

						// Analyze code
						function analyze(code) {
						    var isObject = OBJECT_RE.test(code);
						    var ast = getAst(code, isObject);

						    // NOTE: `{ const a = 'foo'; }` edge case
						    if (!ast && isObject) {
						        ast = getAst(code, false);
						        isObject = false;
						    }

						    return { ast: ast, isObject: isObject };
						}

						function isArrayDataScript(ast) {
						    return ast.body.length === 1 && ast.body[0].type === _esotope.Syntax.ExpressionStatement && ast.body[0].expression.type === _esotope.Syntax.ArrayExpression;
						}

						function isStrictMode(ast) {
						    if (ast.body.length) {
						        var firstChild = ast.body[0];

						        if (firstChild.type === _esotope.Syntax.ExpressionStatement && firstChild.expression.type === _esotope.Syntax.Literal) return firstChild.expression.value === 'use strict';
						    }

						    return false;
						}

						function applyChanges(script, changes, isObject) {
						    var indexOffset = isObject ? -1 : 0;
						    var chunks = [];
						    var index = 0;

						    if (!changes.length) return script;

						    changes.sort(function (a, b) {
						        return a.start - b.start;
						    });

						    for (var i = 0; i < changes.length; i++) {
						        var change = changes[i];
						        var changeStart = change.start + indexOffset;
						        var changeEnd = change.end + indexOffset;
						        var replacement = change.parent[change.key];

						        replacement = change.index !== -1 ? replacement[change.index] : replacement;
						        chunks.push(script.substring(index, changeStart));
						        chunks.push(' ');
						        chunks.push(getCode(replacement, script.substring(changeStart, changeEnd)));
						        index += changeEnd - index;
						    }

						    chunks.push(script.substring(index));

						    return chunks.join('');
						}

						function isScriptProcessed(code) {
						    return PROCESSED_SCRIPT_RE.test(code);
						}

						function processScript(src, withHeader, wrapLastExprWithProcessHtml) {
						    var _preprocess = preprocess(src),
						        bom = _preprocess.bom,
						        preprocessed = _preprocess.preprocessed;

						    var withoutHtmlComments = removeHtmlComments(preprocessed);

						    var _analyze = analyze(withoutHtmlComments),
						        ast = _analyze.ast,
						        isObject = _analyze.isObject;

						    if (!ast) return src;

						    withHeader = withHeader && !isObject && !isArrayDataScript(ast);

						    ast.wrapLastExprWithProcessHtml = wrapLastExprWithProcessHtml;

						    var changes = (0, _transform2.default)(ast);
						    var processed = changes.length ? applyChanges(withoutHtmlComments, changes, isObject) : preprocessed;

						    processed = postprocess(processed, withHeader, bom, isStrictMode(ast));

						    if (isObject) processed = processed.replace(OBJECT_WRAPPER_RE, '$1');

						    return processed;
						}
					},
					"instruction.js": function (exports, module, require) {
						

						exports.__esModule = true;
						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						exports.default = {
						    getLocation: '__get$Loc',
						    setLocation: '__set$Loc',
						    getProperty: '__get$',
						    setProperty: '__set$',
						    callMethod: '__call$',
						    processScript: '__proc$Script',
						    processHtml: '__proc$Html',
						    getEval: '__get$Eval',
						    getPostMessage: '__get$PostMessage'
						};
						module.exports = exports['default'];
					},
					"instrumented.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.shouldInstrumentMethod = shouldInstrumentMethod;
						exports.shouldInstrumentProperty = shouldInstrumentProperty;
						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						// NOTE: constants are exported for the testing purposes
						var METHODS = exports.METHODS = ['postMessage', 'replace', 'assign'];

						var PROPERTIES = exports.PROPERTIES = ['href', 'location'];

						var INSTRUMENTED_METHOD_RE = new RegExp('^(' + METHODS.join('|') + ')$');
						var INSTRUMENTED_PROPERTY_RE = new RegExp('^(' + PROPERTIES.join('|') + ')$');

						// NOTE: Mootools framework contains code that removes the RegExp.prototype.test
						// method and restores it later.
						//    delete z[A]; // z = RegExp.prototype, A = "test"
						//    __set$(z, A, x.protect()); // x.protect - returns the removed method
						// The __set$ function calls the test method of the regular expression. (GH-331)
						var reTest = RegExp.prototype.test;
						// NOTE: The Function.prototype.call method can also be removed.
						// But only one of the methods can be removed at a time.
						var test = function test(regexp, str) {
						    return regexp.test ? regexp.test(str) : reTest.call(regexp, str);
						};

						// NOTE: we can't use the map approach here, because
						// cases like `WRAPPABLE_METHOD['toString']` will fail.
						// We could use the hasOwnProperty test, but it is
						// significantly slower than the regular expression test
						function shouldInstrumentMethod(name) {
						    return test(INSTRUMENTED_METHOD_RE, name);
						}

						function shouldInstrumentProperty(name) {
						    return test(INSTRUMENTED_PROPERTY_RE, name);
						}
					},
					"internal-literal.js": function (exports, module, require) {
						

						exports.__esModule = true;
						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						exports.default = {
						    tempVar: '__set$temp'
						};
						module.exports = exports['default'];
					},
					"node-builder.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.createStringLiteral = createStringLiteral;
						exports.createTempVarIdentifier = createTempVarIdentifier;
						exports.createAssignmentExprStmt = createAssignmentExprStmt;
						exports.createBlockExprStmt = createBlockExprStmt;
						exports.createVarDeclaration = createVarDeclaration;
						exports.createProcessScriptMethCall = createProcessScriptMethCall;
						exports.createLocationGetWrapper = createLocationGetWrapper;
						exports.createLocationSetWrapper = createLocationSetWrapper;
						exports.createPropertySetWrapper = createPropertySetWrapper;
						exports.createMethCallWrapper = createMethCallWrapper;
						exports.createPropertyGetWrapper = createPropertyGetWrapper;
						exports.createComputedPropertyGetWrapper = createComputedPropertyGetWrapper;
						exports.createComputedPropertySetWrapper = createComputedPropertySetWrapper;
						exports.createGetEvalMethCall = createGetEvalMethCall;
						exports.createGetPostMessageMethCall = createGetPostMessageMethCall;
						exports.createExpandedConcatOperation = createExpandedConcatOperation;
						exports.createHtmlProcessorWrapper = createHtmlProcessorWrapper;

						var _esotope = require('./tools/esotope');

						var _internalLiteral = require('./internal-literal');

						var _internalLiteral2 = _interopRequireDefault(_internalLiteral);

						var _instruction = require('./instruction');

						var _instruction2 = _interopRequireDefault(_instruction);

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						function createStringLiteral(value) {
						    return {
						        type: _esotope.Syntax.Literal,
						        value: value,
						        raw: '"' + value + '"'
						    };
						} // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						function createTempVarIdentifier() {
						    return {
						        type: _esotope.Syntax.Identifier,
						        name: _internalLiteral2.default.tempVar
						    };
						}

						function createAssignmentExprStmt(left, right) {
						    return {
						        type: _esotope.Syntax.ExpressionStatement,

						        expression: {
						            type: _esotope.Syntax.AssignmentExpression,
						            operator: '=',
						            left: left,
						            right: right
						        }
						    };
						}

						function createBlockExprStmt(children) {
						    return {
						        type: _esotope.Syntax.BlockStatement,
						        body: children
						    };
						}

						function createVarDeclaration(identifier, init) {
						    return {
						        type: _esotope.Syntax.VariableDeclaration,

						        declarations: [{
						            type: _esotope.Syntax.VariableDeclarator,
						            id: identifier,
						            init: init || null
						        }],

						        kind: 'var'
						    };
						}

						function createProcessScriptMethCall(arg, isApply) {
						    var ast = {
						        type: _esotope.Syntax.CallExpression,

						        callee: {
						            type: _esotope.Syntax.Identifier,
						            name: _instruction2.default.processScript
						        },

						        arguments: [arg]
						    };

						    if (isApply) {
						        ast.arguments.push({
						            type: _esotope.Syntax.Literal,
						            value: true,
						            raw: 'true'
						        });
						    }

						    return ast;
						}

						function createLocationGetWrapper() {
						    return {
						        type: _esotope.Syntax.CallExpression,

						        callee: {
						            type: _esotope.Syntax.Identifier,
						            name: _instruction2.default.getLocation
						        },

						        arguments: [{
						            type: _esotope.Syntax.Identifier,
						            name: 'location'
						        }]
						    };
						}

						function createLocationSetWrapper(value, wrapWithSequence) {
						    var tempIdentifier = createTempVarIdentifier();
						    var locationIdentifier = {
						        type: _esotope.Syntax.Identifier,
						        name: 'location'
						    };

						    var wrapper = {
						        type: _esotope.Syntax.CallExpression,

						        callee: {
						            type: _esotope.Syntax.MemberExpression,
						            computed: false,

						            object: {
						                type: _esotope.Syntax.FunctionExpression,
						                id: null,
						                params: [],
						                defaults: [],

						                body: {
						                    type: _esotope.Syntax.BlockStatement,
						                    body: [createVarDeclaration(tempIdentifier, value), {
						                        type: _esotope.Syntax.ReturnStatement,

						                        argument: {
						                            type: _esotope.Syntax.LogicalExpression,
						                            operator: '||',

						                            left: {
						                                type: _esotope.Syntax.CallExpression,

						                                callee: {
						                                    type: _esotope.Syntax.Identifier,
						                                    name: _instruction2.default.setLocation
						                                },

						                                arguments: [locationIdentifier, tempIdentifier]
						                            },

						                            right: {
						                                type: _esotope.Syntax.AssignmentExpression,
						                                operator: '=',
						                                left: locationIdentifier,
						                                right: tempIdentifier
						                            }
						                        }
						                    }]
						                },

						                rest: null,
						                generator: false,
						                expression: false
						            },

						            property: {
						                type: _esotope.Syntax.Identifier,
						                name: 'call'
						            }
						        },

						        arguments: [{
						            type: _esotope.Syntax.ThisExpression
						        }]
						    };

						    if (wrapWithSequence) {
						        wrapper = {
						            type: _esotope.Syntax.SequenceExpression,

						            expressions: [{
						                type: 'Literal',
						                value: 0,
						                raw: '0'
						            }, wrapper]
						        };
						    }

						    return wrapper;
						}

						function createPropertySetWrapper(propertyName, obj, value) {
						    return {
						        type: _esotope.Syntax.CallExpression,

						        callee: {
						            type: _esotope.Syntax.Identifier,
						            name: _instruction2.default.setProperty
						        },

						        arguments: [obj, createStringLiteral(propertyName), value]
						    };
						}

						function createMethCallWrapper(owner, meth, args) {
						    return {
						        type: _esotope.Syntax.CallExpression,

						        callee: {
						            type: _esotope.Syntax.Identifier,
						            name: _instruction2.default.callMethod
						        },

						        arguments: [owner, meth, {
						            type: _esotope.Syntax.ArrayExpression,
						            elements: args
						        }]
						    };
						}

						function createPropertyGetWrapper(propertyName, owner) {
						    return {
						        type: _esotope.Syntax.CallExpression,

						        callee: {
						            type: _esotope.Syntax.Identifier,
						            name: _instruction2.default.getProperty
						        },

						        arguments: [owner, createStringLiteral(propertyName)]
						    };
						}

						function createComputedPropertyGetWrapper(property, owner) {
						    return {
						        type: _esotope.Syntax.CallExpression,

						        callee: {
						            type: _esotope.Syntax.Identifier,
						            name: _instruction2.default.getProperty
						        },

						        arguments: [owner, property]
						    };
						}

						function createComputedPropertySetWrapper(property, owner, value) {
						    return {
						        type: _esotope.Syntax.CallExpression,

						        callee: {
						            type: _esotope.Syntax.Identifier,
						            name: _instruction2.default.setProperty
						        },

						        arguments: [owner, property, value]
						    };
						}

						function createGetEvalMethCall(node) {
						    return {
						        type: _esotope.Syntax.CallExpression,

						        callee: {
						            type: _esotope.Syntax.Identifier,
						            name: _instruction2.default.getEval
						        },

						        arguments: [node]
						    };
						}

						function createGetPostMessageMethCall(node) {
						    var parentObject = node.object;

						    return {
						        type: _esotope.Syntax.CallExpression,

						        callee: {
						            type: _esotope.Syntax.Identifier,
						            name: _instruction2.default.getPostMessage
						        },

						        arguments: parentObject ? [parentObject] : [{
						            type: _esotope.Syntax.Literal,
						            value: null
						        }, node]
						    };
						}

						function createExpandedConcatOperation(left, right) {
						    return {
						        type: _esotope.Syntax.AssignmentExpression,
						        operator: '=',
						        left: left,

						        right: {
						            type: _esotope.Syntax.BinaryExpression,
						            operator: '+',
						            left: left,
						            right: right
						        }
						    };
						}

						function createHtmlProcessorWrapper(node) {
						    return {
						        type: _esotope.Syntax.ExpressionStatement,

						        expression: {
						            type: _esotope.Syntax.CallExpression,

						            callee: {
						                type: _esotope.Syntax.MemberExpression,

						                object: {
						                    type: _esotope.Syntax.Identifier,
						                    name: 'parent'
						                },

						                property: {
						                    type: _esotope.Syntax.Identifier,
						                    name: _instruction2.default.processHtml
						                }
						            },

						            arguments: [{
						                type: _esotope.Syntax.Identifier,
						                name: 'window'
						            }, node.expression]
						        }
						    };
						}
					},
					"tools": {
						"acorn": {
							"expression.js": function (exports, module, require) {
								

								var _tokentype = require("./tokentype");

								var _state = require("./state");

								var _parseutil = require("./parseutil");

								var _whitespace = require("./whitespace");

								// A recursive descent parser operates by defining functions for all
								// syntactic elements, and recursively calling those, each function
								// advancing the input stream and returning an AST node. Precedence
								// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
								// instead of `(!x)[1]` is handled by the fact that the parser
								// function that parses unary prefix operators is called first, and
								// in turn calls the function that parses `[]` subscripts — that
								// way, it'll receive the node for `x[1]` already parsed, and wraps
								// *that* in the unary operator node.
								//
								// Acorn uses an [operator precedence parser][opp] to handle binary
								// operator precedence, because it is much more compact than using
								// the technique outlined above, which uses different, nesting
								// functions to specify precedence, for all of the ten binary
								// precedence levels that JavaScript defines.
								//
								// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

								var pp = _state.Parser.prototype;

								// Check if property name clashes with already added.
								// Object/class getters and setters are not allowed to clash —
								// either with each other or with an init property — and in
								// strict mode, init properties are also not allowed to be repeated.

								pp.checkPropClash = function (prop, propHash) {
								  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;
								  var key = prop.key,
								      name = void 0;
								  switch (key.type) {
								    case "Identifier":
								      name = key.name;break;
								    case "Literal":
								      name = String(key.value);break;
								    default:
								      return;
								  }
								  var kind = prop.kind;

								  if (this.options.ecmaVersion >= 6) {
								    if (name === "__proto__" && kind === "init") {
								      if (propHash.proto) this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
								      propHash.proto = true;
								    }
								    return;
								  }
								  name = "$" + name;
								  var other = propHash[name];
								  if (other) {
								    var redefinition = void 0;
								    if (kind === "init") {
								      redefinition = this.strict && other.init || other.get || other.set;
								    } else {
								      redefinition = other.init || other[kind];
								    }
								    if (redefinition) this.raiseRecoverable(key.start, "Redefinition of property");
								  } else {
								    other = propHash[name] = {
								      init: false,
								      get: false,
								      set: false
								    };
								  }
								  other[kind] = true;
								};

								// ### Expression parsing

								// These nest, from the most general expression type at the top to
								// 'atomic', nondivisible expression types at the bottom. Most of
								// the functions will simply let the function(s) below them parse,
								// and, *if* the syntactic construct they handle is present, wrap
								// the AST node that the inner parser gave them in another node.

								// Parse a full expression. The optional arguments are used to
								// forbid the `in` operator (in for loops initalization expressions)
								// and provide reference for storing '=' operator inside shorthand
								// property assignment in contexts where both object expression
								// and object pattern might appear (so it's possible to raise
								// delayed syntax error at correct position).

								pp.parseExpression = function (noIn, refDestructuringErrors) {
								  var startPos = this.start,
								      startLoc = this.startLoc;
								  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
								  if (this.type === _tokentype.types.comma) {
								    var node = this.startNodeAt(startPos, startLoc);
								    node.expressions = [expr];
								    while (this.eat(_tokentype.types.comma)) {
								      node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
								    }return this.finishNode(node, "SequenceExpression");
								  }
								  return expr;
								};

								// Parse an assignment expression. This includes applications of
								// operators like `+=`.

								pp.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
								  if (this.inGenerator && this.isContextual("yield")) return this.parseYield();

								  var ownDestructuringErrors = false,
								      oldParenAssign = -1,
								      oldTrailingComma = -1;
								  if (refDestructuringErrors) {
								    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
								    oldTrailingComma = refDestructuringErrors.trailingComma;
								    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
								  } else {
								    refDestructuringErrors = new _parseutil.DestructuringErrors();
								    ownDestructuringErrors = true;
								  }

								  var startPos = this.start,
								      startLoc = this.startLoc;
								  if (this.type == _tokentype.types.parenL || this.type == _tokentype.types.name) this.potentialArrowAt = this.start;
								  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
								  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
								  if (this.type.isAssign) {
								    this.checkPatternErrors(refDestructuringErrors, true);
								    if (!ownDestructuringErrors) _parseutil.DestructuringErrors.call(refDestructuringErrors);
								    var node = this.startNodeAt(startPos, startLoc);
								    node.operator = this.value;
								    node.left = this.type === _tokentype.types.eq ? this.toAssignable(left) : left;
								    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly
								    this.checkLVal(left);
								    this.next();
								    node.right = this.parseMaybeAssign(noIn);
								    return this.finishNode(node, "AssignmentExpression");
								  } else {
								    if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true);
								  }
								  if (oldParenAssign > -1) refDestructuringErrors.parenthesizedAssign = oldParenAssign;
								  if (oldTrailingComma > -1) refDestructuringErrors.trailingComma = oldTrailingComma;
								  return left;
								};

								// Parse a ternary conditional (`?:`) operator.

								pp.parseMaybeConditional = function (noIn, refDestructuringErrors) {
								  var startPos = this.start,
								      startLoc = this.startLoc;
								  var expr = this.parseExprOps(noIn, refDestructuringErrors);
								  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
								  if (this.eat(_tokentype.types.question)) {
								    var node = this.startNodeAt(startPos, startLoc);
								    node.test = expr;
								    node.consequent = this.parseMaybeAssign();
								    this.expect(_tokentype.types.colon);
								    node.alternate = this.parseMaybeAssign(noIn);
								    return this.finishNode(node, "ConditionalExpression");
								  }
								  return expr;
								};

								// Start the precedence parser.

								pp.parseExprOps = function (noIn, refDestructuringErrors) {
								  var startPos = this.start,
								      startLoc = this.startLoc;
								  var expr = this.parseMaybeUnary(refDestructuringErrors, false);
								  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
								  return expr.start == startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
								};

								// Parse binary operators with the operator precedence parsing
								// algorithm. `left` is the left-hand side of the operator.
								// `minPrec` provides context that allows the function to stop and
								// defer further parser to one of its callers when it encounters an
								// operator that has a lower precedence than the set it is parsing.

								pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
								  var prec = this.type.binop;
								  if (prec != null && (!noIn || this.type !== _tokentype.types._in)) {
								    if (prec > minPrec) {
								      var logical = this.type === _tokentype.types.logicalOR || this.type === _tokentype.types.logicalAND;
								      var op = this.value;
								      this.next();
								      var startPos = this.start,
								          startLoc = this.startLoc;
								      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
								      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
								      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
								    }
								  }
								  return left;
								};

								pp.buildBinary = function (startPos, startLoc, left, right, op, logical) {
								  var node = this.startNodeAt(startPos, startLoc);
								  node.left = left;
								  node.operator = op;
								  node.right = right;
								  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
								};

								// Parse unary operators, both prefix and postfix.

								pp.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
								  var startPos = this.start,
								      startLoc = this.startLoc,
								      expr = void 0;
								  if (this.inAsync && this.isContextual("await")) {
								    expr = this.parseAwait(refDestructuringErrors);
								    sawUnary = true;
								  } else if (this.type.prefix) {
								    var node = this.startNode(),
								        update = this.type === _tokentype.types.incDec;
								    node.operator = this.value;
								    node.prefix = true;
								    this.next();
								    node.argument = this.parseMaybeUnary(null, true);
								    this.checkExpressionErrors(refDestructuringErrors, true);
								    if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") this.raiseRecoverable(node.start, "Deleting local variable in strict mode");else sawUnary = true;
								    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
								  } else {
								    expr = this.parseExprSubscripts(refDestructuringErrors);
								    if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
								    while (this.type.postfix && !this.canInsertSemicolon()) {
								      var _node = this.startNodeAt(startPos, startLoc);
								      _node.operator = this.value;
								      _node.prefix = false;
								      _node.argument = expr;
								      this.checkLVal(expr);
								      this.next();
								      expr = this.finishNode(_node, "UpdateExpression");
								    }
								  }

								  if (!sawUnary && this.eat(_tokentype.types.starstar)) return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);else return expr;
								};

								// Parse call, dot, and `[]`-subscript expressions.

								pp.parseExprSubscripts = function (refDestructuringErrors) {
								  var startPos = this.start,
								      startLoc = this.startLoc;
								  var expr = this.parseExprAtom(refDestructuringErrors);
								  var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
								  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr;
								  var result = this.parseSubscripts(expr, startPos, startLoc);
								  if (refDestructuringErrors && result.type === "MemberExpression") {
								    if (refDestructuringErrors.parenthesizedAssign >= result.start) refDestructuringErrors.parenthesizedAssign = -1;
								    if (refDestructuringErrors.parenthesizedBind >= result.start) refDestructuringErrors.parenthesizedBind = -1;
								  }
								  return result;
								};

								pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
								  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd == base.end && !this.canInsertSemicolon();
								  for (var computed;;) {
								    if ((computed = this.eat(_tokentype.types.bracketL)) || this.eat(_tokentype.types.dot)) {
								      var node = this.startNodeAt(startPos, startLoc);
								      node.object = base;
								      node.property = computed ? this.parseExpression() : this.parseIdent(true);
								      node.computed = !!computed;
								      if (computed) this.expect(_tokentype.types.bracketR);
								      base = this.finishNode(node, "MemberExpression");
								    } else if (!noCalls && this.eat(_tokentype.types.parenL)) {
								      var refDestructuringErrors = new _parseutil.DestructuringErrors(),
								          oldYieldPos = this.yieldPos,
								          oldAwaitPos = this.awaitPos;
								      this.yieldPos = 0;
								      this.awaitPos = 0;
								      var exprList = this.parseExprList(_tokentype.types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
								      if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {
								        this.checkPatternErrors(refDestructuringErrors, false);
								        this.checkYieldAwaitInDefaultParams();
								        this.yieldPos = oldYieldPos;
								        this.awaitPos = oldAwaitPos;
								        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
								      }
								      this.checkExpressionErrors(refDestructuringErrors, true);
								      this.yieldPos = oldYieldPos || this.yieldPos;
								      this.awaitPos = oldAwaitPos || this.awaitPos;
								      var _node2 = this.startNodeAt(startPos, startLoc);
								      _node2.callee = base;
								      _node2.arguments = exprList;
								      base = this.finishNode(_node2, "CallExpression");
								    } else if (this.type === _tokentype.types.backQuote) {
								      var _node3 = this.startNodeAt(startPos, startLoc);
								      _node3.tag = base;
								      _node3.quasi = this.parseTemplate({ isTagged: true });
								      base = this.finishNode(_node3, "TaggedTemplateExpression");
								    } else {
								      return base;
								    }
								  }
								};

								// Parse an atomic expression — either a single token that is an
								// expression, an expression started by a keyword like `function` or
								// `new`, or an expression wrapped in punctuation like `()`, `[]`,
								// or `{}`.

								pp.parseExprAtom = function (refDestructuringErrors) {
								  var node = void 0,
								      canBeArrow = this.potentialArrowAt == this.start;
								  switch (this.type) {
								    case _tokentype.types._super:
								      if (!this.inFunction) this.raise(this.start, "'super' outside of function or class");

								    case _tokentype.types._this:
								      var type = this.type === _tokentype.types._this ? "ThisExpression" : "Super";
								      node = this.startNode();
								      this.next();
								      return this.finishNode(node, type);

								    case _tokentype.types.name:
								      var startPos = this.start,
								          startLoc = this.startLoc;
								      var id = this.parseIdent(this.type !== _tokentype.types.name);
								      if (this.options.ecmaVersion >= 8 && id.name === "async" && !this.canInsertSemicolon() && this.eat(_tokentype.types._function)) return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true);
								      if (canBeArrow && !this.canInsertSemicolon()) {
								        if (this.eat(_tokentype.types.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
								        if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === _tokentype.types.name) {
								          id = this.parseIdent();
								          if (this.canInsertSemicolon() || !this.eat(_tokentype.types.arrow)) this.unexpected();
								          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
								        }
								      }
								      return id;

								    case _tokentype.types.regexp:
								      var value = this.value;
								      node = this.parseLiteral(value.value);
								      node.regex = { pattern: value.pattern, flags: value.flags };
								      return node;

								    case _tokentype.types.num:case _tokentype.types.string:
								      return this.parseLiteral(this.value);

								    case _tokentype.types._null:case _tokentype.types._true:case _tokentype.types._false:
								      node = this.startNode();
								      node.value = this.type === _tokentype.types._null ? null : this.type === _tokentype.types._true;
								      node.raw = this.type.keyword;
								      this.next();
								      return this.finishNode(node, "Literal");

								    case _tokentype.types.parenL:
								      var start = this.start,
								          expr = this.parseParenAndDistinguishExpression(canBeArrow);
								      if (refDestructuringErrors) {
								        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) refDestructuringErrors.parenthesizedAssign = start;
								        if (refDestructuringErrors.parenthesizedBind < 0) refDestructuringErrors.parenthesizedBind = start;
								      }
								      return expr;

								    case _tokentype.types.bracketL:
								      node = this.startNode();
								      this.next();
								      node.elements = this.parseExprList(_tokentype.types.bracketR, true, true, refDestructuringErrors);
								      return this.finishNode(node, "ArrayExpression");

								    case _tokentype.types.braceL:
								      return this.parseObj(false, refDestructuringErrors);

								    case _tokentype.types._function:
								      node = this.startNode();
								      this.next();
								      return this.parseFunction(node, false);

								    case _tokentype.types._class:
								      return this.parseClass(this.startNode(), false);

								    case _tokentype.types._new:
								      return this.parseNew();

								    case _tokentype.types.backQuote:
								      return this.parseTemplate();

								    default:
								      this.unexpected();
								  }
								};

								pp.parseLiteral = function (value) {
								  var node = this.startNode();
								  node.value = value;
								  node.raw = this.input.slice(this.start, this.end);
								  this.next();
								  return this.finishNode(node, "Literal");
								};

								pp.parseParenExpression = function () {
								  this.expect(_tokentype.types.parenL);
								  var val = this.parseExpression();
								  this.expect(_tokentype.types.parenR);
								  return val;
								};

								pp.parseParenAndDistinguishExpression = function (canBeArrow) {
								  var startPos = this.start,
								      startLoc = this.startLoc,
								      val = void 0,
								      allowTrailingComma = this.options.ecmaVersion >= 8;
								  if (this.options.ecmaVersion >= 6) {
								    this.next();

								    var innerStartPos = this.start,
								        innerStartLoc = this.startLoc;
								    var exprList = [],
								        first = true,
								        lastIsComma = false;
								    var refDestructuringErrors = new _parseutil.DestructuringErrors(),
								        oldYieldPos = this.yieldPos,
								        oldAwaitPos = this.awaitPos,
								        spreadStart = void 0,
								        innerParenStart = void 0;
								    this.yieldPos = 0;
								    this.awaitPos = 0;
								    while (this.type !== _tokentype.types.parenR) {
								      first ? first = false : this.expect(_tokentype.types.comma);
								      if (allowTrailingComma && this.afterTrailingComma(_tokentype.types.parenR, true)) {
								        lastIsComma = true;
								        break;
								      } else if (this.type === _tokentype.types.ellipsis) {
								        spreadStart = this.start;
								        exprList.push(this.parseParenItem(this.parseRestBinding()));
								        if (this.type === _tokentype.types.comma) this.raise(this.start, "Comma is not permitted after the rest element");
								        break;
								      } else {
								        if (this.type === _tokentype.types.parenL && !innerParenStart) {
								          innerParenStart = this.start;
								        }
								        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
								      }
								    }
								    var innerEndPos = this.start,
								        innerEndLoc = this.startLoc;
								    this.expect(_tokentype.types.parenR);

								    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {
								      this.checkPatternErrors(refDestructuringErrors, false);
								      this.checkYieldAwaitInDefaultParams();
								      if (innerParenStart) this.unexpected(innerParenStart);
								      this.yieldPos = oldYieldPos;
								      this.awaitPos = oldAwaitPos;
								      return this.parseParenArrowList(startPos, startLoc, exprList);
								    }

								    if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart);
								    if (spreadStart) this.unexpected(spreadStart);
								    this.checkExpressionErrors(refDestructuringErrors, true);
								    this.yieldPos = oldYieldPos || this.yieldPos;
								    this.awaitPos = oldAwaitPos || this.awaitPos;

								    if (exprList.length > 1) {
								      val = this.startNodeAt(innerStartPos, innerStartLoc);
								      val.expressions = exprList;
								      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
								    } else {
								      val = exprList[0];
								    }
								  } else {
								    val = this.parseParenExpression();
								  }

								  if (this.options.preserveParens) {
								    var par = this.startNodeAt(startPos, startLoc);
								    par.expression = val;
								    return this.finishNode(par, "ParenthesizedExpression");
								  } else {
								    return val;
								  }
								};

								pp.parseParenItem = function (item) {
								  return item;
								};

								pp.parseParenArrowList = function (startPos, startLoc, exprList) {
								  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
								};

								// New's precedence is slightly tricky. It must allow its argument to
								// be a `[]` or dot subscript expression, but not a call — at least,
								// not without wrapping it in parentheses. Thus, it uses the noCalls
								// argument to parseSubscripts to prevent it from consuming the
								// argument list.

								var empty = [];

								pp.parseNew = function () {
								  var node = this.startNode();
								  var meta = this.parseIdent(true);
								  if (this.options.ecmaVersion >= 6 && this.eat(_tokentype.types.dot)) {
								    node.meta = meta;
								    node.property = this.parseIdent(true);
								    if (node.property.name !== "target") this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target");
								    if (!this.inFunction) this.raiseRecoverable(node.start, "new.target can only be used in functions");
								    return this.finishNode(node, "MetaProperty");
								  }
								  var startPos = this.start,
								      startLoc = this.startLoc;
								  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
								  if (this.eat(_tokentype.types.parenL)) node.arguments = this.parseExprList(_tokentype.types.parenR, this.options.ecmaVersion >= 8, false);else node.arguments = empty;
								  return this.finishNode(node, "NewExpression");
								};

								// Parse template expression.

								pp.parseTemplateElement = function (_ref) {
								  var isTagged = _ref.isTagged;

								  var elem = this.startNode();
								  if (this.type === _tokentype.types.invalidTemplate) {
								    if (!isTagged) {
								      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
								    }
								    elem.value = {
								      raw: this.value,
								      cooked: null
								    };
								  } else {
								    elem.value = {
								      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
								      cooked: this.value
								    };
								  }
								  this.next();
								  elem.tail = this.type === _tokentype.types.backQuote;
								  return this.finishNode(elem, "TemplateElement");
								};

								pp.parseTemplate = function () {
								  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
								      _ref2$isTagged = _ref2.isTagged,
								      isTagged = _ref2$isTagged === undefined ? false : _ref2$isTagged;

								  var node = this.startNode();
								  this.next();
								  node.expressions = [];
								  var curElt = this.parseTemplateElement({ isTagged: isTagged });
								  node.quasis = [curElt];
								  while (!curElt.tail) {
								    this.expect(_tokentype.types.dollarBraceL);
								    node.expressions.push(this.parseExpression());
								    this.expect(_tokentype.types.braceR);
								    node.quasis.push(curElt = this.parseTemplateElement({ isTagged: isTagged }));
								  }
								  this.next();
								  return this.finishNode(node, "TemplateLiteral");
								};

								// Parse an object literal or binding pattern.

								pp.isAsyncProp = function (prop) {
								  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === _tokentype.types.name || this.type === _tokentype.types.num || this.type === _tokentype.types.string || this.type === _tokentype.types.bracketL) && !_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
								};

								pp.parseObj = function (isPattern, refDestructuringErrors) {
								  var node = this.startNode(),
								      first = true,
								      propHash = {};
								  node.properties = [];
								  this.next();
								  while (!this.eat(_tokentype.types.braceR)) {
								    if (!first) {
								      this.expect(_tokentype.types.comma);
								      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
								    } else first = false;

								    var prop = this.startNode(),
								        isGenerator = void 0,
								        isAsync = void 0,
								        startPos = void 0,
								        startLoc = void 0;
								    if (this.options.ecmaVersion >= 6) {
								      prop.method = false;
								      prop.shorthand = false;
								      if (isPattern || refDestructuringErrors) {
								        startPos = this.start;
								        startLoc = this.startLoc;
								      }
								      if (!isPattern) isGenerator = this.eat(_tokentype.types.star);
								    }
								    this.parsePropertyName(prop);
								    if (!isPattern && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
								      isAsync = true;
								      this.parsePropertyName(prop, refDestructuringErrors);
								    } else {
								      isAsync = false;
								    }
								    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors);
								    this.checkPropClash(prop, propHash);
								    node.properties.push(this.finishNode(prop, "Property"));
								  }
								  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
								};

								pp.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors) {
								  if ((isGenerator || isAsync) && this.type === _tokentype.types.colon) this.unexpected();

								  if (this.eat(_tokentype.types.colon)) {
								    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
								    prop.kind = "init";
								  } else if (this.options.ecmaVersion >= 6 && this.type === _tokentype.types.parenL) {
								    if (isPattern) this.unexpected();
								    prop.kind = "init";
								    prop.method = true;
								    prop.value = this.parseMethod(isGenerator, isAsync);
								  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && this.type != _tokentype.types.comma && this.type != _tokentype.types.braceR) {
								    if (isGenerator || isAsync || isPattern) this.unexpected();
								    prop.kind = prop.key.name;
								    this.parsePropertyName(prop);
								    prop.value = this.parseMethod(false);
								    var paramCount = prop.kind === "get" ? 0 : 1;
								    if (prop.value.params.length !== paramCount) {
								      var start = prop.value.start;
								      if (prop.kind === "get") this.raiseRecoverable(start, "getter should have no params");else this.raiseRecoverable(start, "setter should have exactly one param");
								    } else {
								      if (prop.kind === "set" && prop.value.params[0].type === "RestElement") this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
								    }
								  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
								    this.checkUnreserved(prop.key);
								    prop.kind = "init";
								    if (isPattern) {
								      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
								    } else if (this.type === _tokentype.types.eq && refDestructuringErrors) {
								      if (refDestructuringErrors.shorthandAssign < 0) refDestructuringErrors.shorthandAssign = this.start;
								      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
								    } else {
								      prop.value = prop.key;
								    }
								    prop.shorthand = true;
								  } else this.unexpected();
								};

								pp.parsePropertyName = function (prop) {
								  if (this.options.ecmaVersion >= 6) {
								    if (this.eat(_tokentype.types.bracketL)) {
								      prop.computed = true;
								      prop.key = this.parseMaybeAssign();
								      this.expect(_tokentype.types.bracketR);
								      return prop.key;
								    } else {
								      prop.computed = false;
								    }
								  }
								  return prop.key = this.type === _tokentype.types.num || this.type === _tokentype.types.string ? this.parseExprAtom() : this.parseIdent(true);
								};

								// Initialize empty function node.

								pp.initFunction = function (node) {
								  node.id = null;
								  if (this.options.ecmaVersion >= 6) {
								    node.generator = false;
								    node.expression = false;
								  }
								  if (this.options.ecmaVersion >= 8) node.async = false;
								};

								// Parse object or class method.

								pp.parseMethod = function (isGenerator, isAsync) {
								  var node = this.startNode(),
								      oldInGen = this.inGenerator,
								      oldInAsync = this.inAsync,
								      oldYieldPos = this.yieldPos,
								      oldAwaitPos = this.awaitPos,
								      oldInFunc = this.inFunction;

								  this.initFunction(node);
								  if (this.options.ecmaVersion >= 6) node.generator = isGenerator;
								  if (this.options.ecmaVersion >= 8) node.async = !!isAsync;

								  this.inGenerator = node.generator;
								  this.inAsync = node.async;
								  this.yieldPos = 0;
								  this.awaitPos = 0;
								  this.inFunction = true;
								  this.enterFunctionScope();

								  this.expect(_tokentype.types.parenL);
								  node.params = this.parseBindingList(_tokentype.types.parenR, false, this.options.ecmaVersion >= 8);
								  this.checkYieldAwaitInDefaultParams();
								  this.parseFunctionBody(node, false);

								  this.inGenerator = oldInGen;
								  this.inAsync = oldInAsync;
								  this.yieldPos = oldYieldPos;
								  this.awaitPos = oldAwaitPos;
								  this.inFunction = oldInFunc;
								  return this.finishNode(node, "FunctionExpression");
								};

								// Parse arrow function expression with given parameters.

								pp.parseArrowExpression = function (node, params, isAsync) {
								  var oldInGen = this.inGenerator,
								      oldInAsync = this.inAsync,
								      oldYieldPos = this.yieldPos,
								      oldAwaitPos = this.awaitPos,
								      oldInFunc = this.inFunction;

								  this.enterFunctionScope();
								  this.initFunction(node);
								  if (this.options.ecmaVersion >= 8) node.async = !!isAsync;

								  this.inGenerator = false;
								  this.inAsync = node.async;
								  this.yieldPos = 0;
								  this.awaitPos = 0;
								  this.inFunction = true;

								  node.params = this.toAssignableList(params, true);
								  this.parseFunctionBody(node, true);

								  this.inGenerator = oldInGen;
								  this.inAsync = oldInAsync;
								  this.yieldPos = oldYieldPos;
								  this.awaitPos = oldAwaitPos;
								  this.inFunction = oldInFunc;
								  return this.finishNode(node, "ArrowFunctionExpression");
								};

								// Parse function body and check parameters.

								pp.parseFunctionBody = function (node, isArrowFunction) {
								  var isExpression = isArrowFunction && this.type !== _tokentype.types.braceL;
								  var oldStrict = this.strict,
								      useStrict = false;

								  if (isExpression) {
								    node.body = this.parseMaybeAssign();
								    node.expression = true;
								    this.checkParams(node, false);
								  } else {
								    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
								    if (!oldStrict || nonSimple) {
								      useStrict = this.strictDirective(this.end);
								      // If this is a strict mode function, verify that argument names
								      // are not repeated, and it does not try to bind the words `eval`
								      // or `arguments`.
								      if (useStrict && nonSimple) this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
								    }
								    // Start a new scope with regard to labels and the `inFunction`
								    // flag (restore them to their old value afterwards).
								    var oldLabels = this.labels;
								    this.labels = [];
								    if (useStrict) this.strict = true;

								    // Add the params to varDeclaredNames to ensure that an error is thrown
								    // if a let/const declaration in the function clashes with one of the params.
								    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));
								    node.body = this.parseBlock(false);
								    node.expression = false;
								    this.labels = oldLabels;
								  }
								  this.exitFunctionScope();

								  if (this.strict && node.id) {
								    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
								    this.checkLVal(node.id, "none");
								  }
								  this.strict = oldStrict;
								};

								pp.isSimpleParamList = function (params) {
								  for (var _i2 = 0; _i2 < params.length; _i2++) {
								    var param = params[_i2];
								    if (param.type !== "Identifier") return false;
								  }

								  return true;
								};

								// Checks function params for various disallowed patterns such as using "eval"
								// or "arguments" and duplicate parameters.

								pp.checkParams = function (node, allowDuplicates) {
								  var nameHash = {};

								  for (var _i4 = 0, _node$params2 = node.params; _i4 < _node$params2.length; _i4++) {
								    var param = _node$params2[_i4];
								    this.checkLVal(param, "var", allowDuplicates ? null : nameHash);
								  }
								};

								// Parses a comma-separated list of expressions, and returns them as
								// an array. `close` is the token type that ends the list, and
								// `allowEmpty` can be turned on to allow subsequent commas with
								// nothing in between them to be parsed as `null` (which is needed
								// for array literals).

								pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
								  var elts = [],
								      first = true;
								  while (!this.eat(close)) {
								    if (!first) {
								      this.expect(_tokentype.types.comma);
								      if (allowTrailingComma && this.afterTrailingComma(close)) break;
								    } else first = false;

								    var elt = void 0;
								    if (allowEmpty && this.type === _tokentype.types.comma) elt = null;else if (this.type === _tokentype.types.ellipsis) {
								      elt = this.parseSpread(refDestructuringErrors);
								      if (refDestructuringErrors && this.type === _tokentype.types.comma && refDestructuringErrors.trailingComma < 0) refDestructuringErrors.trailingComma = this.start;
								    } else {
								      elt = this.parseMaybeAssign(false, refDestructuringErrors);
								    }
								    elts.push(elt);
								  }
								  return elts;
								};

								// Parse the next token as an identifier. If `liberal` is true (used
								// when parsing properties), it will also convert keywords into
								// identifiers.

								pp.checkUnreserved = function (_ref3) {
								  var start = _ref3.start,
								      end = _ref3.end,
								      name = _ref3.name;

								  if (this.inGenerator && name === "yield") this.raiseRecoverable(start, "Can not use 'yield' as identifier inside a generator");
								  if (this.inAsync && name === "await") this.raiseRecoverable(start, "Can not use 'await' as identifier inside an async function");
								  if (this.isKeyword(name)) this.raise(start, "Unexpected keyword '" + name + "'");
								  if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") != -1) return;
								  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
								  if (re.test(name)) this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
								};

								pp.parseIdent = function (liberal, isBinding) {
								  var node = this.startNode();
								  if (liberal && this.options.allowReserved == "never") liberal = false;
								  if (this.type === _tokentype.types.name) {
								    node.name = this.value;
								  } else if (this.type.keyword) {
								    node.name = this.type.keyword;
								  } else {
								    this.unexpected();
								  }
								  this.next();
								  this.finishNode(node, "Identifier");
								  if (!liberal) this.checkUnreserved(node);
								  return node;
								};

								// Parses yield expression inside generator.

								pp.parseYield = function () {
								  if (!this.yieldPos) this.yieldPos = this.start;

								  var node = this.startNode();
								  this.next();
								  if (this.type == _tokentype.types.semi || this.canInsertSemicolon() || this.type != _tokentype.types.star && !this.type.startsExpr) {
								    node.delegate = false;
								    node.argument = null;
								  } else {
								    node.delegate = this.eat(_tokentype.types.star);
								    node.argument = this.parseMaybeAssign();
								  }
								  return this.finishNode(node, "YieldExpression");
								};

								pp.parseAwait = function () {
								  if (!this.awaitPos) this.awaitPos = this.start;

								  var node = this.startNode();
								  this.next();
								  node.argument = this.parseMaybeUnary(null, true);
								  return this.finishNode(node, "AwaitExpression");
								};
							},
							"identifier.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.isIdentifierStart = isIdentifierStart;
								exports.isIdentifierChar = isIdentifierChar;
								// Reserved word lists for various dialects of the language

								var reservedWords = exports.reservedWords = {
								  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
								  5: "class enum extends super const export import",
								  6: "enum",
								  strict: "implements interface let package private protected public static yield",
								  strictBind: "eval arguments"

								  // And the keywords

								};var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

								var keywords = exports.keywords = {
								  5: ecma5AndLessKeywords,
								  6: ecma5AndLessKeywords + " const class extends export import super"

								  // ## Character categories

								  // Big ugly regular expressions that match characters in the
								  // whitespace, identifier, and identifier-start categories. These
								  // are only applied when a character is found to actually have a
								  // code point above 128.
								  // Generated by `bin/generate-identifier-regex.js`.

								};var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
								var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA900-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";

								var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
								var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

								nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

								// These are a run-length and offset encoded representation of the
								// >0xffff code points that are a valid part of identifiers. The
								// offset starts at 0x10000, and each pair of numbers represents an
								// offset to the next range, and then a size of the range. They were
								// generated by bin/generate-identifier-regex.js

								// eslint-disable-next-line comma-spacing
								var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 264, 8, 2, 36, 18, 0, 50, 29, 881, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 65, 0, 32, 6124, 20, 754, 9486, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];

								// eslint-disable-next-line comma-spacing
								var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 87, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 838, 7, 2, 7, 17, 9, 57, 21, 2, 13, 19882, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239];

								// This has a complexity linear to the value of the code. The
								// assumption is that looking up astral identifier characters is
								// rare.
								function isInAstralSet(code, set) {
								  var pos = 0x10000;
								  for (var i = 0; i < set.length; i += 2) {
								    pos += set[i];
								    if (pos > code) return false;
								    pos += set[i + 1];
								    if (pos >= code) return true;
								  }
								}

								// Test whether a given character code starts an identifier.

								function isIdentifierStart(code, astral) {
								  if (code < 65) return code === 36;
								  if (code < 91) return true;
								  if (code < 97) return code === 95;
								  if (code < 123) return true;
								  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
								  if (astral === false) return false;
								  return isInAstralSet(code, astralIdentifierStartCodes);
								}

								// Test whether a given character is part of an identifier.

								function isIdentifierChar(code, astral) {
								  if (code < 48) return code === 36;
								  if (code < 58) return true;
								  if (code < 65) return false;
								  if (code < 91) return true;
								  if (code < 97) return code === 95;
								  if (code < 123) return true;
								  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
								  if (astral === false) return false;
								  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
								}
							},
							"index.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.pluginsLoose = exports.LooseParser = exports.parse_dammit = exports.version = exports.nonASCIIwhitespace = exports.lineBreakG = exports.lineBreak = exports.isNewLine = exports.Token = exports.isIdentifierStart = exports.isIdentifierChar = exports.tokContexts = exports.TokContext = exports.keywordTypes = exports.tokTypes = exports.TokenType = exports.Node = exports.getLineInfo = exports.SourceLocation = exports.Position = exports.defaultOptions = exports.plugins = exports.Parser = undefined;

								var _state = require("./state");

								Object.defineProperty(exports, "Parser", {
								  enumerable: true,
								  get: function get() {
								    return _state.Parser;
								  }
								});
								Object.defineProperty(exports, "plugins", {
								  enumerable: true,
								  get: function get() {
								    return _state.plugins;
								  }
								});

								var _options = require("./options");

								Object.defineProperty(exports, "defaultOptions", {
								  enumerable: true,
								  get: function get() {
								    return _options.defaultOptions;
								  }
								});

								var _locutil = require("./locutil");

								Object.defineProperty(exports, "Position", {
								  enumerable: true,
								  get: function get() {
								    return _locutil.Position;
								  }
								});
								Object.defineProperty(exports, "SourceLocation", {
								  enumerable: true,
								  get: function get() {
								    return _locutil.SourceLocation;
								  }
								});
								Object.defineProperty(exports, "getLineInfo", {
								  enumerable: true,
								  get: function get() {
								    return _locutil.getLineInfo;
								  }
								});

								var _node = require("./node");

								Object.defineProperty(exports, "Node", {
								  enumerable: true,
								  get: function get() {
								    return _node.Node;
								  }
								});

								var _tokentype = require("./tokentype");

								Object.defineProperty(exports, "TokenType", {
								  enumerable: true,
								  get: function get() {
								    return _tokentype.TokenType;
								  }
								});
								Object.defineProperty(exports, "tokTypes", {
								  enumerable: true,
								  get: function get() {
								    return _tokentype.types;
								  }
								});
								Object.defineProperty(exports, "keywordTypes", {
								  enumerable: true,
								  get: function get() {
								    return _tokentype.keywords;
								  }
								});

								var _tokencontext = require("./tokencontext");

								Object.defineProperty(exports, "TokContext", {
								  enumerable: true,
								  get: function get() {
								    return _tokencontext.TokContext;
								  }
								});
								Object.defineProperty(exports, "tokContexts", {
								  enumerable: true,
								  get: function get() {
								    return _tokencontext.types;
								  }
								});

								var _identifier = require("./identifier");

								Object.defineProperty(exports, "isIdentifierChar", {
								  enumerable: true,
								  get: function get() {
								    return _identifier.isIdentifierChar;
								  }
								});
								Object.defineProperty(exports, "isIdentifierStart", {
								  enumerable: true,
								  get: function get() {
								    return _identifier.isIdentifierStart;
								  }
								});

								var _tokenize = require("./tokenize");

								Object.defineProperty(exports, "Token", {
								  enumerable: true,
								  get: function get() {
								    return _tokenize.Token;
								  }
								});

								var _whitespace = require("./whitespace");

								Object.defineProperty(exports, "isNewLine", {
								  enumerable: true,
								  get: function get() {
								    return _whitespace.isNewLine;
								  }
								});
								Object.defineProperty(exports, "lineBreak", {
								  enumerable: true,
								  get: function get() {
								    return _whitespace.lineBreak;
								  }
								});
								Object.defineProperty(exports, "lineBreakG", {
								  enumerable: true,
								  get: function get() {
								    return _whitespace.lineBreakG;
								  }
								});
								Object.defineProperty(exports, "nonASCIIwhitespace", {
								  enumerable: true,
								  get: function get() {
								    return _whitespace.nonASCIIwhitespace;
								  }
								});
								exports.parse = parse;
								exports.parseExpressionAt = parseExpressionAt;
								exports.tokenizer = tokenizer;
								exports.addLooseExports = addLooseExports;

								require("./parseutil");

								require("./statement");

								require("./lval");

								require("./expression");

								require("./location");

								require("./scope");

								var version = exports.version = "5.1.1";

								// The main exported interface (under `self.acorn` when in the
								// browser) is a `parse` function that takes a code string and
								// returns an abstract syntax tree as specified by [Mozilla parser
								// API][api].
								//
								// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

								function parse(input, options) {
								  return new _state.Parser(options, input).parse();
								}

								// This function tries to parse a single expression at a given
								// offset in a string. Useful for parsing mixed-language formats
								// that embed JavaScript expressions.

								function parseExpressionAt(input, pos, options) {
								  var p = new _state.Parser(options, input, pos);
								  p.nextToken();
								  return p.parseExpression();
								}

								// Acorn is organized as a tokenizer and a recursive-descent parser.
								// The `tokenizer` export provides an interface to the tokenizer.

								function tokenizer(input, options) {
								  return new _state.Parser(options, input);
								}

								// This is a terrible kludge to support the existing, pre-ES6
								// interface where the loose parser module retroactively adds exports
								// to this module.
								var parse_dammit = exports.parse_dammit = void 0,
								    LooseParser = exports.LooseParser = void 0,
								    pluginsLoose = exports.pluginsLoose = void 0; // eslint-disable-line camelcase
								function addLooseExports(parse, Parser, plugins) {
								  exports.parse_dammit = parse_dammit = parse; // eslint-disable-line camelcase
								  exports.LooseParser = LooseParser = Parser;
								  exports.pluginsLoose = pluginsLoose = plugins;
								}
							},
							"location.js": function (exports, module, require) {
								

								var _state = require("./state");

								var _locutil = require("./locutil");

								var pp = _state.Parser.prototype;

								// This function is used to raise exceptions on parse errors. It
								// takes an offset integer (into the current `input`) to indicate
								// the location of the error, attaches the position to the end
								// of the error message, and then raises a `SyntaxError` with that
								// message.

								pp.raise = function (pos, message) {
								  var loc = (0, _locutil.getLineInfo)(this.input, pos);
								  message += " (" + loc.line + ":" + loc.column + ")";
								  var err = new SyntaxError(message);
								  err.pos = pos;err.loc = loc;err.raisedAt = this.pos;
								  throw err;
								};

								pp.raiseRecoverable = pp.raise;

								pp.curPosition = function () {
								  if (this.options.locations) {
								    return new _locutil.Position(this.curLine, this.pos - this.lineStart);
								  }
								};
							},
							"locutil.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.SourceLocation = exports.Position = undefined;
								exports.getLineInfo = getLineInfo;

								var _whitespace = require("./whitespace");

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								// These are used when `options.locations` is on, for the
								// `startLoc` and `endLoc` properties.

								var Position = exports.Position = function () {
								  function Position(line, col) {
								    _classCallCheck(this, Position);

								    this.line = line;
								    this.column = col;
								  }

								  Position.prototype.offset = function offset(n) {
								    return new Position(this.line, this.column + n);
								  };

								  return Position;
								}();

								var SourceLocation = exports.SourceLocation = function SourceLocation(p, start, end) {
								  _classCallCheck(this, SourceLocation);

								  this.start = start;
								  this.end = end;
								  if (p.sourceFile !== null) this.source = p.sourceFile;
								};

								// The `getLineInfo` function is mostly useful when the
								// `locations` option is off (for performance reasons) and you
								// want to find the line/column position for a given character
								// offset. `input` should be the code string that the offset refers
								// into.

								function getLineInfo(input, offset) {
								  for (var line = 1, cur = 0;;) {
								    _whitespace.lineBreakG.lastIndex = cur;
								    var match = _whitespace.lineBreakG.exec(input);
								    if (match && match.index < offset) {
								      ++line;
								      cur = match.index + match[0].length;
								    } else {
								      return new Position(line, offset - cur);
								    }
								  }
								}
							},
							"lval.js": function (exports, module, require) {
								

								var _tokentype = require("./tokentype");

								var _state = require("./state");

								var _util = require("./util");

								var pp = _state.Parser.prototype;

								// Convert existing expression atom to assignable pattern
								// if possible.

								pp.toAssignable = function (node, isBinding) {
								  if (this.options.ecmaVersion >= 6 && node) {
								    switch (node.type) {
								      case "Identifier":
								        if (this.inAsync && node.name === "await") this.raise(node.start, "Can not use 'await' as identifier inside an async function");
								        break;

								      case "ObjectPattern":
								      case "ArrayPattern":
								        break;

								      case "ObjectExpression":
								        node.type = "ObjectPattern";

								        for (var _i2 = 0, _node$properties2 = node.properties; _i2 < _node$properties2.length; _i2++) {
								          var prop = _node$properties2[_i2];
								          if (prop.kind !== "init") this.raise(prop.key.start, "Object pattern can't contain getter or setter");
								          this.toAssignable(prop.value, isBinding);
								        }

								        break;

								      case "ArrayExpression":
								        node.type = "ArrayPattern";
								        this.toAssignableList(node.elements, isBinding);
								        break;

								      case "AssignmentExpression":
								        if (node.operator === "=") {
								          node.type = "AssignmentPattern";
								          delete node.operator;
								          this.toAssignable(node.left, isBinding);
								          // falls through to AssignmentPattern
								        } else {
								          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
								          break;
								        }

								      case "AssignmentPattern":
								        break;

								      case "ParenthesizedExpression":
								        this.toAssignable(node.expression, isBinding);
								        break;

								      case "MemberExpression":
								        if (!isBinding) break;

								      default:
								        this.raise(node.start, "Assigning to rvalue");
								    }
								  }
								  return node;
								};

								// Convert list of expression atoms to binding list.

								pp.toAssignableList = function (exprList, isBinding) {
								  var end = exprList.length;
								  if (end) {
								    var last = exprList[end - 1];
								    if (last && last.type == "RestElement") {
								      --end;
								    } else if (last && last.type == "SpreadElement") {
								      last.type = "RestElement";
								      var arg = last.argument;
								      this.toAssignable(arg, isBinding);
								      --end;
								    }

								    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") this.unexpected(last.argument.start);
								  }
								  for (var i = 0; i < end; i++) {
								    var elt = exprList[i];
								    if (elt) this.toAssignable(elt, isBinding);
								  }
								  return exprList;
								};

								// Parses spread element.

								pp.parseSpread = function (refDestructuringErrors) {
								  var node = this.startNode();
								  this.next();
								  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
								  return this.finishNode(node, "SpreadElement");
								};

								pp.parseRestBinding = function () {
								  var node = this.startNode();
								  this.next();

								  // RestElement inside of a function parameter must be an identifier
								  if (this.options.ecmaVersion === 6 && this.type !== _tokentype.types.name) this.unexpected();

								  node.argument = this.parseBindingAtom();

								  return this.finishNode(node, "RestElement");
								};

								// Parses lvalue (assignable) atom.

								pp.parseBindingAtom = function () {
								  if (this.options.ecmaVersion < 6) return this.parseIdent();
								  switch (this.type) {
								    case _tokentype.types.name:
								      return this.parseIdent();

								    case _tokentype.types.bracketL:
								      var node = this.startNode();
								      this.next();
								      node.elements = this.parseBindingList(_tokentype.types.bracketR, true, true);
								      return this.finishNode(node, "ArrayPattern");

								    case _tokentype.types.braceL:
								      return this.parseObj(true);

								    default:
								      this.unexpected();
								  }
								};

								pp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
								  var elts = [],
								      first = true;
								  while (!this.eat(close)) {
								    if (first) first = false;else this.expect(_tokentype.types.comma);
								    if (allowEmpty && this.type === _tokentype.types.comma) {
								      elts.push(null);
								    } else if (allowTrailingComma && this.afterTrailingComma(close)) {
								      break;
								    } else if (this.type === _tokentype.types.ellipsis) {
								      var rest = this.parseRestBinding();
								      this.parseBindingListItem(rest);
								      elts.push(rest);
								      if (this.type === _tokentype.types.comma) this.raise(this.start, "Comma is not permitted after the rest element");
								      this.expect(close);
								      break;
								    } else {
								      var elem = this.parseMaybeDefault(this.start, this.startLoc);
								      this.parseBindingListItem(elem);
								      elts.push(elem);
								    }
								  }
								  return elts;
								};

								pp.parseBindingListItem = function (param) {
								  return param;
								};

								// Parses assignment pattern around given atom if possible.

								pp.parseMaybeDefault = function (startPos, startLoc, left) {
								  left = left || this.parseBindingAtom();
								  if (this.options.ecmaVersion < 6 || !this.eat(_tokentype.types.eq)) return left;
								  var node = this.startNodeAt(startPos, startLoc);
								  node.left = left;
								  node.right = this.parseMaybeAssign();
								  return this.finishNode(node, "AssignmentPattern");
								};

								// Verify that a node is an lval — something that can be assigned
								// to.
								// bindingType can be either:
								// 'var' indicating that the lval creates a 'var' binding
								// 'let' indicating that the lval creates a lexical ('let' or 'const') binding
								// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references

								pp.checkLVal = function (expr, bindingType, checkClashes) {
								  switch (expr.type) {
								    case "Identifier":
								      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
								      if (checkClashes) {
								        if ((0, _util.has)(checkClashes, expr.name)) this.raiseRecoverable(expr.start, "Argument name clash");
								        checkClashes[expr.name] = true;
								      }
								      if (bindingType && bindingType !== "none") {
								        if (bindingType === "var" && !this.canDeclareVarName(expr.name) || bindingType !== "var" && !this.canDeclareLexicalName(expr.name)) {
								          this.raiseRecoverable(expr.start, "Identifier '" + expr.name + "' has already been declared");
								        }
								        if (bindingType === "var") {
								          this.declareVarName(expr.name);
								        } else {
								          this.declareLexicalName(expr.name);
								        }
								      }
								      break;

								    case "MemberExpression":
								      if (bindingType) this.raiseRecoverable(expr.start, (bindingType ? "Binding" : "Assigning to") + " member expression");
								      break;

								    case "ObjectPattern":
								      for (var _i4 = 0, _expr$properties2 = expr.properties; _i4 < _expr$properties2.length; _i4++) {
								        var prop = _expr$properties2[_i4];
								        this.checkLVal(prop.value, bindingType, checkClashes);
								      }

								      break;

								    case "ArrayPattern":
								      for (var _i6 = 0, _expr$elements2 = expr.elements; _i6 < _expr$elements2.length; _i6++) {
								        var elem = _expr$elements2[_i6];
								        if (elem) this.checkLVal(elem, bindingType, checkClashes);
								      }

								      break;

								    case "AssignmentPattern":
								      this.checkLVal(expr.left, bindingType, checkClashes);
								      break;

								    case "RestElement":
								      this.checkLVal(expr.argument, bindingType, checkClashes);
								      break;

								    case "ParenthesizedExpression":
								      this.checkLVal(expr.expression, bindingType, checkClashes);
								      break;

								    default:
								      this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
								  }
								};
							},
							"node.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.Node = undefined;

								var _state = require("./state");

								var _locutil = require("./locutil");

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								var Node = exports.Node = function Node(parser, pos, loc) {
								  _classCallCheck(this, Node);

								  this.type = "";
								  this.start = pos;
								  this.end = 0;
								  if (parser.options.locations) this.loc = new _locutil.SourceLocation(parser, loc);
								  if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;
								  if (parser.options.ranges) this.range = [pos, 0];
								};

								// Start an AST node, attaching a start offset.

								var pp = _state.Parser.prototype;

								pp.startNode = function () {
								  return new Node(this, this.start, this.startLoc);
								};

								pp.startNodeAt = function (pos, loc) {
								  return new Node(this, pos, loc);
								};

								// Finish an AST node, adding `type` and `end` properties.

								function finishNodeAt(node, type, pos, loc) {
								  node.type = type;
								  node.end = pos;
								  if (this.options.locations) node.loc.end = loc;
								  if (this.options.ranges) node.range[1] = pos;
								  return node;
								}

								pp.finishNode = function (node, type) {
								  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
								};

								// Finish node at given position

								pp.finishNodeAt = function (node, type, pos, loc) {
								  return finishNodeAt.call(this, node, type, pos, loc);
								};
							},
							"options.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.defaultOptions = undefined;
								exports.getOptions = getOptions;

								var _util = require("./util");

								var _locutil = require("./locutil");

								// A second optional argument can be given to further configure
								// the parser process. These options are recognized:

								var defaultOptions = exports.defaultOptions = {
								  // `ecmaVersion` indicates the ECMAScript version to parse. Must
								  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support
								  // for strict mode, the set of reserved words, and support for
								  // new syntax features. The default is 7.
								  ecmaVersion: 7,
								  // `sourceType` indicates the mode the code should be parsed in.
								  // Can be either `"script"` or `"module"`. This influences global
								  // strict mode and parsing of `import` and `export` declarations.
								  sourceType: "script",
								  // `onInsertedSemicolon` can be a callback that will be called
								  // when a semicolon is automatically inserted. It will be passed
								  // th position of the comma as an offset, and if `locations` is
								  // enabled, it is given the location as a `{line, column}` object
								  // as second argument.
								  onInsertedSemicolon: null,
								  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
								  // trailing commas.
								  onTrailingComma: null,
								  // By default, reserved words are only enforced if ecmaVersion >= 5.
								  // Set `allowReserved` to a boolean value to explicitly turn this on
								  // an off. When this option has the value "never", reserved words
								  // and keywords can also not be used as property names.
								  allowReserved: null,
								  // When enabled, a return at the top level is not considered an
								  // error.
								  allowReturnOutsideFunction: false,
								  // When enabled, import/export statements are not constrained to
								  // appearing at the top of the program.
								  allowImportExportEverywhere: false,
								  // When enabled, hashbang directive in the beginning of file
								  // is allowed and treated as a line comment.
								  allowHashBang: false,
								  // When `locations` is on, `loc` properties holding objects with
								  // `start` and `end` properties in `{line, column}` form (with
								  // line being 1-based and column 0-based) will be attached to the
								  // nodes.
								  locations: false,
								  // A function can be passed as `onToken` option, which will
								  // cause Acorn to call that function with object in the same
								  // format as tokens returned from `tokenizer().getToken()`. Note
								  // that you are not allowed to call the parser from the
								  // callback—that will corrupt its internal state.
								  onToken: null,
								  // A function can be passed as `onComment` option, which will
								  // cause Acorn to call that function with `(block, text, start,
								  // end)` parameters whenever a comment is skipped. `block` is a
								  // boolean indicating whether this is a block (`/* */`) comment,
								  // `text` is the content of the comment, and `start` and `end` are
								  // character offsets that denote the start and end of the comment.
								  // When the `locations` option is on, two more parameters are
								  // passed, the full `{line, column}` locations of the start and
								  // end of the comments. Note that you are not allowed to call the
								  // parser from the callback—that will corrupt its internal state.
								  onComment: null,
								  // Nodes have their start and end characters offsets recorded in
								  // `start` and `end` properties (directly on the node, rather than
								  // the `loc` object, which holds line/column data. To also add a
								  // [semi-standardized][range] `range` property holding a `[start,
								  // end]` array with the same numbers, set the `ranges` option to
								  // `true`.
								  //
								  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
								  ranges: false,
								  // It is possible to parse multiple files into a single AST by
								  // passing the tree produced by parsing the first file as
								  // `program` option in subsequent parses. This will add the
								  // toplevel forms of the parsed file to the `Program` (top) node
								  // of an existing parse tree.
								  program: null,
								  // When `locations` is on, you can pass this to record the source
								  // file in every node's `loc` object.
								  sourceFile: null,
								  // This value, if given, is stored in every node, whether
								  // `locations` is on or off.
								  directSourceFile: null,
								  // When enabled, parenthesized expressions are represented by
								  // (non-standard) ParenthesizedExpression nodes
								  preserveParens: false,
								  plugins: {}

								  // Interpret and default an options object

								};function getOptions(opts) {
								  var options = {};

								  for (var opt in defaultOptions) {
								    options[opt] = opts && (0, _util.has)(opts, opt) ? opts[opt] : defaultOptions[opt];
								  }if (options.ecmaVersion >= 2015) options.ecmaVersion -= 2009;

								  if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;

								  if ((0, _util.isArray)(options.onToken)) {
								    var tokens = options.onToken;
								    options.onToken = function (token) {
								      return tokens.push(token);
								    };
								  }
								  if ((0, _util.isArray)(options.onComment)) options.onComment = pushComment(options, options.onComment);

								  return options;
								}

								function pushComment(options, array) {
								  return function (block, text, start, end, startLoc, endLoc) {
								    var comment = {
								      type: block ? "Block" : "Line",
								      value: text,
								      start: start,
								      end: end
								    };
								    if (options.locations) comment.loc = new _locutil.SourceLocation(this, startLoc, endLoc);
								    if (options.ranges) comment.range = [start, end];
								    array.push(comment);
								  };
								}
							},
							"parseutil.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.DestructuringErrors = DestructuringErrors;

								var _tokentype = require("./tokentype");

								var _state = require("./state");

								var _whitespace = require("./whitespace");

								var pp = _state.Parser.prototype;

								// ## Parser utilities

								var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)"|;)/;
								pp.strictDirective = function (start) {
								  for (;;) {
								    _whitespace.skipWhiteSpace.lastIndex = start;
								    start += _whitespace.skipWhiteSpace.exec(this.input)[0].length;
								    var match = literal.exec(this.input.slice(start));
								    if (!match) return false;
								    if ((match[1] || match[2]) == "use strict") return false;
								    start += match[0].length;
								  }
								};

								// Predicate that tests whether the next token is of the given
								// type, and if yes, consumes it as a side effect.

								pp.eat = function (type) {
								  if (this.type === type) {
								    this.next();
								    return true;
								  } else {
								    return false;
								  }
								};

								// Tests whether parsed token is a contextual keyword.

								pp.isContextual = function (name) {
								  return this.type === _tokentype.types.name && this.value === name;
								};

								// Consumes contextual keyword if possible.

								pp.eatContextual = function (name) {
								  return this.value === name && this.eat(_tokentype.types.name);
								};

								// Asserts that following token is given contextual keyword.

								pp.expectContextual = function (name) {
								  if (!this.eatContextual(name)) this.unexpected();
								};

								// Test whether a semicolon can be inserted at the current position.

								pp.canInsertSemicolon = function () {
								  return this.type === _tokentype.types.eof || this.type === _tokentype.types.braceR || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
								};

								pp.insertSemicolon = function () {
								  if (this.canInsertSemicolon()) {
								    if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
								    return true;
								  }
								};

								// Consume a semicolon, or, failing that, see if we are allowed to
								// pretend that there is a semicolon at this position.

								pp.semicolon = function () {
								  if (!this.eat(_tokentype.types.semi) && !this.insertSemicolon()) this.unexpected();
								};

								pp.afterTrailingComma = function (tokType, notNext) {
								  if (this.type == tokType) {
								    if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
								    if (!notNext) this.next();
								    return true;
								  }
								};

								// Expect a token of a given type. If found, consume it, otherwise,
								// raise an unexpected token error.

								pp.expect = function (type) {
								  this.eat(type) || this.unexpected();
								};

								// Raise an unexpected token error.

								pp.unexpected = function (pos) {
								  this.raise(pos != null ? pos : this.start, "Unexpected token");
								};

								function DestructuringErrors() {
								  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = -1;
								}

								pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
								  if (!refDestructuringErrors) return;
								  if (refDestructuringErrors.trailingComma > -1) this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
								  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
								  if (parens > -1) this.raiseRecoverable(parens, "Parenthesized pattern");
								};

								pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
								  var pos = refDestructuringErrors ? refDestructuringErrors.shorthandAssign : -1;
								  if (!andThrow) return pos >= 0;
								  if (pos > -1) this.raise(pos, "Shorthand property assignments are valid only in destructuring patterns");
								};

								pp.checkYieldAwaitInDefaultParams = function () {
								  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) this.raise(this.yieldPos, "Yield expression cannot be a default value");
								  if (this.awaitPos) this.raise(this.awaitPos, "Await expression cannot be a default value");
								};

								pp.isSimpleAssignTarget = function (expr) {
								  if (expr.type === "ParenthesizedExpression") return this.isSimpleAssignTarget(expr.expression);
								  return expr.type === "Identifier" || expr.type === "MemberExpression";
								};
							},
							"scope.js": function (exports, module, require) {
								

								var _state = require("./state");

								var _util = require("./util");

								var pp = _state.Parser.prototype;

								// Object.assign polyfill
								var assign = Object.assign || function (target) {
								  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
								    sources[_key - 1] = arguments[_key];
								  }

								  for (var _i2 = 0; _i2 < sources.length; _i2++) {
								    var source = sources[_i2];
								    for (var key in source) {
								      if ((0, _util.has)(source, key)) {
								        target[key] = source[key];
								      }
								    }
								  }

								  return target;
								};

								// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.

								pp.enterFunctionScope = function () {
								  // var: a hash of var-declared names in the current lexical scope
								  // lexical: a hash of lexically-declared names in the current lexical scope
								  // childVar: a hash of var-declared names in all child lexical scopes of the current lexical scope (within the current function scope)
								  // parentLexical: a hash of lexically-declared names in all parent lexical scopes of the current lexical scope (within the current function scope)
								  this.scopeStack.push({ var: {}, lexical: {}, childVar: {}, parentLexical: {} });
								};

								pp.exitFunctionScope = function () {
								  this.scopeStack.pop();
								};

								pp.enterLexicalScope = function () {
								  var parentScope = this.scopeStack[this.scopeStack.length - 1];
								  var childScope = { var: {}, lexical: {}, childVar: {}, parentLexical: {} };

								  this.scopeStack.push(childScope);
								  assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);
								};

								pp.exitLexicalScope = function () {
								  var childScope = this.scopeStack.pop();
								  var parentScope = this.scopeStack[this.scopeStack.length - 1];

								  assign(parentScope.childVar, childScope.var, childScope.childVar);
								};

								/**
								 * A name can be declared with `var` if there are no variables with the same name declared with `let`/`const`
								 * in the current lexical scope or any of the parent lexical scopes in this function.
								 */
								pp.canDeclareVarName = function (name) {
								  var currentScope = this.scopeStack[this.scopeStack.length - 1];

								  return !(0, _util.has)(currentScope.lexical, name) && !(0, _util.has)(currentScope.parentLexical, name);
								};

								/**
								 * A name can be declared with `let`/`const` if there are no variables with the same name declared with `let`/`const`
								 * in the current scope, and there are no variables with the same name declared with `var` in the current scope or in
								 * any child lexical scopes in this function.
								 */
								pp.canDeclareLexicalName = function (name) {
								  var currentScope = this.scopeStack[this.scopeStack.length - 1];

								  return !(0, _util.has)(currentScope.lexical, name) && !(0, _util.has)(currentScope.var, name) && !(0, _util.has)(currentScope.childVar, name);
								};

								pp.declareVarName = function (name) {
								  this.scopeStack[this.scopeStack.length - 1].var[name] = true;
								};

								pp.declareLexicalName = function (name) {
								  this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;
								};
							},
							"state.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.Parser = exports.plugins = undefined;

								var _identifier = require("./identifier");

								var _tokentype = require("./tokentype");

								var _whitespace = require("./whitespace");

								var _options = require("./options");

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								// Registered plugins
								var plugins = exports.plugins = {};

								function keywordRegexp(words) {
								  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
								}

								var Parser = exports.Parser = function () {
								  function Parser(options, input, startPos) {
								    _classCallCheck(this, Parser);

								    this.options = options = (0, _options.getOptions)(options);
								    this.sourceFile = options.sourceFile;
								    this.keywords = keywordRegexp(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : 5]);
								    var reserved = "";
								    if (!options.allowReserved) {
								      for (var v = options.ecmaVersion;; v--) {
								        if (reserved = _identifier.reservedWords[v]) break;
								      }if (options.sourceType == "module") reserved += " await";
								    }
								    this.reservedWords = keywordRegexp(reserved);
								    var reservedStrict = (reserved ? reserved + " " : "") + _identifier.reservedWords.strict;
								    this.reservedWordsStrict = keywordRegexp(reservedStrict);
								    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + " " + _identifier.reservedWords.strictBind);
								    this.input = String(input);

								    // Used to signal to callers of `readWord1` whether the word
								    // contained any escape sequences. This is needed because words with
								    // escape sequences must not be interpreted as keywords.
								    this.containsEsc = false;

								    // Load plugins
								    this.loadPlugins(options.plugins);

								    // Set up token state

								    // The current position of the tokenizer in the input.
								    if (startPos) {
								      this.pos = startPos;
								      this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
								      this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;
								    } else {
								      this.pos = this.lineStart = 0;
								      this.curLine = 1;
								    }

								    // Properties of the current token:
								    // Its type
								    this.type = _tokentype.types.eof;
								    // For tokens that include more information than their type, the value
								    this.value = null;
								    // Its start and end offset
								    this.start = this.end = this.pos;
								    // And, if locations are used, the {line, column} object
								    // corresponding to those offsets
								    this.startLoc = this.endLoc = this.curPosition();

								    // Position information for the previous token
								    this.lastTokEndLoc = this.lastTokStartLoc = null;
								    this.lastTokStart = this.lastTokEnd = this.pos;

								    // The context stack is used to superficially track syntactic
								    // context to predict whether a regular expression is allowed in a
								    // given position.
								    this.context = this.initialContext();
								    this.exprAllowed = true;

								    // Figure out if it's a module code.
								    this.inModule = options.sourceType === "module";
								    this.strict = this.inModule || this.strictDirective(this.pos);

								    // Used to signify the start of a potential arrow function
								    this.potentialArrowAt = -1;

								    // Flags to track whether we are in a function, a generator, an async function.
								    this.inFunction = this.inGenerator = this.inAsync = false;
								    // Positions to delayed-check that yield/await does not exist in default parameters.
								    this.yieldPos = this.awaitPos = 0;
								    // Labels in scope.
								    this.labels = [];

								    // If enabled, skip leading hashbang line.
								    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") this.skipLineComment(2);

								    // Scope tracking for duplicate variable names (see scope.js)
								    this.scopeStack = [];
								    this.enterFunctionScope();
								  }

								  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them


								  Parser.prototype.isKeyword = function isKeyword(word) {
								    return this.keywords.test(word);
								  };

								  Parser.prototype.isReservedWord = function isReservedWord(word) {
								    return this.reservedWords.test(word);
								  };

								  Parser.prototype.extend = function extend(name, f) {
								    this[name] = f(this[name]);
								  };

								  Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {
								    for (var name in pluginConfigs) {
								      var plugin = plugins[name];
								      if (!plugin) throw new Error("Plugin '" + name + "' not found");
								      plugin(this, pluginConfigs[name]);
								    }
								  };

								  Parser.prototype.parse = function parse() {
								    var node = this.options.program || this.startNode();
								    this.nextToken();
								    return this.parseTopLevel(node);
								  };

								  return Parser;
								}();
							},
							"statement.js": function (exports, module, require) {
								

								var _tokentype = require("./tokentype");

								var _state = require("./state");

								var _whitespace = require("./whitespace");

								var _identifier = require("./identifier");

								var _util = require("./util");

								var _parseutil = require("./parseutil");

								var pp = _state.Parser.prototype;

								// ### Statement parsing

								// Parse a program. Initializes the parser, reads any number of
								// statements, and wraps them in a Program node.  Optionally takes a
								// `program` argument.  If present, the statements will be appended
								// to its body instead of creating a new node.

								pp.parseTopLevel = function (node) {
								  var exports = {};
								  if (!node.body) node.body = [];
								  while (this.type !== _tokentype.types.eof) {
								    var stmt = this.parseStatement(true, true, exports);
								    node.body.push(stmt);
								  }
								  this.next();
								  if (this.options.ecmaVersion >= 6) {
								    node.sourceType = this.options.sourceType;
								  }
								  return this.finishNode(node, "Program");
								};

								var loopLabel = { kind: "loop" },
								    switchLabel = { kind: "switch" };

								pp.isLet = function () {
								  if (this.type !== _tokentype.types.name || this.options.ecmaVersion < 6 || this.value != "let") return false;
								  _whitespace.skipWhiteSpace.lastIndex = this.pos;
								  var skip = _whitespace.skipWhiteSpace.exec(this.input);
								  var next = this.pos + skip[0].length,
								      nextCh = this.input.charCodeAt(next);
								  if (nextCh === 91 || nextCh == 123) return true; // '{' and '['
								  if ((0, _identifier.isIdentifierStart)(nextCh, true)) {
								    var pos = next + 1;
								    while ((0, _identifier.isIdentifierChar)(this.input.charCodeAt(pos), true)) {
								      ++pos;
								    }var ident = this.input.slice(next, pos);
								    if (!this.isKeyword(ident)) return true;
								  }
								  return false;
								};

								// check 'async [no LineTerminator here] function'
								// - 'async /*foo*/ function' is OK.
								// - 'async /*\n*/ function' is invalid.
								pp.isAsyncFunction = function () {
								  if (this.type !== _tokentype.types.name || this.options.ecmaVersion < 8 || this.value != "async") return false;

								  _whitespace.skipWhiteSpace.lastIndex = this.pos;
								  var skip = _whitespace.skipWhiteSpace.exec(this.input);
								  var next = this.pos + skip[0].length;
								  return !_whitespace.lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 == this.input.length || !(0, _identifier.isIdentifierChar)(this.input.charAt(next + 8)));
								};

								// Parse a single statement.
								//
								// If expecting a statement and finding a slash operator, parse a
								// regular expression literal. This is to handle cases like
								// `if (foo) /blah/.exec(foo)`, where looking at the previous token
								// does not help.

								pp.parseStatement = function (declaration, topLevel, exports) {
								  var starttype = this.type,
								      node = this.startNode(),
								      kind = void 0;

								  if (this.isLet()) {
								    starttype = _tokentype.types._var;
								    kind = "let";
								  }

								  // Most types of statements are recognized by the keyword they
								  // start with. Many are trivial to parse, some require a bit of
								  // complexity.

								  switch (starttype) {
								    case _tokentype.types._break:case _tokentype.types._continue:
								      return this.parseBreakContinueStatement(node, starttype.keyword);
								    case _tokentype.types._debugger:
								      return this.parseDebuggerStatement(node);
								    case _tokentype.types._do:
								      return this.parseDoStatement(node);
								    case _tokentype.types._for:
								      return this.parseForStatement(node);
								    case _tokentype.types._function:
								      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();
								      return this.parseFunctionStatement(node, false);
								    case _tokentype.types._class:
								      if (!declaration) this.unexpected();
								      return this.parseClass(node, true);
								    case _tokentype.types._if:
								      return this.parseIfStatement(node);
								    case _tokentype.types._return:
								      return this.parseReturnStatement(node);
								    case _tokentype.types._switch:
								      return this.parseSwitchStatement(node);
								    case _tokentype.types._throw:
								      return this.parseThrowStatement(node);
								    case _tokentype.types._try:
								      return this.parseTryStatement(node);
								    case _tokentype.types._const:case _tokentype.types._var:
								      kind = kind || this.value;
								      if (!declaration && kind != "var") this.unexpected();
								      return this.parseVarStatement(node, kind);
								    case _tokentype.types._while:
								      return this.parseWhileStatement(node);
								    case _tokentype.types._with:
								      return this.parseWithStatement(node);
								    case _tokentype.types.braceL:
								      return this.parseBlock();
								    case _tokentype.types.semi:
								      return this.parseEmptyStatement(node);
								    case _tokentype.types._export:
								    case _tokentype.types._import:
								      if (!this.options.allowImportExportEverywhere) {
								        if (!topLevel) this.raise(this.start, "'import' and 'export' may only appear at the top level");
								        if (!this.inModule) this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
								      }
								      return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node, exports);

								    // If the statement does not start with a statement keyword or a
								    // brace, it's an ExpressionStatement or LabeledStatement. We
								    // simply start parsing an expression, and afterwards, if the
								    // next token is a colon and the expression was a simple
								    // Identifier node, we switch to interpreting it as a label.
								    default:
								      if (this.isAsyncFunction() && declaration) {
								        this.next();
								        return this.parseFunctionStatement(node, true);
								      }

								      var maybeName = this.value,
								          expr = this.parseExpression();
								      if (starttype === _tokentype.types.name && expr.type === "Identifier" && this.eat(_tokentype.types.colon)) return this.parseLabeledStatement(node, maybeName, expr);else return this.parseExpressionStatement(node, expr);
								  }
								};

								pp.parseBreakContinueStatement = function (node, keyword) {
								  var isBreak = keyword == "break";
								  this.next();
								  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== _tokentype.types.name) this.unexpected();else {
								    node.label = this.parseIdent();
								    this.semicolon();
								  }

								  // Verify that there is an actual destination to break or
								  // continue to.
								  var i = 0;
								  for (; i < this.labels.length; ++i) {
								    var lab = this.labels[i];
								    if (node.label == null || lab.name === node.label.name) {
								      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
								      if (node.label && isBreak) break;
								    }
								  }
								  if (i === this.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
								  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
								};

								pp.parseDebuggerStatement = function (node) {
								  this.next();
								  this.semicolon();
								  return this.finishNode(node, "DebuggerStatement");
								};

								pp.parseDoStatement = function (node) {
								  this.next();
								  this.labels.push(loopLabel);
								  node.body = this.parseStatement(false);
								  this.labels.pop();
								  this.expect(_tokentype.types._while);
								  node.test = this.parseParenExpression();
								  if (this.options.ecmaVersion >= 6) this.eat(_tokentype.types.semi);else this.semicolon();
								  return this.finishNode(node, "DoWhileStatement");
								};

								// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
								// loop is non-trivial. Basically, we have to parse the init `var`
								// statement or expression, disallowing the `in` operator (see
								// the second parameter to `parseExpression`), and then check
								// whether the next token is `in` or `of`. When there is no init
								// part (semicolon immediately after the opening parenthesis), it
								// is a regular `for` loop.

								pp.parseForStatement = function (node) {
								  this.next();
								  this.labels.push(loopLabel);
								  this.enterLexicalScope();
								  this.expect(_tokentype.types.parenL);
								  if (this.type === _tokentype.types.semi) return this.parseFor(node, null);
								  var isLet = this.isLet();
								  if (this.type === _tokentype.types._var || this.type === _tokentype.types._const || isLet) {
								    var _init = this.startNode(),
								        kind = isLet ? "let" : this.value;
								    this.next();
								    this.parseVar(_init, true, kind);
								    this.finishNode(_init, "VariableDeclaration");
								    if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && _init.declarations.length === 1 && !(kind !== "var" && _init.declarations[0].init)) return this.parseForIn(node, _init);
								    return this.parseFor(node, _init);
								  }
								  var refDestructuringErrors = new _parseutil.DestructuringErrors();
								  var init = this.parseExpression(true, refDestructuringErrors);
								  if (this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
								    this.toAssignable(init);
								    this.checkLVal(init);
								    this.checkPatternErrors(refDestructuringErrors, true);
								    return this.parseForIn(node, init);
								  } else {
								    this.checkExpressionErrors(refDestructuringErrors, true);
								  }
								  return this.parseFor(node, init);
								};

								pp.parseFunctionStatement = function (node, isAsync) {
								  this.next();
								  return this.parseFunction(node, true, false, isAsync);
								};

								pp.isFunction = function () {
								  return this.type === _tokentype.types._function || this.isAsyncFunction();
								};

								pp.parseIfStatement = function (node) {
								  this.next();
								  node.test = this.parseParenExpression();
								  // allow function declarations in branches, but only in non-strict mode
								  node.consequent = this.parseStatement(!this.strict && this.isFunction());
								  node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement(!this.strict && this.isFunction()) : null;
								  return this.finishNode(node, "IfStatement");
								};

								pp.parseReturnStatement = function (node) {
								  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, "'return' outside of function");
								  this.next();

								  // In `return` (and `break`/`continue`), the keywords with
								  // optional arguments, we eagerly look for a semicolon or the
								  // possibility to insert one.

								  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.argument = null;else {
								    node.argument = this.parseExpression();this.semicolon();
								  }
								  return this.finishNode(node, "ReturnStatement");
								};

								pp.parseSwitchStatement = function (node) {
								  this.next();
								  node.discriminant = this.parseParenExpression();
								  node.cases = [];
								  this.expect(_tokentype.types.braceL);
								  this.labels.push(switchLabel);
								  this.enterLexicalScope();

								  // Statements under must be grouped (by label) in SwitchCase
								  // nodes. `cur` is used to keep the node that we are currently
								  // adding statements to.

								  var cur = void 0;
								  for (var sawDefault = false; this.type != _tokentype.types.braceR;) {
								    if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {
								      var isCase = this.type === _tokentype.types._case;
								      if (cur) this.finishNode(cur, "SwitchCase");
								      node.cases.push(cur = this.startNode());
								      cur.consequent = [];
								      this.next();
								      if (isCase) {
								        cur.test = this.parseExpression();
								      } else {
								        if (sawDefault) this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
								        sawDefault = true;
								        cur.test = null;
								      }
								      this.expect(_tokentype.types.colon);
								    } else {
								      if (!cur) this.unexpected();
								      cur.consequent.push(this.parseStatement(true));
								    }
								  }
								  this.exitLexicalScope();
								  if (cur) this.finishNode(cur, "SwitchCase");
								  this.next(); // Closing brace
								  this.labels.pop();
								  return this.finishNode(node, "SwitchStatement");
								};

								pp.parseThrowStatement = function (node) {
								  this.next();
								  if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, "Illegal newline after throw");
								  node.argument = this.parseExpression();
								  this.semicolon();
								  return this.finishNode(node, "ThrowStatement");
								};

								// Reused empty array added for node fields that are always empty.

								var empty = [];

								pp.parseTryStatement = function (node) {
								  this.next();
								  node.block = this.parseBlock();
								  node.handler = null;
								  if (this.type === _tokentype.types._catch) {
								    var clause = this.startNode();
								    this.next();
								    this.expect(_tokentype.types.parenL);
								    clause.param = this.parseBindingAtom();
								    this.enterLexicalScope();
								    this.checkLVal(clause.param, "let");
								    this.expect(_tokentype.types.parenR);
								    clause.body = this.parseBlock(false);
								    this.exitLexicalScope();
								    node.handler = this.finishNode(clause, "CatchClause");
								  }
								  node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;
								  if (!node.handler && !node.finalizer) this.raise(node.start, "Missing catch or finally clause");
								  return this.finishNode(node, "TryStatement");
								};

								pp.parseVarStatement = function (node, kind) {
								  this.next();
								  this.parseVar(node, false, kind);
								  this.semicolon();
								  return this.finishNode(node, "VariableDeclaration");
								};

								pp.parseWhileStatement = function (node) {
								  this.next();
								  node.test = this.parseParenExpression();
								  this.labels.push(loopLabel);
								  node.body = this.parseStatement(false);
								  this.labels.pop();
								  return this.finishNode(node, "WhileStatement");
								};

								pp.parseWithStatement = function (node) {
								  if (this.strict) this.raise(this.start, "'with' in strict mode");
								  this.next();
								  node.object = this.parseParenExpression();
								  node.body = this.parseStatement(false);
								  return this.finishNode(node, "WithStatement");
								};

								pp.parseEmptyStatement = function (node) {
								  this.next();
								  return this.finishNode(node, "EmptyStatement");
								};

								pp.parseLabeledStatement = function (node, maybeName, expr) {
								  for (var _i2 = 0, _labels2 = this.labels; _i2 < _labels2.length; _i2++) {
								    var label = _labels2[_i2];
								    if (label.name === maybeName) this.raise(expr.start, "Label '" + maybeName + "' is already declared");
								  }

								  var kind = this.type.isLoop ? "loop" : this.type === _tokentype.types._switch ? "switch" : null;
								  for (var i = this.labels.length - 1; i >= 0; i--) {
								    var _label = this.labels[i];
								    if (_label.statementStart == node.start) {
								      _label.statementStart = this.start;
								      _label.kind = kind;
								    } else break;
								  }
								  this.labels.push({ name: maybeName, kind: kind, statementStart: this.start });
								  node.body = this.parseStatement(true);
								  if (node.body.type == "ClassDeclaration" || node.body.type == "VariableDeclaration" && node.body.kind != "var" || node.body.type == "FunctionDeclaration" && (this.strict || node.body.generator)) this.raiseRecoverable(node.body.start, "Invalid labeled declaration");
								  this.labels.pop();
								  node.label = expr;
								  return this.finishNode(node, "LabeledStatement");
								};

								pp.parseExpressionStatement = function (node, expr) {
								  node.expression = expr;
								  this.semicolon();
								  return this.finishNode(node, "ExpressionStatement");
								};

								// Parse a semicolon-enclosed block of statements, handling `"use
								// strict"` declarations when `allowStrict` is true (used for
								// function bodies).

								pp.parseBlock = function () {
								  var createNewLexicalScope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

								  var node = this.startNode();
								  node.body = [];
								  this.expect(_tokentype.types.braceL);
								  if (createNewLexicalScope) {
								    this.enterLexicalScope();
								  }
								  while (!this.eat(_tokentype.types.braceR)) {
								    var stmt = this.parseStatement(true);
								    node.body.push(stmt);
								  }
								  if (createNewLexicalScope) {
								    this.exitLexicalScope();
								  }
								  return this.finishNode(node, "BlockStatement");
								};

								// Parse a regular `for` loop. The disambiguation code in
								// `parseStatement` will already have parsed the init statement or
								// expression.

								pp.parseFor = function (node, init) {
								  node.init = init;
								  this.expect(_tokentype.types.semi);
								  node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();
								  this.expect(_tokentype.types.semi);
								  node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();
								  this.expect(_tokentype.types.parenR);
								  this.exitLexicalScope();
								  node.body = this.parseStatement(false);
								  this.labels.pop();
								  return this.finishNode(node, "ForStatement");
								};

								// Parse a `for`/`in` and `for`/`of` loop, which are almost
								// same from parser's perspective.

								pp.parseForIn = function (node, init) {
								  var type = this.type === _tokentype.types._in ? "ForInStatement" : "ForOfStatement";
								  this.next();
								  node.left = init;
								  node.right = this.parseExpression();
								  this.expect(_tokentype.types.parenR);
								  this.exitLexicalScope();
								  node.body = this.parseStatement(false);
								  this.labels.pop();
								  return this.finishNode(node, type);
								};

								// Parse a list of variable declarations.

								pp.parseVar = function (node, isFor, kind) {
								  node.declarations = [];
								  node.kind = kind;
								  for (;;) {
								    var decl = this.startNode();
								    this.parseVarId(decl, kind);
								    if (this.eat(_tokentype.types.eq)) {
								      decl.init = this.parseMaybeAssign(isFor);
								    } else if (kind === "const" && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
								      this.unexpected();
								    } else if (decl.id.type != "Identifier" && !(isFor && (this.type === _tokentype.types._in || this.isContextual("of")))) {
								      this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
								    } else {
								      decl.init = null;
								    }
								    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
								    if (!this.eat(_tokentype.types.comma)) break;
								  }
								  return node;
								};

								pp.parseVarId = function (decl, kind) {
								  decl.id = this.parseBindingAtom(kind);
								  this.checkLVal(decl.id, kind, false);
								};

								// Parse a function declaration or literal (depending on the
								// `isStatement` parameter).

								pp.parseFunction = function (node, isStatement, allowExpressionBody, isAsync) {
								  this.initFunction(node);
								  if (this.options.ecmaVersion >= 6 && !isAsync) node.generator = this.eat(_tokentype.types.star);
								  if (this.options.ecmaVersion >= 8) node.async = !!isAsync;

								  if (isStatement) {
								    node.id = isStatement === "nullableID" && this.type != _tokentype.types.name ? null : this.parseIdent();
								    if (node.id) {
								      this.checkLVal(node.id, "var");
								    }
								  }

								  var oldInGen = this.inGenerator,
								      oldInAsync = this.inAsync,
								      oldYieldPos = this.yieldPos,
								      oldAwaitPos = this.awaitPos,
								      oldInFunc = this.inFunction;
								  this.inGenerator = node.generator;
								  this.inAsync = node.async;
								  this.yieldPos = 0;
								  this.awaitPos = 0;
								  this.inFunction = true;
								  this.enterFunctionScope();

								  if (!isStatement) node.id = this.type == _tokentype.types.name ? this.parseIdent() : null;

								  this.parseFunctionParams(node);
								  this.parseFunctionBody(node, allowExpressionBody);

								  this.inGenerator = oldInGen;
								  this.inAsync = oldInAsync;
								  this.yieldPos = oldYieldPos;
								  this.awaitPos = oldAwaitPos;
								  this.inFunction = oldInFunc;
								  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
								};

								pp.parseFunctionParams = function (node) {
								  this.expect(_tokentype.types.parenL);
								  node.params = this.parseBindingList(_tokentype.types.parenR, false, this.options.ecmaVersion >= 8);
								  this.checkYieldAwaitInDefaultParams();
								};

								// Parse a class declaration or literal (depending on the
								// `isStatement` parameter).

								pp.parseClass = function (node, isStatement) {
								  this.next();

								  this.parseClassId(node, isStatement);
								  this.parseClassSuper(node);
								  var classBody = this.startNode();
								  var hadConstructor = false;
								  classBody.body = [];
								  this.expect(_tokentype.types.braceL);
								  while (!this.eat(_tokentype.types.braceR)) {
								    if (this.eat(_tokentype.types.semi)) continue;
								    var method = this.startNode();
								    var isGenerator = this.eat(_tokentype.types.star);
								    var isAsync = false;
								    var isMaybeStatic = this.type === _tokentype.types.name && this.value === "static";
								    this.parsePropertyName(method);
								    method.static = isMaybeStatic && this.type !== _tokentype.types.parenL;
								    if (method.static) {
								      if (isGenerator) this.unexpected();
								      isGenerator = this.eat(_tokentype.types.star);
								      this.parsePropertyName(method);
								    }
								    if (this.options.ecmaVersion >= 8 && !isGenerator && !method.computed && method.key.type === "Identifier" && method.key.name === "async" && this.type !== _tokentype.types.parenL && !this.canInsertSemicolon()) {
								      isAsync = true;
								      this.parsePropertyName(method);
								    }
								    method.kind = "method";
								    var isGetSet = false;
								    if (!method.computed) {
								      var key = method.key;

								      if (!isGenerator && !isAsync && key.type === "Identifier" && this.type !== _tokentype.types.parenL && (key.name === "get" || key.name === "set")) {
								        isGetSet = true;
								        method.kind = key.name;
								        key = this.parsePropertyName(method);
								      }
								      if (!method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
								        if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
								        if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
								        if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
								        if (isAsync) this.raise(key.start, "Constructor can't be an async method");
								        method.kind = "constructor";
								        hadConstructor = true;
								      }
								    }
								    this.parseClassMethod(classBody, method, isGenerator, isAsync);
								    if (isGetSet) {
								      var paramCount = method.kind === "get" ? 0 : 1;
								      if (method.value.params.length !== paramCount) {
								        var start = method.value.start;
								        if (method.kind === "get") this.raiseRecoverable(start, "getter should have no params");else this.raiseRecoverable(start, "setter should have exactly one param");
								      } else {
								        if (method.kind === "set" && method.value.params[0].type === "RestElement") this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
								      }
								    }
								  }
								  node.body = this.finishNode(classBody, "ClassBody");
								  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
								};

								pp.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
								  method.value = this.parseMethod(isGenerator, isAsync);
								  classBody.body.push(this.finishNode(method, "MethodDefinition"));
								};

								pp.parseClassId = function (node, isStatement) {
								  node.id = this.type === _tokentype.types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;
								};

								pp.parseClassSuper = function (node) {
								  node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts() : null;
								};

								// Parses module export declaration.

								pp.parseExport = function (node, exports) {
								  this.next();
								  // export * from '...'
								  if (this.eat(_tokentype.types.star)) {
								    this.expectContextual("from");
								    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
								    this.semicolon();
								    return this.finishNode(node, "ExportAllDeclaration");
								  }
								  if (this.eat(_tokentype.types._default)) {
								    // export default ...
								    this.checkExport(exports, "default", this.lastTokStart);
								    var isAsync = void 0;
								    if (this.type === _tokentype.types._function || (isAsync = this.isAsyncFunction())) {
								      var fNode = this.startNode();
								      this.next();
								      if (isAsync) this.next();
								      node.declaration = this.parseFunction(fNode, "nullableID", false, isAsync);
								    } else if (this.type === _tokentype.types._class) {
								      var cNode = this.startNode();
								      node.declaration = this.parseClass(cNode, "nullableID");
								    } else {
								      node.declaration = this.parseMaybeAssign();
								      this.semicolon();
								    }
								    return this.finishNode(node, "ExportDefaultDeclaration");
								  }
								  // export var|const|let|function|class ...
								  if (this.shouldParseExportStatement()) {
								    node.declaration = this.parseStatement(true);
								    if (node.declaration.type === "VariableDeclaration") this.checkVariableExport(exports, node.declaration.declarations);else this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
								    node.specifiers = [];
								    node.source = null;
								  } else {
								    // export { x, y as z } [from '...']
								    node.declaration = null;
								    node.specifiers = this.parseExportSpecifiers(exports);
								    if (this.eatContextual("from")) {
								      node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
								    } else {
								      // check for keywords used as local names
								      for (var _i4 = 0, _node$specifiers2 = node.specifiers; _i4 < _node$specifiers2.length; _i4++) {
								        var spec = _node$specifiers2[_i4];
								        this.checkUnreserved(spec.local);
								      }

								      node.source = null;
								    }
								    this.semicolon();
								  }
								  return this.finishNode(node, "ExportNamedDeclaration");
								};

								pp.checkExport = function (exports, name, pos) {
								  if (!exports) return;
								  if ((0, _util.has)(exports, name)) this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
								  exports[name] = true;
								};

								pp.checkPatternExport = function (exports, pat) {
								  var type = pat.type;
								  if (type == "Identifier") this.checkExport(exports, pat.name, pat.start);else if (type == "ObjectPattern") for (var _i6 = 0, _pat$properties2 = pat.properties; _i6 < _pat$properties2.length; _i6++) {
								      var prop = _pat$properties2[_i6];
								      this.checkPatternExport(exports, prop.value);
								    } else if (type == "ArrayPattern") for (var _i8 = 0, _pat$elements2 = pat.elements; _i8 < _pat$elements2.length; _i8++) {
								      var elt = _pat$elements2[_i8];
								      if (elt) this.checkPatternExport(exports, elt);
								    } else if (type == "AssignmentPattern") this.checkPatternExport(exports, pat.left);else if (type == "ParenthesizedExpression") this.checkPatternExport(exports, pat.expression);
								};

								pp.checkVariableExport = function (exports, decls) {
								  if (!exports) return;

								  for (var _i10 = 0; _i10 < decls.length; _i10++) {
								    var decl = decls[_i10];
								    this.checkPatternExport(exports, decl.id);
								  }
								};

								pp.shouldParseExportStatement = function () {
								  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
								};

								// Parses a comma-separated list of module exports.

								pp.parseExportSpecifiers = function (exports) {
								  var nodes = [],
								      first = true;
								  // export { x, y as z } [from '...']
								  this.expect(_tokentype.types.braceL);
								  while (!this.eat(_tokentype.types.braceR)) {
								    if (!first) {
								      this.expect(_tokentype.types.comma);
								      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
								    } else first = false;

								    var node = this.startNode();
								    node.local = this.parseIdent(true);
								    node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
								    this.checkExport(exports, node.exported.name, node.exported.start);
								    nodes.push(this.finishNode(node, "ExportSpecifier"));
								  }
								  return nodes;
								};

								// Parses import declaration.

								pp.parseImport = function (node) {
								  this.next();
								  // import '...'
								  if (this.type === _tokentype.types.string) {
								    node.specifiers = empty;
								    node.source = this.parseExprAtom();
								  } else {
								    node.specifiers = this.parseImportSpecifiers();
								    this.expectContextual("from");
								    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
								  }
								  this.semicolon();
								  return this.finishNode(node, "ImportDeclaration");
								};

								// Parses a comma-separated list of module imports.

								pp.parseImportSpecifiers = function () {
								  var nodes = [],
								      first = true;
								  if (this.type === _tokentype.types.name) {
								    // import defaultObj, { x, y as z } from '...'
								    var node = this.startNode();
								    node.local = this.parseIdent();
								    this.checkLVal(node.local, "let");
								    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
								    if (!this.eat(_tokentype.types.comma)) return nodes;
								  }
								  if (this.type === _tokentype.types.star) {
								    var _node = this.startNode();
								    this.next();
								    this.expectContextual("as");
								    _node.local = this.parseIdent();
								    this.checkLVal(_node.local, "let");
								    nodes.push(this.finishNode(_node, "ImportNamespaceSpecifier"));
								    return nodes;
								  }
								  this.expect(_tokentype.types.braceL);
								  while (!this.eat(_tokentype.types.braceR)) {
								    if (!first) {
								      this.expect(_tokentype.types.comma);
								      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
								    } else first = false;

								    var _node2 = this.startNode();
								    _node2.imported = this.parseIdent(true);
								    if (this.eatContextual("as")) {
								      _node2.local = this.parseIdent();
								    } else {
								      this.checkUnreserved(_node2.imported);
								      _node2.local = _node2.imported;
								    }
								    this.checkLVal(_node2.local, "let");
								    nodes.push(this.finishNode(_node2, "ImportSpecifier"));
								  }
								  return nodes;
								};
							},
							"tokencontext.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.types = exports.TokContext = undefined;

								var _state = require("./state");

								var _tokentype = require("./tokentype");

								var _whitespace = require("./whitespace");

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // The algorithm used to determine whether a regexp can appear at a
								// given point in the program is loosely based on sweet.js' approach.
								// See https://github.com/mozilla/sweet.js/wiki/design

								var TokContext = exports.TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
								  _classCallCheck(this, TokContext);

								  this.token = token;
								  this.isExpr = !!isExpr;
								  this.preserveSpace = !!preserveSpace;
								  this.override = override;
								  this.generator = !!generator;
								};

								var types = exports.types = {
								  b_stat: new TokContext("{", false),
								  b_expr: new TokContext("{", true),
								  b_tmpl: new TokContext("${", false),
								  p_stat: new TokContext("(", false),
								  p_expr: new TokContext("(", true),
								  q_tmpl: new TokContext("`", true, true, function (p) {
								    return p.tryReadTemplateToken();
								  }),
								  f_stat: new TokContext("function", false),
								  f_expr: new TokContext("function", true),
								  f_expr_gen: new TokContext("function", true, false, null, true),
								  f_gen: new TokContext("function", false, false, null, true)
								};

								var pp = _state.Parser.prototype;

								pp.initialContext = function () {
								  return [types.b_stat];
								};

								pp.braceIsBlock = function (prevType) {
								  var parent = this.curContext();
								  if (parent === types.f_expr || parent === types.f_stat) return true;
								  if (prevType === _tokentype.types.colon && (parent === types.b_stat || parent === types.b_expr)) return !parent.isExpr;

								  // The check for `tt.name && exprAllowed` detects whether we are
								  // after a `yield` or `of` construct. See the `updateContext` for
								  // `tt.name`.
								  if (prevType === _tokentype.types._return || prevType == _tokentype.types.name && this.exprAllowed) return _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
								  if (prevType === _tokentype.types._else || prevType === _tokentype.types.semi || prevType === _tokentype.types.eof || prevType === _tokentype.types.parenR || prevType == _tokentype.types.arrow) return true;
								  if (prevType == _tokentype.types.braceL) return parent === types.b_stat;
								  if (prevType == _tokentype.types._var || prevType == _tokentype.types.name) return false;
								  return !this.exprAllowed;
								};

								pp.inGeneratorContext = function () {
								  for (var i = this.context.length - 1; i >= 1; i--) {
								    var context = this.context[i];
								    if (context.token === "function") return context.generator;
								  }
								  return false;
								};

								pp.updateContext = function (prevType) {
								  var update = void 0,
								      type = this.type;
								  if (type.keyword && prevType == _tokentype.types.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;
								};

								// Token-specific context update code

								_tokentype.types.parenR.updateContext = _tokentype.types.braceR.updateContext = function () {
								  if (this.context.length == 1) {
								    this.exprAllowed = true;
								    return;
								  }
								  var out = this.context.pop();
								  if (out === types.b_stat && this.curContext().token === "function") {
								    out = this.context.pop();
								  }
								  this.exprAllowed = !out.isExpr;
								};

								_tokentype.types.braceL.updateContext = function (prevType) {
								  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
								  this.exprAllowed = true;
								};

								_tokentype.types.dollarBraceL.updateContext = function () {
								  this.context.push(types.b_tmpl);
								  this.exprAllowed = true;
								};

								_tokentype.types.parenL.updateContext = function (prevType) {
								  var statementParens = prevType === _tokentype.types._if || prevType === _tokentype.types._for || prevType === _tokentype.types._with || prevType === _tokentype.types._while;
								  this.context.push(statementParens ? types.p_stat : types.p_expr);
								  this.exprAllowed = true;
								};

								_tokentype.types.incDec.updateContext = function () {
								  // tokExprAllowed stays unchanged
								};

								_tokentype.types._function.updateContext = _tokentype.types._class.updateContext = function (prevType) {
								  if (prevType.beforeExpr && prevType !== _tokentype.types.semi && prevType !== _tokentype.types._else && !((prevType === _tokentype.types.colon || prevType === _tokentype.types.braceL) && this.curContext() === types.b_stat)) this.context.push(types.f_expr);else this.context.push(types.f_stat);
								  this.exprAllowed = false;
								};

								_tokentype.types.backQuote.updateContext = function () {
								  if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);
								  this.exprAllowed = false;
								};

								_tokentype.types.star.updateContext = function (prevType) {
								  if (prevType == _tokentype.types._function) {
								    var index = this.context.length - 1;
								    if (this.context[index] === types.f_expr) this.context[index] = types.f_expr_gen;else this.context[index] = types.f_gen;
								  }
								  this.exprAllowed = true;
								};

								_tokentype.types.name.updateContext = function (prevType) {
								  var allowed = false;
								  if (this.options.ecmaVersion >= 6) {
								    if (this.value == "of" && !this.exprAllowed || this.value == "yield" && this.inGeneratorContext()) allowed = true;
								  }
								  this.exprAllowed = allowed;
								};
							},
							"tokenize.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.Token = undefined;

								var _identifier = require("./identifier");

								var _tokentype = require("./tokentype");

								var _state = require("./state");

								var _locutil = require("./locutil");

								var _whitespace = require("./whitespace");

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								// Object type used to represent tokens. Note that normally, tokens
								// simply exist as properties on the parser object. This is only
								// used for the onToken callback and the external tokenizer.

								var Token = exports.Token = function Token(p) {
								  _classCallCheck(this, Token);

								  this.type = p.type;
								  this.value = p.value;
								  this.start = p.start;
								  this.end = p.end;
								  if (p.options.locations) this.loc = new _locutil.SourceLocation(p, p.startLoc, p.endLoc);
								  if (p.options.ranges) this.range = [p.start, p.end];
								};

								// ## Tokenizer

								var pp = _state.Parser.prototype;

								// Are we running under Rhino?
								var isRhino = typeof Packages == "object" && Object.prototype.toString.call(Packages) == "[object JavaPackage]";

								// Move to the next token

								pp.next = function () {
								  if (this.options.onToken) this.options.onToken(new Token(this));

								  this.lastTokEnd = this.end;
								  this.lastTokStart = this.start;
								  this.lastTokEndLoc = this.endLoc;
								  this.lastTokStartLoc = this.startLoc;
								  this.nextToken();
								};

								pp.getToken = function () {
								  this.next();
								  return new Token(this);
								};

								// If we're in an ES6 environment, make parsers iterable
								if (typeof Symbol !== "undefined") pp[Symbol.iterator] = function () {
								  var _this = this;

								  return {
								    next: function next() {
								      var token = _this.getToken();
								      return {
								        done: token.type === _tokentype.types.eof,
								        value: token
								      };
								    }
								  };
								};

								// Toggle strict mode. Re-reads the next number or string to please
								// pedantic tests (`"use strict"; 010;` should fail).

								pp.curContext = function () {
								  return this.context[this.context.length - 1];
								};

								// Read a single token, updating the parser object's token-related
								// properties.

								pp.nextToken = function () {
								  var curContext = this.curContext();
								  if (!curContext || !curContext.preserveSpace) this.skipSpace();

								  this.start = this.pos;
								  if (this.options.locations) this.startLoc = this.curPosition();
								  if (this.pos >= this.input.length) return this.finishToken(_tokentype.types.eof);

								  if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());
								};

								pp.readToken = function (code) {
								  // Identifier or keyword. '\uXXXX' sequences are allowed in
								  // identifiers, so '\' also dispatches to that.
								  if ((0, _identifier.isIdentifierStart)(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */) return this.readWord();

								  return this.getTokenFromCode(code);
								};

								pp.fullCharCodeAtPos = function () {
								  var code = this.input.charCodeAt(this.pos);
								  if (code <= 0xd7ff || code >= 0xe000) return code;
								  var next = this.input.charCodeAt(this.pos + 1);
								  return (code << 10) + next - 0x35fdc00;
								};

								pp.skipBlockComment = function () {
								  var startLoc = this.options.onComment && this.curPosition();
								  var start = this.pos,
								      end = this.input.indexOf("*/", this.pos += 2);
								  if (end === -1) this.raise(this.pos - 2, "Unterminated comment");
								  this.pos = end + 2;
								  if (this.options.locations) {
								    _whitespace.lineBreakG.lastIndex = start;
								    var match = void 0;
								    while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.pos) {
								      ++this.curLine;
								      this.lineStart = match.index + match[0].length;
								    }
								  }
								  if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
								};

								pp.skipLineComment = function (startSkip) {
								  var start = this.pos;
								  var startLoc = this.options.onComment && this.curPosition();
								  var ch = this.input.charCodeAt(this.pos += startSkip);
								  while (this.pos < this.input.length && !(0, _whitespace.isNewLine)(ch)) {
								    ch = this.input.charCodeAt(++this.pos);
								  }
								  if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
								};

								// Called at the start of the parse and after every token. Skips
								// whitespace and comments, and.

								pp.skipSpace = function () {
								  loop: while (this.pos < this.input.length) {
								    var ch = this.input.charCodeAt(this.pos);
								    switch (ch) {
								      case 32:case 160:
								        // ' '
								        ++this.pos;
								        break;
								      case 13:
								        if (this.input.charCodeAt(this.pos + 1) === 10) {
								          ++this.pos;
								        }
								      case 10:case 8232:case 8233:
								        ++this.pos;
								        if (this.options.locations) {
								          ++this.curLine;
								          this.lineStart = this.pos;
								        }
								        break;
								      case 47:
								        // '/'
								        switch (this.input.charCodeAt(this.pos + 1)) {
								          case 42:
								            // '*'
								            this.skipBlockComment();
								            break;
								          case 47:
								            this.skipLineComment(2);
								            break;
								          default:
								            break loop;
								        }
								        break;
								      default:
								        if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
								          ++this.pos;
								        } else {
								          break loop;
								        }
								    }
								  }
								};

								// Called at the end of every token. Sets `end`, `val`, and
								// maintains `context` and `exprAllowed`, and skips the space after
								// the token, so that the next one's `start` will point at the
								// right position.

								pp.finishToken = function (type, val) {
								  this.end = this.pos;
								  if (this.options.locations) this.endLoc = this.curPosition();
								  var prevType = this.type;
								  this.type = type;
								  this.value = val;

								  this.updateContext(prevType);
								};

								// ### Token reading

								// This is the function that is called to fetch the next token. It
								// is somewhat obscure, because it works in character codes rather
								// than characters, and because operator parsing has been inlined
								// into it.
								//
								// All in the name of speed.
								//
								pp.readToken_dot = function () {
								  var next = this.input.charCodeAt(this.pos + 1);
								  if (next >= 48 && next <= 57) return this.readNumber(true);
								  var next2 = this.input.charCodeAt(this.pos + 2);
								  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
								    // 46 = dot '.'
								    this.pos += 3;
								    return this.finishToken(_tokentype.types.ellipsis);
								  } else {
								    ++this.pos;
								    return this.finishToken(_tokentype.types.dot);
								  }
								};

								pp.readToken_slash = function () {
								  // '/'
								  var next = this.input.charCodeAt(this.pos + 1);
								  if (this.exprAllowed) {
								    ++this.pos;return this.readRegexp();
								  }
								  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
								  return this.finishOp(_tokentype.types.slash, 1);
								};

								pp.readToken_mult_modulo_exp = function (code) {
								  // '%*'
								  var next = this.input.charCodeAt(this.pos + 1);
								  var size = 1;
								  var tokentype = code === 42 ? _tokentype.types.star : _tokentype.types.modulo;

								  // exponentiation operator ** and **=
								  if (this.options.ecmaVersion >= 7 && next === 42) {
								    ++size;
								    tokentype = _tokentype.types.starstar;
								    next = this.input.charCodeAt(this.pos + 2);
								  }

								  if (next === 61) return this.finishOp(_tokentype.types.assign, size + 1);
								  return this.finishOp(tokentype, size);
								};

								pp.readToken_pipe_amp = function (code) {
								  // '|&'
								  var next = this.input.charCodeAt(this.pos + 1);
								  if (next === code) return this.finishOp(code === 124 ? _tokentype.types.logicalOR : _tokentype.types.logicalAND, 2);
								  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
								  return this.finishOp(code === 124 ? _tokentype.types.bitwiseOR : _tokentype.types.bitwiseAND, 1);
								};

								pp.readToken_caret = function () {
								  // '^'
								  var next = this.input.charCodeAt(this.pos + 1);
								  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
								  return this.finishOp(_tokentype.types.bitwiseXOR, 1);
								};

								pp.readToken_plus_min = function (code) {
								  // '+-'
								  var next = this.input.charCodeAt(this.pos + 1);
								  if (next === code) {
								    if (next == 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 62 && (this.lastTokEnd === 0 || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
								      // A `-->` line comment
								      this.skipLineComment(3);
								      this.skipSpace();
								      return this.nextToken();
								    }
								    return this.finishOp(_tokentype.types.incDec, 2);
								  }
								  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
								  return this.finishOp(_tokentype.types.plusMin, 1);
								};

								pp.readToken_lt_gt = function (code) {
								  // '<>'
								  var next = this.input.charCodeAt(this.pos + 1);
								  var size = 1;
								  if (next === code) {
								    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
								    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(_tokentype.types.assign, size + 1);
								    return this.finishOp(_tokentype.types.bitShift, size);
								  }
								  if (next == 33 && code == 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {
								    // `<!--`, an XML-style comment that should be interpreted as a line comment
								    this.skipLineComment(4);
								    this.skipSpace();
								    return this.nextToken();
								  }
								  if (next === 61) size = 2;
								  return this.finishOp(_tokentype.types.relational, size);
								};

								pp.readToken_eq_excl = function (code) {
								  // '=!'
								  var next = this.input.charCodeAt(this.pos + 1);
								  if (next === 61) return this.finishOp(_tokentype.types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
								  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
								    // '=>'
								    this.pos += 2;
								    return this.finishToken(_tokentype.types.arrow);
								  }
								  return this.finishOp(code === 61 ? _tokentype.types.eq : _tokentype.types.prefix, 1);
								};

								pp.getTokenFromCode = function (code) {
								  switch (code) {
								    // The interpretation of a dot depends on whether it is followed
								    // by a digit or another two dots.
								    case 46:
								      // '.'
								      return this.readToken_dot();

								    // Punctuation tokens.
								    case 40:
								      ++this.pos;return this.finishToken(_tokentype.types.parenL);
								    case 41:
								      ++this.pos;return this.finishToken(_tokentype.types.parenR);
								    case 59:
								      ++this.pos;return this.finishToken(_tokentype.types.semi);
								    case 44:
								      ++this.pos;return this.finishToken(_tokentype.types.comma);
								    case 91:
								      ++this.pos;return this.finishToken(_tokentype.types.bracketL);
								    case 93:
								      ++this.pos;return this.finishToken(_tokentype.types.bracketR);
								    case 123:
								      ++this.pos;return this.finishToken(_tokentype.types.braceL);
								    case 125:
								      ++this.pos;return this.finishToken(_tokentype.types.braceR);
								    case 58:
								      ++this.pos;return this.finishToken(_tokentype.types.colon);
								    case 63:
								      ++this.pos;return this.finishToken(_tokentype.types.question);

								    case 96:
								      // '`'
								      if (this.options.ecmaVersion < 6) break;
								      ++this.pos;
								      return this.finishToken(_tokentype.types.backQuote);

								    case 48:
								      // '0'
								      var next = this.input.charCodeAt(this.pos + 1);
								      if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
								      if (this.options.ecmaVersion >= 6) {
								        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
								        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
								      }
								    // Anything else beginning with a digit is an integer, octal
								    // number, or float.
								    case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								      // 1-9
								      return this.readNumber(false);

								    // Quotes produce strings.
								    case 34:case 39:
								      // '"', "'"
								      return this.readString(code);

								    // Operators are parsed inline in tiny state machines. '=' (61) is
								    // often referred to. `finishOp` simply skips the amount of
								    // characters it is given as second argument, and returns a token
								    // of the type given by its first argument.

								    case 47:
								      // '/'
								      return this.readToken_slash();

								    case 37:case 42:
								      // '%*'
								      return this.readToken_mult_modulo_exp(code);

								    case 124:case 38:
								      // '|&'
								      return this.readToken_pipe_amp(code);

								    case 94:
								      // '^'
								      return this.readToken_caret();

								    case 43:case 45:
								      // '+-'
								      return this.readToken_plus_min(code);

								    case 60:case 62:
								      // '<>'
								      return this.readToken_lt_gt(code);

								    case 61:case 33:
								      // '=!'
								      return this.readToken_eq_excl(code);

								    case 126:
								      // '~'
								      return this.finishOp(_tokentype.types.prefix, 1);
								  }

								  this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
								};

								pp.finishOp = function (type, size) {
								  var str = this.input.slice(this.pos, this.pos + size);
								  this.pos += size;
								  return this.finishToken(type, str);
								};

								// Parse a regular expression. Some context-awareness is necessary,
								// since a '/' inside a '[]' set does not end the expression.

								function tryCreateRegexp(src, flags, throwErrorAt, parser) {
								  try {
								    return new RegExp(src, flags);
								  } catch (e) {
								    if (throwErrorAt !== undefined) {
								      if (e instanceof SyntaxError) parser.raise(throwErrorAt, "Error parsing regular expression: " + e.message);
								      throw e;
								    }
								  }
								}

								var regexpUnicodeSupport = !!tryCreateRegexp("\uFFFF", "u");

								pp.readRegexp = function () {
								  var _this2 = this;

								  var escaped = void 0,
								      inClass = void 0,
								      start = this.pos;
								  for (;;) {
								    if (this.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
								    var ch = this.input.charAt(this.pos);
								    if (_whitespace.lineBreak.test(ch)) this.raise(start, "Unterminated regular expression");
								    if (!escaped) {
								      if (ch === "[") inClass = true;else if (ch === "]" && inClass) inClass = false;else if (ch === "/" && !inClass) break;
								      escaped = ch === "\\";
								    } else escaped = false;
								    ++this.pos;
								  }
								  var content = this.input.slice(start, this.pos);
								  ++this.pos;
								  // Need to use `readWord1` because '\uXXXX' sequences are allowed
								  // here (don't ask).
								  var mods = this.readWord1();
								  var tmp = content,
								      tmpFlags = "";
								  if (mods) {
								    var validFlags = /^[gim]*$/;
								    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/;
								    if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
								    if (mods.indexOf("u") >= 0) {
								      if (regexpUnicodeSupport) {
								        tmpFlags = "u";
								      } else {
								        // Replace each astral symbol and every Unicode escape sequence that
								        // possibly represents an astral symbol or a paired surrogate with a
								        // single ASCII symbol to avoid throwing on regular expressions that
								        // are only valid in combination with the `/u` flag.
								        // Note: replacing with the ASCII symbol `x` might cause false
								        // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
								        // perfectly valid pattern that is equivalent to `[a-b]`, but it would
								        // be replaced by `[x-b]` which throws an error.
								        tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (_match, code, offset) {
								          code = Number("0x" + code);
								          if (code > 0x10FFFF) _this2.raise(start + offset + 3, "Code point out of bounds");
								          return "x";
								        });
								        tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
								        tmpFlags = tmpFlags.replace("u", "");
								      }
								    }
								  }
								  // Detect invalid regular expressions.
								  var value = null;
								  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,
								  // so don't do detection if we are running under Rhino
								  if (!isRhino) {
								    tryCreateRegexp(tmp, tmpFlags, start, this);
								    // Get a regular expression object for this pattern-flag pair, or `null` in
								    // case the current environment doesn't support the flags it uses.
								    value = tryCreateRegexp(content, mods);
								  }
								  return this.finishToken(_tokentype.types.regexp, { pattern: content, flags: mods, value: value });
								};

								// Read an integer in the given radix. Return null if zero digits
								// were read, the integer value otherwise. When `len` is given, this
								// will return `null` unless the integer has exactly `len` digits.

								pp.readInt = function (radix, len) {
								  var start = this.pos,
								      total = 0;
								  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
								    var code = this.input.charCodeAt(this.pos),
								        val = void 0;
								    if (code >= 97) val = code - 97 + 10; // a
								    else if (code >= 65) val = code - 65 + 10; // A
								      else if (code >= 48 && code <= 57) val = code - 48; // 0-9
								        else val = Infinity;
								    if (val >= radix) break;
								    ++this.pos;
								    total = total * radix + val;
								  }
								  if (this.pos === start || len != null && this.pos - start !== len) return null;

								  return total;
								};

								pp.readRadixNumber = function (radix) {
								  this.pos += 2; // 0x
								  var val = this.readInt(radix);
								  if (val == null) this.raise(this.start + 2, "Expected number in radix " + radix);
								  if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number");
								  return this.finishToken(_tokentype.types.num, val);
								};

								// Read an integer, octal integer, or floating-point number.

								pp.readNumber = function (startsWithDot) {
								  var start = this.pos,
								      isFloat = false,
								      octal = this.input.charCodeAt(this.pos) === 48;
								  if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
								  if (octal && this.pos == start + 1) octal = false;
								  var next = this.input.charCodeAt(this.pos);
								  if (next === 46 && !octal) {
								    // '.'
								    ++this.pos;
								    this.readInt(10);
								    isFloat = true;
								    next = this.input.charCodeAt(this.pos);
								  }
								  if ((next === 69 || next === 101) && !octal) {
								    // 'eE'
								    next = this.input.charCodeAt(++this.pos);
								    if (next === 43 || next === 45) ++this.pos; // '+-'
								    if (this.readInt(10) === null) this.raise(start, "Invalid number");
								    isFloat = true;
								  }
								  if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number");

								  var str = this.input.slice(start, this.pos),
								      val = void 0;
								  if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (this.strict) this.raise(start, "Invalid number");else if (/[89]/.test(str)) val = parseInt(str, 10);else val = parseInt(str, 8);
								  return this.finishToken(_tokentype.types.num, val);
								};

								// Read a string value, interpreting backslash-escapes.

								pp.readCodePoint = function () {
								  var ch = this.input.charCodeAt(this.pos),
								      code = void 0;

								  if (ch === 123) {
								    // '{'
								    if (this.options.ecmaVersion < 6) this.unexpected();
								    var codePos = ++this.pos;
								    code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
								    ++this.pos;
								    if (code > 0x10FFFF) this.invalidStringToken(codePos, "Code point out of bounds");
								  } else {
								    code = this.readHexChar(4);
								  }
								  return code;
								};

								function codePointToString(code) {
								  // UTF-16 Decoding
								  if (code <= 0xFFFF) return String.fromCharCode(code);
								  code -= 0x10000;
								  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
								}

								pp.readString = function (quote) {
								  var out = "",
								      chunkStart = ++this.pos;
								  for (;;) {
								    if (this.pos >= this.input.length) this.raise(this.start, "Unterminated string constant");
								    var ch = this.input.charCodeAt(this.pos);
								    if (ch === quote) break;
								    if (ch === 92) {
								      // '\'
								      out += this.input.slice(chunkStart, this.pos);
								      out += this.readEscapedChar(false);
								      chunkStart = this.pos;
								    } else {
								      if ((0, _whitespace.isNewLine)(ch)) this.raise(this.start, "Unterminated string constant");
								      ++this.pos;
								    }
								  }
								  out += this.input.slice(chunkStart, this.pos++);
								  return this.finishToken(_tokentype.types.string, out);
								};

								// Reads template string tokens.

								var INVALID_TEMPLATE_ESCAPE_ERROR = {};

								pp.tryReadTemplateToken = function () {
								  this.inTemplateElement = true;
								  try {
								    this.readTmplToken();
								  } catch (err) {
								    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
								      this.readInvalidTemplateToken();
								    } else {
								      throw err;
								    }
								  }

								  this.inTemplateElement = false;
								};

								pp.invalidStringToken = function (position, message) {
								  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
								    throw INVALID_TEMPLATE_ESCAPE_ERROR;
								  } else {
								    this.raise(position, message);
								  }
								};

								pp.readTmplToken = function () {
								  var out = "",
								      chunkStart = this.pos;
								  for (;;) {
								    if (this.pos >= this.input.length) this.raise(this.start, "Unterminated template");
								    var ch = this.input.charCodeAt(this.pos);
								    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
								      // '`', '${'
								      if (this.pos === this.start && (this.type === _tokentype.types.template || this.type === _tokentype.types.invalidTemplate)) {
								        if (ch === 36) {
								          this.pos += 2;
								          return this.finishToken(_tokentype.types.dollarBraceL);
								        } else {
								          ++this.pos;
								          return this.finishToken(_tokentype.types.backQuote);
								        }
								      }
								      out += this.input.slice(chunkStart, this.pos);
								      return this.finishToken(_tokentype.types.template, out);
								    }
								    if (ch === 92) {
								      // '\'
								      out += this.input.slice(chunkStart, this.pos);
								      out += this.readEscapedChar(true);
								      chunkStart = this.pos;
								    } else if ((0, _whitespace.isNewLine)(ch)) {
								      out += this.input.slice(chunkStart, this.pos);
								      ++this.pos;
								      switch (ch) {
								        case 13:
								          if (this.input.charCodeAt(this.pos) === 10) ++this.pos;
								        case 10:
								          out += "\n";
								          break;
								        default:
								          out += String.fromCharCode(ch);
								          break;
								      }
								      if (this.options.locations) {
								        ++this.curLine;
								        this.lineStart = this.pos;
								      }
								      chunkStart = this.pos;
								    } else {
								      ++this.pos;
								    }
								  }
								};

								// Reads a template token to search for the end, without validating any escape sequences
								pp.readInvalidTemplateToken = function () {
								  for (; this.pos < this.input.length; this.pos++) {
								    switch (this.input[this.pos]) {
								      case "\\":
								        ++this.pos;
								        break;

								      case "$":
								        if (this.input[this.pos + 1] !== "{") {
								          break;
								        }
								      // falls through

								      case "`":
								        return this.finishToken(_tokentype.types.invalidTemplate, this.input.slice(this.start, this.pos));

								      // no default
								    }
								  }
								  this.raise(this.start, "Unterminated template");
								};

								// Used to read escaped characters

								pp.readEscapedChar = function (inTemplate) {
								  var ch = this.input.charCodeAt(++this.pos);
								  ++this.pos;
								  switch (ch) {
								    case 110:
								      return "\n"; // 'n' -> '\n'
								    case 114:
								      return "\r"; // 'r' -> '\r'
								    case 120:
								      return String.fromCharCode(this.readHexChar(2)); // 'x'
								    case 117:
								      return codePointToString(this.readCodePoint()); // 'u'
								    case 116:
								      return "\t"; // 't' -> '\t'
								    case 98:
								      return "\b"; // 'b' -> '\b'
								    case 118:
								      return "\x0B"; // 'v' -> '\u000b'
								    case 102:
								      return "\f"; // 'f' -> '\f'
								    case 13:
								      if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\r\n'
								    case 10:
								      // ' \n'
								      if (this.options.locations) {
								        this.lineStart = this.pos;++this.curLine;
								      }
								      return "";
								    default:
								      if (ch >= 48 && ch <= 55) {
								        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
								        var octal = parseInt(octalStr, 8);
								        if (octal > 255) {
								          octalStr = octalStr.slice(0, -1);
								          octal = parseInt(octalStr, 8);
								        }
								        if (octalStr !== "0" && (this.strict || inTemplate)) {
								          this.invalidStringToken(this.pos - 2, "Octal literal in strict mode");
								        }
								        this.pos += octalStr.length - 1;
								        return String.fromCharCode(octal);
								      }
								      return String.fromCharCode(ch);
								  }
								};

								// Used to read character escape sequences ('\x', '\u', '\U').

								pp.readHexChar = function (len) {
								  var codePos = this.pos;
								  var n = this.readInt(16, len);
								  if (n === null) this.invalidStringToken(codePos, "Bad character escape sequence");
								  return n;
								};

								// Read an identifier, and return it as a string. Sets `this.containsEsc`
								// to whether the word contained a '\u' escape.
								//
								// Incrementally adds only escaped chars, adding other chunks as-is
								// as a micro-optimization.

								pp.readWord1 = function () {
								  this.containsEsc = false;
								  var word = "",
								      first = true,
								      chunkStart = this.pos;
								  var astral = this.options.ecmaVersion >= 6;
								  while (this.pos < this.input.length) {
								    var ch = this.fullCharCodeAtPos();
								    if ((0, _identifier.isIdentifierChar)(ch, astral)) {
								      this.pos += ch <= 0xffff ? 1 : 2;
								    } else if (ch === 92) {
								      // "\"
								      this.containsEsc = true;
								      word += this.input.slice(chunkStart, this.pos);
								      var escStart = this.pos;
								      if (this.input.charCodeAt(++this.pos) != 117) // "u"
								        this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
								      ++this.pos;
								      var esc = this.readCodePoint();
								      if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, astral)) this.invalidStringToken(escStart, "Invalid Unicode escape");
								      word += this.input.substr(this.pos - 6, 6);
								      chunkStart = this.pos;
								    } else {
								      break;
								    }
								    first = false;
								  }
								  return word + this.input.slice(chunkStart, this.pos);
								};

								// Read an identifier or keyword token. Will check for reserved
								// words when necessary.

								pp.readWord = function () {
								  var word = this.readWord1();
								  var type = _tokentype.types.name;
								  if (this.keywords.test(word)) {
								    if (this.containsEsc) this.raiseRecoverable(this.start, "Escape sequence in keyword " + word);
								    type = _tokentype.keywords[word];
								  }
								  return this.finishToken(type, word);
								};
							},
							"tokentype.js": function (exports, module, require) {
								

								exports.__esModule = true;

								function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

								// ## Token types

								// The assignment of fine-grained, information-carrying type objects
								// allows the tokenizer to store the information it has about a
								// token in a way that is very cheap for the parser to look up.

								// All token type variables start with an underscore, to make them
								// easy to recognize.

								// The `beforeExpr` property is used to disambiguate between regular
								// expressions and divisions. It is set on all token types that can
								// be followed by an expression (thus, a slash after them would be a
								// regular expression).
								//
								// The `startsExpr` property is used to check if the token ends a
								// `yield` expression. It is set on all token types that either can
								// directly start an expression (like a quotation mark) or can
								// continue an expression (like the body of a string).
								//
								// `isLoop` marks a keyword as starting a loop, which is important
								// to know when parsing a label, in order to allow or disallow
								// continue jumps to that label.

								var TokenType = exports.TokenType = function TokenType(label) {
								  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

								  _classCallCheck(this, TokenType);

								  this.label = label;
								  this.keyword = conf.keyword;
								  this.beforeExpr = !!conf.beforeExpr;
								  this.startsExpr = !!conf.startsExpr;
								  this.isLoop = !!conf.isLoop;
								  this.isAssign = !!conf.isAssign;
								  this.prefix = !!conf.prefix;
								  this.postfix = !!conf.postfix;
								  this.binop = conf.binop || null;
								  this.updateContext = null;
								};

								function binop(name, prec) {
								  return new TokenType(name, { beforeExpr: true, binop: prec });
								}
								var beforeExpr = { beforeExpr: true },
								    startsExpr = { startsExpr: true

								  // Map keyword names to token types.

								};var keywords = exports.keywords = {};

								// Succinct definitions of keyword token types
								function kw(name) {
								  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

								  options.keyword = name;
								  return keywords[name] = new TokenType(name, options);
								}

								var types = exports.types = {
								  num: new TokenType("num", startsExpr),
								  regexp: new TokenType("regexp", startsExpr),
								  string: new TokenType("string", startsExpr),
								  name: new TokenType("name", startsExpr),
								  eof: new TokenType("eof"),

								  // Punctuation token types.
								  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
								  bracketR: new TokenType("]"),
								  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
								  braceR: new TokenType("}"),
								  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
								  parenR: new TokenType(")"),
								  comma: new TokenType(",", beforeExpr),
								  semi: new TokenType(";", beforeExpr),
								  colon: new TokenType(":", beforeExpr),
								  dot: new TokenType("."),
								  question: new TokenType("?", beforeExpr),
								  arrow: new TokenType("=>", beforeExpr),
								  template: new TokenType("template"),
								  invalidTemplate: new TokenType("invalidTemplate"),
								  ellipsis: new TokenType("...", beforeExpr),
								  backQuote: new TokenType("`", startsExpr),
								  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),

								  // Operators. These carry several kinds of properties to help the
								  // parser use them properly (the presence of these properties is
								  // what categorizes them as operators).
								  //
								  // `binop`, when present, specifies that this operator is a binary
								  // operator, and will refer to its precedence.
								  //
								  // `prefix` and `postfix` mark the operator as a prefix or postfix
								  // unary operator.
								  //
								  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
								  // binary operators with a very low precedence, that should result
								  // in AssignmentExpression nodes.

								  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
								  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
								  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
								  prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
								  logicalOR: binop("||", 1),
								  logicalAND: binop("&&", 2),
								  bitwiseOR: binop("|", 3),
								  bitwiseXOR: binop("^", 4),
								  bitwiseAND: binop("&", 5),
								  equality: binop("==/!=", 6),
								  relational: binop("</>", 7),
								  bitShift: binop("<</>>", 8),
								  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
								  modulo: binop("%", 10),
								  star: binop("*", 10),
								  slash: binop("/", 10),
								  starstar: new TokenType("**", { beforeExpr: true }),

								  // Keyword token types.
								  _break: kw("break"),
								  _case: kw("case", beforeExpr),
								  _catch: kw("catch"),
								  _continue: kw("continue"),
								  _debugger: kw("debugger"),
								  _default: kw("default", beforeExpr),
								  _do: kw("do", { isLoop: true, beforeExpr: true }),
								  _else: kw("else", beforeExpr),
								  _finally: kw("finally"),
								  _for: kw("for", { isLoop: true }),
								  _function: kw("function", startsExpr),
								  _if: kw("if"),
								  _return: kw("return", beforeExpr),
								  _switch: kw("switch"),
								  _throw: kw("throw", beforeExpr),
								  _try: kw("try"),
								  _var: kw("var"),
								  _const: kw("const"),
								  _while: kw("while", { isLoop: true }),
								  _with: kw("with"),
								  _new: kw("new", { beforeExpr: true, startsExpr: true }),
								  _this: kw("this", startsExpr),
								  _super: kw("super", startsExpr),
								  _class: kw("class", startsExpr),
								  _extends: kw("extends", beforeExpr),
								  _export: kw("export"),
								  _import: kw("import"),
								  _null: kw("null", startsExpr),
								  _true: kw("true", startsExpr),
								  _false: kw("false", startsExpr),
								  _in: kw("in", { beforeExpr: true, binop: 7 }),
								  _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
								  _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
								  _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
								  _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
								};
							},
							"util.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.has = has;
								var _Object$prototype = Object.prototype,
								    hasOwnProperty = _Object$prototype.hasOwnProperty,
								    toString = _Object$prototype.toString;

								// Checks if an object has a property.

								function has(obj, propName) {
								  return hasOwnProperty.call(obj, propName);
								}

								var isArray = exports.isArray = Array.isArray || function (obj) {
								  return toString.call(obj) === "[object Array]";
								};
							},
							"whitespace.js": function (exports, module, require) {
								

								exports.__esModule = true;
								exports.isNewLine = isNewLine;
								// Matches a whole line break (where CRLF is considered a single
								// line break). Used to count lines.

								var lineBreak = exports.lineBreak = /\r\n?|\n|\u2028|\u2029/;
								var lineBreakG = exports.lineBreakG = new RegExp(lineBreak.source, "g");

								function isNewLine(code) {
								  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
								}

								var nonASCIIwhitespace = exports.nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

								var skipWhiteSpace = exports.skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
							}
						},
						"esotope.js": function (exports, module, require) {
							// -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							/*
							 Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
							 Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
							 Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
							 Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
							 Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
							 Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
							 Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
							 Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
							 Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
							 Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
							 Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>

							 Redistribution and use in source and binary forms, with or without
							 modification, are permitted provided that the following conditions are met:

							 * Redistributions of source code must retain the above copyright
							 notice, this list of conditions and the following disclaimer.
							 * Redistributions in binary form must reproduce the above copyright
							 notice, this list of conditions and the following disclaimer in the
							 documentation and/or other materials provided with the distribution.

							 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
							 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
							 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
							 ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
							 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
							 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
							 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
							 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
							 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
							 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
							 */

							'use strict';

							exports.__esModule = true;
							exports.generate = generate;
							var isArray, json, renumber, hexadecimal, quotes, escapeless, parentheses, semicolons, safeConcatenation, directive, extra, parse;

							var Syntax = exports.Syntax = {
							    AssignmentExpression: 'AssignmentExpression',
							    AssignmentPattern: 'AssignmentPattern',
							    ArrayExpression: 'ArrayExpression',
							    ArrayPattern: 'ArrayPattern',
							    ArrowFunctionExpression: 'ArrowFunctionExpression',
							    AwaitExpression: 'AwaitExpression',
							    BlockStatement: 'BlockStatement',
							    BinaryExpression: 'BinaryExpression',
							    BreakStatement: 'BreakStatement',
							    CallExpression: 'CallExpression',
							    CatchClause: 'CatchClause',
							    ClassBody: 'ClassBody',
							    ClassDeclaration: 'ClassDeclaration',
							    ClassExpression: 'ClassExpression',
							    ComprehensionBlock: 'ComprehensionBlock',
							    ComprehensionExpression: 'ComprehensionExpression',
							    ConditionalExpression: 'ConditionalExpression',
							    ContinueStatement: 'ContinueStatement',
							    DirectiveStatement: 'DirectiveStatement',
							    DoWhileStatement: 'DoWhileStatement',
							    DebuggerStatement: 'DebuggerStatement',
							    EmptyStatement: 'EmptyStatement',
							    ExportBatchSpecifier: 'ExportBatchSpecifier',
							    ExportDeclaration: 'ExportDeclaration',
							    ExportSpecifier: 'ExportSpecifier',
							    ExpressionStatement: 'ExpressionStatement',
							    ForStatement: 'ForStatement',
							    ForInStatement: 'ForInStatement',
							    ForOfStatement: 'ForOfStatement',
							    FunctionDeclaration: 'FunctionDeclaration',
							    FunctionExpression: 'FunctionExpression',
							    GeneratorExpression: 'GeneratorExpression',
							    Identifier: 'Identifier',
							    IfStatement: 'IfStatement',
							    ImportSpecifier: 'ImportSpecifier',
							    ImportDeclaration: 'ImportDeclaration',
							    Literal: 'Literal',
							    LabeledStatement: 'LabeledStatement',
							    LogicalExpression: 'LogicalExpression',
							    MemberExpression: 'MemberExpression',
							    MethodDefinition: 'MethodDefinition',
							    ModuleDeclaration: 'ModuleDeclaration',
							    NewExpression: 'NewExpression',
							    ObjectExpression: 'ObjectExpression',
							    ObjectPattern: 'ObjectPattern',
							    Program: 'Program',
							    Property: 'Property',
							    RestElement: 'RestElement',
							    ReturnStatement: 'ReturnStatement',
							    SequenceExpression: 'SequenceExpression',
							    SpreadElement: 'SpreadElement',
							    Super: 'Super',
							    SwitchStatement: 'SwitchStatement',
							    SwitchCase: 'SwitchCase',
							    TaggedTemplateExpression: 'TaggedTemplateExpression',
							    TemplateElement: 'TemplateElement',
							    TemplateLiteral: 'TemplateLiteral',
							    ThisExpression: 'ThisExpression',
							    ThrowStatement: 'ThrowStatement',
							    TryStatement: 'TryStatement',
							    UnaryExpression: 'UnaryExpression',
							    UpdateExpression: 'UpdateExpression',
							    VariableDeclaration: 'VariableDeclaration',
							    VariableDeclarator: 'VariableDeclarator',
							    WhileStatement: 'WhileStatement',
							    WithStatement: 'WithStatement',
							    YieldExpression: 'YieldExpression'
							};

							var Precedence = {
							    Sequence: 0,
							    Yield: 1,
							    Assignment: 1,
							    Conditional: 2,
							    ArrowFunction: 2,
							    LogicalOR: 3,
							    LogicalAND: 4,
							    BitwiseOR: 5,
							    BitwiseXOR: 6,
							    BitwiseAND: 7,
							    Equality: 8,
							    Relational: 9,
							    BitwiseSHIFT: 10,
							    Additive: 11,
							    Multiplicative: 12,
							    Unary: 13,
							    Postfix: 14,
							    Call: 15,
							    New: 16,
							    TaggedTemplate: 17,
							    Member: 18,
							    Primary: 19
							};

							var BinaryPrecedence = {
							    '||': Precedence.LogicalOR,
							    '&&': Precedence.LogicalAND,
							    '|': Precedence.BitwiseOR,
							    '^': Precedence.BitwiseXOR,
							    '&': Precedence.BitwiseAND,
							    '==': Precedence.Equality,
							    '!=': Precedence.Equality,
							    '===': Precedence.Equality,
							    '!==': Precedence.Equality,
							    'is': Precedence.Equality,
							    'isnt': Precedence.Equality,
							    '<': Precedence.Relational,
							    '>': Precedence.Relational,
							    '<=': Precedence.Relational,
							    '>=': Precedence.Relational,
							    'in': Precedence.Relational,
							    'instanceof': Precedence.Relational,
							    '<<': Precedence.BitwiseSHIFT,
							    '>>': Precedence.BitwiseSHIFT,
							    '>>>': Precedence.BitwiseSHIFT,
							    '+': Precedence.Additive,
							    '-': Precedence.Additive,
							    '*': Precedence.Multiplicative,
							    '%': Precedence.Multiplicative,
							    '/': Precedence.Multiplicative
							};

							function getDefaultOptions() {
							    // default options
							    return {
							        indent: null,
							        base: null,
							        parse: null,
							        format: {
							            indent: {
							                style: '    ',
							                base: 0
							            },
							            newline: '\n',
							            space: ' ',
							            json: false,
							            renumber: false,
							            hexadecimal: false,
							            quotes: 'single',
							            escapeless: false,
							            compact: false,
							            parentheses: true,
							            semicolons: true,
							            safeConcatenation: false
							        },
							        directive: false,
							        raw: true,
							        verbatim: null
							    };
							}

							//-------------------------------------------------===------------------------------------------------------
							//                                            Lexical utils
							//-------------------------------------------------===------------------------------------------------------

							//Const
							var NON_ASCII_WHITESPACES = [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF];

							//Regular expressions
							var NON_ASCII_IDENTIFIER_CHARACTERS_REGEXP = new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376' + '\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-' + '\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA' + '\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-' + '\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-' + '\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-' + '\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-' + '\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38' + '\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83' + '\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9' + '\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-' + '\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-' + '\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E' + '\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-' + '\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-' + '\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-' + '\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE' + '\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44' + '\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-' + '\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A' + '\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-' + '\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9' + '\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84' + '\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-' + '\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5' + '\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-' + '\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-' + '\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD' + '\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B' + '\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E' + '\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-' + '\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-' + '\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-' + '\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F' + '\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115' + '\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188' + '\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-' + '\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-' + '\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A' + '\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5' + '\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697' + '\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873' + '\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-' + '\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-' + '\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC' + '\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-' + '\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D' + '\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74' + '\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-' + '\uFFD7\uFFDA-\uFFDC]');

							//Methods
							function isIdentifierCh(cp) {
							    if (cp < 0x80) {
							        return cp >= 97 && cp <= 122 || // a..z
							        cp >= 65 && cp <= 90 || // A..Z
							        cp >= 48 && cp <= 57 || // 0..9
							        cp === 36 || cp === 95 || // $ (dollar) and _ (underscore)
							        cp === 92; // \ (backslash)
							    }

							    var ch = String.fromCharCode(cp);

							    return NON_ASCII_IDENTIFIER_CHARACTERS_REGEXP.test(ch);
							}

							function isLineTerminator(cp) {
							    return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;
							}

							function isWhitespace(cp) {
							    return cp === 0x20 || cp === 0x09 || isLineTerminator(cp) || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(cp) >= 0;
							}

							function isDecimalDigit(cp) {
							    return cp >= 48 && cp <= 57;
							}

							function stringRepeat(str, num) {
							    var result = '';

							    for (num |= 0; num > 0; num >>>= 1, str += str) {
							        if (num & 1) {
							            result += str;
							        }
							    }

							    return result;
							}

							isArray = Array.isArray;
							if (!isArray) {
							    isArray = function isArray(array) {
							        return Object.prototype.toString.call(array) === '[object Array]';
							    };
							}

							function updateDeeply(target, override) {
							    var key, val;

							    function isHashObject(target) {
							        return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
							    }

							    for (key in override) {
							        if (override.hasOwnProperty(key)) {
							            val = override[key];
							            if (isHashObject(val)) {
							                if (isHashObject(target[key])) {
							                    updateDeeply(target[key], val);
							                } else {
							                    target[key] = updateDeeply({}, val);
							                }
							            } else {
							                target[key] = val;
							            }
							        }
							    }
							    return target;
							}

							function generateNumber(value) {
							    var result, point, temp, exponent, pos;

							    if (value === 1 / 0) {
							        return json ? 'null' : renumber ? '1e400' : '1e+400';
							    }

							    result = '' + value;
							    if (!renumber || result.length < 3) {
							        return result;
							    }

							    point = result.indexOf('.');
							    //NOTE: 0x30 == '0'
							    if (!json && result.charCodeAt(0) === 0x30 && point === 1) {
							        point = 0;
							        result = result.slice(1);
							    }
							    temp = result;
							    result = result.replace('e+', 'e');
							    exponent = 0;
							    if ((pos = temp.indexOf('e')) > 0) {
							        exponent = +temp.slice(pos + 1);
							        temp = temp.slice(0, pos);
							    }
							    if (point >= 0) {
							        exponent -= temp.length - point - 1;
							        temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
							    }
							    pos = 0;

							    //NOTE: 0x30 == '0'
							    while (temp.charCodeAt(temp.length + pos - 1) === 0x30) {
							        --pos;
							    }
							    if (pos !== 0) {
							        exponent -= pos;
							        temp = temp.slice(0, pos);
							    }
							    if (exponent !== 0) {
							        temp += 'e' + exponent;
							    }
							    if ((temp.length < result.length || hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length) && +temp === value) {
							        result = temp;
							    }

							    return result;
							}

							// Generate valid RegExp expression.
							// This function is based on https://github.com/Constellation/iv Engine

							function escapeRegExpCharacter(ch, previousIsBackslash) {
							    // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
							    if ((ch & ~1) === 0x2028) {
							        return (previousIsBackslash ? 'u' : '\\u') + (ch === 0x2028 ? '2028' : '2029');
							    } else if (ch === 10 || ch === 13) {
							        // \n, \r
							        return (previousIsBackslash ? '' : '\\') + (ch === 10 ? 'n' : 'r');
							    }
							    return String.fromCharCode(ch);
							}

							function generateRegExp(reg) {
							    var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;

							    result = reg.toString();

							    if (reg.source) {
							        // extract flag from toString result
							        match = result.match(/\/([^/]*)$/);
							        if (!match) {
							            return result;
							        }

							        flags = match[1];
							        result = '';

							        characterInBrack = false;
							        previousIsBackslash = false;
							        for (i = 0, iz = reg.source.length; i < iz; ++i) {
							            ch = reg.source.charCodeAt(i);

							            if (!previousIsBackslash) {
							                if (characterInBrack) {
							                    if (ch === 93) {
							                        // ]
							                        characterInBrack = false;
							                    }
							                } else {
							                    if (ch === 47) {
							                        // /
							                        result += '\\';
							                    } else if (ch === 91) {
							                        // [
							                        characterInBrack = true;
							                    }
							                }
							                result += escapeRegExpCharacter(ch, previousIsBackslash);
							                previousIsBackslash = ch === 92; // \
							            } else {
							                // if new RegExp("\\\n') is provided, create /\n/
							                result += escapeRegExpCharacter(ch, previousIsBackslash);
							                // prevent like /\\[/]/
							                previousIsBackslash = false;
							            }
							        }

							        return '/' + result + '/' + flags;
							    }

							    return result;
							}

							function escapeAllowedCharacter(code, next) {
							    var hex,
							        result = '\\';

							    switch (code) {
							        case 0x08:
							            // \b
							            result += 'b';
							            break;
							        case 0x0C:
							            // \f
							            result += 'f';
							            break;
							        case 0x09:
							            // \t
							            result += 't';
							            break;
							        default:
							            hex = code.toString(16).toUpperCase();
							            if (json || code > 0xFF) {
							                result += 'u' + '0000'.slice(hex.length) + hex;
							            } else if (code === 0x0000 && !isDecimalDigit(next)) {
							                result += '0';
							            } else if (code === 0x000B) {
							                // \v
							                result += 'x0B';
							            } else {
							                result += 'x' + '00'.slice(hex.length) + hex;
							            }
							            break;
							    }

							    return result;
							}

							function escapeDisallowedCharacter(code) {
							    var result = '\\';
							    switch (code) {
							        case 0x5C // \
							        :
							            result += '\\';
							            break;
							        case 0x0A // \n
							        :
							            result += 'n';
							            break;
							        case 0x0D // \r
							        :
							            result += 'r';
							            break;
							        case 0x2028:
							            result += 'u2028';
							            break;
							        case 0x2029:
							            result += 'u2029';
							            break;
							    }

							    return result;
							}

							function escapeDirective(str) {
							    var i, iz, code, quote;

							    quote = quotes === 'double' ? '"' : '\'';
							    for (i = 0, iz = str.length; i < iz; ++i) {
							        code = str.charCodeAt(i);
							        if (code === 0x27) {
							            // '
							            quote = '"';
							            break;
							        } else if (code === 0x22) {
							            // "
							            quote = '\'';
							            break;
							        } else if (code === 0x5C) {
							            // \
							            ++i;
							        }
							    }

							    return quote + str + quote;
							}

							function escapeString(str) {
							    var result = '',
							        i,
							        len,
							        code,
							        singleQuotes = 0,
							        doubleQuotes = 0,
							        single,
							        quote;
							    //TODO http://jsperf.com/character-counting/8
							    for (i = 0, len = str.length; i < len; ++i) {
							        code = str.charCodeAt(i);
							        if (code === 0x27) {
							            // '
							            ++singleQuotes;
							        } else if (code === 0x22) {
							            // "
							            ++doubleQuotes;
							        } else if (code === 0x2F && json) {
							            // /
							            result += '\\';
							        } else if (isLineTerminator(code) || code === 0x5C) {
							            // \
							            result += escapeDisallowedCharacter(code);
							            continue;
							        } else if (json && code < 0x20 || // SP
							        !(json || escapeless || code >= 0x20 && code <= 0x7E)) {
							            // SP, ~
							            result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
							            continue;
							        }
							        result += String.fromCharCode(code);
							    }

							    single = !(quotes === 'double' || quotes === 'auto' && doubleQuotes < singleQuotes);
							    quote = single ? '\'' : '"';

							    if (!(single ? singleQuotes : doubleQuotes)) {
							        return quote + result + quote;
							    }

							    str = result;
							    result = quote;

							    for (i = 0, len = str.length; i < len; ++i) {
							        code = str.charCodeAt(i);
							        if (code === 0x27 && single || code === 0x22 && !single) {
							            // ', "
							            result += '\\';
							        }
							        result += String.fromCharCode(code);
							    }

							    return result + quote;
							}

							function join(l, r) {
							    if (!l.length) return r;

							    if (!r.length) return l;

							    var lCp = l.charCodeAt(l.length - 1),
							        rCp = r.charCodeAt(0);

							    if (isIdentifierCh(lCp) && isIdentifierCh(rCp) || lCp === rCp && (lCp === 0x2B || lCp === 0x2D) || // + +, - -
							    lCp === 0x2F && rCp === 0x69) {
							        // /re/ instanceof foo
							        return l + _.space + r;
							    } else if (isWhitespace(lCp) || isWhitespace(rCp)) return l + r;

							    return l + _.optSpace + r;
							}

							function shiftIndent() {
							    var prevIndent = _.indent;

							    _.indent += _.indentUnit;
							    return prevIndent;
							}

							function adoptionPrefix($stmt) {
							    if ($stmt.type === Syntax.BlockStatement) return _.optSpace;

							    if ($stmt.type === Syntax.EmptyStatement) return '';

							    return _.newline + _.indent + _.indentUnit;
							}

							function adoptionSuffix($stmt) {
							    if ($stmt.type === Syntax.BlockStatement) return _.optSpace;

							    return _.newline + _.indent;
							}

							//Subentities generators
							function generateVerbatim($expr, settings) {
							    var verbatim = $expr[extra.verbatim],
							        strVerbatim = typeof verbatim === 'string',
							        precedence = !strVerbatim && verbatim.precedence !== void 0 ? verbatim.precedence : Precedence.Sequence,
							        parenthesize = precedence < settings.precedence,
							        content = strVerbatim ? verbatim : verbatim.content,
							        chunks = content.split(/\r\n|\n/),
							        chunkCount = chunks.length;

							    if (parenthesize) _.js += '(';

							    _.js += chunks[0];

							    for (var i = 1; i < chunkCount; i++) {
							        _.js += _.newline + _.indent + chunks[i];
							    }if (parenthesize) _.js += ')';
							}

							function generateFunctionParams($node) {
							    var $params = $node.params,
							        paramCount = $params.length,
							        lastParamIdx = paramCount - 1,
							        arrowFuncWithoutParentheses = $node.type === Syntax.ArrowFunctionExpression && paramCount === 1 && $params[0].type === Syntax.Identifier;

							    //NOTE: arg => { } case
							    if (arrowFuncWithoutParentheses) _.js += $params[0].name;else {
							        _.js += '(';

							        for (var i = 0; i < paramCount; ++i) {
							            var $param = $params[i];

							            if ($params[i].type === Syntax.Identifier) _.js += $param.name;else ExprGen[$param.type]($param, Preset.e4);

							            if (i !== lastParamIdx) _.js += ',' + _.optSpace;
							        }

							        _.js += ')';
							    }
							}

							function generateFunctionBody($node) {
							    var $body = $node.body;

							    generateFunctionParams($node);

							    if ($node.type === Syntax.ArrowFunctionExpression) _.js += _.optSpace + '=>';

							    if ($node.expression) {
							        _.js += _.optSpace;

							        var exprJs = exprToJs($body, Preset.e4);

							        if (exprJs.charAt(0) === '{') exprJs = '(' + exprJs + ')';

							        _.js += exprJs;
							    } else {
							        _.js += adoptionPrefix($body);
							        StmtGen[$body.type]($body, Preset.s8);
							    }
							}

							//-------------------------------------------------===------------------------------------------------------
							//                                Syntactic entities generation presets
							//-------------------------------------------------===------------------------------------------------------

							var Preset = {
							    e1: function e1(allowIn) {
							        return {
							            precedence: Precedence.Assignment,
							            allowIn: allowIn,
							            allowCall: true,
							            allowUnparenthesizedNew: true
							        };
							    },

							    e2: function e2(allowIn) {
							        return {
							            precedence: Precedence.LogicalOR,
							            allowIn: allowIn,
							            allowCall: true,
							            allowUnparenthesizedNew: true
							        };
							    },

							    e3: {
							        precedence: Precedence.Call,
							        allowIn: true,
							        allowCall: true,
							        allowUnparenthesizedNew: false
							    },

							    e4: {
							        precedence: Precedence.Assignment,
							        allowIn: true,
							        allowCall: true,
							        allowUnparenthesizedNew: true
							    },

							    e5: {
							        precedence: Precedence.Sequence,
							        allowIn: true,
							        allowCall: true,
							        allowUnparenthesizedNew: true
							    },

							    e6: function e6(allowUnparenthesizedNew) {
							        return {
							            precedence: Precedence.New,
							            allowIn: true,
							            allowCall: false,
							            allowUnparenthesizedNew: allowUnparenthesizedNew
							        };
							    },

							    e7: {
							        precedence: Precedence.Unary,
							        allowIn: true,
							        allowCall: true,
							        allowUnparenthesizedNew: true
							    },

							    e8: {
							        precedence: Precedence.Postfix,
							        allowIn: true,
							        allowCall: true,
							        allowUnparenthesizedNew: true
							    },

							    e9: {
							        precedence: void 0,
							        allowIn: true,
							        allowCall: true,
							        allowUnparenthesizedNew: true
							    },

							    e10: {
							        precedence: Precedence.Call,
							        allowIn: true,
							        allowCall: true,
							        allowUnparenthesizedNew: true
							    },

							    e11: function e11(allowCall) {
							        return {
							            precedence: Precedence.Call,
							            allowIn: true,
							            allowCall: allowCall,
							            allowUnparenthesizedNew: false
							        };
							    },

							    e12: {
							        precedence: Precedence.Primary,
							        allowIn: false,
							        allowCall: false,
							        allowUnparenthesizedNew: true
							    },

							    e13: {
							        precedence: Precedence.Primary,
							        allowIn: true,
							        allowCall: true,
							        allowUnparenthesizedNew: true
							    },

							    e14: {
							        precedence: Precedence.Sequence,
							        allowIn: false,
							        allowCall: true,
							        allowUnparenthesizedNew: true
							    },

							    e15: function e15(allowCall) {
							        return {
							            precedence: Precedence.Sequence,
							            allowIn: true,
							            allowCall: allowCall,
							            allowUnparenthesizedNew: true
							        };
							    },

							    e16: function e16(precedence, allowIn) {
							        return {
							            precedence: precedence,
							            allowIn: allowIn,
							            allowCall: true,
							            allowUnparenthesizedNew: true
							        };
							    },

							    e17: function e17(allowIn) {
							        return {
							            precedence: Precedence.Call,
							            allowIn: allowIn,
							            allowCall: true,
							            allowUnparenthesizedNew: true
							        };
							    },

							    e18: function e18(allowIn) {
							        return {
							            precedence: Precedence.Assignment,
							            allowIn: allowIn,
							            allowCall: true,
							            allowUnparenthesizedNew: true
							        };
							    },

							    e19: {
							        precedence: Precedence.Sequence,
							        allowIn: true,
							        allowCall: true,
							        semicolonOptional: false
							    },

							    s1: function s1(functionBody, semicolonOptional) {
							        return {
							            allowIn: true,
							            functionBody: false,
							            directiveContext: functionBody,
							            semicolonOptional: semicolonOptional
							        };
							    },

							    s2: {
							        allowIn: true,
							        functionBody: false,
							        directiveContext: false,
							        semicolonOptional: true
							    },

							    s3: function s3(allowIn) {
							        return {
							            allowIn: allowIn,
							            functionBody: false,
							            directiveContext: false,
							            semicolonOptional: false
							        };
							    },

							    s4: function s4(semicolonOptional) {
							        return {
							            allowIn: true,
							            functionBody: false,
							            directiveContext: false,
							            semicolonOptional: semicolonOptional
							        };
							    },

							    s5: function s5(semicolonOptional) {
							        return {
							            allowIn: true,
							            functionBody: false,
							            directiveContext: true,
							            semicolonOptional: semicolonOptional
							        };
							    },

							    s6: {
							        allowIn: false,
							        functionBody: false,
							        directiveContext: false,
							        semicolonOptional: false
							    },

							    s7: {
							        allowIn: true,
							        functionBody: false,
							        directiveContext: false,
							        semicolonOptional: false
							    },

							    s8: {
							        allowIn: true,
							        functionBody: true,
							        directiveContext: false,
							        semicolonOptional: false
							    }
							};

							//-------------------------------------------------===-------------------------------------------------------
							//                                             Expressions
							//-------------------------------------------------===-------------------------------------------------------

							//Regular expressions
							var FLOATING_OR_OCTAL_REGEXP = /[.eExX]|^0[0-9]+/,
							    LAST_DECIMAL_DIGIT_REGEXP = /[0-9]$/;

							//Common expression generators
							function generateLogicalOrBinaryExpression($expr, settings) {
							    var op = $expr.operator,
							        precedence = BinaryPrecedence[$expr.operator],
							        parenthesize = precedence < settings.precedence,
							        allowIn = settings.allowIn || parenthesize,
							        operandGenSettings = Preset.e16(precedence, allowIn),
							        exprJs = exprToJs($expr.left, operandGenSettings);

							    parenthesize |= op === 'in' && !allowIn;

							    if (parenthesize) _.js += '(';

							    // 0x2F = '/'
							    if (exprJs.charCodeAt(exprJs.length - 1) === 0x2F && isIdentifierCh(op.charCodeAt(0))) exprJs = exprJs + _.space + op;else exprJs = join(exprJs, op);

							    operandGenSettings.precedence++;

							    var rightJs = exprToJs($expr.right, operandGenSettings);

							    //NOTE: If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
							    if (op === '/' && rightJs.charAt(0) === '/' || op.slice(-1) === '<' && rightJs.slice(0, 3) === '!--') exprJs += _.space + rightJs;else exprJs = join(exprJs, rightJs);

							    _.js += exprJs;

							    if (parenthesize) _.js += ')';
							}

							function generateArrayPatternOrExpression($expr) {
							    var $elems = $expr.elements,
							        elemCount = $elems.length;

							    if (elemCount) {
							        var lastElemIdx = elemCount - 1,
							            multiline = elemCount > 1,
							            prevIndent = shiftIndent(),
							            itemPrefix = _.newline + _.indent;

							        _.js += '[';

							        for (var i = 0; i < elemCount; i++) {
							            var $elem = $elems[i];

							            if (multiline) _.js += itemPrefix;

							            if ($elem) ExprGen[$elem.type]($elem, Preset.e4);

							            if (i !== lastElemIdx || !$elem) _.js += ',';
							        }

							        _.indent = prevIndent;

							        if (multiline) _.js += _.newline + _.indent;

							        _.js += ']';
							    } else _.js += '[]';
							}

							function generateImportOrExportSpecifier($expr) {
							    _.js += $expr.id.name;

							    if ($expr.name) _.js += _.space + 'as' + _.space + $expr.name.name;
							}

							function generateGeneratorOrComprehensionExpression($expr) {
							    //NOTE: GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
							    var $blocks = $expr.blocks,
							        $filter = $expr.filter,
							        isGenerator = $expr.type === Syntax.GeneratorExpression,
							        exprJs = isGenerator ? '(' : '[',
							        bodyJs = exprToJs($expr.body, Preset.e4);

							    if ($blocks) {
							        var prevIndent = shiftIndent(),
							            blockCount = $blocks.length;

							        for (var i = 0; i < blockCount; ++i) {
							            var blockJs = exprToJs($blocks[i], Preset.e5);

							            exprJs = i > 0 ? join(exprJs, blockJs) : exprJs + blockJs;
							        }

							        _.indent = prevIndent;
							    }

							    if ($filter) {
							        var filterJs = exprToJs($filter, Preset.e5);

							        exprJs = join(exprJs, 'if' + _.optSpace);
							        exprJs = join(exprJs, '(' + filterJs + ')');
							    }

							    exprJs = join(exprJs, bodyJs);
							    exprJs += isGenerator ? ')' : ']';

							    _.js += exprJs;
							}

							//Expression raw generator dictionary
							var ExprRawGen = {
							    SequenceExpression: function generateSequenceExpression($expr, settings) {
							        var $children = $expr.expressions,
							            childrenCount = $children.length,
							            lastChildIdx = childrenCount - 1,
							            parenthesize = Precedence.Sequence < settings.precedence,
							            exprGenSettings = Preset.e1(settings.allowIn || parenthesize);

							        if (parenthesize) _.js += '(';

							        for (var i = 0; i < childrenCount; i++) {
							            var $child = $children[i];

							            ExprGen[$child.type]($child, exprGenSettings);

							            if (i !== lastChildIdx) _.js += ',' + _.optSpace;
							        }

							        if (parenthesize) _.js += ')';
							    },

							    AssignmentExpression: function generateAssignmentExpression($expr, settings) {
							        var $left = $expr.left,
							            $right = $expr.right,
							            parenthesize = Precedence.Assignment < settings.precedence,
							            allowIn = settings.allowIn || parenthesize;

							        if (parenthesize) _.js += '(';

							        ExprGen[$left.type]($left, Preset.e17(allowIn));
							        _.js += _.optSpace + $expr.operator + _.optSpace;
							        ExprGen[$right.type]($right, Preset.e18(allowIn));

							        if (parenthesize) _.js += ')';
							    },

							    AssignmentPattern: function generateAssignmentPattern($node) {
							        var $fakeAssign = {
							            left: $node.left,
							            right: $node.right,
							            operator: '='
							        };

							        ExprGen.AssignmentExpression($fakeAssign, Preset.e4);
							    },

							    ArrowFunctionExpression: function generateArrowFunctionExpression($expr, settings) {
							        var parenthesize = Precedence.ArrowFunction < settings.precedence;

							        if ($expr.async) _.js += 'async ';

							        if (parenthesize) _.js += '(';

							        generateFunctionBody($expr);

							        if (parenthesize) _.js += ')';
							    },

							    AwaitExpression: function generateAwaitExpression($expr, settings) {
							        _.js += 'await ';

							        ExprGen[$expr.argument.type]($expr.argument, settings);
							    },

							    ConditionalExpression: function generateConditionalExpression($expr, settings) {
							        var $test = $expr.test,
							            $conseq = $expr.consequent,
							            $alt = $expr.alternate,
							            parenthesize = Precedence.Conditional < settings.precedence,
							            allowIn = settings.allowIn || parenthesize,
							            testGenSettings = Preset.e2(allowIn),
							            branchGenSettings = Preset.e1(allowIn);

							        if (parenthesize) _.js += '(';

							        ExprGen[$test.type]($test, testGenSettings);
							        _.js += _.optSpace + '?' + _.optSpace;
							        ExprGen[$conseq.type]($conseq, branchGenSettings);
							        _.js += _.optSpace + ':' + _.optSpace;
							        ExprGen[$alt.type]($alt, branchGenSettings);

							        if (parenthesize) _.js += ')';
							    },

							    LogicalExpression: generateLogicalOrBinaryExpression,

							    BinaryExpression: generateLogicalOrBinaryExpression,

							    CallExpression: function generateCallExpression($expr, settings) {
							        var $callee = $expr.callee,
							            $args = $expr['arguments'],
							            argCount = $args.length,
							            lastArgIdx = argCount - 1,
							            parenthesize = !settings.allowCall || Precedence.Call < settings.precedence;

							        if (parenthesize) _.js += '(';

							        ExprGen[$callee.type]($callee, Preset.e3);
							        _.js += '(';

							        for (var i = 0; i < argCount; ++i) {
							            var $arg = $args[i];

							            ExprGen[$arg.type]($arg, Preset.e4);

							            if (i !== lastArgIdx) _.js += ',' + _.optSpace;
							        }

							        _.js += ')';

							        if (parenthesize) _.js += ')';
							    },

							    NewExpression: function generateNewExpression($expr, settings) {
							        var $args = $expr['arguments'],
							            parenthesize = Precedence.New < settings.precedence,
							            argCount = $args.length,
							            lastArgIdx = argCount - 1,
							            withCall = !settings.allowUnparenthesizedNew || parentheses || argCount > 0,
							            calleeJs = exprToJs($expr.callee, Preset.e6(!withCall));

							        if (parenthesize) _.js += '(';

							        _.js += join('new', calleeJs);

							        if (withCall) {
							            _.js += '(';

							            for (var i = 0; i < argCount; ++i) {
							                var $arg = $args[i];

							                ExprGen[$arg.type]($arg, Preset.e4);

							                if (i !== lastArgIdx) _.js += ',' + _.optSpace;
							            }

							            _.js += ')';
							        }

							        if (parenthesize) _.js += ')';
							    },

							    MemberExpression: function generateMemberExpression($expr, settings) {
							        var $obj = $expr.object,
							            $prop = $expr.property,
							            parenthesize = Precedence.Member < settings.precedence,
							            isNumObj = !$expr.computed && $obj.type === Syntax.Literal && typeof $obj.value === 'number';

							        if (parenthesize) _.js += '(';

							        if (isNumObj) {

							            //NOTE: When the following conditions are all true:
							            //   1. No floating point
							            //   2. Don't have exponents
							            //   3. The last character is a decimal digit
							            //   4. Not hexadecimal OR octal number literal
							            // then we should add a floating point.

							            var numJs = exprToJs($obj, Preset.e11(settings.allowCall)),
							                withPoint = LAST_DECIMAL_DIGIT_REGEXP.test(numJs) && !FLOATING_OR_OCTAL_REGEXP.test(numJs);

							            _.js += withPoint ? numJs + '.' : numJs;
							        } else ExprGen[$obj.type]($obj, Preset.e11(settings.allowCall));

							        if ($expr.computed) {
							            _.js += '[';
							            ExprGen[$prop.type]($prop, Preset.e15(settings.allowCall));
							            _.js += ']';
							        } else _.js += '.' + $prop.name;

							        if (parenthesize) _.js += ')';
							    },

							    UnaryExpression: function generateUnaryExpression($expr, settings) {
							        var parenthesize = Precedence.Unary < settings.precedence,
							            op = $expr.operator,
							            argJs = exprToJs($expr.argument, Preset.e7);

							        if (parenthesize) _.js += '(';

							        //NOTE: delete, void, typeof
							        // get `typeof []`, not `typeof[]`
							        if (_.optSpace === '' || op.length > 2) _.js += join(op, argJs);else {
							            _.js += op;

							            //NOTE: Prevent inserting spaces between operator and argument if it is unnecessary
							            // like, `!cond`
							            var leftCp = op.charCodeAt(op.length - 1),
							                rightCp = argJs.charCodeAt(0);

							            // 0x2B = '+', 0x2D =  '-'
							            if (leftCp === rightCp && (leftCp === 0x2B || leftCp === 0x2D) || isIdentifierCh(leftCp) && isIdentifierCh(rightCp)) {
							                _.js += _.space;
							            }

							            _.js += argJs;
							        }

							        if (parenthesize) _.js += ')';
							    },

							    YieldExpression: function generateYieldExpression($expr, settings) {
							        var $arg = $expr.argument,
							            js = $expr.delegate ? 'yield*' : 'yield',
							            parenthesize = Precedence.Yield < settings.precedence;

							        if (parenthesize) _.js += '(';

							        if ($arg) {
							            var argJs = exprToJs($arg, Preset.e4);

							            js = join(js, argJs);
							        }

							        _.js += js;

							        if (parenthesize) _.js += ')';
							    },

							    UpdateExpression: function generateUpdateExpression($expr, settings) {
							        var $arg = $expr.argument,
							            $op = $expr.operator,
							            prefix = $expr.prefix,
							            precedence = prefix ? Precedence.Unary : Precedence.Postfix,
							            parenthesize = precedence < settings.precedence;

							        if (parenthesize) _.js += '(';

							        if (prefix) {
							            _.js += $op;
							            ExprGen[$arg.type]($arg, Preset.e8);
							        } else {
							            ExprGen[$arg.type]($arg, Preset.e8);
							            _.js += $op;
							        }

							        if (parenthesize) _.js += ')';
							    },

							    FunctionExpression: function generateFunctionExpression($expr) {
							        var isGenerator = !!$expr.generator;

							        if ($expr.async) _.js += 'async ';

							        _.js += isGenerator ? 'function*' : 'function';

							        if ($expr.id) {
							            _.js += isGenerator ? _.optSpace : _.space;
							            _.js += $expr.id.name;
							        } else _.js += _.optSpace;

							        generateFunctionBody($expr);
							    },

							    ExportBatchSpecifier: function generateExportBatchSpecifier() {
							        _.js += '*';
							    },

							    ArrayPattern: generateArrayPatternOrExpression,

							    ArrayExpression: generateArrayPatternOrExpression,

							    ClassExpression: function generateClassExpression($expr) {
							        var $id = $expr.id,
							            $super = $expr.superClass,
							            $body = $expr.body,
							            exprJs = 'class';

							        if ($id) {
							            var idJs = exprToJs($id, Preset.e9);

							            exprJs = join(exprJs, idJs);
							        }

							        if ($super) {
							            var superJs = exprToJs($super, Preset.e4);

							            superJs = join('extends', superJs);
							            exprJs = join(exprJs, superJs);
							        }

							        _.js += exprJs + _.optSpace;
							        StmtGen[$body.type]($body, Preset.s2);
							    },

							    MethodDefinition: function generateMethodDefinition($expr) {
							        var exprJs = $expr['static'] ? 'static' + _.optSpace : '',
							            keyJs = exprToJs($expr.key, Preset.e5);

							        if ($expr.computed) keyJs = '[' + keyJs + ']';

							        if ($expr.kind === 'get' || $expr.kind === 'set') {
							            keyJs = join($expr.kind, keyJs);
							            _.js += join(exprJs, keyJs);
							        } else {
							            if ($expr.value.generator) _.js += exprJs + '*' + keyJs;else if ($expr.value.async) _.js += exprJs + ' async ' + keyJs;else _.js += join(exprJs, keyJs);
							        }

							        generateFunctionBody($expr.value);
							    },

							    Property: function generateProperty($expr) {
							        var $val = $expr.value,
							            $kind = $expr.kind,
							            keyJs = exprToJs($expr.key, Preset.e5);

							        if ($expr.computed) keyJs = '[' + keyJs + ']';

							        if ($kind === 'get' || $kind === 'set') {
							            _.js += $kind + _.space + keyJs;
							            generateFunctionBody($val);
							        } else {
							            if ($expr.shorthand) _.js += keyJs;else if ($expr.method) {
							                if ($val.generator) keyJs = '*' + keyJs;else if ($val.async) keyJs = 'async ' + keyJs;

							                _.js += keyJs;
							                generateFunctionBody($val);
							            } else {
							                _.js += keyJs + ':' + _.optSpace;
							                ExprGen[$val.type]($val, Preset.e4);
							            }
							        }
							    },

							    ObjectExpression: function generateObjectExpression($expr) {
							        var $props = $expr.properties,
							            propCount = $props.length;

							        if (propCount) {
							            var lastPropIdx = propCount - 1,
							                prevIndent = shiftIndent();

							            _.js += '{';

							            for (var i = 0; i < propCount; i++) {
							                var $prop = $props[i],
							                    propType = $prop.type || Syntax.Property;

							                _.js += _.newline + _.indent;
							                ExprGen[propType]($prop, Preset.e5);

							                if (i !== lastPropIdx) _.js += ',';
							            }

							            _.indent = prevIndent;
							            _.js += _.newline + _.indent + '}';
							        } else _.js += '{}';
							    },

							    ObjectPattern: function generateObjectPattern($expr) {
							        var $props = $expr.properties,
							            propCount = $props.length;

							        if (propCount) {
							            var lastPropIdx = propCount - 1,
							                multiline = false;

							            if (propCount === 1) multiline = $props[0].value.type !== Syntax.Identifier;else {
							                for (var i = 0; i < propCount; i++) {
							                    if (!$props[i].shorthand) {
							                        multiline = true;
							                        break;
							                    }
							                }
							            }

							            _.js += multiline ? '{' + _.newline : '{';

							            var prevIndent = shiftIndent(),
							                propSuffix = ',' + (multiline ? _.newline : _.optSpace);

							            for (var i = 0; i < propCount; i++) {
							                var $prop = $props[i];

							                if (multiline) _.js += _.indent;

							                ExprGen[$prop.type]($prop, Preset.e5);

							                if (i !== lastPropIdx) _.js += propSuffix;
							            }

							            _.indent = prevIndent;
							            _.js += multiline ? _.newline + _.indent + '}' : '}';
							        } else _.js += '{}';
							    },

							    ThisExpression: function generateThisExpression() {
							        _.js += 'this';
							    },

							    Identifier: function generateIdentifier($expr) {
							        _.js += $expr.name;
							    },

							    ImportSpecifier: generateImportOrExportSpecifier,

							    ExportSpecifier: generateImportOrExportSpecifier,

							    Literal: function generateLiteral($expr) {
							        if (extra.raw && $expr.raw !== void 0) _.js += $expr.raw;else if ($expr.value === null) _.js += 'null';else {
							            var valueType = typeof $expr.value;

							            if (valueType === 'string') _.js += escapeString($expr.value);else if (valueType === 'number') _.js += generateNumber($expr.value);else if (valueType === 'boolean') _.js += $expr.value ? 'true' : 'false';else _.js += generateRegExp($expr.value);
							        }
							    },

							    GeneratorExpression: generateGeneratorOrComprehensionExpression,

							    ComprehensionExpression: generateGeneratorOrComprehensionExpression,

							    ComprehensionBlock: function generateComprehensionBlock($expr) {
							        var $left = $expr.left,
							            leftJs = void 0,
							            rightJs = exprToJs($expr.right, Preset.e5);

							        if ($left.type === Syntax.VariableDeclaration) leftJs = $left.kind + _.space + stmtToJs($left.declarations[0], Preset.s6);else leftJs = exprToJs($left, Preset.e10);

							        leftJs = join(leftJs, $expr.of ? 'of' : 'in');

							        _.js += 'for' + _.optSpace + '(' + join(leftJs, rightJs) + ')';
							    },

							    RestElement: function generateRestElement($node) {
							        _.js += '...' + $node.argument.name;
							    },

							    SpreadElement: function generateSpreadElement($expr) {
							        var $arg = $expr.argument;

							        _.js += '...';
							        ExprGen[$arg.type]($arg, Preset.e4);
							    },

							    TaggedTemplateExpression: function generateTaggedTemplateExpression($expr, settings) {
							        var $tag = $expr.tag,
							            $quasi = $expr.quasi,
							            parenthesize = Precedence.TaggedTemplate < settings.precedence;

							        if (parenthesize) _.js += '(';

							        ExprGen[$tag.type]($tag, Preset.e11(settings.allowCall));
							        ExprGen[$quasi.type]($quasi, Preset.e12);

							        if (parenthesize) _.js += ')';
							    },

							    TemplateElement: function generateTemplateElement($expr) {
							        //NOTE: Don't use "cooked". Since tagged template can use raw template
							        // representation. So if we do so, it breaks the script semantics.
							        _.js += $expr.value.raw;
							    },

							    TemplateLiteral: function generateTemplateLiteral($expr) {
							        var $quasis = $expr.quasis,
							            $childExprs = $expr.expressions,
							            quasiCount = $quasis.length,
							            lastQuasiIdx = quasiCount - 1;

							        _.js += '`';

							        for (var i = 0; i < quasiCount; ++i) {
							            var $quasi = $quasis[i];

							            ExprGen[$quasi.type]($quasi, Preset.e13);

							            if (i !== lastQuasiIdx) {
							                var $childExpr = $childExprs[i];

							                _.js += '${' + _.optSpace;
							                ExprGen[$childExpr.type]($childExpr, Preset.e5);
							                _.js += _.optSpace + '}';
							            }
							        }

							        _.js += '`';
							    },

							    Super: function generateSuper() {
							        _.js += 'super';
							    }
							};

							//-------------------------------------------------===------------------------------------------------------
							//                                              Statements
							//-------------------------------------------------===------------------------------------------------------


							//Regular expressions
							var EXPR_STMT_UNALLOWED_EXPR_REGEXP = /^{|^class(?:\s|{)|^function(?:\s|\*|\()/;

							//Common statement generators
							function generateTryStatementHandlers(stmtJs, $finalizer, handlers) {
							    var handlerCount = handlers.length,
							        lastHandlerIdx = handlerCount - 1;

							    for (var i = 0; i < handlerCount; ++i) {
							        var handlerJs = stmtToJs(handlers[i], Preset.s7);

							        stmtJs = join(stmtJs, handlerJs);

							        if ($finalizer || i !== lastHandlerIdx) stmtJs += adoptionSuffix(handlers[i].body);
							    }

							    return stmtJs;
							}

							function generateForStatementIterator($op, $stmt, settings) {
							    var $body = $stmt.body,
							        $left = $stmt.left,
							        bodySemicolonOptional = !semicolons && settings.semicolonOptional,
							        prevIndent1 = shiftIndent(),
							        stmtJs = 'for' + _.optSpace + '(';

							    if ($left.type === Syntax.VariableDeclaration) {
							        var prevIndent2 = shiftIndent();

							        stmtJs += $left.kind + _.space + stmtToJs($left.declarations[0], Preset.s6);
							        _.indent = prevIndent2;
							    } else stmtJs += exprToJs($left, Preset.e10);

							    stmtJs = join(stmtJs, $op);

							    var rightJs = exprToJs($stmt.right, Preset.e5);

							    stmtJs = join(stmtJs, rightJs) + ')';

							    _.indent = prevIndent1;

							    _.js += stmtJs + adoptionPrefix($body);
							    StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
							}

							//Statement generator dictionary
							var StmtRawGen = {
							    BlockStatement: function generateBlockStatement($stmt, settings) {
							        var $body = $stmt.body,
							            len = $body.length,
							            lastIdx = len - 1,
							            prevIndent = shiftIndent();

							        _.js += '{' + _.newline;

							        for (var i = 0; i < len; i++) {
							            var $item = $body[i];

							            _.js += _.indent;
							            StmtGen[$item.type]($item, Preset.s1(settings.functionBody, i === lastIdx));
							            _.js += _.newline;
							        }

							        _.indent = prevIndent;
							        _.js += _.indent + '}';
							    },

							    BreakStatement: function generateBreakStatement($stmt, settings) {
							        if ($stmt.label) _.js += 'break ' + $stmt.label.name;else _.js += 'break';

							        if (semicolons || !settings.semicolonOptional) _.js += ';';
							    },

							    ContinueStatement: function generateContinueStatement($stmt, settings) {
							        if ($stmt.label) _.js += 'continue ' + $stmt.label.name;else _.js += 'continue';

							        if (semicolons || !settings.semicolonOptional) _.js += ';';
							    },

							    ClassBody: function generateClassBody($stmt) {
							        var $body = $stmt.body,
							            itemCount = $body.length,
							            lastItemIdx = itemCount - 1,
							            prevIndent = shiftIndent();

							        _.js += '{' + _.newline;

							        for (var i = 0; i < itemCount; i++) {
							            var $item = $body[i],
							                itemType = $item.type || Syntax.Property;

							            _.js += _.indent;
							            ExprGen[itemType]($item, Preset.e5);

							            if (i !== lastItemIdx) _.js += _.newline;
							        }

							        _.indent = prevIndent;
							        _.js += _.newline + _.indent + '}';
							    },

							    ClassDeclaration: function generateClassDeclaration($stmt) {
							        var $body = $stmt.body,
							            $super = $stmt.superClass,
							            js = 'class ' + $stmt.id.name;

							        if ($super) {
							            var superJs = exprToJs($super, Preset.e4);

							            js += _.space + join('extends', superJs);
							        }

							        _.js += js + _.optSpace;
							        StmtGen[$body.type]($body, Preset.s2);
							    },

							    DirectiveStatement: function generateDirectiveStatement($stmt, settings) {
							        if (extra.raw && $stmt.raw) _.js += $stmt.raw;else _.js += escapeDirective($stmt.directive);

							        if (semicolons || !settings.semicolonOptional) _.js += ';';
							    },

							    DoWhileStatement: function generateDoWhileStatement($stmt, settings) {
							        var $body = $stmt.body,
							            $test = $stmt.test,
							            bodyJs = adoptionPrefix($body) + stmtToJs($body, Preset.s7) + adoptionSuffix($body);

							        //NOTE: Because `do 42 while (cond)` is Syntax Error. We need semicolon.
							        var stmtJs = join('do', bodyJs);

							        _.js += join(stmtJs, 'while' + _.optSpace + '(');
							        ExprGen[$test.type]($test, Preset.e5);
							        _.js += ')';

							        if (semicolons || !settings.semicolonOptional) _.js += ';';
							    },

							    CatchClause: function generateCatchClause($stmt) {
							        var $param = $stmt.param,
							            $guard = $stmt.guard,
							            $body = $stmt.body,
							            prevIndent = shiftIndent();

							        _.js += 'catch' + _.optSpace + '(';
							        ExprGen[$param.type]($param, Preset.e5);

							        if ($guard) {
							            _.js += ' if ';
							            ExprGen[$guard.type]($guard, Preset.e5);
							        }

							        _.indent = prevIndent;
							        _.js += ')' + adoptionPrefix($body);
							        StmtGen[$body.type]($body, Preset.s7);
							    },

							    DebuggerStatement: function generateDebuggerStatement($stmt, settings) {
							        _.js += 'debugger';

							        if (semicolons || !settings.semicolonOptional) _.js += ';';
							    },

							    EmptyStatement: function generateEmptyStatement() {
							        _.js += ';';
							    },

							    ExportDeclaration: function generateExportDeclaration($stmt, settings) {
							        var $specs = $stmt.specifiers,
							            $decl = $stmt.declaration,
							            withSemicolon = semicolons || !settings.semicolonOptional;

							        // export default AssignmentExpression[In] ;
							        if ($stmt['default']) {
							            var declJs = exprToJs($decl, Preset.e4);

							            _.js += join('export default', declJs);

							            if (withSemicolon) _.js += ';';
							        }

							        // export * FromClause ;
							        // export ExportClause[NoReference] FromClause ;
							        // export ExportClause ;
							        else if ($specs) {
							                var stmtJs = 'export';

							                if ($specs.length === 0) stmtJs += _.optSpace + '{' + _.optSpace + '}';else if ($specs[0].type === Syntax.ExportBatchSpecifier) {
							                    var specJs = exprToJs($specs[0], Preset.e5);

							                    stmtJs = join(stmtJs, specJs);
							                } else {
							                    var prevIndent = shiftIndent(),
							                        specCount = $specs.length,
							                        lastSpecIdx = specCount - 1;

							                    stmtJs += _.optSpace + '{';

							                    for (var i = 0; i < specCount; ++i) {
							                        stmtJs += _.newline + _.indent;
							                        stmtJs += exprToJs($specs[i], Preset.e5);

							                        if (i !== lastSpecIdx) stmtJs += ',';
							                    }

							                    _.indent = prevIndent;
							                    stmtJs += _.newline + _.indent + '}';
							                }

							                if ($stmt.source) {
							                    _.js += join(stmtJs, 'from' + _.optSpace);
							                    ExprGen.Literal($stmt.source);
							                } else _.js += stmtJs;

							                if (withSemicolon) _.js += ';';
							            }

							            // export VariableStatement
							            // export Declaration[Default]
							            else if ($decl) {
							                    var declJs = stmtToJs($decl, Preset.s4(!withSemicolon));

							                    _.js += join('export', declJs);
							                }
							    },

							    ExpressionStatement: function generateExpressionStatement($stmt, settings) {
							        var exprJs = exprToJs($stmt.expression, Preset.e5),
							            parenthesize = EXPR_STMT_UNALLOWED_EXPR_REGEXP.test(exprJs) || directive && settings.directiveContext && $stmt.expression.type === Syntax.Literal && typeof $stmt.expression.value === 'string';

							        //NOTE: '{', 'function', 'class' are not allowed in expression statement.
							        // Therefore, they should be parenthesized.
							        if (parenthesize) _.js += '(' + exprJs + ')';else _.js += exprJs;

							        if (semicolons || !settings.semicolonOptional) _.js += ';';
							    },

							    ImportDeclaration: function generateImportDeclaration($stmt, settings) {
							        var $specs = $stmt.specifiers,
							            stmtJs = 'import',
							            specCount = $specs.length;

							        //NOTE: If no ImportClause is present,
							        // this should be `import ModuleSpecifier` so skip `from`
							        // ModuleSpecifier is StringLiteral.
							        if (specCount) {
							            var hasBinding = !!$specs[0]['default'],
							                firstNamedIdx = hasBinding ? 1 : 0,
							                lastSpecIdx = specCount - 1;

							            // ImportedBinding
							            if (hasBinding) stmtJs = join(stmtJs, $specs[0].id.name);

							            // NamedImports
							            if (firstNamedIdx < specCount) {
							                if (hasBinding) stmtJs += ',';

							                stmtJs += _.optSpace + '{';

							                // import { ... } from "...";
							                if (firstNamedIdx === lastSpecIdx) stmtJs += _.optSpace + exprToJs($specs[firstNamedIdx], Preset.e5) + _.optSpace;else {
							                    var prevIndent = shiftIndent();

							                    // import {
							                    //    ...,
							                    //    ...,
							                    // } from "...";
							                    for (var i = firstNamedIdx; i < specCount; i++) {
							                        stmtJs += _.newline + _.indent + exprToJs($specs[i], Preset.e5);

							                        if (i !== lastSpecIdx) stmtJs += ',';
							                    }

							                    _.indent = prevIndent;
							                    stmtJs += _.newline + _.indent;
							                }

							                stmtJs += '}' + _.optSpace;
							            }

							            stmtJs = join(stmtJs, 'from');
							        }

							        _.js += stmtJs + _.optSpace;
							        ExprGen.Literal($stmt.source);

							        if (semicolons || !settings.semicolonOptional) _.js += ';';
							    },

							    VariableDeclarator: function generateVariableDeclarator($stmt, settings) {
							        var $id = $stmt.id,
							            $init = $stmt.init,
							            genSettings = Preset.e1(settings.allowIn);

							        if ($init) {
							            ExprGen[$id.type]($id, genSettings);
							            _.js += _.optSpace + '=' + _.optSpace;
							            ExprGen[$init.type]($init, genSettings);
							        } else {
							            if ($id.type === Syntax.Identifier) _.js += $id.name;else ExprGen[$id.type]($id, genSettings);
							        }
							    },

							    VariableDeclaration: function generateVariableDeclaration($stmt, settings) {
							        var $decls = $stmt.declarations,
							            len = $decls.length,
							            prevIndent = len > 1 ? shiftIndent() : _.indent,
							            declGenSettings = Preset.s3(settings.allowIn);

							        _.js += $stmt.kind;

							        for (var i = 0; i < len; i++) {
							            var $decl = $decls[i];

							            _.js += i === 0 ? _.space : ',' + _.optSpace;
							            StmtGen[$decl.type]($decl, declGenSettings);
							        }

							        if (semicolons || !settings.semicolonOptional) _.js += ';';

							        _.indent = prevIndent;
							    },

							    ThrowStatement: function generateThrowStatement($stmt, settings) {
							        var argJs = exprToJs($stmt.argument, Preset.e5);

							        _.js += join('throw', argJs);

							        if (semicolons || !settings.semicolonOptional) _.js += ';';
							    },

							    TryStatement: function generateTryStatement($stmt) {
							        var $block = $stmt.block,
							            $finalizer = $stmt.finalizer,
							            stmtJs = 'try' + adoptionPrefix($block) + stmtToJs($block, Preset.s7) + adoptionSuffix($block);

							        var $handlers = $stmt.handlers || $stmt.guardedHandlers;

							        if ($handlers) stmtJs = generateTryStatementHandlers(stmtJs, $finalizer, $handlers);

							        if ($stmt.handler) {
							            $handlers = isArray($stmt.handler) ? $stmt.handler : [$stmt.handler];
							            stmtJs = generateTryStatementHandlers(stmtJs, $finalizer, $handlers);
							        }

							        if ($finalizer) {
							            stmtJs = join(stmtJs, 'finally' + adoptionPrefix($finalizer));
							            stmtJs += stmtToJs($finalizer, Preset.s7);
							        }

							        _.js += stmtJs;
							    },

							    SwitchStatement: function generateSwitchStatement($stmt) {
							        var $cases = $stmt.cases,
							            $discr = $stmt.discriminant,
							            prevIndent = shiftIndent();

							        _.js += 'switch' + _.optSpace + '(';
							        ExprGen[$discr.type]($discr, Preset.e5);
							        _.js += ')' + _.optSpace + '{' + _.newline;
							        _.indent = prevIndent;

							        if ($cases) {
							            var caseCount = $cases.length,
							                lastCaseIdx = caseCount - 1;

							            for (var i = 0; i < caseCount; i++) {
							                var $case = $cases[i];

							                _.js += _.indent;
							                StmtGen[$case.type]($case, Preset.s4(i === lastCaseIdx));
							                _.js += _.newline;
							            }
							        }

							        _.js += _.indent + '}';
							    },

							    SwitchCase: function generateSwitchCase($stmt, settings) {
							        var $conseqs = $stmt.consequent,
							            $firstConseq = $conseqs[0],
							            $test = $stmt.test,
							            i = 0,
							            conseqSemicolonOptional = !semicolons && settings.semicolonOptional,
							            conseqCount = $conseqs.length,
							            lastConseqIdx = conseqCount - 1,
							            prevIndent = shiftIndent();

							        if ($test) {
							            var testJs = exprToJs($test, Preset.e5);

							            _.js += join('case', testJs) + ':';
							        } else _.js += 'default:';

							        if (conseqCount && $firstConseq.type === Syntax.BlockStatement) {
							            i++;
							            _.js += adoptionPrefix($firstConseq);
							            StmtGen[$firstConseq.type]($firstConseq, Preset.s7);
							        }

							        for (; i < conseqCount; i++) {
							            var $conseq = $conseqs[i],
							                semicolonOptional = i === lastConseqIdx && conseqSemicolonOptional;

							            _.js += _.newline + _.indent;
							            StmtGen[$conseq.type]($conseq, Preset.s4(semicolonOptional));
							        }

							        _.indent = prevIndent;
							    },

							    IfStatement: function generateIfStatement($stmt, settings) {
							        var $conseq = $stmt.consequent,
							            $test = $stmt.test,
							            prevIndent = shiftIndent(),
							            semicolonOptional = !semicolons && settings.semicolonOptional;

							        _.js += 'if' + _.optSpace + '(';
							        ExprGen[$test.type]($test, Preset.e5);
							        _.js += ')';
							        _.indent = prevIndent;
							        _.js += adoptionPrefix($conseq);

							        if ($stmt.alternate) {
							            var conseq = stmtToJs($conseq, Preset.s7) + adoptionSuffix($conseq),
							                alt = stmtToJs($stmt.alternate, Preset.s4(semicolonOptional));

							            if ($stmt.alternate.type === Syntax.IfStatement) alt = 'else ' + alt;else alt = join('else', adoptionPrefix($stmt.alternate) + alt);

							            _.js += join(conseq, alt);
							        } else StmtGen[$conseq.type]($conseq, Preset.s4(semicolonOptional));
							    },

							    ForStatement: function generateForStatement($stmt, settings) {
							        var $init = $stmt.init,
							            $test = $stmt.test,
							            $body = $stmt.body,
							            $update = $stmt.update,
							            bodySemicolonOptional = !semicolons && settings.semicolonOptional,
							            prevIndent = shiftIndent();

							        _.js += 'for' + _.optSpace + '(';

							        if ($init) {
							            if ($init.type === Syntax.VariableDeclaration) StmtGen[$init.type]($init, Preset.s6);else {
							                ExprGen[$init.type]($init, Preset.e14);
							                _.js += ';';
							            }
							        } else _.js += ';';

							        if ($test) {
							            _.js += _.optSpace;
							            ExprGen[$test.type]($test, Preset.e5);
							        }

							        _.js += ';';

							        if ($update) {
							            _.js += _.optSpace;
							            ExprGen[$update.type]($update, Preset.e5);
							        }

							        _.js += ')';
							        _.indent = prevIndent;
							        _.js += adoptionPrefix($body);
							        StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
							    },

							    ForInStatement: function generateForInStatement($stmt, settings) {
							        generateForStatementIterator('in', $stmt, settings);
							    },

							    ForOfStatement: function generateForOfStatement($stmt, settings) {
							        generateForStatementIterator('of', $stmt, settings);
							    },

							    LabeledStatement: function generateLabeledStatement($stmt, settings) {
							        var $body = $stmt.body,
							            bodySemicolonOptional = !semicolons && settings.semicolonOptional,
							            prevIndent = _.indent;

							        _.js += $stmt.label.name + ':' + adoptionPrefix($body);

							        if ($body.type !== Syntax.BlockStatement) prevIndent = shiftIndent();

							        StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
							        _.indent = prevIndent;
							    },

							    ModuleDeclaration: function generateModuleDeclaration($stmt, settings) {
							        _.js += 'module' + _.space + $stmt.id.name + _.space + 'from' + _.optSpace;

							        ExprGen.Literal($stmt.source);

							        if (semicolons || !settings.semicolonOptional) _.js += ';';
							    },

							    Program: function generateProgram($stmt) {
							        var $body = $stmt.body,
							            len = $body.length,
							            lastIdx = len - 1;

							        if (safeConcatenation && len > 0) _.js += '\n';

							        for (var i = 0; i < len; i++) {
							            var $item = $body[i];

							            _.js += _.indent;
							            StmtGen[$item.type]($item, Preset.s5(!safeConcatenation && i === lastIdx));

							            if (i !== lastIdx) _.js += _.newline;
							        }
							    },

							    FunctionDeclaration: function generateFunctionDeclaration($stmt) {
							        var isGenerator = !!$stmt.generator;

							        if ($stmt.async) _.js += 'async ';

							        _.js += isGenerator ? 'function*' + _.optSpace : 'function' + _.space;
							        _.js += $stmt.id.name;
							        generateFunctionBody($stmt);
							    },

							    ReturnStatement: function generateReturnStatement($stmt, settings) {
							        var $arg = $stmt.argument;

							        if ($arg) {
							            var argJs = exprToJs($arg, Preset.e5);

							            _.js += join('return', argJs);
							        } else _.js += 'return';

							        if (semicolons || !settings.semicolonOptional) _.js += ';';
							    },

							    WhileStatement: function generateWhileStatement($stmt, settings) {
							        var $body = $stmt.body,
							            $test = $stmt.test,
							            bodySemicolonOptional = !semicolons && settings.semicolonOptional,
							            prevIndent = shiftIndent();

							        _.js += 'while' + _.optSpace + '(';
							        ExprGen[$test.type]($test, Preset.e5);
							        _.js += ')';
							        _.indent = prevIndent;

							        _.js += adoptionPrefix($body);
							        StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
							    },

							    WithStatement: function generateWithStatement($stmt, settings) {
							        var $body = $stmt.body,
							            $obj = $stmt.object,
							            bodySemicolonOptional = !semicolons && settings.semicolonOptional,
							            prevIndent = shiftIndent();

							        _.js += 'with' + _.optSpace + '(';
							        ExprGen[$obj.type]($obj, Preset.e5);
							        _.js += ')';
							        _.indent = prevIndent;
							        _.js += adoptionPrefix($body);
							        StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
							    }
							};

							function generateStatement($stmt, option) {
							    StmtGen[$stmt.type]($stmt, option);
							}

							//CodeGen
							//-----------------------------------------------------------------------------------
							function exprToJs($expr, settings) {
							    var savedJs = _.js;
							    _.js = '';

							    ExprGen[$expr.type]($expr, settings);

							    var src = _.js;
							    _.js = savedJs;

							    return src;
							}

							function stmtToJs($stmt, settings) {
							    var savedJs = _.js;
							    _.js = '';

							    StmtGen[$stmt.type]($stmt, settings);

							    var src = _.js;
							    _.js = savedJs;

							    return src;
							}

							function run($node) {
							    _.js = '';

							    if (StmtGen[$node.type]) StmtGen[$node.type]($node, Preset.s7);else ExprGen[$node.type]($node, Preset.e19);

							    return _.js;
							}

							function wrapExprGen(gen) {
							    return function ($expr, settings) {
							        if (extra.verbatim && $expr.hasOwnProperty(extra.verbatim)) generateVerbatim($expr, settings);else gen($expr, settings);
							    };
							}

							function createExprGenWithExtras() {
							    var gens = {};

							    for (var key in ExprRawGen) {
							        if (ExprRawGen.hasOwnProperty(key)) gens[key] = wrapExprGen(ExprRawGen[key]);
							    }

							    return gens;
							}

							//Strings
							var _ = {
							    js: '',
							    newline: '\n',
							    optSpace: ' ',
							    space: ' ',
							    indentUnit: '    ',
							    indent: ''
							};

							//Generators
							var ExprGen = void 0,
							    StmtGen = StmtRawGen;

							function generate($node, options) {
							    var defaultOptions = getDefaultOptions(),
							        result,
							        pair;

							    if (options != null) {
							        //NOTE: Obsolete options
							        //
							        //   `options.indent`
							        //   `options.base`
							        //
							        // Instead of them, we can use `option.format.indent`.
							        if (typeof options.indent === 'string') {
							            defaultOptions.format.indent.style = options.indent;
							        }
							        if (typeof options.base === 'number') {
							            defaultOptions.format.indent.base = options.base;
							        }
							        options = updateDeeply(defaultOptions, options);
							        _.indentUnit = options.format.indent.style;
							        if (typeof options.base === 'string') {
							            _.indent = options.base;
							        } else {
							            _.indent = stringRepeat(_.indentUnit, options.format.indent.base);
							        }
							    } else {
							        options = defaultOptions;
							        _.indentUnit = options.format.indent.style;
							        _.indent = stringRepeat(_.indentUnit, options.format.indent.base);
							    }
							    json = options.format.json;
							    renumber = options.format.renumber;
							    hexadecimal = json ? false : options.format.hexadecimal;
							    quotes = json ? 'double' : options.format.quotes;
							    escapeless = options.format.escapeless;

							    _.newline = options.format.newline;
							    _.optSpace = options.format.space;

							    if (options.format.compact) _.newline = _.optSpace = _.indentUnit = _.indent = '';

							    _.space = _.optSpace ? _.optSpace : ' ';
							    parentheses = options.format.parentheses;
							    semicolons = options.format.semicolons;
							    safeConcatenation = options.format.safeConcatenation;
							    directive = options.directive;
							    parse = json ? null : options.parse;
							    extra = options;

							    if (extra.verbatim) ExprGen = createExprGenWithExtras();else ExprGen = ExprRawGen;

							    return run($node);
							}
						}
					},
					"transform.js": function (exports, module, require) {
						

						exports.__esModule = true;
						exports.default = transform;

						var _transformers = require('./transformers');

						var _transformers2 = _interopRequireDefault(_transformers);

						var _replaceNode = require('./transformers/replace-node');

						var _replaceNode2 = _interopRequireDefault(_replaceNode);

						var _esotope = require('./tools/esotope');

						function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

						// NOTE: We should avoid using native object prototype methods,
						// since they can be overriden by the client code. (GH-245)
						var objectToString = Object.prototype.toString; // -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------

						var objectHasOwnProperty = Object.prototype.hasOwnProperty;

						function getChange(node, parent, key) {
						    return {
						        start: node.originStart,
						        end: node.originEnd,
						        index: Array.isArray(parent[key]) ? parent[key].indexOf(node) : -1,

						        parent: parent,
						        key: key
						    };
						}

						// NOTE: There is an issue with processing `new` expressions. `new a.src.b()` will be transformed
						// to `new __get$(a, 'src').b()`, which is wrong. The correct result is `new (__get$(a, 'src')).b()`.
						// To solve this problem, we add a 'state' entity. This entity stores the "new" expression, so that
						// we can add it to the changes when the transformation is found.
						function createState(currState, node, parent, key, hasTransformedAncestor) {
						    var isNewExpression = node.type === _esotope.Syntax.NewExpression;
						    var isNewExpressionAncestor = isNewExpression && !currState.newExpressionAncestor;

						    return {
						        hasTransformedAncestor: currState.hasTransformedAncestor || hasTransformedAncestor,
						        newExpressionAncestor: isNewExpressionAncestor ? node : currState.newExpressionAncestor,
						        newExpressionAncestorParent: isNewExpressionAncestor ? parent : currState.newExpressionAncestorParent,
						        newExpressionAncestorKey: isNewExpressionAncestor ? key : currState.newExpressionAncestorKey
						    };
						}

						function transformChildNodes(node, changes, state) {
						    for (var key in node) {
						        if (objectHasOwnProperty.call(node, key)) {
						            var childNode = node[key];

						            if (objectToString.call(childNode) === '[object Array]') {
						                for (var j = 0; j < childNode.length; j++) {
						                    transform(childNode[j], node, key, changes, state);
						                }
						            } else transform(childNode, node, key, changes, state);
						        }
						    }
						}

						function isNodeTransformed(node) {
						    return node.originStart !== void 0 && node.originEnd !== void 0;
						}

						function addChangeForTransformedNode(state, changes, replacement, parent, key) {
						    var hasTransformedAncestor = state.hasTransformedAncestor;

						    hasTransformedAncestor |= state.newExpressionAncestor && isNodeTransformed(state.newExpressionAncestor);

						    if (!hasTransformedAncestor) {
						        if (state.newExpressionAncestor) {
						            (0, _replaceNode2.default)(state.newExpressionAncestor, state.newExpressionAncestor, state.newExpressionAncestorParent, state.newExpressionAncestorKey);
						            changes.push(getChange(state.newExpressionAncestor, state.newExpressionAncestorParent, state.newExpressionAncestorKey));
						        } else changes.push(getChange(replacement, parent, key));
						    }
						}

						function transform(node, parent, key, changes, state, reTransform) {
						    state = state || {};
						    changes = changes || [];

						    if (!node || typeof node !== 'object') return null;

						    var nodeChanged = false;

						    if (isNodeTransformed(node) && !reTransform) {
						        addChangeForTransformedNode(state, changes, node, parent, key);
						        nodeChanged = true;
						    } else {
						        var nodeTransformers = _transformers2.default[node.type];

						        if (nodeTransformers) {
						            for (var i = 0; i < nodeTransformers.length; i++) {
						                var transformer = nodeTransformers[i];

						                if (transformer.condition(node, parent)) {
						                    var replacement = transformer.run(node, parent, key);

						                    if (replacement) {
						                        (0, _replaceNode2.default)(node, replacement, parent, key);
						                        nodeChanged = true;

						                        addChangeForTransformedNode(state, changes, replacement, parent, key);

						                        if (transformer.nodeReplacementRequireTransform) {
						                            var newState = createState(state, replacement, parent, key, nodeChanged);

						                            transform(replacement, parent, key, changes, newState, true);

						                            return changes;
						                        }

						                        break;
						                    }
						                }
						            }
						        }
						    }

						    var childNodesState = createState(state, node, parent, key, nodeChanged);

						    transformChildNodes(node, changes, childNodesState);

						    return changes;
						}
						module.exports = exports['default'];
					},
					"transformers": {
						"computed-property-get.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							var _instrumented = require('../instrumented');

							// Transform:
							// obj[prop] -->
							// __get$(obj, prop)

							exports.default = {
							    nodeReplacementRequireTransform: true,

							    nodeTypes: [_esotope.Syntax.MemberExpression],

							    condition: function condition(node, parent) {
							        if (!node.computed) return false;

							        if (node.property.type === _esotope.Syntax.Literal && !(0, _instrumented.shouldInstrumentProperty)(node.property.value)) return false;

							        // super[prop]
							        if (node.object.type === _esotope.Syntax.Super) return false;

							        // object[prop] = value
							        if (parent.type === _esotope.Syntax.AssignmentExpression && parent.left === node) return false;

							        // delete object[prop]
							        if (parent.type === _esotope.Syntax.UnaryExpression && parent.operator === 'delete') return false;

							        // object[prop]++ || object[prop]-- || ++object[prop] || --object[prop]
							        if (parent.type === _esotope.Syntax.UpdateExpression && parent.operator === '++' || parent.operator === '--') return false;

							        // object[prop]()
							        if (parent.type === _esotope.Syntax.CallExpression && parent.callee === node) return false;

							        // new (object[prop])() || new (object[prop])
							        if (parent.type === _esotope.Syntax.NewExpression && parent.callee === node) return false;

							        // for(object[prop] in source)
							        if (parent.type === _esotope.Syntax.ForInStatement && parent.left === node) return false;

							        return true;
							    },

							    run: function run(node) {
							        return (0, _nodeBuilder.createComputedPropertyGetWrapper)(node.property, node.object);
							    }
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"computed-property-set.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							var _instrumented = require('../instrumented');

							// Transform:
							// obj[prop] = value -->
							// __set$(object, prop, value)

							exports.default = {
							    nodeReplacementRequireTransform: true,

							    nodeTypes: [_esotope.Syntax.AssignmentExpression],

							    condition: function condition(node) {
							        var left = node.left;

							        // super[prop] = value
							        if (left.type === _esotope.Syntax.MemberExpression && left.object.type === _esotope.Syntax.Super) return false;

							        if (node.operator === '=' && left.type === _esotope.Syntax.MemberExpression && left.computed) return left.property.type === _esotope.Syntax.Literal ? (0, _instrumented.shouldInstrumentProperty)(left.property.value) : true;

							        return false;
							    },

							    run: function run(node) {
							        return (0, _nodeBuilder.createComputedPropertySetWrapper)(node.left.property, node.left.object, node.right);
							    }
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"concat-operator.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							// Transform:
							// val1 += val2
							// --> val1 = val1 + val2

							// -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							exports.default = {
							    nodeReplacementRequireTransform: true,

							    nodeTypes: [_esotope.Syntax.AssignmentExpression],

							    condition: function condition(node) {
							        return node.operator === '+=';
							    },

							    run: function run(node) {
							        return (0, _nodeBuilder.createExpandedConcatOperation)(node.left, node.right);
							    }
							};
							module.exports = exports['default'];
						},
						"eval-bind.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							var _replaceNode = require('./replace-node');

							var _replaceNode2 = _interopRequireDefault(_replaceNode);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							// Transform:
							// foo = eval.bind(...); -->
							// foo = __get$Eval(eval).bind(...);

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.CallExpression],

							    condition: function condition(node) {
							        if (node.callee.type === _esotope.Syntax.MemberExpression && node.callee.property.name === 'bind') {
							            var obj = node.callee.object;

							            // obj.eval.bind(), obj[eval].bind(),
							            if (obj.type === _esotope.Syntax.MemberExpression && (obj.property.value || obj.property.name) === 'eval') return true;

							            // eval.bind()
							            if (obj.name === 'eval') return true;
							        }

							        return false;
							    },

							    run: function run(node) {
							        var getEvalNode = (0, _nodeBuilder.createGetEvalMethCall)(node.callee.object);

							        (0, _replaceNode2.default)(node.callee.object, getEvalNode, node.callee, 'object');

							        return null;
							    }
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"eval-call-apply.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							var _replaceNode = require('./replace-node');

							var _replaceNode2 = _interopRequireDefault(_replaceNode);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							var INVOCATION_FUNC_NAME_RE = /^(call|apply)$/;

							// Transform:
							// eval.call(ctx, script);
							// eval.apply(ctx, script); -->
							// eval.call(ctx, __proc$Script(script));
							// eval.apply(ctx, __proc$Script(script, true));

							// -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.CallExpression],

							    condition: function condition(node) {
							        // eval.<meth>(ctx, script, ...)
							        if (node.arguments.length < 2) return false;

							        if (node.callee.type === _esotope.Syntax.MemberExpression && INVOCATION_FUNC_NAME_RE.test(node.callee.property.name)) {
							            var obj = node.callee.object;

							            // obj.eval.<meth>(), obj[eval].<meth>(),
							            if (obj.type === _esotope.Syntax.MemberExpression && (obj.property.value || obj.property.name) === 'eval') return true;

							            // eval.<meth>()
							            if (obj.name === 'eval') return true;
							        }

							        return false;
							    },

							    run: function run(node) {
							        var isApply = node.callee.property.name === 'apply';
							        var newArg = (0, _nodeBuilder.createProcessScriptMethCall)(node.arguments[1], isApply);

							        (0, _replaceNode2.default)(node.arguments[1], newArg, node, 'arguments');

							        return null;
							    }
							};
							module.exports = exports['default'];
						},
						"eval-get.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _instruction = require('../instruction');

							var _instruction2 = _interopRequireDefault(_instruction);

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							// Transform:
							// const foo = eval; foo = eval; { _eval: eval }; return eval;
							// -->
							// const foo = _get$Eval(eval); foo = _get$Eval(eval); { _eval: _get$Eval(eval) }; return _get$Eval(eval);

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.Identifier],

							    condition: function condition(node, parent) {
							        if (node.name === 'eval') {
							            // Skip: eval()
							            if (parent.type === _esotope.Syntax.CallExpression && parent.callee === node) return false;

							            // Skip: class X { eval () {} }
							            if (parent.type === _esotope.Syntax.MethodDefinition) return false;

							            // Skip: class eval { x () {} }
							            if (parent.type === _esotope.Syntax.ClassDeclaration) return false;

							            // Skip: window.eval, eval.call
							            if (parent.type === _esotope.Syntax.MemberExpression) return false;

							            // Skip: function eval () { ... }
							            if ((parent.type === _esotope.Syntax.FunctionExpression || parent.type === _esotope.Syntax.FunctionDeclaration) && parent.id === node) return false;

							            // Skip: function (eval) { ... } || function func(eval) { ... } || eval => { ... }
							            if ((parent.type === _esotope.Syntax.FunctionExpression || parent.type === _esotope.Syntax.FunctionDeclaration || parent.type === _esotope.Syntax.ArrowFunctionExpression) && parent.params.indexOf(node) !== -1) return false;

							            // Skip: { eval: value }
							            if (parent.type === _esotope.Syntax.Property && parent.key === node) return false;

							            // Skip: eval = value || function x (eval = value) { ... }
							            if ((parent.type === _esotope.Syntax.AssignmentExpression || parent.type === _esotope.Syntax.AssignmentPattern) && parent.left === node) return false;

							            // Skip: const eval = value;
							            if (parent.type === _esotope.Syntax.VariableDeclarator && parent.id === node) return false;

							            // Skip: eval++ || eval-- || ++eval || --eval
							            if (parent.type === _esotope.Syntax.UpdateExpression && parent.operator === '++' || parent.operator === '--') return false;

							            // Skip already transformed: __get$Eval(eval)
							            if (parent.type === _esotope.Syntax.CallExpression && parent.callee.name === _instruction2.default.getEval) return false;

							            // Skip: function x (...eval) {}
							            if (parent.type === _esotope.Syntax.RestElement) return false;

							            return true;
							        }

							        return false;
							    },

							    run: _nodeBuilder.createGetEvalMethCall
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"eval.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _replaceNode = require('./replace-node');

							var _replaceNode2 = _interopRequireDefault(_replaceNode);

							var _esotope = require('../tools/esotope');

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							// Transform:
							// eval(script); --> eval(__proc$Script(script));

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.CallExpression],

							    condition: function condition(node) {
							        if (!node.arguments.length) return false;

							        // eval()
							        if (node.callee.type === _esotope.Syntax.Identifier && node.callee.name === 'eval') return true;

							        // obj.eval(), obj['eval'](),
							        return node.callee.type === _esotope.Syntax.MemberExpression && (node.callee.property.name || node.callee.property.value) === 'eval';
							    },

							    run: function run(node) {
							        var newArg = (0, _nodeBuilder.createProcessScriptMethCall)(node.arguments[0]);

							        (0, _replaceNode2.default)(node.arguments[0], newArg, node, 'arguments');

							        return null;
							    }
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"for-in.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _esotope = require('../tools/esotope');

							var _nodeBuilder = require('../node-builder');

							var _replaceNode = require('./replace-node');

							var _replaceNode2 = _interopRequireDefault(_replaceNode);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							// Transform:
							// for(obj[prop] in src), for(obj.prop in src) -->
							// for(const __set$temp in src) { obj[prop] = __set$temp; }

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.ForInStatement],

							    condition: function condition(node) {
							        return node.left.type === _esotope.Syntax.MemberExpression;
							    },

							    run: function run(node) {
							        var tempVarAst = (0, _nodeBuilder.createTempVarIdentifier)();
							        var varDeclaration = (0, _nodeBuilder.createVarDeclaration)(tempVarAst);
							        var assignmentExprStmt = (0, _nodeBuilder.createAssignmentExprStmt)(node.left, tempVarAst);

							        if (node.body.type !== _esotope.Syntax.BlockStatement) (0, _replaceNode2.default)(node.body, (0, _nodeBuilder.createBlockExprStmt)([assignmentExprStmt, node.body]), node, 'body');else (0, _replaceNode2.default)(null, assignmentExprStmt, node.body, 'body');

							        (0, _replaceNode2.default)(node.left, varDeclaration, node, 'left');

							        return null;
							    }
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"index.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _computedPropertyGet = require('./computed-property-get');

							var _computedPropertyGet2 = _interopRequireDefault(_computedPropertyGet);

							var _computedPropertySet = require('./computed-property-set');

							var _computedPropertySet2 = _interopRequireDefault(_computedPropertySet);

							var _concatOperator = require('./concat-operator');

							var _concatOperator2 = _interopRequireDefault(_concatOperator);

							var _eval = require('./eval');

							var _eval2 = _interopRequireDefault(_eval);

							var _evalBind = require('./eval-bind');

							var _evalBind2 = _interopRequireDefault(_evalBind);

							var _evalCallApply = require('./eval-call-apply');

							var _evalCallApply2 = _interopRequireDefault(_evalCallApply);

							var _evalGet = require('./eval-get');

							var _evalGet2 = _interopRequireDefault(_evalGet);

							var _windowEvalGet = require('./window-eval-get');

							var _windowEvalGet2 = _interopRequireDefault(_windowEvalGet);

							var _postMessageGet = require('./post-message-get');

							var _postMessageGet2 = _interopRequireDefault(_postMessageGet);

							var _windowPostMessageGet = require('./window-post-message-get');

							var _windowPostMessageGet2 = _interopRequireDefault(_windowPostMessageGet);

							var _postMessageCallApplyBind = require('./post-message-call-apply-bind');

							var _postMessageCallApplyBind2 = _interopRequireDefault(_postMessageCallApplyBind);

							var _forIn = require('./for-in');

							var _forIn2 = _interopRequireDefault(_forIn);

							var _locationGet = require('./location-get');

							var _locationGet2 = _interopRequireDefault(_locationGet);

							var _locationPropertyGet = require('./location-property-get');

							var _locationPropertyGet2 = _interopRequireDefault(_locationPropertyGet);

							var _locationSet = require('./location-set');

							var _locationSet2 = _interopRequireDefault(_locationSet);

							var _propertyGet = require('./property-get');

							var _propertyGet2 = _interopRequireDefault(_propertyGet);

							var _propertySet = require('./property-set');

							var _propertySet2 = _interopRequireDefault(_propertySet);

							var _methodCall = require('./method-call');

							var _methodCall2 = _interopRequireDefault(_methodCall);

							var _jsProtocolLastExpression = require('./js-protocol-last-expression');

							var _jsProtocolLastExpression2 = _interopRequireDefault(_jsProtocolLastExpression);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							var TRANSFORMERS = [_computedPropertyGet2.default, _computedPropertySet2.default, _concatOperator2.default, _eval2.default, _evalBind2.default, _evalCallApply2.default, _evalGet2.default, _windowEvalGet2.default, _postMessageGet2.default, _windowPostMessageGet2.default, _postMessageCallApplyBind2.default, _forIn2.default, _locationGet2.default, _locationPropertyGet2.default, _locationSet2.default, _propertyGet2.default, _propertySet2.default, _methodCall2.default, _jsProtocolLastExpression2.default]; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							exports.default = function createTransformerMap() {
							    var transformerMap = {};

							    for (var i = 0; i < TRANSFORMERS.length; i++) {
							        var transformer = TRANSFORMERS[i];

							        for (var j = 0; j < transformer.nodeTypes.length; j++) {
							            var nodeType = transformer.nodeTypes[j];

							            if (!transformerMap[nodeType]) transformerMap[nodeType] = [];

							            transformerMap[nodeType].push(transformer);
							        }
							    }

							    return transformerMap;
							}();

							module.exports = exports['default'];
						},
						"js-protocol-last-expression.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							// Transform:
							// x = 5; "hello" --> x = 5; parent.__proc$Html(window, "hello")
							// someAction(); generateHtmlPage() --> someAction(); parent.__proc$Html(window, generateHtmlPage())

							// -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							exports.default = {
							    nodeReplacementRequireTransform: true,

							    nodeTypes: [_esotope.Syntax.ExpressionStatement],

							    condition: function condition(node, parent) {
							        return parent.wrapLastExprWithProcessHtml && parent.body[parent.body.length - 1] === node;
							    },

							    run: function run(node, parent) {
							        parent.wrapLastExprWithProcessHtml = false;

							        return (0, _nodeBuilder.createHtmlProcessorWrapper)(node);
							    }
							};
							module.exports = exports['default'];
						},
						"location-get.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _instruction = require('../instruction');

							var _instruction2 = _interopRequireDefault(_instruction);

							var _esotope = require('../tools/esotope');

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							// Transform:
							// location -->
							// __get$Loc(location)

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.Identifier],

							    condition: function condition(node, parent) {
							        if (node.name !== 'location') return false;

							        // Skip: const location = value;
							        if (parent.type === _esotope.Syntax.VariableDeclarator && parent.id === node) return false;

							        // Skip: location = value || function x (location = value) { ... }
							        if ((parent.type === _esotope.Syntax.AssignmentExpression || parent.type === _esotope.Syntax.AssignmentPattern) && parent.left === node) return false;

							        // Skip: function location() {}
							        if ((parent.type === _esotope.Syntax.FunctionExpression || parent.type === _esotope.Syntax.FunctionDeclaration) && parent.id === node) return false;

							        // Skip: object.location || location.field
							        if (parent.type === _esotope.Syntax.MemberExpression) return false;

							        // Skip: { location: value }
							        if (parent.type === _esotope.Syntax.Property && parent.key === node) return false;

							        // Skip: location++ || location-- || ++location || --location
							        if (parent.type === _esotope.Syntax.UpdateExpression && parent.operator === '++' || parent.operator === '--') return false;

							        // Skip: function (location) { ... } || function func(location) { ... } || location => { ... }
							        if ((parent.type === _esotope.Syntax.FunctionExpression || parent.type === _esotope.Syntax.FunctionDeclaration || parent.type === _esotope.Syntax.ArrowFunctionExpression) && parent.params.indexOf(node) !== -1) return false;

							        // Skip already transformed: __get$Loc(location)
							        if (parent.type === _esotope.Syntax.CallExpression && parent.callee.name === _instruction2.default.getLocation) return false;

							        // Skip: class X { location () {} }
							        if (parent.type === _esotope.Syntax.MethodDefinition) return false;

							        // Skip: class location { x () {} }
							        if (parent.type === _esotope.Syntax.ClassDeclaration) return false;

							        // Skip: function x (...location) {}
							        if (parent.type === _esotope.Syntax.RestElement) return false;

							        return true;
							    },

							    run: function run() {
							        return (0, _nodeBuilder.createLocationGetWrapper)();
							    }
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"location-property-get.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							var _replaceNode = require('./replace-node');

							var _replaceNode2 = _interopRequireDefault(_replaceNode);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							// Transform:
							// location.field; location[field] -->
							// __get$Loc(location).field; __get$Loc(location)[field];

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.MemberExpression],

							    condition: function condition(node, parent) {
							        // Skip: for(location.field in obj)
							        if (parent.type === _esotope.Syntax.ForInStatement && parent.left === node) return false;

							        return node.object.name === 'location';
							    },

							    run: function run(node) {
							        (0, _replaceNode2.default)(node.object, (0, _nodeBuilder.createLocationGetWrapper)(), node, 'object');

							        return null;
							    }
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"location-set.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							// Transform:
							// location = value -->
							// (function(){ return __set$Loc(location, value) || location = value;}.apply(this))

							// -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.AssignmentExpression],

							    condition: function condition(node) {
							        return node.operator === '=' && node.left.type === _esotope.Syntax.Identifier && node.left.name === 'location';
							    },

							    run: function run(node, parent, key) {
							        var wrapWithSequence = key !== 'arguments' && key !== 'consequent' && key !== 'alternate' && (parent.type !== _esotope.Syntax.SequenceExpression || parent.expressions[0] === node);

							        return (0, _nodeBuilder.createLocationSetWrapper)(node.right, wrapWithSequence);
							    }
							};
							module.exports = exports['default'];
						},
						"method-call.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							var _instrumented = require('../instrumented');

							// Transform:
							// obj.method(args...); obj[method](args...); -->
							// _call$(obj, 'method', args...); _call$(obj, method, args...);

							exports.default = {
							    nodeReplacementRequireTransform: true,

							    nodeTypes: [_esotope.Syntax.CallExpression],

							    condition: function condition(node) {
							        var callee = node.callee;

							        if (callee.type === _esotope.Syntax.MemberExpression) {
							            if (callee.computed) return callee.property.type === _esotope.Syntax.Literal ? (0, _instrumented.shouldInstrumentMethod)(callee.property.value) : true;

							            return (0, _instrumented.shouldInstrumentMethod)(callee.property.name);
							        }

							        return false;
							    },

							    run: function run(node) {
							        var callee = node.callee;
							        var method = callee.computed ? callee.property : (0, _nodeBuilder.createStringLiteral)(callee.property.name);

							        return (0, _nodeBuilder.createMethCallWrapper)(callee.object, method, node.arguments);
							    }
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"post-message-call-apply-bind.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							var _replaceNode = require('./replace-node');

							var _replaceNode2 = _interopRequireDefault(_replaceNode);

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							var INVOCATION_FUNC_NAME_RE = /^(call|apply|bind)$/;

							// Transform:
							// postMessage.call(ctx, script);
							// postMessage.apply(ctx, script);
							// postMessage.bind(...); -->
							// __get$PostMessage(postMessage).call(ctx, script);
							// __get$PostMessage(postMessage).apply(ctx, script);
							// __get$PostMessage(postMessage).bind(...);

							// -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.CallExpression],

							    condition: function condition(node) {
							        if (node.callee.type === _esotope.Syntax.MemberExpression && INVOCATION_FUNC_NAME_RE.test(node.callee.property.name)) {
							            // postMessage.<call|apply>(ctx, script, ...)
							            if (node.arguments.length < 2 && node.callee.property.name !== 'bind') return false;

							            var obj = node.callee.object;

							            // obj.postMessage.<meth>(), obj[postMessage].<meth>(),
							            if (obj.type === _esotope.Syntax.MemberExpression && (obj.property.value || obj.property.name) === 'postMessage') return true;

							            // postMessage.<meth>()
							            if (obj.name === 'postMessage') return true;
							        }

							        return false;
							    },

							    run: function run(node) {
							        var nodeX = (0, _nodeBuilder.createGetPostMessageMethCall)(node.callee.object);

							        (0, _replaceNode2.default)(node.callee.object, nodeX, node.callee, 'object');

							        return null;
							    }
							};
							module.exports = exports['default'];
						},
						"post-message-get.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _instruction = require('../instruction');

							var _instruction2 = _interopRequireDefault(_instruction);

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							// Transform:
							// const foo = postMessage; foo = postMessage; { _postMessage: postMessage }; return postMessage;
							// -->
							// const foo = _get$PostMessage(postMessage); foo = _get$PostMessage(postMessage); { _postMessage: _get$PostMessage(postMessage) }; return _get$PostMessage(postMessage);

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.Identifier],

							    condition: function condition(node, parent) {
							        if (node.name === 'postMessage') {
							            // Skip: window.postMessage, postMessage.call
							            if (parent.type === _esotope.Syntax.MemberExpression) return false;

							            // Skip: class X { postMessage () {} }
							            if (parent.type === _esotope.Syntax.MethodDefinition) return false;

							            // Skip: class postMessage { x () {} }
							            if (parent.type === _esotope.Syntax.ClassDeclaration) return false;

							            // Skip: function postMessage () { ... }
							            if ((parent.type === _esotope.Syntax.FunctionExpression || parent.type === _esotope.Syntax.FunctionDeclaration) && parent.id === node) return false;

							            // Skip: function (postMessage) { ... } || function func(postMessage) { ... } || postMessage => { ... }
							            if ((parent.type === _esotope.Syntax.FunctionExpression || parent.type === _esotope.Syntax.FunctionDeclaration || parent.type === _esotope.Syntax.ArrowFunctionExpression) && parent.params.indexOf(node) !== -1) return false;

							            // Skip: { postMessage: value }
							            if (parent.type === _esotope.Syntax.Property && parent.key === node) return false;

							            // Skip: postMessage = value || function x (postMessage = value) { ... }
							            if ((parent.type === _esotope.Syntax.AssignmentExpression || parent.type === _esotope.Syntax.AssignmentPattern) && parent.left === node) return false;

							            // Skip: const postMessage = value;
							            if (parent.type === _esotope.Syntax.VariableDeclarator && parent.id === node) return false;

							            // Skip: postMessage++ || postMessage-- || ++postMessage || --postMessage
							            if (parent.type === _esotope.Syntax.UpdateExpression && parent.operator === '++' || parent.operator === '--') return false;

							            // Skip already transformed: __get$PostMessage(postMessage) || __call$(obj, postMessage, args...);
							            if (parent.type === _esotope.Syntax.CallExpression && (parent.callee.name === _instruction2.default.getPostMessage || parent.callee.name === _instruction2.default.callMethod && parent.arguments[1] === node)) return false;

							            // Skip: function x (...postMessage) {}
							            if (parent.type === _esotope.Syntax.RestElement) return false;

							            return true;
							        }

							        return false;
							    },

							    run: _nodeBuilder.createGetPostMessageMethCall
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"property-get.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							var _instrumented = require('../instrumented');

							// Transform:
							// obj.<wrappable-property> -->
							// __get$(obj, '<wrappable-property>')

							exports.default = {
							    nodeReplacementRequireTransform: true,

							    nodeTypes: [_esotope.Syntax.MemberExpression],

							    condition: function condition(node, parent) {
							        if (node.computed) return false;

							        if (!(0, _instrumented.shouldInstrumentProperty)(node.property.name)) return false;

							        // Skip: super.prop
							        if (node.object.type === _esotope.Syntax.Super) return false;

							        // Skip: object.prop = value
							        if (parent.type === _esotope.Syntax.AssignmentExpression && parent.left === node) return false;

							        // Skip: delete object.prop
							        if (parent.type === _esotope.Syntax.UnaryExpression && parent.operator === 'delete') return false;

							        // Skip: object.prop()
							        if (parent.type === _esotope.Syntax.CallExpression && parent.callee === node) return false;

							        // Skip: object.prop++ || object.prop-- || ++object.prop || --object.prop
							        if (parent.type === _esotope.Syntax.UpdateExpression && parent.operator === '++' || parent.operator === '--') return false;

							        // Skip: new (object.prop)() || new (object.prop)
							        if (parent.type === _esotope.Syntax.NewExpression && parent.callee === node) return false;

							        // Skip: for(object.prop in source)
							        if (parent.type === _esotope.Syntax.ForInStatement && parent.left === node) return false;

							        return true;
							    },

							    run: function run(node) {
							        return (0, _nodeBuilder.createPropertyGetWrapper)(node.property.name, node.object);
							    }
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"property-set.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							var _instrumented = require('../instrumented');

							// Transform:
							// obj.<wrappable-property> = value -->
							// __set$(obj, '<wrappable-property>', value)

							exports.default = {
							    nodeReplacementRequireTransform: true,

							    nodeTypes: [_esotope.Syntax.AssignmentExpression],

							    condition: function condition(node) {
							        // super.prop = value
							        if (node.left.type === _esotope.Syntax.MemberExpression && node.left.object.type === _esotope.Syntax.Super) return false;

							        return node.operator === '=' && node.left.type === _esotope.Syntax.MemberExpression && !node.left.computed && node.left.property.type === _esotope.Syntax.Identifier && (0, _instrumented.shouldInstrumentProperty)(node.left.property.name);
							    },

							    run: function run(node) {
							        return (0, _nodeBuilder.createPropertySetWrapper)(node.left.property.name, node.left.object, node.right);
							    }
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"replace-node.js": function (exports, module, require) {
							

							exports.__esModule = true;
							exports.default = replaceNode;
							// -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							function replaceNode(node, newNode, parent, key) {
							    if (Array.isArray(parent[key])) {
							        if (node) {
							            var idx = parent[key].indexOf(node);

							            parent[key][idx] = newNode;
							        } else parent[key].unshift(newNode);
							    } else parent[key] = newNode;

							    if (node) {
							        newNode.originStart = newNode.start = node.start;
							        newNode.originEnd = newNode.end = node.end;
							    } else {
							        var parentStart = parseInt(parent.start, 10) + 1;

							        newNode.originStart = newNode.originEnd = parentStart;
							    }
							}
							module.exports = exports['default'];
						},
						"window-eval-get.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _instruction = require('../instruction');

							var _instruction2 = _interopRequireDefault(_instruction);

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							// Transform:
							// const foo = window.eval; foo = window.eval; { _eval: window.eval }; return window.eval;
							// -->
							// const foo = _get$Eval(window.eval); foo = _get$Eval(window.eval); { _eval: _get$Eval(window.eval) }; return _get$Eval(window.eval);

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.MemberExpression],

							    condition: function condition(node, parent) {
							        // Skip: window.eval.field
							        if (parent.type === _esotope.Syntax.MemberExpression && (parent.property === node || parent.object === node)) return false;

							        // Skip: window.eval()
							        if (parent.type === _esotope.Syntax.CallExpression && parent.callee === node) return false;

							        // Skip: window.eval = 1, window["eval"] = 1
							        if (parent.type === _esotope.Syntax.AssignmentExpression && parent.left === node) return false;

							        // Skip already transformed: __get$Eval(window.eval), __get$Eval(window["eval"])
							        if (parent.type === _esotope.Syntax.CallExpression && parent.callee.name === _instruction2.default.getEval) return false;

							        // window.eval
							        if (node.property.type === _esotope.Syntax.Identifier && node.property.name === 'eval') return true;

							        // window['eval']
							        if (node.property.type === _esotope.Syntax.Literal && node.property.value === 'eval') return true;

							        return false;
							    },

							    run: _nodeBuilder.createGetEvalMethCall
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						},
						"window-post-message-get.js": function (exports, module, require) {
							

							exports.__esModule = true;

							var _instruction = require('../instruction');

							var _instruction2 = _interopRequireDefault(_instruction);

							var _nodeBuilder = require('../node-builder');

							var _esotope = require('../tools/esotope');

							function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

							// Transform:
							// const foo = window.postMessage; foo = window.postMessage; { _postMessage: window.postMessage }; return window.postMessage;
							// -->
							// const foo = _get$PostMessage(window.postMessage); foo = _get$PostMessage(window.postMessage); { _postMessage: _get$PostMessage(window.postMessage) }; return _get$PostMessage(window.postMessage);

							exports.default = {
							    nodeReplacementRequireTransform: false,

							    nodeTypes: [_esotope.Syntax.MemberExpression],

							    condition: function condition(node, parent) {
							        // Skip: window.postMessage.field
							        if (parent.type === _esotope.Syntax.MemberExpression && (parent.property === node || parent.object === node)) return false;

							        // Skip: window.postMessage()
							        if (parent.type === _esotope.Syntax.CallExpression && parent.callee === node) return false;

							        // Skip: window.postMessage = 1, window["postMessage"] = 1
							        if (parent.type === _esotope.Syntax.AssignmentExpression && parent.left === node) return false;

							        // Skip already transformed: __get$PostMessage(window.postMessage), __get$PostMessage(window["postMessage"])
							        if (parent.type === _esotope.Syntax.CallExpression && parent.callee.name === _instruction2.default.getPostMessage) return false;

							        // window.postMessage
							        if (node.property.type === _esotope.Syntax.Identifier && node.property.name === 'postMessage') return true;

							        // window['postMessage']
							        if (node.property.type === _esotope.Syntax.Literal && node.property.value === 'postMessage') return true;

							        return false;
							    },

							    run: _nodeBuilder.createGetPostMessageMethCall
							}; // -------------------------------------------------------------
							// WARNING: this file is used by both the client and the server.
							// Do not use any browser or node-specific API!
							// -------------------------------------------------------------

							module.exports = exports['default'];
						}
					}
				},
				"style.js": function (exports, module, require) {
					

					exports.__esModule = true;

					var _regexpEscape = require('../utils/regexp-escape');

					var _regexpEscape2 = _interopRequireDefault(_regexpEscape);

					var _internalAttributes = require('../processing/dom/internal-attributes');

					var _internalAttributes2 = _interopRequireDefault(_internalAttributes);

					var _url = require('../utils/url');

					function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

					function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------
					/* eslint hammerhead/proto-methods: 2 */

					var SOURCE_MAP_RE = /#\s*sourceMappingURL\s*=\s*[^\s]+(\s|\*\/)/i;
					var CSS_URL_PROPERTY_VALUE_PATTERN = /(url\s*\(\s*)(?:(')([^\s']*)(')|(")([^\s"]*)(")|([^\s)]*))(\s*\))|(@import\s+)(?:(')([^\s']*)(')|(")([^\s"]*)("))/g;
					var STYLESHEET_PROCESSING_START_COMMENT = '/*hammerhead|stylesheet|start*/';
					var STYLESHEET_PROCESSING_END_COMMENT = '/*hammerhead|stylesheet|end*/';
					var HOVER_PSEUDO_CLASS_RE = /\s*:\s*hover(\W)/gi;
					var PSEUDO_CLASS_RE = new RegExp('\\[' + _internalAttributes2.default.hoverPseudoClass + '\\](\\W)', 'ig');
					var IS_STYLE_SHEET_PROCESSED_RE = new RegExp('\\s*' + (0, _regexpEscape2.default)(STYLESHEET_PROCESSING_START_COMMENT), 'gi');
					var STYLESHEET_PROCESSING_COMMENTS_RE = new RegExp('\\s*' + (0, _regexpEscape2.default)(STYLESHEET_PROCESSING_START_COMMENT) + '\n?|' + ('\n?' + (0, _regexpEscape2.default)(STYLESHEET_PROCESSING_END_COMMENT) + '\\s*'), 'gi');

					var StyleProcessor = function () {
					    function StyleProcessor() {
					        _classCallCheck(this, StyleProcessor);

					        this.STYLESHEET_PROCESSING_START_COMMENT = STYLESHEET_PROCESSING_START_COMMENT;
					        this.STYLESHEET_PROCESSING_END_COMMENT = STYLESHEET_PROCESSING_END_COMMENT;
					    }

					    StyleProcessor.prototype.process = function process(css, urlReplacer, isStylesheetTable) {
					        if (!css || typeof css !== 'string' || IS_STYLE_SHEET_PROCESSED_RE.test(css)) return css;

					        var prefix = isStylesheetTable ? STYLESHEET_PROCESSING_START_COMMENT + '\n' : '';
					        var postfix = isStylesheetTable ? '\n' + STYLESHEET_PROCESSING_END_COMMENT : '';

					        // NOTE: Replace the :hover pseudo-class.
					        css = css.replace(HOVER_PSEUDO_CLASS_RE, '[' + _internalAttributes2.default.hoverPseudoClass + ']$1');

					        // NOTE: Remove the ‘source map’ directive.
					        css = css.replace(SOURCE_MAP_RE, '$1');

					        // NOTE: Replace URLs in CSS rules with proxy URLs.
					        return prefix + this._replaceStylsheetUrls(css, urlReplacer) + postfix;
					    };

					    StyleProcessor.prototype.cleanUp = function cleanUp(css, parseProxyUrl) {
					        if (typeof css !== 'string') return css;

					        css = css.replace(PSEUDO_CLASS_RE, ':hover$1').replace(STYLESHEET_PROCESSING_COMMENTS_RE, '');

					        return this._replaceStylsheetUrls(css, function (url) {
					            var parsedProxyUrl = parseProxyUrl(url);

					            return parsedProxyUrl ? parsedProxyUrl.destUrl : url;
					        });
					    };

					    StyleProcessor.prototype._replaceStylsheetUrls = function _replaceStylsheetUrls(css, processor) {
					        return css.replace(CSS_URL_PROPERTY_VALUE_PATTERN, function (match, prefix1, openQuote1, url1, closeQuote1, openQuote2, url2, closeQuote2, url3, postfix, prefix2, openQuote3, url4, closeQuote3, openQuote4, url5, closeQuote4) {
					            var prefix = prefix1 || prefix2;
					            var openQuote = openQuote1 || openQuote2 || openQuote3 || openQuote4 || '';
					            var url = url1 || url2 || url3 || url4 || url5;
					            var closeQuote = closeQuote1 || closeQuote2 || closeQuote3 || closeQuote4 || '';

					            postfix = postfix || '';

					            var processedUrl = (0, _url.isSpecialPage)(url) ? url : processor(url);

					            return url ? prefix + openQuote + processedUrl + closeQuote + postfix : match;
					        });
					    };

					    return StyleProcessor;
					}();

					exports.default = new StyleProcessor();
					module.exports = exports['default'];
				}
			},
			"request-pipeline": {
				"xhr": {
					"authorization.js": function (exports, module, require) {
						

						exports.__esModule = true;
						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------
						/* eslint hammerhead/proto-methods: 2 */

						exports.default = {
						    valuePrefix: 'hammerhead|prefix|by-client',
						    headers: ['authorization', 'authentication-info', 'proxy-authenticate', 'proxy-authorization']
						};
						module.exports = exports['default'];
					},
					"headers.js": function (exports, module, require) {
						

						exports.__esModule = true;
						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------
						/* eslint hammerhead/proto-methods: 2 */

						exports.default = {
						    requestMarker: 'x-hammerhead|xhr|request-marker',
						    withCredentials: 'x-hammerhead|xhr|with-credentials',
						    origin: 'x-hammerhead|xhr|origin',
						    fetchRequestCredentials: 'x-hammerhead|fetch|request-credentials'
						};
						module.exports = exports['default'];
					},
					"same-origin-check-failed-status-code.js": function (exports, module, require) {
						

						exports.__esModule = true;
						// -------------------------------------------------------------
						// WARNING: this file is used by both the client and the server.
						// Do not use any browser or node-specific API!
						// -------------------------------------------------------------
						/* eslint hammerhead/proto-methods: 2 */

						var SAME_ORIGIN_CHECK_FAILED_STATUS_CODE = 222;

						exports.default = SAME_ORIGIN_CHECK_FAILED_STATUS_CODE;
						module.exports = exports['default'];
					}
				}
			},
			"session": {
				"command.js": function (exports, module, require) {
					

					exports.__esModule = true;
					// -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------
					/* eslint hammerhead/proto-methods: 2 */

					var ServiceCommands = {
					    getUploadedFiles: 'hammerhead|command|get-uploaded-files',
					    setCookie: 'hammerhead|command|set-cookie',
					    uploadFiles: 'hammerhead|command|upload-files'
					};

					exports.default = ServiceCommands;
					module.exports = exports['default'];
				},
				"cookie-limit.js": function (exports, module, require) {
					

					exports.__esModule = true;
					// -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------
					/* eslint hammerhead/proto-methods: 2 */

					// NOTE: At least 4096 bytes per cookie (as measured by the sum of the length of the cookie's name,
					// value, and attributes). Specification https://tools.ietf.org/html/rfc6265#page-27 (GH-767)
					var BYTES_PER_COOKIE_LIMIT = 4096;

					exports.default = BYTES_PER_COOKIE_LIMIT;
					module.exports = exports['default'];
				}
			},
			"shadow-ui": {
				"class-name.js": function (exports, module, require) {
					

					exports.__esModule = true;
					// -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------
					/* eslint hammerhead/proto-methods: 2 */

					var POSTFIX = '-hammerhead-shadow-ui';

					exports.default = {
					    postfix: POSTFIX,
					    charset: 'charset' + POSTFIX,
					    script: 'script' + POSTFIX,
					    selfRemovingScript: 'self-removing-script' + POSTFIX,
					    uiStylesheet: 'ui-stylesheet' + POSTFIX
					};
					module.exports = exports['default'];
				}
			},
			"utils": {
				"cookie.js": function (exports, module, require) {
					

					exports.__esModule = true;
					exports.SYNCHRONIZATION_TYPE = undefined;
					exports.parseClientSyncCookieStr = parseClientSyncCookieStr;
					exports.prepareSyncCookieProperties = prepareSyncCookieProperties;
					exports.formatSyncCookie = formatSyncCookie;
					exports.parseSyncCookie = parseSyncCookie;
					exports.changeSyncType = changeSyncType;
					exports.isOutdatedSyncCookie = isOutdatedSyncCookie;
					exports.generateDeleteSyncCookieStr = generateDeleteSyncCookieStr;

					var _stringTrim = require('./string-trim');

					var _stringTrim2 = _interopRequireDefault(_stringTrim);

					function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

					var TIME_RADIX = 36; // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					var CLEAR_COOKIE_VALUE_STR = '=;path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT';
					var CLIENT_COOKIE_SYNC_KEY_FRAGMENT_COUNT = 7;
					var KEY_VALUE_REGEX = /(?:^([^=]+)=([\s\S]*))?/;

					var SYNCHRONIZATION_TYPE = exports.SYNCHRONIZATION_TYPE = {
					    server: 's',
					    client: 'c',
					    window: 'w'
					};

					var SYNCHRONIZATION_TYPE_RE = new RegExp('^[' + SYNCHRONIZATION_TYPE.server + SYNCHRONIZATION_TYPE.client + SYNCHRONIZATION_TYPE.window + ']+');

					function isSameCookies(cookie1, cookie2) {
					    return cookie1.sid === cookie2.sid && cookie1.key === cookie2.key && cookie1.domain === cookie2.domain && cookie1.path === cookie2.path;
					}

					function sortByOutdatedAndActual(parsedCookies) {
					    var outdated = [];
					    var actual = [];

					    for (var current = 0; current < parsedCookies.length; current++) {
					        var other = current + 1;

					        for (; other < parsedCookies.length; other++) {
					            if (isSameCookies(parsedCookies[current], parsedCookies[other])) {
					                if (parsedCookies[current].lastAccessed > parsedCookies[other].lastAccessed) {
					                    var temp = parsedCookies[current];

					                    parsedCookies[current] = parsedCookies[other];
					                    parsedCookies[other] = temp;
					                }

					                outdated.push(parsedCookies[current]);
					                break;
					            }
					        }

					        if (other === parsedCookies.length) actual.push(parsedCookies[current]);
					    }

					    return { outdated: outdated, actual: actual };
					}

					function stringifySyncType(cookie) {
					    return (cookie.isServerSync ? SYNCHRONIZATION_TYPE.server : '') + (cookie.isClientSync ? SYNCHRONIZATION_TYPE.client : '') + (cookie.isWindowSync ? SYNCHRONIZATION_TYPE.window : '');
					}

					function formatSyncCookieKey(cookie) {
					    var syncType = stringifySyncType(cookie);
					    var key = encodeURIComponent(cookie.key);
					    var domain = encodeURIComponent(cookie.domain);
					    var path = encodeURIComponent(cookie.path);
					    var expires = cookie.expires !== 'Infinity' ? cookie.expires.getTime().toString(TIME_RADIX) : '';
					    var lastAccessed = cookie.lastAccessed.getTime().toString(TIME_RADIX);

					    return syncType + '|' + cookie.sid + '|' + key + '|' + domain + '|' + path + '|' + expires + '|' + lastAccessed;
					}

					function parseClientSyncCookieStr(cookieStr) {
					    var cookies = cookieStr ? cookieStr.split(';') : '';
					    var parsedCookies = [];

					    for (var _i2 = 0; _i2 < cookies.length; _i2++) {
					        var cookie = cookies[_i2];
					        var parsedCookie = parseSyncCookie((0, _stringTrim2.default)(cookie));

					        if (parsedCookie) parsedCookies.push(parsedCookie);
					    }

					    return sortByOutdatedAndActual(parsedCookies);
					}

					function prepareSyncCookieProperties(cookie) {
					    cookie.syncKey = cookie.syncKey || formatSyncCookieKey(cookie);
					    cookie.cookieStr = cookie.cookieStr || cookie.syncKey + '=' + cookie.value;
					}

					function formatSyncCookie(cookie) {
					    if (cookie.cookieStr) return cookie.cookieStr + ';path=/';

					    return formatSyncCookieKey(cookie) + '=' + cookie.value + ';path=/';
					}

					function parseSyncCookie(cookieStr) {
					    var _KEY_VALUE_REGEX$exec = KEY_VALUE_REGEX.exec(cookieStr),
					        key = _KEY_VALUE_REGEX$exec[1],
					        value = _KEY_VALUE_REGEX$exec[2];

					    var parsedKey = key !== void 0 && value !== void 0 && key.split('|');

					    if (parsedKey && parsedKey.length !== CLIENT_COOKIE_SYNC_KEY_FRAGMENT_COUNT) return null;

					    return {
					        isServerSync: parsedKey[0].indexOf(SYNCHRONIZATION_TYPE.server) > -1,
					        isClientSync: parsedKey[0].indexOf(SYNCHRONIZATION_TYPE.client) > -1,
					        isWindowSync: parsedKey[0].indexOf(SYNCHRONIZATION_TYPE.window) > -1,
					        sid: parsedKey[1],
					        key: decodeURIComponent(parsedKey[2]),
					        domain: decodeURIComponent(parsedKey[3]),
					        path: decodeURIComponent(parsedKey[4]),
					        expires: parsedKey[5] ? new Date(parseInt(parsedKey[5], TIME_RADIX)) : 'Infinity',
					        lastAccessed: new Date(parseInt(parsedKey[6], TIME_RADIX)),
					        syncKey: key,

					        value: value,
					        cookieStr: cookieStr
					    };
					}

					function changeSyncType(parsedCookie, flags) {
					    if ('server' in flags) parsedCookie.isServerSync = flags.server;

					    if ('client' in flags) parsedCookie.isClientSync = flags.client;

					    if ('window' in flags) parsedCookie.isWindowSync = flags.window;

					    var newSyncTypeStr = stringifySyncType(parsedCookie);

					    parsedCookie.syncKey = parsedCookie.syncKey.replace(SYNCHRONIZATION_TYPE_RE, newSyncTypeStr);
					    parsedCookie.cookieStr = parsedCookie.cookieStr.replace(SYNCHRONIZATION_TYPE_RE, newSyncTypeStr);
					}

					function isOutdatedSyncCookie(currentCookie, newCookie) {
					    return newCookie.isServerSync === currentCookie.isServerSync && newCookie.sid === currentCookie.sid && newCookie.key === currentCookie.key && newCookie.domain === currentCookie.domain && newCookie.path === currentCookie.path && newCookie.lastAccessed > currentCookie.lastAccessed;
					}

					function generateDeleteSyncCookieStr(cookie) {
					    return cookie.syncKey + CLEAR_COOKIE_VALUE_STR;
					}
				},
				"create-self-removing-script.js": function (exports, module, require) {
					

					exports.__esModule = true;

					exports.default = function (script) {
					    return ('\n        <script class="' + _className2.default.selfRemovingScript + '">\n            (function () {\n                ' + script + '\n\n                var currentScript = document.currentScript;\n                var scriptsLength;\n                var scripts;\n\n                /* NOTE: IE11 doesn\'t support the \'currentScript\' property */\n                if (!currentScript) {\n                    var hammerhead;\n\n                    try {\n                        hammerhead = parent["' + _internalProperties2.default.hammerhead + '"] || window["' + _internalProperties2.default.hammerhead + '"];\n                    }\n                    catch (e) {\n                        hammerhead = window["' + _internalProperties2.default.hammerhead + '"];\n                    }\n                    \n                    if (hammerhead) {\n                        try {\n                            scripts       = hammerhead.nativeMethods.documentScriptsGetter.call(document);\n                            scriptsLength = hammerhead.nativeMethods.htmlCollectionLengthGetter.call(scripts);\n                        }\n                        catch (e) {}\n                    }\n\n                    scripts       = scripts || document.scripts;\n                    scriptsLength = scriptsLength !== void 0 ? scriptsLength : scripts.length;\n                    currentScript = scripts[scriptsLength - 1];\n                }\n\n                currentScript.parentNode.removeChild(currentScript);\n            })();\n        </script>\n    ').replace(/\n\s*|\/\*[\S\s]*?\*\//g, '');
					};

					var _className = require('../shadow-ui/class-name');

					var _className2 = _interopRequireDefault(_className);

					var _internalProperties = require('../processing/dom/internal-properties');

					var _internalProperties2 = _interopRequireDefault(_internalProperties);

					function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

					module.exports = exports['default']; // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------
				},
				"get-bom.js": function (exports, module, require) {
					

					exports.__esModule = true;

					exports.default = function (str) {
					    var match = str.match(BOM_RE);

					    return match ? match[0] : null;
					};

					// -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------
					/* eslint hammerhead/proto-methods: 2 */

					var BOM_RE = /^(\xEF\xBB\xBF|\xFE\xFF|\xFF\xFE|\x00\x00\xFE\xFF|\xFF\xFE\x00\x00|\x2B\x2F\x76\x38|\x2B\x2F\x76\x39|\x2B\x2F\x76\x2B|\x2B\x2F\x76\x2F|\xF7\x64\x4C|\xDD\x73\x66\x73|\x0E\xFE\xFF|\xFB\xEE\x28|\x84\x31\x95\x33)/;

					module.exports = exports['default'];
				},
				"get-storage-key.js": function (exports, module, require) {
					

					exports.__esModule = true;
					exports.default = getStorageKey;
					// -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------
					/* eslint hammerhead/proto-methods: 2 */
					var STORAGE_WRAPPER_PREFIX = 'hammerhead|storage-wrapper|';

					function getStorageKey(sessionId, host) {
					    return STORAGE_WRAPPER_PREFIX + sessionId + '|' + host;
					}
					module.exports = exports['default'];
				},
				"regexp-escape.js": function (exports, module, require) {
					

					exports.__esModule = true;

					exports.default = function (str) {
					    return str.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
					};

					module.exports = exports['default']; // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------
					/* eslint hammerhead/proto-methods: 2 */

					// NOTE: taken from https://github.com/benjamingr/RegExp.escape
				},
				"string-trim.js": function (exports, module, require) {
					

					exports.__esModule = true;

					exports.default = function (str) {
					    return typeof str === 'string' ? str.replace(/(^\s+)|(\s+$)/g, '') : str;
					};

					module.exports = exports['default']; // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					// NOTE: Some websites override the String.prototype.trim method. When we use this function
					// in our scripts, we expect it to have the default behavior. Therefore, in order to protect
					// ourselves from spoofing, we must use our own implementation. Also, we cannot use the
					// String.prototype.trim method because on the client-side it is the same in the top window and
					// an iframe window. The client code may override this method in the top window before the
					// iframe is initialized, so that the iframe will lose access to the native method.
				},
				"url.js": function (exports, module, require) {
					

					exports.__esModule = true;
					exports.HTTPS_DEFAULT_PORT = exports.HTTP_DEFAULT_PORT = exports.SPECIAL_PAGES = exports.TRAILING_SLASH_RE = exports.REQUEST_DESCRIPTOR_VALUES_SEPARATOR = exports.HASH_RE = exports.SUPPORTED_PROTOCOL_RE = undefined;
					exports.parseResourceType = parseResourceType;
					exports.getResourceTypeString = getResourceTypeString;
					exports.isSubDomain = isSubDomain;
					exports.sameOriginCheck = sameOriginCheck;
					exports.getURLString = getURLString;
					exports.getProxyUrl = getProxyUrl;
					exports.getDomain = getDomain;
					exports.parseProxyUrl = parseProxyUrl;
					exports.getPathname = getPathname;
					exports.parseUrl = parseUrl;
					exports.isSupportedProtocol = isSupportedProtocol;
					exports.resolveUrlAsDest = resolveUrlAsDest;
					exports.formatUrl = formatUrl;
					exports.correctMultipleSlashes = correctMultipleSlashes;
					exports.processSpecialChars = processSpecialChars;
					exports.ensureTrailingSlash = ensureTrailingSlash;
					exports.isSpecialPage = isSpecialPage;
					exports.isRelativeUrl = isRelativeUrl;
					exports.isValidUrl = isValidUrl;
					exports.ensureOriginTrailingSlash = ensureOriginTrailingSlash;
					exports.omitDefaultPort = omitDefaultPort;
					exports.prepareUrl = prepareUrl;

					var _stringTrim = require('./string-trim');

					var _stringTrim2 = _interopRequireDefault(_stringTrim);

					function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

					//Const
					var PROTOCOL_RE = /^([\w-]+?:)(\/\/|[^\\/]|$)/; // -------------------------------------------------------------
					// WARNING: this file is used by both the client and the server.
					// Do not use any browser or node-specific API!
					// -------------------------------------------------------------

					var LEADING_SLASHES_RE = /^(\/\/)/;
					var HOST_RE = /^(.*?)(\/|%|\?|;|#|$)/;
					var PORT_RE = /:([0-9]*)$/;
					var QUERY_AND_HASH_RE = /(\?.+|#[^#]*)$/;
					var PATH_AFTER_HOST_RE = /^\/([^/]+?)\/([\S\s]+)$/;
					var HTTP_RE = /^(?:https?):/;
					var FILE_RE = /^file:/i;

					var SUPPORTED_PROTOCOL_RE = exports.SUPPORTED_PROTOCOL_RE = /^(?:https?|file):/i;
					var HASH_RE = exports.HASH_RE = /^#/;
					var REQUEST_DESCRIPTOR_VALUES_SEPARATOR = exports.REQUEST_DESCRIPTOR_VALUES_SEPARATOR = '!';
					var TRAILING_SLASH_RE = exports.TRAILING_SLASH_RE = /\/$/;
					var SPECIAL_PAGES = exports.SPECIAL_PAGES = ['about:blank', 'about:error'];

					var HTTP_DEFAULT_PORT = exports.HTTP_DEFAULT_PORT = '80';
					var HTTPS_DEFAULT_PORT = exports.HTTPS_DEFAULT_PORT = '443';

					function parseResourceType(resourceType) {
					    if (!resourceType) {
					        return {
					            isIframe: false,
					            isForm: false,
					            isScript: false,
					            isEventSource: false,
					            isHtmlImport: false,
					            isWebSocket: false
					        };
					    }

					    return {
					        isIframe: /i/.test(resourceType),
					        isForm: /f/.test(resourceType),
					        isScript: /s/.test(resourceType),
					        isEventSource: /e/.test(resourceType),
					        isHtmlImport: /h/.test(resourceType),
					        isWebSocket: /w/.test(resourceType)
					    };
					}

					function getResourceTypeString(resourceType) {
					    resourceType = resourceType || {};

					    if (!resourceType.isIframe && !resourceType.isForm && !resourceType.isScript && !resourceType.isEventSource && !resourceType.isHtmlImport && !resourceType.isWebSocket) return null;

					    return [resourceType.isIframe ? 'i' : '', resourceType.isForm ? 'f' : '', resourceType.isScript ? 's' : '', resourceType.isEventSource ? 'e' : '', resourceType.isHtmlImport ? 'h' : '', resourceType.isWebSocket ? 'w' : ''].join('');
					}

					function isSubDomain(domain, subDomain) {
					    domain = domain.replace(/^www./i, '');
					    subDomain = subDomain.replace(/^www./i, '');

					    if (domain === subDomain) return true;

					    var index = subDomain.lastIndexOf(domain);

					    return subDomain[index - 1] === '.' && subDomain.length === index + domain.length;
					}

					function sameOriginCheck(location, checkedUrl, rejectForSubdomains) {
					    if (!checkedUrl) return true;

					    var parsedLocation = parseUrl(location);
					    var parsedCheckedUrl = parseUrl(checkedUrl);
					    var parsedProxyLocation = parseProxyUrl(location);
					    var parsedDestUrl = parsedProxyLocation ? parsedProxyLocation.destResourceInfo : parsedLocation;
					    var isRelative = !parsedCheckedUrl.host;

					    if (isRelative || parsedCheckedUrl.host === parsedLocation.host && parsedCheckedUrl.protocol === parsedLocation.protocol) return true;

					    if (parsedDestUrl) {
					        var portsEq = !parsedDestUrl.port && !parsedCheckedUrl.port || parsedDestUrl.port && parsedDestUrl.port.toString() === parsedCheckedUrl.port;

					        if (parsedDestUrl.protocol === parsedCheckedUrl.protocol && portsEq) {
					            if (parsedDestUrl.hostname === parsedCheckedUrl.hostname) return true;

					            var isSubDomainHostname = isSubDomain(parsedDestUrl.hostname, parsedCheckedUrl.hostname) || isSubDomain(parsedCheckedUrl.hostname, parsedDestUrl.hostname);

					            return !rejectForSubdomains && isSubDomainHostname;
					        }
					    }

					    return false;
					}

					// NOTE: Convert the destination protocol and hostname to the lower case. (GH-1)
					function convertHostToLowerCase(url) {
					    var parsedUrl = parseUrl(url);
					    var protocolHostSeparator = parsedUrl.protocol === 'about:' ? '' : '//';

					    return (parsedUrl.protocol + protocolHostSeparator + parsedUrl.host).toLowerCase() + parsedUrl.partAfterHost;
					}

					function getURLString(url) {
					    // TODO: fix it
					    // eslint-disable-next-line no-undef
					    if (url === null && /iPad|iPhone/i.test(window.navigator.userAgent)) return '';

					    return String(url).replace(/\n|\t/g, '');
					}

					function getProxyUrl(url, opts) {
					    var params = [opts.sessionId];

					    if (opts.resourceType) params.push(opts.resourceType);

					    if (opts.charset) params.push(opts.charset.toLowerCase());

					    if (opts.reqOrigin) params.push(opts.reqOrigin);

					    params = params.join(REQUEST_DESCRIPTOR_VALUES_SEPARATOR);

					    var proxyProtocol = opts.proxyProtocol || 'http:';

					    return proxyProtocol + '//' + opts.proxyHostname + ':' + opts.proxyPort + '/' + params + '/' + convertHostToLowerCase(url);
					}

					function getDomain(parsed) {
					    return formatUrl({
					        protocol: parsed.protocol,
					        host: parsed.host,
					        hostname: parsed.hostname,
					        port: parsed.port
					    });
					}

					function parseRequestDescriptor(desc) {
					    var params = desc.split(REQUEST_DESCRIPTOR_VALUES_SEPARATOR);

					    if (!params.length) return null;

					    var sessionId = params[0];
					    var resourceType = params[1] || null;
					    var resourceData = params[2] || null;
					    var parsedDesc = { sessionId: sessionId, resourceType: resourceType };

					    if (resourceType && resourceData) {
					        var parsedResourceType = parseResourceType(resourceType);

					        if (parsedResourceType.isScript) parsedDesc.charset = resourceData;else if (parsedResourceType.isWebSocket) parsedDesc.reqOrigin = decodeURIComponent(resourceData);
					    }

					    return parsedDesc;
					}

					function parseProxyUrl(proxyUrl) {
					    // TODO: Remove it.
					    var parsedUrl = parseUrl(proxyUrl);

					    if (!parsedUrl.partAfterHost) return null;

					    var match = parsedUrl.partAfterHost.match(PATH_AFTER_HOST_RE);

					    if (!match) return null;

					    var parsedDesc = parseRequestDescriptor(match[1]);

					    // NOTE: We should have, at least, the job uid and the owner token.
					    if (!parsedDesc) return null;

					    var destUrl = match[2];

					    // Browser can redirect to a special page with hash (GH-1671)
					    var destUrlWithoutHash = destUrl.replace(/#[\S\s]*$/, '');

					    if (!isSpecialPage(destUrlWithoutHash) && !SUPPORTED_PROTOCOL_RE.test(destUrl)) return null;

					    var destResourceInfo = !isSpecialPage(destUrlWithoutHash) ? parseUrl(match[2]) : {
					        protocol: 'about:',
					        host: '',
					        hostname: '',
					        port: '',
					        partAfterHost: ''
					    };

					    return {
					        destUrl: destUrl,
					        destResourceInfo: destResourceInfo,
					        partAfterHost: parsedUrl.partAfterHost,

					        proxy: {
					            hostname: parsedUrl.hostname,
					            port: parsedUrl.port
					        },

					        sessionId: parsedDesc.sessionId,
					        resourceType: parsedDesc.resourceType,
					        charset: parsedDesc.charset,
					        reqOrigin: parsedDesc.reqOrigin
					    };
					}

					function getPathname(path) {
					    return path.replace(QUERY_AND_HASH_RE, '');
					}

					function parseUrl(url) {
					    var parsed = {};

					    url = processSpecialChars(url);

					    if (!url) return parsed;

					    url = (0, _stringTrim2.default)(url);

					    // Protocol
					    var hasImplicitProtocol = false;
					    var remainder = url.replace(PROTOCOL_RE, function (str, protocol, strAfterProtocol) {
					        parsed.protocol = protocol;
					        return strAfterProtocol;
					    }).replace(LEADING_SLASHES_RE, function () {
					        hasImplicitProtocol = true;
					        return '';
					    });

					    // NOTE: the URL is relative.
					    if (!parsed.protocol && !hasImplicitProtocol) {
					        parsed.partAfterHost = url;
					        return parsed;
					    }

					    // Host
					    parsed.partAfterHost = remainder.replace(HOST_RE, function (str, host, restPartSeparator) {
					        parsed.host = host;
					        parsed.port = '';
					        return restPartSeparator;
					    });

					    parsed.hostname = parsed.host ? parsed.host.replace(PORT_RE, function (str, port) {
					        parsed.port = port;
					        return '';
					    }) : '';

					    return parsed;
					}

					function isSupportedProtocol(url) {
					    url = (0, _stringTrim2.default)(url || '');

					    var isHash = HASH_RE.test(url);

					    if (isHash) return false;

					    var protocol = url.match(PROTOCOL_RE);

					    if (!protocol) return true;

					    return SUPPORTED_PROTOCOL_RE.test(protocol[0]);
					}

					function resolveUrlAsDest(url, getProxyUrlMeth) {
					    getProxyUrlMeth = getProxyUrlMeth || getProxyUrl;

					    if (isSupportedProtocol(url)) {
					        var proxyUrl = getProxyUrlMeth(url);
					        var parsedProxyUrl = parseProxyUrl(proxyUrl);

					        return parsedProxyUrl ? formatUrl(parsedProxyUrl.destResourceInfo) : url;
					    }

					    return url;
					}

					function formatUrl(parsedUrl) {
					    // NOTE: the URL is relative.
					    if (parsedUrl.protocol !== 'file:' && !parsedUrl.host && (!parsedUrl.hostname || !parsedUrl.port)) return parsedUrl.partAfterHost;

					    var url = parsedUrl.protocol || '';

					    url += '//';

					    if (parsedUrl.username || parsedUrl.password) url += parsedUrl.username + ':' + parsedUrl.password + '@';

					    if (parsedUrl.host) url += parsedUrl.host;else {
					        url += parsedUrl.hostname;

					        if (parsedUrl.port) url += ':' + parsedUrl.port;
					    }

					    if (parsedUrl.partAfterHost) url += parsedUrl.partAfterHost;

					    return url;
					}

					function correctMultipleSlashes(url) {
					    var pageProtocol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

					    // NOTE: Remove unnecessary slashes from the beginning of the url and after scheme.
					    // For example:
					    // "//////example.com" -> "//example.com" (scheme-less HTTP(S) URL)
					    // "////home/testcafe/documents" -> "///home/testcafe/documents" (scheme-less unix file URL)
					    // "http:///example.com" -> "http://example.com"
					    //
					    // And add missing slashes after the file scheme.
					    // "file://C:/document.txt" -> "file:///C:/document.txt"
					    if (url.match(FILE_RE) || pageProtocol.match(FILE_RE)) {
					        return url.replace(/^(file:)?\/+(\/\/\/.*$)/i, '$1$2').replace(/^(file:)?\/*([A-Za-z]):/i, '$1///$2:');
					    }

					    return url.replace(/^(https?:)?\/+(\/\/.*$)/i, '$1$2');
					}

					function processSpecialChars(url) {
					    return correctMultipleSlashes(getURLString(url));
					}

					function ensureTrailingSlash(srcUrl, processedUrl) {
					    if (!isValidUrl(processedUrl)) return processedUrl;

					    var srcUrlEndsWithTrailingSlash = TRAILING_SLASH_RE.test(srcUrl);
					    var processedUrlEndsWithTrailingSlash = TRAILING_SLASH_RE.test(processedUrl);

					    if (srcUrlEndsWithTrailingSlash && !processedUrlEndsWithTrailingSlash) processedUrl += '/';else if (srcUrl && !srcUrlEndsWithTrailingSlash && processedUrlEndsWithTrailingSlash) processedUrl = processedUrl.replace(TRAILING_SLASH_RE, '');

					    return processedUrl;
					}

					function isSpecialPage(url) {
					    return SPECIAL_PAGES.indexOf(url) !== -1;
					}

					function isRelativeUrl(url) {
					    var parsedUrl = parseUrl(url);

					    return parsedUrl.protocol !== 'file:' && !parsedUrl.host;
					}

					function isValidPort(port) {
					    var parsedPort = parseInt(port, 10);

					    return parsedPort > 0 && parsedPort <= 65535;
					}

					function isValidUrl(url) {
					    var parsedUrl = parseUrl(url);

					    return parsedUrl.protocol === 'file:' || parsedUrl.hostname && (!parsedUrl.port || isValidPort(parsedUrl.port));
					}

					function ensureOriginTrailingSlash(url) {
					    // NOTE: If you request an url containing only port, host and protocol
					    // then browser adds the trailing slash itself.
					    var parsedUrl = parseUrl(url);

					    if (!parsedUrl.partAfterHost && HTTP_RE.test(parsedUrl.protocol)) return url + '/';

					    return url;
					}

					function omitDefaultPort(url) {
					    // NOTE: If you request an url containing default port
					    // then browser remove this one itself.
					    var parsedUrl = parseUrl(url);

					    var hasDefaultPort = parsedUrl.protocol === 'https:' && parsedUrl.port === HTTPS_DEFAULT_PORT || parsedUrl.protocol === 'http:' && parsedUrl.port === HTTP_DEFAULT_PORT;

					    if (hasDefaultPort) {
					        parsedUrl.host = parsedUrl.hostname;
					        parsedUrl.port = '';

					        return formatUrl(parsedUrl);
					    }

					    return url;
					}

					function prepareUrl(url) {
					    url = omitDefaultPort(url);
					    url = ensureOriginTrailingSlash(url);

					    return url;
					}
				}
			}
		}
	}
})("testcafe-hammerhead/src/client/index");

})();
