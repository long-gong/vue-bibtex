'use strict';

exports.__esModule = true;

var _router = require('./router');

var _router2 = _interopRequireDefault(_router);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _url = require('../utils/url');

var urlUtils = _interopRequireWildcard(_url);

var _readFileRelative = require('read-file-relative');

var _http3 = require('../utils/http');

var _requestPipeline = require('../request-pipeline');

var _createShadowStylesheet = require('../shadow-ui/create-shadow-stylesheet');

var _createShadowStylesheet2 = _interopRequireDefault(_createShadowStylesheet);

var _agent = require('../request-pipeline/destination-request/agent');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const SESSION_IS_NOT_OPENED_ERR = 'Session is not opened in proxy';

function parseAsJson(msg) {
    msg = msg.toString();

    try {
        return JSON.parse(msg);
    } catch (err) {
        return null;
    }
}

function createServerInfo(hostname, port, crossDomainPort, protocol) {
    return {
        hostname: hostname,
        port: port,
        crossDomainPort: crossDomainPort,
        protocol: protocol,
        domain: `${protocol}//${hostname}:${port}`
    };
}

class Proxy extends _router2.default {
    constructor(hostname, port1, port2, options = {}) {
        super(options);

        const ssl = options.ssl,
              developmentMode = options.developmentMode;


        this.openSessions = {};

        const protocol = ssl ? 'https:' : 'http:';

        this.server1Info = createServerInfo(hostname, port1, port2, protocol);
        this.server2Info = createServerInfo(hostname, port2, port1, protocol);

        if (ssl) {
            this.server1 = _https2.default.createServer(ssl, (req, res) => this._onRequest(req, res, this.server1Info));
            this.server2 = _https2.default.createServer(ssl, (req, res) => this._onRequest(req, res, this.server2Info));
        } else {
            this.server1 = _http2.default.createServer((req, res) => this._onRequest(req, res, this.server1Info));
            this.server2 = _http2.default.createServer((req, res) => this._onRequest(req, res, this.server2Info));
        }

        this.server1.on('upgrade', (req, socket, head) => this._onUpgradeRequest(req, socket, head, this.server1Info));
        this.server2.on('upgrade', (req, socket, head) => this._onUpgradeRequest(req, socket, head, this.server2Info));

        this.server1.listen(port1);
        this.server2.listen(port2);

        this.sockets = [];

        // BUG: GH-89
        this._startSocketsCollecting();
        this._registerServiceRoutes(developmentMode);
    }

    _closeSockets() {
        this.sockets.forEach(socket => socket.destroy());
    }

    _startSocketsCollecting() {
        const handler = socket => {
            this.sockets.push(socket);
            socket.on('close', () => this.sockets.splice(this.sockets.indexOf(socket), 1));
        };

        this.server1.on('connection', handler);
        this.server2.on('connection', handler);
    }

    _registerServiceRoutes(developmentMode) {
        const hammerheadFileName = developmentMode ? 'hammerhead.js' : 'hammerhead.min.js';
        const hammerheadScriptContent = (0, _readFileRelative.readSync)(`../client/${hammerheadFileName}`);

        this.GET('/hammerhead.js', {
            contentType: 'application/x-javascript',
            content: hammerheadScriptContent
        });

        this.POST('/messaging', (req, res, serverInfo) => this._onServiceMessage(req, res, serverInfo));
        this.GET('/task.js', (req, res, serverInfo) => this._onTaskScriptRequest(req, res, serverInfo, false));
        this.GET('/iframe-task.js', (req, res, serverInfo) => this._onTaskScriptRequest(req, res, serverInfo, true));
    }

    _onServiceMessage(req, res, serverInfo) {
        var _this = this;

        return _asyncToGenerator(function* () {
            const body = yield (0, _http3.fetchBody)(req);
            const msg = parseAsJson(body);
            const session = msg && _this.openSessions[msg.sessionId];

            if (session) {
                try {
                    const result = yield session.handleServiceMessage(msg, serverInfo);

                    (0, _http3.respondWithJSON)(res, result || '');
                } catch (err) {
                    (0, _http3.respond500)(res, err.toString());
                }
            } else (0, _http3.respond500)(res, SESSION_IS_NOT_OPENED_ERR);
        })();
    }

    _onTaskScriptRequest(req, res, serverInfo, isIframe) {
        const referer = req.headers['referer'];
        const refererDest = referer && urlUtils.parseProxyUrl(referer);
        const session = refererDest && this.openSessions[refererDest.sessionId];

        if (session) {
            res.setHeader('content-type', 'application/x-javascript');
            (0, _http3.preventCaching)(res);

            const taskScript = session.getTaskScript({
                referer,
                cookieUrl: refererDest.destUrl,
                serverInfo,
                isIframe,
                withPayload: true
            });

            res.end(taskScript);
        } else (0, _http3.respond500)(res, SESSION_IS_NOT_OPENED_ERR);
    }

    _onRequest(req, res, serverInfo) {
        // NOTE: Not a service request, execute the proxy pipeline.
        if (!this._route(req, res, serverInfo)) (0, _requestPipeline.run)(req, res, serverInfo, this.openSessions);
    }

    _onUpgradeRequest(req, socket, head, serverInfo) {
        if (head && head.length) socket.unshift(head);

        this._onRequest(req, socket, serverInfo);
    }

    _processStaticContent(handler) {
        if (handler.isShadowUIStylesheet) handler.content = (0, _createShadowStylesheet2.default)(handler.content);
    }

    // API
    close() {
        this.server1.close();
        this.server2.close();
        this._closeSockets();
        (0, _agent.resetKeepAliveConnections)();
    }

    openSession(url, session, externalProxySettings) {
        session.proxy = this;
        this.openSessions[session.id] = session;

        if (externalProxySettings) session.setExternalProxySettings(externalProxySettings);

        url = urlUtils.prepareUrl(url);

        return urlUtils.getProxyUrl(url, {
            proxyHostname: this.server1Info.hostname,
            proxyPort: this.server1Info.port,
            proxyProtocol: this.server1Info.protocol,
            sessionId: session.id
        });
    }

    closeSession(session) {
        session.proxy = null;
        delete this.openSessions[session.id];
    }
}
exports.default = Proxy;
module.exports = exports['default'];