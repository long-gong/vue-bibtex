'use strict';

exports.__esModule = true;

var _toughCookie = require('tough-cookie');

var _cookieLimit = require('./cookie-limit');

var _cookieLimit2 = _interopRequireDefault(_cookieLimit);

var _lodash = require('lodash');

var _url = require('../utils/url');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LOCALHOST_DOMAIN = 'localhost';
const LOCALHOST_IP = '127.0.0.1';

class Cookies {
    constructor() {
        this.cookieJar = new _toughCookie.CookieJar();
    }

    static _hasLocalhostDomain(cookie) {
        if (cookie) return cookie.domain === LOCALHOST_DOMAIN || cookie.domain === LOCALHOST_IP;

        return false;
    }

    _set(url, cookies, isClient) {
        cookies = (0, _lodash.castArray)(cookies);

        return cookies.reduce((resultCookies, cookieStr) => {
            let cookie;

            if (!isClient) {
                if (cookieStr.length > _cookieLimit2.default) return resultCookies;

                cookie = _toughCookie.Cookie.parse(cookieStr, { loose: true });
            } else cookie = cookieStr;

            // NOTE: If cookie.domain and url hostname are equal to localhost/127.0.0.1,
            // we should remove 'Domain=...' form cookieStr (GH-1491)
            if (Cookies._hasLocalhostDomain(cookie) && (isClient || (0, _url.parseUrl)(url).hostname === cookie.domain)) cookie.domain = '';

            const parsedCookie = this.cookieJar.setCookieSync(cookie, url, {
                http: !isClient,
                ignoreError: true,
                loose: true
            });

            if (parsedCookie) resultCookies.push(parsedCookie);

            return resultCookies;
        }, []);
    }

    serializeJar() {
        return JSON.stringify(this.cookieJar.serializeSync());
    }

    setJar(serializedJar) {
        this.cookieJar = serializedJar ? _toughCookie.CookieJar.deserializeSync(JSON.parse(serializedJar)) : new _toughCookie.CookieJar();
    }

    setByServer(url, cookies) {
        return this._set(url, cookies, false);
    }

    setByClient(syncCookies) {
        for (var _iterator = syncCookies, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            const syncCookie = _ref;

            const cookie = new _toughCookie.Cookie(syncCookie);
            const url = { hostname: syncCookie.domain, pathname: syncCookie.path };

            this._set(url, cookie, true);
        }
    }

    getClientString(url) {
        return this.cookieJar.getCookieStringSync(url, { http: false });
    }

    getHeader(url) {
        return this.cookieJar.getCookieStringSync(url, { http: true }) || null;
    }
}
exports.default = Cookies;
module.exports = exports['default'];