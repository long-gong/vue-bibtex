'use strict';

exports.__esModule = true;
exports.forRequest = forRequest;
exports.forResponse = forResponse;
exports.transformHeadersCaseToRaw = transformHeadersCaseToRaw;

var _transforms = require('./transforms');

// Transformation routine
function transformHeaders(srcHeaders, ctx, transformList, forcedTransforms) {
    const destHeaders = {};

    const applyTransform = function applyTransform(headerName, headers, transforms) {
        const src = headers[headerName];
        const transform = transforms[headerName];
        const dest = transform ? transform(src, ctx) : src;

        if (dest !== void 0) destHeaders[headerName] = dest;
    };

    Object.keys(srcHeaders).forEach(headerName => applyTransform(headerName, srcHeaders, transformList));

    if (forcedTransforms) Object.keys(forcedTransforms).forEach(headerName => applyTransform(headerName, destHeaders, forcedTransforms));

    return destHeaders;
}

// API
function forRequest(ctx) {
    return transformHeaders(ctx.req.headers, ctx, _transforms.requestTransforms, _transforms.forcedRequestTransforms);
}

function forResponse(ctx) {
    return transformHeaders(ctx.destRes.headers, ctx, _transforms.responseTransforms, _transforms.forcedResponseTransforms);
}

function transformHeadersCaseToRaw(headers, rawHeaders) {
    const processedHeaders = {};
    const headersNames = Object.keys(headers);

    for (let i = 0; i < rawHeaders.length; i += 2) {
        const rawHeaderName = rawHeaders[i];
        const headerName = rawHeaderName.toLowerCase();
        const headerIndex = headersNames.indexOf(headerName);

        if (headerIndex > -1) {
            processedHeaders[rawHeaderName] = headers[headerName];
            headersNames[headerIndex] = void 0;
        }
    }

    for (var _iterator = headersNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        const headerName = _ref;

        if (headerName !== void 0) processedHeaders[headerName] = headers[headerName];
    }

    return processedHeaders;
}