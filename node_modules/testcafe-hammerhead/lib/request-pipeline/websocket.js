'use strict';

exports.__esModule = true;
exports.respondOnWebSocket = respondOnWebSocket;

var _headerTransforms = require('./header-transforms');

var headerTransforms = _interopRequireWildcard(_headerTransforms);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function writeWebSocketHead(socket, destRes, headers) {
    const httpVersion = destRes.httpVersion,
          statusCode = destRes.statusCode,
          statusMessage = destRes.statusMessage;


    const resRaw = [`HTTP/${httpVersion} ${statusCode} ${statusMessage}`];
    const headersNames = Object.keys(headers);

    for (var _iterator = headersNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        const headerName = _ref;

        const headerValue = headers[headerName];

        if (Array.isArray(headerValue)) {
            for (var _iterator2 = headerValue, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                const value = _ref2;

                resRaw.push(headerName + ': ' + value);
            }
        } else resRaw.push(headerName + ': ' + headerValue);
    }

    resRaw.push('', '');

    socket.write(resRaw.join('\r\n'));
}

function respondOnWebSocket(ctx) {
    const headers = headerTransforms.forResponse(ctx);

    writeWebSocketHead(ctx.res, ctx.destRes, headers);

    ctx.destRes.socket.pipe(ctx.res);
    ctx.res.pipe(ctx.destRes.socket);
}