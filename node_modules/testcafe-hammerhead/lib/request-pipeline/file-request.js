'use strict';

exports.__esModule = true;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

var _events = require('events');

var _url = require('url');

var _messages = require('../messages');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DISK_RE = /^\/[A-Za-z]:/;

class FileRequest extends _events.EventEmitter {
    constructor(opts) {
        super();

        const parsedUrl = (0, _url.parse)(opts.url);
        let path = decodeURIComponent(parsedUrl.pathname);

        if (DISK_RE.test(path)) path = path.substr(1);

        this.url = opts.url;
        this.stream = _fs2.default.createReadStream(path);
        this.headers = {};
        this.trailers = {};
        this.path = path;

        this.stream.once('readable', () => this._onOpen());
        this.stream.on('error', err => this._onError(err));
    }

    _onError(err) {
        this.statusCode = 404;
        this.emit('fatalError', (0, _messages.getText)(_messages.MESSAGE.cantReadFile, this.url, err.message));
    }

    _onOpen() {
        this.statusCode = 200;
        this.headers['content-type'] = _mime2.default.lookup(this.path);

        this.emit('response', this);
    }

    on(type, handler) {
        if (type === 'data' || type === 'end') {
            if (this.statusCode !== 404) {
                this.stream.on(type, handler);

                if (type === 'end') this.stream.on(type, () => this.stream.close());
            } else if (type === 'end') handler.call(this);
        } else super.on(type, handler);
    }

    pipe(res) {
        if (this.statusCode === 404) res.end('');else this.stream.pipe(res);
    }
}
exports.default = FileRequest;
module.exports = exports['default'];