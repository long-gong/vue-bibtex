'use strict';

exports.__esModule = true;
exports.assign = undefined;

let queryOSForCredential = (() => {
    var _ref = _asyncToGenerator(function* (cmd) {
        try {
            const credential = yield exec(cmd);

            return credential.replace(/\s/g, '');
        } catch (err) {
            return '';
        }
    });

    return function queryOSForCredential(_x) {
        return _ref.apply(this, arguments);
    };
})();

let assign = exports.assign = (() => {
    var _ref2 = _asyncToGenerator(function* (credentials) {
        if (!cached) {
            cached = {
                domain: yield queryOSForCredential('echo %userdomain%'),
                workstation: yield queryOSForCredential('hostname')
            };
        }

        credentials.domain = credentials.domain || cached.domain;
        credentials.workstation = credentials.workstation || cached.workstation;
    });

    return function assign(_x2) {
        return _ref2.apply(this, arguments);
    };
})();

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _promisify = require('../../utils/promisify');

var _promisify2 = _interopRequireDefault(_promisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const exec = (0, _promisify2.default)(_child_process2.default.exec);
let cached = null;