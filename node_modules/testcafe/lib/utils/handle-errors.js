'use strict';

exports.__esModule = true;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

exports.registerErrorHandlers = registerErrorHandlers;
exports.addRunningTest = addRunningTest;
exports.removeRunningTest = removeRunningTest;
exports.startHandlingTestErrors = startHandlingTestErrors;
exports.stopHandlingTestErrors = stopHandlingTestErrors;

var _testRun = require('../errors/test-run');

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const runningTests = {};
let handlingTestErrors = false;

function printErrorMessagesAndTerminate(...messages) {
    // eslint-disable-next-line no-console
    messages.map(msg => console.log(msg));

    // eslint-disable-next-line no-process-exit
    setTimeout(() => process.exit(1), 0);
}

function handleTestRunError(ErrorCtor, message) {
    (0, _values2.default)(runningTests).forEach(testRun => {
        testRun.addError(new ErrorCtor(message));

        removeRunningTest(testRun);
    });
}

function handleError(ErrorCtor, message) {
    if (handlingTestErrors) handleTestRunError(ErrorCtor, message);else printErrorMessagesAndTerminate(message);
}

function formatUnhandledRejectionReason(reason) {
    const reasonType = typeof reason;
    const isPrimitiveType = reasonType !== 'object' && reasonType !== 'function';

    if (isPrimitiveType) return String(reason);

    if (reason instanceof Error) return reason.stack;

    return _util2.default.inspect(reason, { depth: 2, breakLength: Infinity });
}

function formatError(ErrorCtor, error) {
    if (ErrorCtor === _testRun.UncaughtExceptionError) return error.stack;

    if (ErrorCtor === _testRun.UnhandledPromiseRejectionError) return formatUnhandledRejectionReason(error);

    return error;
}

function handleUnexpectedError(ErrorCtor, error) {
    try {
        handleError(ErrorCtor, formatError(ErrorCtor, error));
    } catch (e) {
        printErrorMessagesAndTerminate(error, e);
    }
}

function registerErrorHandlers() {
    process.on('unhandledRejection', e => handleUnexpectedError(_testRun.UnhandledPromiseRejectionError, e));
    process.on('uncaughtException', e => handleUnexpectedError(_testRun.UncaughtExceptionError, e));
}

function addRunningTest(testRun) {
    runningTests[testRun.id] = testRun;
}

function removeRunningTest(testRun) {
    if (testRun) delete runningTests[testRun.id];
}

function startHandlingTestErrors() {
    handlingTestErrors = true;
}

function stopHandlingTestErrors() {
    handlingTestErrors = false;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oYW5kbGUtZXJyb3JzLmpzIl0sIm5hbWVzIjpbInJlZ2lzdGVyRXJyb3JIYW5kbGVycyIsImFkZFJ1bm5pbmdUZXN0IiwicmVtb3ZlUnVubmluZ1Rlc3QiLCJzdGFydEhhbmRsaW5nVGVzdEVycm9ycyIsInN0b3BIYW5kbGluZ1Rlc3RFcnJvcnMiLCJydW5uaW5nVGVzdHMiLCJoYW5kbGluZ1Rlc3RFcnJvcnMiLCJwcmludEVycm9yTWVzc2FnZXNBbmRUZXJtaW5hdGUiLCJtZXNzYWdlcyIsIm1hcCIsIm1zZyIsImNvbnNvbGUiLCJsb2ciLCJzZXRUaW1lb3V0IiwicHJvY2VzcyIsImV4aXQiLCJoYW5kbGVUZXN0UnVuRXJyb3IiLCJFcnJvckN0b3IiLCJtZXNzYWdlIiwiZm9yRWFjaCIsInRlc3RSdW4iLCJhZGRFcnJvciIsImhhbmRsZUVycm9yIiwiZm9ybWF0VW5oYW5kbGVkUmVqZWN0aW9uUmVhc29uIiwicmVhc29uIiwicmVhc29uVHlwZSIsImlzUHJpbWl0aXZlVHlwZSIsIlN0cmluZyIsIkVycm9yIiwic3RhY2siLCJ1dGlsIiwiaW5zcGVjdCIsImRlcHRoIiwiYnJlYWtMZW5ndGgiLCJJbmZpbml0eSIsImZvcm1hdEVycm9yIiwiZXJyb3IiLCJVbmNhdWdodEV4Y2VwdGlvbkVycm9yIiwiVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbkVycm9yIiwiaGFuZGxlVW5leHBlY3RlZEVycm9yIiwiZSIsIm9uIiwiaWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O1FBNkRnQkEscUIsR0FBQUEscUI7UUFLQUMsYyxHQUFBQSxjO1FBSUFDLGlCLEdBQUFBLGlCO1FBS0FDLHVCLEdBQUFBLHVCO1FBSUFDLHNCLEdBQUFBLHNCOztBQS9FaEI7O0FBQ0E7Ozs7OztBQUVBLE1BQU1DLGVBQW1CLEVBQXpCO0FBQ0EsSUFBSUMscUJBQXFCLEtBQXpCOztBQUVBLFNBQVNDLDhCQUFULENBQXlDLEdBQUdDLFFBQTVDLEVBQXNEO0FBQ2xEO0FBQ0FBLGFBQVNDLEdBQVQsQ0FBYUMsT0FBT0MsUUFBUUMsR0FBUixDQUFZRixHQUFaLENBQXBCOztBQUVBO0FBQ0FHLGVBQVcsTUFBTUMsUUFBUUMsSUFBUixDQUFhLENBQWIsQ0FBakIsRUFBa0MsQ0FBbEM7QUFDSDs7QUFFRCxTQUFTQyxrQkFBVCxDQUE2QkMsU0FBN0IsRUFBd0NDLE9BQXhDLEVBQWlEO0FBQzdDLDBCQUFjYixZQUFkLEVBQTRCYyxPQUE1QixDQUFvQ0MsV0FBVztBQUMzQ0EsZ0JBQVFDLFFBQVIsQ0FBaUIsSUFBSUosU0FBSixDQUFjQyxPQUFkLENBQWpCOztBQUVBaEIsMEJBQWtCa0IsT0FBbEI7QUFDSCxLQUpEO0FBS0g7O0FBRUQsU0FBU0UsV0FBVCxDQUFzQkwsU0FBdEIsRUFBaUNDLE9BQWpDLEVBQTBDO0FBQ3RDLFFBQUlaLGtCQUFKLEVBQ0lVLG1CQUFtQkMsU0FBbkIsRUFBOEJDLE9BQTlCLEVBREosS0FHSVgsK0JBQStCVyxPQUEvQjtBQUNQOztBQUVELFNBQVNLLDhCQUFULENBQXlDQyxNQUF6QyxFQUFpRDtBQUM3QyxVQUFNQyxhQUFrQixPQUFPRCxNQUEvQjtBQUNBLFVBQU1FLGtCQUFrQkQsZUFBZSxRQUFmLElBQTJCQSxlQUFlLFVBQWxFOztBQUVBLFFBQUlDLGVBQUosRUFDSSxPQUFPQyxPQUFPSCxNQUFQLENBQVA7O0FBRUosUUFBSUEsa0JBQWtCSSxLQUF0QixFQUNJLE9BQU9KLE9BQU9LLEtBQWQ7O0FBRUosV0FBT0MsZUFBS0MsT0FBTCxDQUFhUCxNQUFiLEVBQXFCLEVBQUVRLE9BQU8sQ0FBVCxFQUFZQyxhQUFhQyxRQUF6QixFQUFyQixDQUFQO0FBQ0g7O0FBRUQsU0FBU0MsV0FBVCxDQUFzQmxCLFNBQXRCLEVBQWlDbUIsS0FBakMsRUFBd0M7QUFDcEMsUUFBSW5CLGNBQWNvQiwrQkFBbEIsRUFDSSxPQUFPRCxNQUFNUCxLQUFiOztBQUVKLFFBQUlaLGNBQWNxQix1Q0FBbEIsRUFDSSxPQUFPZiwrQkFBK0JhLEtBQS9CLENBQVA7O0FBRUosV0FBT0EsS0FBUDtBQUNIOztBQUVELFNBQVNHLHFCQUFULENBQWdDdEIsU0FBaEMsRUFBMkNtQixLQUEzQyxFQUFrRDtBQUM5QyxRQUFJO0FBQ0FkLG9CQUFZTCxTQUFaLEVBQXVCa0IsWUFBWWxCLFNBQVosRUFBdUJtQixLQUF2QixDQUF2QjtBQUNILEtBRkQsQ0FHQSxPQUFPSSxDQUFQLEVBQVU7QUFDTmpDLHVDQUErQjZCLEtBQS9CLEVBQXNDSSxDQUF0QztBQUNIO0FBQ0o7O0FBRU0sU0FBU3hDLHFCQUFULEdBQWtDO0FBQ3JDYyxZQUFRMkIsRUFBUixDQUFXLG9CQUFYLEVBQWlDRCxLQUFLRCxzQkFBc0JELHVDQUF0QixFQUFzREUsQ0FBdEQsQ0FBdEM7QUFDQTFCLFlBQVEyQixFQUFSLENBQVcsbUJBQVgsRUFBZ0NELEtBQUtELHNCQUFzQkYsK0JBQXRCLEVBQThDRyxDQUE5QyxDQUFyQztBQUNIOztBQUVNLFNBQVN2QyxjQUFULENBQXlCbUIsT0FBekIsRUFBa0M7QUFDckNmLGlCQUFhZSxRQUFRc0IsRUFBckIsSUFBMkJ0QixPQUEzQjtBQUNIOztBQUVNLFNBQVNsQixpQkFBVCxDQUE0QmtCLE9BQTVCLEVBQXFDO0FBQ3hDLFFBQUlBLE9BQUosRUFDSSxPQUFPZixhQUFhZSxRQUFRc0IsRUFBckIsQ0FBUDtBQUNQOztBQUVNLFNBQVN2Qyx1QkFBVCxHQUFvQztBQUN2Q0cseUJBQXFCLElBQXJCO0FBQ0g7O0FBRU0sU0FBU0Ysc0JBQVQsR0FBbUM7QUFDdENFLHlCQUFxQixLQUFyQjtBQUNIIiwiZmlsZSI6InV0aWxzL2hhbmRsZS1lcnJvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVbmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uRXJyb3IsIFVuY2F1Z2h0RXhjZXB0aW9uRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvdGVzdC1ydW4nO1xuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCc7XG5cbmNvbnN0IHJ1bm5pbmdUZXN0cyAgICAgPSB7fTtcbmxldCBoYW5kbGluZ1Rlc3RFcnJvcnMgPSBmYWxzZTtcblxuZnVuY3Rpb24gcHJpbnRFcnJvck1lc3NhZ2VzQW5kVGVybWluYXRlICguLi5tZXNzYWdlcykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgbWVzc2FnZXMubWFwKG1zZyA9PiBjb25zb2xlLmxvZyhtc2cpKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm9jZXNzLWV4aXRcbiAgICBzZXRUaW1lb3V0KCgpID0+IHByb2Nlc3MuZXhpdCgxKSwgMCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVRlc3RSdW5FcnJvciAoRXJyb3JDdG9yLCBtZXNzYWdlKSB7XG4gICAgT2JqZWN0LnZhbHVlcyhydW5uaW5nVGVzdHMpLmZvckVhY2godGVzdFJ1biA9PiB7XG4gICAgICAgIHRlc3RSdW4uYWRkRXJyb3IobmV3IEVycm9yQ3RvcihtZXNzYWdlKSk7XG5cbiAgICAgICAgcmVtb3ZlUnVubmluZ1Rlc3QodGVzdFJ1bik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChFcnJvckN0b3IsIG1lc3NhZ2UpIHtcbiAgICBpZiAoaGFuZGxpbmdUZXN0RXJyb3JzKVxuICAgICAgICBoYW5kbGVUZXN0UnVuRXJyb3IoRXJyb3JDdG9yLCBtZXNzYWdlKTtcbiAgICBlbHNlXG4gICAgICAgIHByaW50RXJyb3JNZXNzYWdlc0FuZFRlcm1pbmF0ZShtZXNzYWdlKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5oYW5kbGVkUmVqZWN0aW9uUmVhc29uIChyZWFzb24pIHtcbiAgICBjb25zdCByZWFzb25UeXBlICAgICAgPSB0eXBlb2YgcmVhc29uO1xuICAgIGNvbnN0IGlzUHJpbWl0aXZlVHlwZSA9IHJlYXNvblR5cGUgIT09ICdvYmplY3QnICYmIHJlYXNvblR5cGUgIT09ICdmdW5jdGlvbic7XG5cbiAgICBpZiAoaXNQcmltaXRpdmVUeXBlKVxuICAgICAgICByZXR1cm4gU3RyaW5nKHJlYXNvbik7XG5cbiAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgRXJyb3IpXG4gICAgICAgIHJldHVybiByZWFzb24uc3RhY2s7XG5cbiAgICByZXR1cm4gdXRpbC5pbnNwZWN0KHJlYXNvbiwgeyBkZXB0aDogMiwgYnJlYWtMZW5ndGg6IEluZmluaXR5IH0pO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvciAoRXJyb3JDdG9yLCBlcnJvcikge1xuICAgIGlmIChFcnJvckN0b3IgPT09IFVuY2F1Z2h0RXhjZXB0aW9uRXJyb3IpXG4gICAgICAgIHJldHVybiBlcnJvci5zdGFjaztcblxuICAgIGlmIChFcnJvckN0b3IgPT09IFVuaGFuZGxlZFByb21pc2VSZWplY3Rpb25FcnJvcilcbiAgICAgICAgcmV0dXJuIGZvcm1hdFVuaGFuZGxlZFJlamVjdGlvblJlYXNvbihlcnJvcik7XG5cbiAgICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVVuZXhwZWN0ZWRFcnJvciAoRXJyb3JDdG9yLCBlcnJvcikge1xuICAgIHRyeSB7XG4gICAgICAgIGhhbmRsZUVycm9yKEVycm9yQ3RvciwgZm9ybWF0RXJyb3IoRXJyb3JDdG9yLCBlcnJvcikpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBwcmludEVycm9yTWVzc2FnZXNBbmRUZXJtaW5hdGUoZXJyb3IsIGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRXJyb3JIYW5kbGVycyAoKSB7XG4gICAgcHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgZSA9PiBoYW5kbGVVbmV4cGVjdGVkRXJyb3IoVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbkVycm9yLCBlKSk7XG4gICAgcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCBlID0+IGhhbmRsZVVuZXhwZWN0ZWRFcnJvcihVbmNhdWdodEV4Y2VwdGlvbkVycm9yLCBlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRSdW5uaW5nVGVzdCAodGVzdFJ1bikge1xuICAgIHJ1bm5pbmdUZXN0c1t0ZXN0UnVuLmlkXSA9IHRlc3RSdW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVSdW5uaW5nVGVzdCAodGVzdFJ1bikge1xuICAgIGlmICh0ZXN0UnVuKVxuICAgICAgICBkZWxldGUgcnVubmluZ1Rlc3RzW3Rlc3RSdW4uaWRdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRIYW5kbGluZ1Rlc3RFcnJvcnMgKCkge1xuICAgIGhhbmRsaW5nVGVzdEVycm9ycyA9IHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wSGFuZGxpbmdUZXN0RXJyb3JzICgpIHtcbiAgICBoYW5kbGluZ1Rlc3RFcnJvcnMgPSBmYWxzZTtcbn1cbiJdfQ==
