'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _mapReverse = require('map-reverse');

var _mapReverse2 = _interopRequireDefault(_mapReverse);

var _events = require('events');

var _lodash = require('lodash');

var _bootstrapper = require('./bootstrapper');

var _bootstrapper2 = _interopRequireDefault(_bootstrapper);

var _reporter = require('../reporter');

var _reporter2 = _interopRequireDefault(_reporter);

var _task = require('./task');

var _task2 = _interopRequireDefault(_task);

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _typeAssertions = require('../errors/runtime/type-assertions');

var _renderForbiddenCharsList = require('../errors/render-forbidden-chars-list');

var _renderForbiddenCharsList2 = _interopRequireDefault(_renderForbiddenCharsList);

var _checkFilePath = require('../utils/check-file-path');

var _checkFilePath2 = _interopRequireDefault(_checkFilePath);

var _handleErrors = require('../utils/handle-errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_SELECTOR_TIMEOUT = 10000;
const DEFAULT_ASSERTION_TIMEOUT = 3000;
const DEFAULT_PAGE_LOAD_TIMEOUT = 3000;

const DEBUG_LOGGER = (0, _debug2.default)('testcafe:runner');

class Runner extends _events.EventEmitter {
    constructor(proxy, browserConnectionGateway, options = {}) {
        super();

        this.proxy = proxy;
        this.bootstrapper = new _bootstrapper2.default(browserConnectionGateway);
        this.pendingTaskPromises = [];

        this.opts = {
            externalProxyHost: null,
            proxyBypass: null,
            screenshotPath: null,
            takeScreenshotsOnFails: false,
            screenshotPathPattern: null,
            skipJsErrors: false,
            quarantineMode: false,
            debugMode: false,
            retryTestPages: options.retryTestPages,
            selectorTimeout: DEFAULT_SELECTOR_TIMEOUT,
            pageLoadTimeout: DEFAULT_PAGE_LOAD_TIMEOUT
        };
    }

    static _disposeBrowserSet(browserSet) {
        return browserSet.dispose().catch(e => DEBUG_LOGGER(e));
    }

    static _disposeReporters(reporters) {
        return _pinkie2.default.all(reporters.map(reporter => reporter.dispose().catch(e => DEBUG_LOGGER(e))));
    }

    static _disposeTestedApp(testedApp) {
        return testedApp ? testedApp.kill().catch(e => DEBUG_LOGGER(e)) : _pinkie2.default.resolve();
    }

    static _disposeTaskAndRelatedAssets(task, browserSet, reporters, testedApp) {
        return (0, _asyncToGenerator3.default)(function* () {
            task.abort();
            task.clearListeners();

            yield Runner._disposeAssets(browserSet, reporters, testedApp);
        })();
    }

    static _disposeAssets(browserSet, reporters, testedApp) {
        return _pinkie2.default.all([Runner._disposeBrowserSet(browserSet), Runner._disposeReporters(reporters), Runner._disposeTestedApp(testedApp)]);
    }

    _createCancelablePromise(taskPromise) {
        const promise = taskPromise.then(({ completionPromise }) => completionPromise);
        const removeFromPending = () => (0, _lodash.pull)(this.pendingTaskPromises, promise);

        promise.then(removeFromPending).catch(removeFromPending);

        promise.cancel = () => taskPromise.then(({ cancelTask }) => cancelTask()).then(removeFromPending);

        this.pendingTaskPromises.push(promise);
        return promise;
    }

    // Run task
    _getFailedTestCount(task, reporter) {
        let failedTestCount = reporter.testCount - reporter.passed;

        if (task.opts.stopOnFirstFail && !!failedTestCount) failedTestCount = 1;

        return failedTestCount;
    }

    _getTaskResult(task, browserSet, reporters, testedApp) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            task.on('browser-job-done', function (job) {
                return browserSet.releaseConnection(job.browserConnection);
            });

            const promises = [task.once('done'), (0, _promisifyEvent2.default)(browserSet, 'error')];

            if (testedApp) promises.push(testedApp.errorPromise);

            try {
                yield _pinkie2.default.race(promises);
            } catch (err) {
                yield Runner._disposeTaskAndRelatedAssets(task, browserSet, reporters, testedApp);

                throw err;
            }

            yield Runner._disposeAssets(browserSet, reporters, testedApp);

            return _this._getFailedTestCount(task, reporters[0]);
        })();
    }

    _runTask(reporterPlugins, browserSet, tests, testedApp) {
        let completed = false;
        const task = new _task2.default(tests, browserSet.browserConnectionGroups, this.proxy, this.opts);
        const reporters = reporterPlugins.map(reporter => new _reporter2.default(reporter.plugin, task, reporter.outStream));
        const completionPromise = this._getTaskResult(task, browserSet, reporters, testedApp);

        task.on('start', _handleErrors.startHandlingTestErrors);

        if (!this.opts.skipUncaughtErrors) {
            task.once('test-run-start', _handleErrors.addRunningTest);
            task.once('test-run-done', _handleErrors.removeRunningTest);
        }

        task.on('done', _handleErrors.stopHandlingTestErrors);

        const setCompleted = () => {
            completed = true;
        };

        completionPromise.then(setCompleted).catch(setCompleted);

        const cancelTask = (() => {
            var _ref = (0, _asyncToGenerator3.default)(function* () {
                if (!completed) yield Runner._disposeTaskAndRelatedAssets(task, browserSet, reporters, testedApp);
            });

            return function cancelTask() {
                return _ref.apply(this, arguments);
            };
        })();

        return { completionPromise, cancelTask };
    }

    _registerAssets(assets) {
        assets.forEach(asset => this.proxy.GET(asset.path, asset.info));
    }

    _validateSpeedOption() {
        const speed = this.opts.speed;

        if (typeof speed !== 'number' || isNaN(speed) || speed < 0.01 || speed > 1) throw new _runtime.GeneralError(_message2.default.invalidSpeedValue);
    }

    _validateConcurrencyOption() {
        const concurrency = this.bootstrapper.concurrency;

        if (typeof concurrency !== 'number' || isNaN(concurrency) || concurrency < 1) throw new _runtime.GeneralError(_message2.default.invalidConcurrencyFactor);
    }

    _validateProxyBypassOption() {
        let proxyBypass = this.opts.proxyBypass;

        if (!proxyBypass) return;

        (0, _typeAssertions.assertType)([_typeAssertions.is.string, _typeAssertions.is.array], null, '"proxyBypass" argument', proxyBypass);

        if (typeof proxyBypass === 'string') proxyBypass = [proxyBypass];

        proxyBypass = proxyBypass.reduce((arr, rules) => {
            (0, _typeAssertions.assertType)(_typeAssertions.is.string, null, '"proxyBypass" argument', rules);

            return arr.concat(rules.split(','));
        }, []);

        this.opts.proxyBypass = proxyBypass;
    }

    _validateScreenshotOptions() {
        const screenshotPath = this.opts.screenshotPath;
        const screenshotPathPattern = this.opts.screenshotPathPattern;

        if (screenshotPath) {
            this._validateScreenshotPath(screenshotPath, 'screenshots base directory path');

            this.opts.screenshotPath = (0, _path.resolve)(screenshotPath);
        }

        if (screenshotPathPattern) this._validateScreenshotPath(screenshotPathPattern, 'screenshots path pattern');

        if (!screenshotPath && screenshotPathPattern) throw new _runtime.GeneralError(_message2.default.cantUseScreenshotPathPatternWithoutBaseScreenshotPathSpecified);
    }

    _validateRunOptions() {
        this._validateScreenshotOptions();
        this._validateSpeedOption();
        this._validateConcurrencyOption();
        this._validateProxyBypassOption();
    }

    _validateScreenshotPath(screenshotPath, pathType) {
        const forbiddenCharsList = (0, _checkFilePath2.default)(screenshotPath);

        if (forbiddenCharsList.length) throw new _runtime.GeneralError(_message2.default.forbiddenCharatersInScreenshotPath, screenshotPath, pathType, (0, _renderForbiddenCharsList2.default)(forbiddenCharsList));
    }

    // API
    embeddingOptions(opts) {
        this._registerAssets(opts.assets);
        this.opts.TestRunCtor = opts.TestRunCtor;

        return this;
    }

    src(...sources) {
        this.bootstrapper.sources = this.bootstrapper.sources.concat((0, _lodash.flattenDeep)(sources));

        return this;
    }

    browsers(...browsers) {
        this.bootstrapper.browsers = this.bootstrapper.browsers.concat((0, _lodash.flattenDeep)(browsers));

        return this;
    }

    concurrency(concurrency) {
        this.bootstrapper.concurrency = concurrency;

        return this;
    }

    reporter(name, outStream) {
        this.bootstrapper.reporters.push({
            name,
            outStream
        });

        return this;
    }

    filter(filter) {
        this.bootstrapper.filter = filter;

        return this;
    }

    useProxy(externalProxyHost, proxyBypass) {
        this.opts.externalProxyHost = externalProxyHost;
        this.opts.proxyBypass = proxyBypass;

        return this;
    }

    screenshots(path, takeOnFails = false, pattern = null) {
        this.opts.takeScreenshotsOnFails = takeOnFails;
        this.opts.screenshotPath = path;
        this.opts.screenshotPathPattern = pattern;

        return this;
    }

    startApp(command, initDelay) {
        this.bootstrapper.appCommand = command;
        this.bootstrapper.appInitDelay = initDelay;

        return this;
    }

    run({ skipJsErrors, disablePageReloads, quarantineMode, debugMode, selectorTimeout, assertionTimeout, pageLoadTimeout, speed = 1, debugOnFail, skipUncaughtErrors, stopOnFirstFail, disableTestSyntaxValidation } = {}) {
        this.opts.skipJsErrors = !!skipJsErrors;
        this.opts.disablePageReloads = !!disablePageReloads;
        this.opts.quarantineMode = !!quarantineMode;
        this.opts.debugMode = !!debugMode;
        this.opts.debugOnFail = !!debugOnFail;
        this.opts.selectorTimeout = selectorTimeout === void 0 ? DEFAULT_SELECTOR_TIMEOUT : selectorTimeout;
        this.opts.assertionTimeout = assertionTimeout === void 0 ? DEFAULT_ASSERTION_TIMEOUT : assertionTimeout;
        this.opts.pageLoadTimeout = pageLoadTimeout === void 0 ? DEFAULT_PAGE_LOAD_TIMEOUT : pageLoadTimeout;
        this.opts.speed = speed;
        this.opts.skipUncaughtErrors = !!skipUncaughtErrors;
        this.opts.stopOnFirstFail = !!stopOnFirstFail;

        this.bootstrapper.disableTestSyntaxValidation = disableTestSyntaxValidation;

        const runTaskPromise = _pinkie2.default.resolve().then(() => {
            this._validateRunOptions();

            return this.bootstrapper.createRunnableConfiguration();
        }).then(({ reporterPlugins, browserSet, tests, testedApp }) => {
            this.emit('done-bootstrapping');

            return this._runTask(reporterPlugins, browserSet, tests, testedApp);
        });

        return this._createCancelablePromise(runTaskPromise);
    }

    stop() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            // NOTE: When taskPromise is cancelled, it is removed from
            // the pendingTaskPromises array, which leads to shifting indexes
            // towards the beginning. So, we must copy the array in order to iterate it,
            // or we can perform iteration from the end to the beginning.
            const cancellationPromises = (0, _mapReverse2.default)(_this2.pendingTaskPromises, function (taskPromise) {
                return taskPromise.cancel();
            });

            yield _pinkie2.default.all(cancellationPromises);
        })();
    }
}
exports.default = Runner;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
