'use strict';

exports.__esModule = true;
exports.assertUrl = assertUrl;
exports.resolvePageUrl = resolvePageUrl;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PROTOCOL_RE = /^([\w-]+?)(?=:\/\/)/;
const SUPPORTED_PROTOCOL_RE = /^(https?|file):/;
const IMPLICIT_PROTOCOL_RE = /^\/\//;
const ABSOLUTE_PATH_RE = /^\/[^/]/;
const WIN_ABSOLUTE_PATH_RE = /^\w:[/\\]/;
const RELATIVE_PATH_RE = /^\.\.?[/\\]/;

function isAbsolutePath(url) {
    return _osFamily2.default.win ? WIN_ABSOLUTE_PATH_RE.test(url) : ABSOLUTE_PATH_RE.test(url);
}

function resolveFileUrl(url, testFileName) {
    const testFileDir = _path2.default.dirname(testFileName);

    if (RELATIVE_PATH_RE.test(url)) url = _path2.default.join(testFileDir, url);

    return 'file://' + url;
}

function assertUrl(url, callsiteName) {
    const protocol = url.match(PROTOCOL_RE);
    const hasUnsupportedProtocol = protocol && !SUPPORTED_PROTOCOL_RE.test(url);
    const isWinAbsolutePath = _osFamily2.default.win && WIN_ABSOLUTE_PATH_RE.test(url);

    if (hasUnsupportedProtocol && !isWinAbsolutePath && url !== 'about:blank') throw new _runtime.APIError(callsiteName, _message2.default.unsupportedUrlProtocol, url, protocol[0]);
}

function resolvePageUrl(url, testFileName) {
    if (SUPPORTED_PROTOCOL_RE.test(url) || url === 'about:blank') return url;

    if (isAbsolutePath(url) || RELATIVE_PATH_RE.test(url)) return resolveFileUrl(url, testFileName);

    const protocol = IMPLICIT_PROTOCOL_RE.test(url) ? 'http:' : 'http://';

    return protocol + url;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdGVzdC1wYWdlLXVybC5qcyJdLCJuYW1lcyI6WyJhc3NlcnRVcmwiLCJyZXNvbHZlUGFnZVVybCIsIlBST1RPQ09MX1JFIiwiU1VQUE9SVEVEX1BST1RPQ09MX1JFIiwiSU1QTElDSVRfUFJPVE9DT0xfUkUiLCJBQlNPTFVURV9QQVRIX1JFIiwiV0lOX0FCU09MVVRFX1BBVEhfUkUiLCJSRUxBVElWRV9QQVRIX1JFIiwiaXNBYnNvbHV0ZVBhdGgiLCJ1cmwiLCJPUyIsIndpbiIsInRlc3QiLCJyZXNvbHZlRmlsZVVybCIsInRlc3RGaWxlTmFtZSIsInRlc3RGaWxlRGlyIiwicGF0aCIsImRpcm5hbWUiLCJqb2luIiwiY2FsbHNpdGVOYW1lIiwicHJvdG9jb2wiLCJtYXRjaCIsImhhc1Vuc3VwcG9ydGVkUHJvdG9jb2wiLCJpc1dpbkFic29sdXRlUGF0aCIsIkFQSUVycm9yIiwiTUVTU0FHRSIsInVuc3VwcG9ydGVkVXJsUHJvdG9jb2wiXSwibWFwcGluZ3MiOiI7OztRQTBCZ0JBLFMsR0FBQUEsUztRQVNBQyxjLEdBQUFBLGM7O0FBbkNoQjs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1DLGNBQXdCLHFCQUE5QjtBQUNBLE1BQU1DLHdCQUF3QixpQkFBOUI7QUFDQSxNQUFNQyx1QkFBd0IsT0FBOUI7QUFDQSxNQUFNQyxtQkFBd0IsU0FBOUI7QUFDQSxNQUFNQyx1QkFBd0IsV0FBOUI7QUFDQSxNQUFNQyxtQkFBd0IsYUFBOUI7O0FBR0EsU0FBU0MsY0FBVCxDQUF5QkMsR0FBekIsRUFBOEI7QUFDMUIsV0FBT0MsbUJBQUdDLEdBQUgsR0FBU0wscUJBQXFCTSxJQUFyQixDQUEwQkgsR0FBMUIsQ0FBVCxHQUEwQ0osaUJBQWlCTyxJQUFqQixDQUFzQkgsR0FBdEIsQ0FBakQ7QUFDSDs7QUFFRCxTQUFTSSxjQUFULENBQXlCSixHQUF6QixFQUE4QkssWUFBOUIsRUFBNEM7QUFDeEMsVUFBTUMsY0FBY0MsZUFBS0MsT0FBTCxDQUFhSCxZQUFiLENBQXBCOztBQUVBLFFBQUlQLGlCQUFpQkssSUFBakIsQ0FBc0JILEdBQXRCLENBQUosRUFDSUEsTUFBTU8sZUFBS0UsSUFBTCxDQUFVSCxXQUFWLEVBQXVCTixHQUF2QixDQUFOOztBQUVKLFdBQU8sWUFBWUEsR0FBbkI7QUFDSDs7QUFFTSxTQUFTVCxTQUFULENBQW9CUyxHQUFwQixFQUF5QlUsWUFBekIsRUFBdUM7QUFDMUMsVUFBTUMsV0FBeUJYLElBQUlZLEtBQUosQ0FBVW5CLFdBQVYsQ0FBL0I7QUFDQSxVQUFNb0IseUJBQXlCRixZQUFZLENBQUNqQixzQkFBc0JTLElBQXRCLENBQTJCSCxHQUEzQixDQUE1QztBQUNBLFVBQU1jLG9CQUF5QmIsbUJBQUdDLEdBQUgsSUFBVUwscUJBQXFCTSxJQUFyQixDQUEwQkgsR0FBMUIsQ0FBekM7O0FBRUEsUUFBSWEsMEJBQTBCLENBQUNDLGlCQUEzQixJQUFnRGQsUUFBUSxhQUE1RCxFQUNJLE1BQU0sSUFBSWUsaUJBQUosQ0FBYUwsWUFBYixFQUEyQk0sa0JBQVFDLHNCQUFuQyxFQUEyRGpCLEdBQTNELEVBQWdFVyxTQUFTLENBQVQsQ0FBaEUsQ0FBTjtBQUNQOztBQUVNLFNBQVNuQixjQUFULENBQXlCUSxHQUF6QixFQUE4QkssWUFBOUIsRUFBNEM7QUFDL0MsUUFBSVgsc0JBQXNCUyxJQUF0QixDQUEyQkgsR0FBM0IsS0FBbUNBLFFBQVEsYUFBL0MsRUFDSSxPQUFPQSxHQUFQOztBQUVKLFFBQUlELGVBQWVDLEdBQWYsS0FBdUJGLGlCQUFpQkssSUFBakIsQ0FBc0JILEdBQXRCLENBQTNCLEVBQ0ksT0FBT0ksZUFBZUosR0FBZixFQUFvQkssWUFBcEIsQ0FBUDs7QUFFSixVQUFNTSxXQUFXaEIscUJBQXFCUSxJQUFyQixDQUEwQkgsR0FBMUIsSUFBaUMsT0FBakMsR0FBMkMsU0FBNUQ7O0FBRUEsV0FBT1csV0FBV1gsR0FBbEI7QUFDSCIsImZpbGUiOiJhcGkvdGVzdC1wYWdlLXVybC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCBNRVNTQUdFIGZyb20gJy4uL2Vycm9ycy9ydW50aW1lL21lc3NhZ2UnO1xuXG5jb25zdCBQUk9UT0NPTF9SRSAgICAgICAgICAgPSAvXihbXFx3LV0rPykoPz06XFwvXFwvKS87XG5jb25zdCBTVVBQT1JURURfUFJPVE9DT0xfUkUgPSAvXihodHRwcz98ZmlsZSk6LztcbmNvbnN0IElNUExJQ0lUX1BST1RPQ09MX1JFICA9IC9eXFwvXFwvLztcbmNvbnN0IEFCU09MVVRFX1BBVEhfUkUgICAgICA9IC9eXFwvW14vXS87XG5jb25zdCBXSU5fQUJTT0xVVEVfUEFUSF9SRSAgPSAvXlxcdzpbL1xcXFxdLztcbmNvbnN0IFJFTEFUSVZFX1BBVEhfUkUgICAgICA9IC9eXFwuXFwuP1svXFxcXF0vO1xuXG5cbmZ1bmN0aW9uIGlzQWJzb2x1dGVQYXRoICh1cmwpIHtcbiAgICByZXR1cm4gT1Mud2luID8gV0lOX0FCU09MVVRFX1BBVEhfUkUudGVzdCh1cmwpIDogQUJTT0xVVEVfUEFUSF9SRS50ZXN0KHVybCk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVGaWxlVXJsICh1cmwsIHRlc3RGaWxlTmFtZSkge1xuICAgIGNvbnN0IHRlc3RGaWxlRGlyID0gcGF0aC5kaXJuYW1lKHRlc3RGaWxlTmFtZSk7XG5cbiAgICBpZiAoUkVMQVRJVkVfUEFUSF9SRS50ZXN0KHVybCkpXG4gICAgICAgIHVybCA9IHBhdGguam9pbih0ZXN0RmlsZURpciwgdXJsKTtcblxuICAgIHJldHVybiAnZmlsZTovLycgKyB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRVcmwgKHVybCwgY2FsbHNpdGVOYW1lKSB7XG4gICAgY29uc3QgcHJvdG9jb2wgICAgICAgICAgICAgICA9IHVybC5tYXRjaChQUk9UT0NPTF9SRSk7XG4gICAgY29uc3QgaGFzVW5zdXBwb3J0ZWRQcm90b2NvbCA9IHByb3RvY29sICYmICFTVVBQT1JURURfUFJPVE9DT0xfUkUudGVzdCh1cmwpO1xuICAgIGNvbnN0IGlzV2luQWJzb2x1dGVQYXRoICAgICAgPSBPUy53aW4gJiYgV0lOX0FCU09MVVRFX1BBVEhfUkUudGVzdCh1cmwpO1xuXG4gICAgaWYgKGhhc1Vuc3VwcG9ydGVkUHJvdG9jb2wgJiYgIWlzV2luQWJzb2x1dGVQYXRoICYmIHVybCAhPT0gJ2Fib3V0OmJsYW5rJylcbiAgICAgICAgdGhyb3cgbmV3IEFQSUVycm9yKGNhbGxzaXRlTmFtZSwgTUVTU0FHRS51bnN1cHBvcnRlZFVybFByb3RvY29sLCB1cmwsIHByb3RvY29sWzBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYWdlVXJsICh1cmwsIHRlc3RGaWxlTmFtZSkge1xuICAgIGlmIChTVVBQT1JURURfUFJPVE9DT0xfUkUudGVzdCh1cmwpIHx8IHVybCA9PT0gJ2Fib3V0OmJsYW5rJylcbiAgICAgICAgcmV0dXJuIHVybDtcblxuICAgIGlmIChpc0Fic29sdXRlUGF0aCh1cmwpIHx8IFJFTEFUSVZFX1BBVEhfUkUudGVzdCh1cmwpKVxuICAgICAgICByZXR1cm4gcmVzb2x2ZUZpbGVVcmwodXJsLCB0ZXN0RmlsZU5hbWUpO1xuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBJTVBMSUNJVF9QUk9UT0NPTF9SRS50ZXN0KHVybCkgPyAnaHR0cDonIDogJ2h0dHA6Ly8nO1xuXG4gICAgcmV0dXJuIHByb3RvY29sICsgdXJsO1xufVxuIl19
