'use strict';

exports.__esModule = true;

var _testcafeHammerhead = require('testcafe-hammerhead');

var _lodash = require('lodash');

class RequestHook {
    constructor(requestFilterRules, responseEventConfigureOpts) {
        this.requestFilterRules = this._prepareRequestFilterRules(requestFilterRules);
        this._instantiatedRequestFilterRules = [];
        this.responseEventConfigureOpts = responseEventConfigureOpts;

        this.warningLog = null;
    }

    _prepareRequestFilterRules(rules) {
        if (rules) return (0, _lodash.castArray)(rules);

        return [_testcafeHammerhead.RequestFilterRule.ANY];
    }

    _instantiateRequestFilterRules() {
        this._instantiatedRequestFilterRules = [];

        this.requestFilterRules.forEach(rule => {
            const instantiatedRule = rule instanceof _testcafeHammerhead.RequestFilterRule ? rule : new _testcafeHammerhead.RequestFilterRule(rule);

            this._instantiatedRequestFilterRules.push(instantiatedRule);
        });
    }

    onRequest() /*RequestEvent event*/{
        throw new Error('Not implemented');
    }

    _onConfigureResponse(event) {
        if (!this.responseEventConfigureOpts) return;

        event.opts.includeHeaders = this.responseEventConfigureOpts.includeHeaders;
        event.opts.includeBody = this.responseEventConfigureOpts.includeBody;
    }

    onResponse() /*ResponseEvent event*/{
        throw new Error('Not implemented');
    }
}
exports.default = RequestHook;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVxdWVzdC1ob29rcy9ob29rLmpzIl0sIm5hbWVzIjpbIlJlcXVlc3RIb29rIiwiY29uc3RydWN0b3IiLCJyZXF1ZXN0RmlsdGVyUnVsZXMiLCJyZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cyIsIl9wcmVwYXJlUmVxdWVzdEZpbHRlclJ1bGVzIiwiX2luc3RhbnRpYXRlZFJlcXVlc3RGaWx0ZXJSdWxlcyIsIndhcm5pbmdMb2ciLCJydWxlcyIsIlJlcXVlc3RGaWx0ZXJSdWxlIiwiQU5ZIiwiX2luc3RhbnRpYXRlUmVxdWVzdEZpbHRlclJ1bGVzIiwiZm9yRWFjaCIsInJ1bGUiLCJpbnN0YW50aWF0ZWRSdWxlIiwicHVzaCIsIm9uUmVxdWVzdCIsIkVycm9yIiwiX29uQ29uZmlndXJlUmVzcG9uc2UiLCJldmVudCIsIm9wdHMiLCJpbmNsdWRlSGVhZGVycyIsImluY2x1ZGVCb2R5Iiwib25SZXNwb25zZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUVlLE1BQU1BLFdBQU4sQ0FBa0I7QUFDN0JDLGdCQUFhQyxrQkFBYixFQUFpQ0MsMEJBQWpDLEVBQTZEO0FBQ3pELGFBQUtELGtCQUFMLEdBQXVDLEtBQUtFLDBCQUFMLENBQWdDRixrQkFBaEMsQ0FBdkM7QUFDQSxhQUFLRywrQkFBTCxHQUF1QyxFQUF2QztBQUNBLGFBQUtGLDBCQUFMLEdBQXVDQSwwQkFBdkM7O0FBRUEsYUFBS0csVUFBTCxHQUFrQixJQUFsQjtBQUNIOztBQUVERiwrQkFBNEJHLEtBQTVCLEVBQW1DO0FBQy9CLFlBQUlBLEtBQUosRUFDSSxPQUFPLHVCQUFVQSxLQUFWLENBQVA7O0FBRUosZUFBTyxDQUFDQyxzQ0FBa0JDLEdBQW5CLENBQVA7QUFDSDs7QUFFREMscUNBQWtDO0FBQzlCLGFBQUtMLCtCQUFMLEdBQXVDLEVBQXZDOztBQUVBLGFBQUtILGtCQUFMLENBQXdCUyxPQUF4QixDQUFnQ0MsUUFBUTtBQUNwQyxrQkFBTUMsbUJBQW1CRCxnQkFBZ0JKLHFDQUFoQixHQUFvQ0ksSUFBcEMsR0FBMkMsSUFBSUoscUNBQUosQ0FBc0JJLElBQXRCLENBQXBFOztBQUVBLGlCQUFLUCwrQkFBTCxDQUFxQ1MsSUFBckMsQ0FBMENELGdCQUExQztBQUNILFNBSkQ7QUFLSDs7QUFFREUsZ0JBQVcsc0JBQXdCO0FBQy9CLGNBQU0sSUFBSUMsS0FBSixDQUFVLGlCQUFWLENBQU47QUFDSDs7QUFFREMseUJBQXNCQyxLQUF0QixFQUE2QjtBQUN6QixZQUFJLENBQUMsS0FBS2YsMEJBQVYsRUFDSTs7QUFFSmUsY0FBTUMsSUFBTixDQUFXQyxjQUFYLEdBQTRCLEtBQUtqQiwwQkFBTCxDQUFnQ2lCLGNBQTVEO0FBQ0FGLGNBQU1DLElBQU4sQ0FBV0UsV0FBWCxHQUE0QixLQUFLbEIsMEJBQUwsQ0FBZ0NrQixXQUE1RDtBQUNIOztBQUVEQyxpQkFBWSx1QkFBeUI7QUFDakMsY0FBTSxJQUFJTixLQUFKLENBQVUsaUJBQVYsQ0FBTjtBQUNIO0FBeEM0QjtrQkFBWmhCLFciLCJmaWxlIjoiYXBpL3JlcXVlc3QtaG9va3MvaG9vay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RGaWx0ZXJSdWxlIH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5pbXBvcnQgeyBjYXN0QXJyYXkgfSBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0SG9vayB7XG4gICAgY29uc3RydWN0b3IgKHJlcXVlc3RGaWx0ZXJSdWxlcywgcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0RmlsdGVyUnVsZXMgICAgICAgICAgICAgID0gdGhpcy5fcHJlcGFyZVJlcXVlc3RGaWx0ZXJSdWxlcyhyZXF1ZXN0RmlsdGVyUnVsZXMpO1xuICAgICAgICB0aGlzLl9pbnN0YW50aWF0ZWRSZXF1ZXN0RmlsdGVyUnVsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5yZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cyAgICAgID0gcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHM7XG5cbiAgICAgICAgdGhpcy53YXJuaW5nTG9nID0gbnVsbDtcbiAgICB9XG5cbiAgICBfcHJlcGFyZVJlcXVlc3RGaWx0ZXJSdWxlcyAocnVsZXMpIHtcbiAgICAgICAgaWYgKHJ1bGVzKVxuICAgICAgICAgICAgcmV0dXJuIGNhc3RBcnJheShydWxlcyk7XG5cbiAgICAgICAgcmV0dXJuIFtSZXF1ZXN0RmlsdGVyUnVsZS5BTlldO1xuICAgIH1cblxuICAgIF9pbnN0YW50aWF0ZVJlcXVlc3RGaWx0ZXJSdWxlcyAoKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbnRpYXRlZFJlcXVlc3RGaWx0ZXJSdWxlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMucmVxdWVzdEZpbHRlclJ1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW50aWF0ZWRSdWxlID0gcnVsZSBpbnN0YW5jZW9mIFJlcXVlc3RGaWx0ZXJSdWxlID8gcnVsZSA6IG5ldyBSZXF1ZXN0RmlsdGVyUnVsZShydWxlKTtcblxuICAgICAgICAgICAgdGhpcy5faW5zdGFudGlhdGVkUmVxdWVzdEZpbHRlclJ1bGVzLnB1c2goaW5zdGFudGlhdGVkUnVsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uUmVxdWVzdCAoLypSZXF1ZXN0RXZlbnQgZXZlbnQqLykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cblxuICAgIF9vbkNvbmZpZ3VyZVJlc3BvbnNlIChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMucmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgZXZlbnQub3B0cy5pbmNsdWRlSGVhZGVycyA9IHRoaXMucmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMuaW5jbHVkZUhlYWRlcnM7XG4gICAgICAgIGV2ZW50Lm9wdHMuaW5jbHVkZUJvZHkgICAgPSB0aGlzLnJlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzLmluY2x1ZGVCb2R5O1xuICAgIH1cblxuICAgIG9uUmVzcG9uc2UgKC8qUmVzcG9uc2VFdmVudCBldmVudCovKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxufVxuIl19
