'use strict';

exports.__esModule = true;

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

exports.default = createRequestMock;

var _hook = require('./hook');

var _hook2 = _interopRequireDefault(_hook);

var _testcafeHammerhead = require('testcafe-hammerhead');

var _runtime = require('../../errors/runtime');

var _message = require('../../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _warningMessage = require('../../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RequestMock extends _hook2.default {
    constructor() {
        super([]);

        this.pendingRequestFilterRuleInit = null;
        this.mocks = new _map2.default();
    }

    onRequest(event) {
        const mock = this.mocks.get(event._requestFilterRule);

        event.setMock(mock);
    }

    onResponse(event) {
        if (event.statusCode === _testcafeHammerhead.SAME_ORIGIN_CHECK_FAILED_STATUS_CODE) this.warningLog.addWarning(_warningMessage2.default.requestMockCORSValidationFailed, RequestMock.name, event._requestFilterRule);
    }

    // API
    onRequestTo(requestFilterRuleInit) {
        if (this.pendingRequestFilterRuleInit) throw new _runtime.APIError('onRequestTo', _message2.default.requestHookConfigureAPIError, RequestMock.name, "The 'respond' method was not called after 'onRequestTo'. You must call the 'respond' method to provide the mocked response.");

        this.pendingRequestFilterRuleInit = requestFilterRuleInit;

        return this;
    }

    respond(body, statusCode, headers) {
        if (!this.pendingRequestFilterRuleInit) throw new _runtime.APIError('respond', _message2.default.requestHookConfigureAPIError, RequestMock.name, "The 'onRequestTo' method was not called before 'respond'. You must call the 'onRequestTo' method to provide the URL requests to which are mocked.");

        const mock = new _testcafeHammerhead.ResponseMock(body, statusCode, headers);
        const rule = new _testcafeHammerhead.RequestFilterRule(this.pendingRequestFilterRuleInit);

        this.requestFilterRules.push(rule);
        this.mocks.set(rule, mock);
        this.pendingRequestFilterRuleInit = null;

        return this;
    }
}

function createRequestMock() {
    return new RequestMock();
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVxdWVzdC1ob29rcy9yZXF1ZXN0LW1vY2suanMiXSwibmFtZXMiOlsiY3JlYXRlUmVxdWVzdE1vY2siLCJSZXF1ZXN0TW9jayIsIlJlcXVlc3RIb29rIiwiY29uc3RydWN0b3IiLCJwZW5kaW5nUmVxdWVzdEZpbHRlclJ1bGVJbml0IiwibW9ja3MiLCJvblJlcXVlc3QiLCJldmVudCIsIm1vY2siLCJnZXQiLCJfcmVxdWVzdEZpbHRlclJ1bGUiLCJzZXRNb2NrIiwib25SZXNwb25zZSIsInN0YXR1c0NvZGUiLCJTQU1FX09SSUdJTl9DSEVDS19GQUlMRURfU1RBVFVTX0NPREUiLCJ3YXJuaW5nTG9nIiwiYWRkV2FybmluZyIsIldBUk5JTkdfTUVTU0FHRSIsInJlcXVlc3RNb2NrQ09SU1ZhbGlkYXRpb25GYWlsZWQiLCJuYW1lIiwib25SZXF1ZXN0VG8iLCJyZXF1ZXN0RmlsdGVyUnVsZUluaXQiLCJBUElFcnJvciIsIk1FU1NBR0UiLCJyZXF1ZXN0SG9va0NvbmZpZ3VyZUFQSUVycm9yIiwicmVzcG9uZCIsImJvZHkiLCJoZWFkZXJzIiwiUmVzcG9uc2VNb2NrIiwicnVsZSIsIlJlcXVlc3RGaWx0ZXJSdWxlIiwicmVxdWVzdEZpbHRlclJ1bGVzIiwicHVzaCIsInNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBa0R3QkEsaUI7O0FBbER4Qjs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLE1BQU1DLFdBQU4sU0FBMEJDLGNBQTFCLENBQXNDO0FBQ2xDQyxrQkFBZTtBQUNYLGNBQU0sRUFBTjs7QUFFQSxhQUFLQyw0QkFBTCxHQUFvQyxJQUFwQztBQUNBLGFBQUtDLEtBQUwsR0FBb0MsbUJBQXBDO0FBQ0g7O0FBRURDLGNBQVdDLEtBQVgsRUFBa0I7QUFDZCxjQUFNQyxPQUFPLEtBQUtILEtBQUwsQ0FBV0ksR0FBWCxDQUFlRixNQUFNRyxrQkFBckIsQ0FBYjs7QUFFQUgsY0FBTUksT0FBTixDQUFjSCxJQUFkO0FBQ0g7O0FBRURJLGVBQVlMLEtBQVosRUFBbUI7QUFDZixZQUFJQSxNQUFNTSxVQUFOLEtBQXFCQyx3REFBekIsRUFDSSxLQUFLQyxVQUFMLENBQWdCQyxVQUFoQixDQUEyQkMseUJBQWdCQywrQkFBM0MsRUFBNEVqQixZQUFZa0IsSUFBeEYsRUFBOEZaLE1BQU1HLGtCQUFwRztBQUNQOztBQUVEO0FBQ0FVLGdCQUFhQyxxQkFBYixFQUFvQztBQUNoQyxZQUFJLEtBQUtqQiw0QkFBVCxFQUNJLE1BQU0sSUFBSWtCLGlCQUFKLENBQWEsYUFBYixFQUE0QkMsa0JBQVFDLDRCQUFwQyxFQUFrRXZCLFlBQVlrQixJQUE5RSxFQUFvRiw2SEFBcEYsQ0FBTjs7QUFFSixhQUFLZiw0QkFBTCxHQUFvQ2lCLHFCQUFwQzs7QUFFQSxlQUFPLElBQVA7QUFDSDs7QUFFREksWUFBU0MsSUFBVCxFQUFlYixVQUFmLEVBQTJCYyxPQUEzQixFQUFvQztBQUNoQyxZQUFJLENBQUMsS0FBS3ZCLDRCQUFWLEVBQ0ksTUFBTSxJQUFJa0IsaUJBQUosQ0FBYSxTQUFiLEVBQXdCQyxrQkFBUUMsNEJBQWhDLEVBQThEdkIsWUFBWWtCLElBQTFFLEVBQWdGLG1KQUFoRixDQUFOOztBQUVKLGNBQU1YLE9BQU8sSUFBSW9CLGdDQUFKLENBQWlCRixJQUFqQixFQUF1QmIsVUFBdkIsRUFBbUNjLE9BQW5DLENBQWI7QUFDQSxjQUFNRSxPQUFPLElBQUlDLHFDQUFKLENBQXNCLEtBQUsxQiw0QkFBM0IsQ0FBYjs7QUFFQSxhQUFLMkIsa0JBQUwsQ0FBd0JDLElBQXhCLENBQTZCSCxJQUE3QjtBQUNBLGFBQUt4QixLQUFMLENBQVc0QixHQUFYLENBQWVKLElBQWYsRUFBcUJyQixJQUFyQjtBQUNBLGFBQUtKLDRCQUFMLEdBQW9DLElBQXBDOztBQUVBLGVBQU8sSUFBUDtBQUNIO0FBekNpQzs7QUE0Q3ZCLFNBQVNKLGlCQUFULEdBQThCO0FBQ3pDLFdBQU8sSUFBSUMsV0FBSixFQUFQO0FBQ0giLCJmaWxlIjoiYXBpL3JlcXVlc3QtaG9va3MvcmVxdWVzdC1tb2NrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlcXVlc3RIb29rIGZyb20gJy4vaG9vayc7XG5pbXBvcnQgeyBSZXNwb25zZU1vY2ssIFJlcXVlc3RGaWx0ZXJSdWxlLCBTQU1FX09SSUdJTl9DSEVDS19GQUlMRURfU1RBVFVTX0NPREUgfSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzL3J1bnRpbWUnO1xuaW1wb3J0IE1FU1NBR0UgZnJvbSAnLi4vLi4vZXJyb3JzL3J1bnRpbWUvbWVzc2FnZSc7XG5pbXBvcnQgV0FSTklOR19NRVNTQUdFIGZyb20gJy4uLy4uL25vdGlmaWNhdGlvbnMvd2FybmluZy1tZXNzYWdlJztcblxuY2xhc3MgUmVxdWVzdE1vY2sgZXh0ZW5kcyBSZXF1ZXN0SG9vayB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcihbXSk7XG5cbiAgICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdEZpbHRlclJ1bGVJbml0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5tb2NrcyAgICAgICAgICAgICAgICAgICAgICAgID0gbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIG9uUmVxdWVzdCAoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgbW9jayA9IHRoaXMubW9ja3MuZ2V0KGV2ZW50Ll9yZXF1ZXN0RmlsdGVyUnVsZSk7XG5cbiAgICAgICAgZXZlbnQuc2V0TW9jayhtb2NrKTtcbiAgICB9XG5cbiAgICBvblJlc3BvbnNlIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuc3RhdHVzQ29kZSA9PT0gU0FNRV9PUklHSU5fQ0hFQ0tfRkFJTEVEX1NUQVRVU19DT0RFKVxuICAgICAgICAgICAgdGhpcy53YXJuaW5nTG9nLmFkZFdhcm5pbmcoV0FSTklOR19NRVNTQUdFLnJlcXVlc3RNb2NrQ09SU1ZhbGlkYXRpb25GYWlsZWQsIFJlcXVlc3RNb2NrLm5hbWUsIGV2ZW50Ll9yZXF1ZXN0RmlsdGVyUnVsZSk7XG4gICAgfVxuXG4gICAgLy8gQVBJXG4gICAgb25SZXF1ZXN0VG8gKHJlcXVlc3RGaWx0ZXJSdWxlSW5pdCkge1xuICAgICAgICBpZiAodGhpcy5wZW5kaW5nUmVxdWVzdEZpbHRlclJ1bGVJbml0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEFQSUVycm9yKCdvblJlcXVlc3RUbycsIE1FU1NBR0UucmVxdWVzdEhvb2tDb25maWd1cmVBUElFcnJvciwgUmVxdWVzdE1vY2submFtZSwgXCJUaGUgJ3Jlc3BvbmQnIG1ldGhvZCB3YXMgbm90IGNhbGxlZCBhZnRlciAnb25SZXF1ZXN0VG8nLiBZb3UgbXVzdCBjYWxsIHRoZSAncmVzcG9uZCcgbWV0aG9kIHRvIHByb3ZpZGUgdGhlIG1vY2tlZCByZXNwb25zZS5cIik7XG5cbiAgICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdEZpbHRlclJ1bGVJbml0ID0gcmVxdWVzdEZpbHRlclJ1bGVJbml0O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlc3BvbmQgKGJvZHksIHN0YXR1c0NvZGUsIGhlYWRlcnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnBlbmRpbmdSZXF1ZXN0RmlsdGVyUnVsZUluaXQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgQVBJRXJyb3IoJ3Jlc3BvbmQnLCBNRVNTQUdFLnJlcXVlc3RIb29rQ29uZmlndXJlQVBJRXJyb3IsIFJlcXVlc3RNb2NrLm5hbWUsIFwiVGhlICdvblJlcXVlc3RUbycgbWV0aG9kIHdhcyBub3QgY2FsbGVkIGJlZm9yZSAncmVzcG9uZCcuIFlvdSBtdXN0IGNhbGwgdGhlICdvblJlcXVlc3RUbycgbWV0aG9kIHRvIHByb3ZpZGUgdGhlIFVSTCByZXF1ZXN0cyB0byB3aGljaCBhcmUgbW9ja2VkLlwiKTtcblxuICAgICAgICBjb25zdCBtb2NrID0gbmV3IFJlc3BvbnNlTW9jayhib2R5LCBzdGF0dXNDb2RlLCBoZWFkZXJzKTtcbiAgICAgICAgY29uc3QgcnVsZSA9IG5ldyBSZXF1ZXN0RmlsdGVyUnVsZSh0aGlzLnBlbmRpbmdSZXF1ZXN0RmlsdGVyUnVsZUluaXQpO1xuXG4gICAgICAgIHRoaXMucmVxdWVzdEZpbHRlclJ1bGVzLnB1c2gocnVsZSk7XG4gICAgICAgIHRoaXMubW9ja3Muc2V0KHJ1bGUsIG1vY2spO1xuICAgICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0RmlsdGVyUnVsZUluaXQgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUmVxdWVzdE1vY2sgKCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdE1vY2soKTtcbn1cbiJdfQ==
