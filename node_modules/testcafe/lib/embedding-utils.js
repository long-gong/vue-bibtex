'use strict';

exports.__esModule = true;
const lazyRequire = require('import-lazy')(require);
const hammerhead = lazyRequire('testcafe-hammerhead');
const ReporterPluginHost = lazyRequire('./reporter/plugin-host');
const TestRunErrorFormattableAdapter = lazyRequire('./errors/test-run/formattable-adapter');
const testRunErrors = lazyRequire('./errors/test-run');
const COMMAND_TYPE = lazyRequire('./test-run/commands/type');
const getTestListModule = lazyRequire('./compiler/test-file/formats/es-next/get-test-list');
const getTypeScriptTestListModule = lazyRequire('./compiler/test-file/formats/typescript/get-test-list');
const getCoffeeScriptTestListModule = lazyRequire('./compiler/test-file/formats/coffeescript/get-test-list');
const initializers = lazyRequire('./test-run/commands/validations/initializers');

// NOTE: we can't use lazy require for TestRun and Assignable, because it breaks prototype chain for inherited classes
let TestRun = null;
let Assignable = null;

exports.default = {
    TestRunErrorFormattableAdapter,
    testRunErrors,
    COMMAND_TYPE,

    get Assignable() {
        if (!Assignable) Assignable = require('./utils/assignable');

        return Assignable;
    },

    get TestRun() {
        if (!TestRun) TestRun = require('./test-run');

        return TestRun;
    },

    get getTestList() {
        return getTestListModule.getTestList;
    },

    get getTypeScriptTestList() {
        return getTypeScriptTestListModule.getTypeScriptTestList;
    },

    get getCoffeeScriptTestList() {
        return getCoffeeScriptTestListModule.getCoffeeScriptTestList;
    },

    get getTestListFromCode() {
        return getTestListModule.getTestListFromCode;
    },

    get getTypeScriptTestListFromCode() {
        return getTypeScriptTestListModule.getTypeScriptTestListFromCode;
    },

    get getCoffeeScriptTestListFromCode() {
        return getCoffeeScriptTestListModule.getCoffeeScriptTestListFromCode;
    },

    get initSelector() {
        return initializers.initSelector;
    },

    ensureUploadDirectory(...args) {
        return hammerhead.UploadStorage.ensureUploadsRoot(...args);
    },

    copyFilesToUploadFolder(...args) {
        return hammerhead.UploadStorage.copy(...args);
    },

    buildReporterPlugin(pluginFactory, outStream) {
        const plugin = pluginFactory();

        return new ReporterPluginHost(plugin, outStream);
    }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbWJlZGRpbmctdXRpbHMuanMiXSwibmFtZXMiOlsibGF6eVJlcXVpcmUiLCJyZXF1aXJlIiwiaGFtbWVyaGVhZCIsIlJlcG9ydGVyUGx1Z2luSG9zdCIsIlRlc3RSdW5FcnJvckZvcm1hdHRhYmxlQWRhcHRlciIsInRlc3RSdW5FcnJvcnMiLCJDT01NQU5EX1RZUEUiLCJnZXRUZXN0TGlzdE1vZHVsZSIsImdldFR5cGVTY3JpcHRUZXN0TGlzdE1vZHVsZSIsImdldENvZmZlZVNjcmlwdFRlc3RMaXN0TW9kdWxlIiwiaW5pdGlhbGl6ZXJzIiwiVGVzdFJ1biIsIkFzc2lnbmFibGUiLCJnZXRUZXN0TGlzdCIsImdldFR5cGVTY3JpcHRUZXN0TGlzdCIsImdldENvZmZlZVNjcmlwdFRlc3RMaXN0IiwiZ2V0VGVzdExpc3RGcm9tQ29kZSIsImdldFR5cGVTY3JpcHRUZXN0TGlzdEZyb21Db2RlIiwiZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3RGcm9tQ29kZSIsImluaXRTZWxlY3RvciIsImVuc3VyZVVwbG9hZERpcmVjdG9yeSIsImFyZ3MiLCJVcGxvYWRTdG9yYWdlIiwiZW5zdXJlVXBsb2Fkc1Jvb3QiLCJjb3B5RmlsZXNUb1VwbG9hZEZvbGRlciIsImNvcHkiLCJidWlsZFJlcG9ydGVyUGx1Z2luIiwicGx1Z2luRmFjdG9yeSIsIm91dFN0cmVhbSIsInBsdWdpbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTUEsY0FBaUNDLFFBQVEsYUFBUixFQUF1QkEsT0FBdkIsQ0FBdkM7QUFDQSxNQUFNQyxhQUFpQ0YsWUFBWSxxQkFBWixDQUF2QztBQUNBLE1BQU1HLHFCQUFpQ0gsWUFBWSx3QkFBWixDQUF2QztBQUNBLE1BQU1JLGlDQUFpQ0osWUFBWSx1Q0FBWixDQUF2QztBQUNBLE1BQU1LLGdCQUFpQ0wsWUFBWSxtQkFBWixDQUF2QztBQUNBLE1BQU1NLGVBQWlDTixZQUFZLDBCQUFaLENBQXZDO0FBQ0EsTUFBTU8sb0JBQWlDUCxZQUFZLG9EQUFaLENBQXZDO0FBQ0EsTUFBTVEsOEJBQWlDUixZQUFZLHVEQUFaLENBQXZDO0FBQ0EsTUFBTVMsZ0NBQWlDVCxZQUFZLHlEQUFaLENBQXZDO0FBQ0EsTUFBTVUsZUFBaUNWLFlBQVksOENBQVosQ0FBdkM7O0FBRUE7QUFDQSxJQUFJVyxVQUFhLElBQWpCO0FBQ0EsSUFBSUMsYUFBYSxJQUFqQjs7a0JBRWU7QUFDWFIsa0NBRFc7QUFFWEMsaUJBRlc7QUFHWEMsZ0JBSFc7O0FBS1gsUUFBSU0sVUFBSixHQUFrQjtBQUNkLFlBQUksQ0FBQ0EsVUFBTCxFQUNJQSxhQUFhWCxRQUFRLG9CQUFSLENBQWI7O0FBRUosZUFBT1csVUFBUDtBQUNILEtBVlU7O0FBWVgsUUFBSUQsT0FBSixHQUFlO0FBQ1gsWUFBSSxDQUFDQSxPQUFMLEVBQ0lBLFVBQVVWLFFBQVEsWUFBUixDQUFWOztBQUVKLGVBQU9VLE9BQVA7QUFDSCxLQWpCVTs7QUFtQlgsUUFBSUUsV0FBSixHQUFtQjtBQUNmLGVBQU9OLGtCQUFrQk0sV0FBekI7QUFDSCxLQXJCVTs7QUF1QlgsUUFBSUMscUJBQUosR0FBNkI7QUFDekIsZUFBT04sNEJBQTRCTSxxQkFBbkM7QUFDSCxLQXpCVTs7QUEyQlgsUUFBSUMsdUJBQUosR0FBK0I7QUFDM0IsZUFBT04sOEJBQThCTSx1QkFBckM7QUFDSCxLQTdCVTs7QUErQlgsUUFBSUMsbUJBQUosR0FBMkI7QUFDdkIsZUFBT1Qsa0JBQWtCUyxtQkFBekI7QUFDSCxLQWpDVTs7QUFtQ1gsUUFBSUMsNkJBQUosR0FBcUM7QUFDakMsZUFBT1QsNEJBQTRCUyw2QkFBbkM7QUFDSCxLQXJDVTs7QUF1Q1gsUUFBSUMsK0JBQUosR0FBdUM7QUFDbkMsZUFBT1QsOEJBQThCUywrQkFBckM7QUFDSCxLQXpDVTs7QUEyQ1gsUUFBSUMsWUFBSixHQUFvQjtBQUNoQixlQUFPVCxhQUFhUyxZQUFwQjtBQUNILEtBN0NVOztBQStDWEMsMEJBQXVCLEdBQUdDLElBQTFCLEVBQWdDO0FBQzVCLGVBQU9uQixXQUFXb0IsYUFBWCxDQUF5QkMsaUJBQXpCLENBQTJDLEdBQUdGLElBQTlDLENBQVA7QUFDSCxLQWpEVTs7QUFtRFhHLDRCQUF5QixHQUFHSCxJQUE1QixFQUFrQztBQUM5QixlQUFPbkIsV0FBV29CLGFBQVgsQ0FBeUJHLElBQXpCLENBQThCLEdBQUdKLElBQWpDLENBQVA7QUFDSCxLQXJEVTs7QUF1RFhLLHdCQUFxQkMsYUFBckIsRUFBb0NDLFNBQXBDLEVBQStDO0FBQzNDLGNBQU1DLFNBQVNGLGVBQWY7O0FBRUEsZUFBTyxJQUFJeEIsa0JBQUosQ0FBdUIwQixNQUF2QixFQUErQkQsU0FBL0IsQ0FBUDtBQUNIO0FBM0RVLEMiLCJmaWxlIjoiZW1iZWRkaW5nLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbGF6eVJlcXVpcmUgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnaW1wb3J0LWxhenknKShyZXF1aXJlKTtcbmNvbnN0IGhhbW1lcmhlYWQgICAgICAgICAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCd0ZXN0Y2FmZS1oYW1tZXJoZWFkJyk7XG5jb25zdCBSZXBvcnRlclBsdWdpbkhvc3QgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi9yZXBvcnRlci9wbHVnaW4taG9zdCcpO1xuY29uc3QgVGVzdFJ1bkVycm9yRm9ybWF0dGFibGVBZGFwdGVyID0gbGF6eVJlcXVpcmUoJy4vZXJyb3JzL3Rlc3QtcnVuL2Zvcm1hdHRhYmxlLWFkYXB0ZXInKTtcbmNvbnN0IHRlc3RSdW5FcnJvcnMgICAgICAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL2Vycm9ycy90ZXN0LXJ1bicpO1xuY29uc3QgQ09NTUFORF9UWVBFICAgICAgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vdGVzdC1ydW4vY29tbWFuZHMvdHlwZScpO1xuY29uc3QgZ2V0VGVzdExpc3RNb2R1bGUgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vY29tcGlsZXIvdGVzdC1maWxlL2Zvcm1hdHMvZXMtbmV4dC9nZXQtdGVzdC1saXN0Jyk7XG5jb25zdCBnZXRUeXBlU2NyaXB0VGVzdExpc3RNb2R1bGUgICAgPSBsYXp5UmVxdWlyZSgnLi9jb21waWxlci90ZXN0LWZpbGUvZm9ybWF0cy90eXBlc2NyaXB0L2dldC10ZXN0LWxpc3QnKTtcbmNvbnN0IGdldENvZmZlZVNjcmlwdFRlc3RMaXN0TW9kdWxlICA9IGxhenlSZXF1aXJlKCcuL2NvbXBpbGVyL3Rlc3QtZmlsZS9mb3JtYXRzL2NvZmZlZXNjcmlwdC9nZXQtdGVzdC1saXN0Jyk7XG5jb25zdCBpbml0aWFsaXplcnMgICAgICAgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi90ZXN0LXJ1bi9jb21tYW5kcy92YWxpZGF0aW9ucy9pbml0aWFsaXplcnMnKTtcblxuLy8gTk9URTogd2UgY2FuJ3QgdXNlIGxhenkgcmVxdWlyZSBmb3IgVGVzdFJ1biBhbmQgQXNzaWduYWJsZSwgYmVjYXVzZSBpdCBicmVha3MgcHJvdG90eXBlIGNoYWluIGZvciBpbmhlcml0ZWQgY2xhc3Nlc1xubGV0IFRlc3RSdW4gICAgPSBudWxsO1xubGV0IEFzc2lnbmFibGUgPSBudWxsO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgVGVzdFJ1bkVycm9yRm9ybWF0dGFibGVBZGFwdGVyLFxuICAgIHRlc3RSdW5FcnJvcnMsXG4gICAgQ09NTUFORF9UWVBFLFxuXG4gICAgZ2V0IEFzc2lnbmFibGUgKCkge1xuICAgICAgICBpZiAoIUFzc2lnbmFibGUpXG4gICAgICAgICAgICBBc3NpZ25hYmxlID0gcmVxdWlyZSgnLi91dGlscy9hc3NpZ25hYmxlJyk7XG5cbiAgICAgICAgcmV0dXJuIEFzc2lnbmFibGU7XG4gICAgfSxcblxuICAgIGdldCBUZXN0UnVuICgpIHtcbiAgICAgICAgaWYgKCFUZXN0UnVuKVxuICAgICAgICAgICAgVGVzdFJ1biA9IHJlcXVpcmUoJy4vdGVzdC1ydW4nKTtcblxuICAgICAgICByZXR1cm4gVGVzdFJ1bjtcbiAgICB9LFxuXG4gICAgZ2V0IGdldFRlc3RMaXN0ICgpIHtcbiAgICAgICAgcmV0dXJuIGdldFRlc3RMaXN0TW9kdWxlLmdldFRlc3RMaXN0O1xuICAgIH0sXG5cbiAgICBnZXQgZ2V0VHlwZVNjcmlwdFRlc3RMaXN0ICgpIHtcbiAgICAgICAgcmV0dXJuIGdldFR5cGVTY3JpcHRUZXN0TGlzdE1vZHVsZS5nZXRUeXBlU2NyaXB0VGVzdExpc3Q7XG4gICAgfSxcblxuICAgIGdldCBnZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdCAoKSB7XG4gICAgICAgIHJldHVybiBnZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdE1vZHVsZS5nZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdDtcbiAgICB9LFxuXG4gICAgZ2V0IGdldFRlc3RMaXN0RnJvbUNvZGUgKCkge1xuICAgICAgICByZXR1cm4gZ2V0VGVzdExpc3RNb2R1bGUuZ2V0VGVzdExpc3RGcm9tQ29kZTtcbiAgICB9LFxuXG4gICAgZ2V0IGdldFR5cGVTY3JpcHRUZXN0TGlzdEZyb21Db2RlICgpIHtcbiAgICAgICAgcmV0dXJuIGdldFR5cGVTY3JpcHRUZXN0TGlzdE1vZHVsZS5nZXRUeXBlU2NyaXB0VGVzdExpc3RGcm9tQ29kZTtcbiAgICB9LFxuXG4gICAgZ2V0IGdldENvZmZlZVNjcmlwdFRlc3RMaXN0RnJvbUNvZGUgKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3RNb2R1bGUuZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3RGcm9tQ29kZTtcbiAgICB9LFxuXG4gICAgZ2V0IGluaXRTZWxlY3RvciAoKSB7XG4gICAgICAgIHJldHVybiBpbml0aWFsaXplcnMuaW5pdFNlbGVjdG9yO1xuICAgIH0sXG5cbiAgICBlbnN1cmVVcGxvYWREaXJlY3RvcnkgKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGhhbW1lcmhlYWQuVXBsb2FkU3RvcmFnZS5lbnN1cmVVcGxvYWRzUm9vdCguLi5hcmdzKTtcbiAgICB9LFxuXG4gICAgY29weUZpbGVzVG9VcGxvYWRGb2xkZXIgKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGhhbW1lcmhlYWQuVXBsb2FkU3RvcmFnZS5jb3B5KC4uLmFyZ3MpO1xuICAgIH0sXG5cbiAgICBidWlsZFJlcG9ydGVyUGx1Z2luIChwbHVnaW5GYWN0b3J5LCBvdXRTdHJlYW0pIHtcbiAgICAgICAgY29uc3QgcGx1Z2luID0gcGx1Z2luRmFjdG9yeSgpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUmVwb3J0ZXJQbHVnaW5Ib3N0KHBsdWdpbiwgb3V0U3RyZWFtKTtcbiAgICB9XG59O1xuIl19
