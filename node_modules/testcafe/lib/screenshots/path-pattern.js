'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _lodash = require('lodash');

var _correctFilePath = require('../utils/correct-file-path');

var _correctFilePath2 = _interopRequireDefault(_correctFilePath);

var _escapeUserAgent = require('../utils/escape-user-agent');

var _escapeUserAgent2 = _interopRequireDefault(_escapeUserAgent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DATE_FORMAT = 'YYYY-MM-DD';
const TIME_FORMAT = 'HH-mm-ss';

const SCRENSHOT_EXTENTION = 'png';

const ERRORS_FOLDER = 'errors';

const PLACEHOLDERS = {
    DATE: '${DATE}',
    TIME: '${TIME}',
    TEST_INDEX: '${TEST_INDEX}',
    FILE_INDEX: '${FILE_INDEX}',
    QUARANTINE_ATTEMPT: '${QUARANTINE_ATTEMPT}',
    FIXTURE: '${FIXTURE}',
    TEST: '${TEST}',
    USERAGENT: '${USERAGENT}',
    BROWSER: '${BROWSER}',
    BROWSER_VERSION: '${BROWSER_VERSION}',
    OS: '${OS}',
    OS_VERSION: '${OS_VERSION}'
};

const DEFAULT_PATH_PATTERN_FOR_REPORT = `${PLACEHOLDERS.DATE}_${PLACEHOLDERS.TIME}\\test-${PLACEHOLDERS.TEST_INDEX}`;
const DEFAULT_PATH_PATTERN = `${DEFAULT_PATH_PATTERN_FOR_REPORT}\\${PLACEHOLDERS.USERAGENT}\\${PLACEHOLDERS.FILE_INDEX}.${SCRENSHOT_EXTENTION}`;
const QUARANTINE_MODE_DEFAULT_PATH_PATTERN = `${DEFAULT_PATH_PATTERN_FOR_REPORT}\\run-${PLACEHOLDERS.QUARANTINE_ATTEMPT}\\${PLACEHOLDERS.USERAGENT}\\${PLACEHOLDERS.FILE_INDEX}.${SCRENSHOT_EXTENTION}`;

class PathPattern {
    constructor(pattern, data) {
        this.pattern = this._ensurePattern(pattern, data.quarantineAttempt);
        this.data = this._addDefaultFields(data);
        this.placeholderToDataMap = this._createPlaceholderToDataMap();
    }

    _ensurePattern(pattern, quarantineAttempt) {
        if (pattern) return pattern;

        return quarantineAttempt ? QUARANTINE_MODE_DEFAULT_PATH_PATTERN : DEFAULT_PATH_PATTERN;
    }

    _addDefaultFields(data) {
        const defaultFields = {
            formattedDate: data.now.format(DATE_FORMAT),
            formattedTime: data.now.format(TIME_FORMAT),
            fileIndex: 1,
            errorFileIndex: 1
        };

        return (0, _assign2.default)({}, defaultFields, data);
    }

    _createPlaceholderToDataMap() {
        return {
            [PLACEHOLDERS.DATE]: this.data.formattedDate,
            [PLACEHOLDERS.TIME]: this.data.formattedTime,
            [PLACEHOLDERS.TEST_INDEX]: this.data.testIndex,
            [PLACEHOLDERS.QUARANTINE_ATTEMPT]: this.data.quarantineAttempt || 1,
            [PLACEHOLDERS.FIXTURE]: this.data.fixture,
            [PLACEHOLDERS.TEST]: this.data.test,
            [PLACEHOLDERS.FILE_INDEX]: forError => forError ? this.data.errorFileIndex : this.data.fileIndex,
            [PLACEHOLDERS.USERAGENT]: this.data.parsedUserAgent.toString(),
            [PLACEHOLDERS.BROWSER]: this.data.parsedUserAgent.family,
            [PLACEHOLDERS.BROWSER_VERSION]: this.data.parsedUserAgent.toVersion(),
            [PLACEHOLDERS.OS]: this.data.parsedUserAgent.os.family,
            [PLACEHOLDERS.OS_VERSION]: this.data.parsedUserAgent.os.toVersion()
        };
    }

    static _buildPath(pattern, placeholderToDataMap, forError) {
        let resultFilePath = pattern;

        for (const placeholder in placeholderToDataMap) {
            const findPlaceholderRegExp = new RegExp((0, _lodash.escapeRegExp)(placeholder), 'g');

            resultFilePath = resultFilePath.replace(findPlaceholderRegExp, () => {
                if (placeholder === PLACEHOLDERS.FILE_INDEX) {
                    const getFileIndexFn = placeholderToDataMap[placeholder];
                    let result = getFileIndexFn(forError);

                    if (forError) result = `${ERRORS_FOLDER}\\${result}`;

                    return result;
                } else if (placeholder === PLACEHOLDERS.USERAGENT) {
                    const userAgent = placeholderToDataMap[placeholder];

                    return (0, _escapeUserAgent2.default)(userAgent);
                }

                return placeholderToDataMap[placeholder];
            });
        }

        return resultFilePath;
    }

    getPath(forError) {
        const path = PathPattern._buildPath(this.pattern, this.placeholderToDataMap, forError);

        return (0, _correctFilePath2.default)(path, SCRENSHOT_EXTENTION);
    }

    // For testing purposes
    static get PLACEHOLDERS() {
        return PLACEHOLDERS;
    }
}
exports.default = PathPattern;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JlZW5zaG90cy9wYXRoLXBhdHRlcm4uanMiXSwibmFtZXMiOlsiREFURV9GT1JNQVQiLCJUSU1FX0ZPUk1BVCIsIlNDUkVOU0hPVF9FWFRFTlRJT04iLCJFUlJPUlNfRk9MREVSIiwiUExBQ0VIT0xERVJTIiwiREFURSIsIlRJTUUiLCJURVNUX0lOREVYIiwiRklMRV9JTkRFWCIsIlFVQVJBTlRJTkVfQVRURU1QVCIsIkZJWFRVUkUiLCJURVNUIiwiVVNFUkFHRU5UIiwiQlJPV1NFUiIsIkJST1dTRVJfVkVSU0lPTiIsIk9TIiwiT1NfVkVSU0lPTiIsIkRFRkFVTFRfUEFUSF9QQVRURVJOX0ZPUl9SRVBPUlQiLCJERUZBVUxUX1BBVEhfUEFUVEVSTiIsIlFVQVJBTlRJTkVfTU9ERV9ERUZBVUxUX1BBVEhfUEFUVEVSTiIsIlBhdGhQYXR0ZXJuIiwiY29uc3RydWN0b3IiLCJwYXR0ZXJuIiwiZGF0YSIsIl9lbnN1cmVQYXR0ZXJuIiwicXVhcmFudGluZUF0dGVtcHQiLCJfYWRkRGVmYXVsdEZpZWxkcyIsInBsYWNlaG9sZGVyVG9EYXRhTWFwIiwiX2NyZWF0ZVBsYWNlaG9sZGVyVG9EYXRhTWFwIiwiZGVmYXVsdEZpZWxkcyIsImZvcm1hdHRlZERhdGUiLCJub3ciLCJmb3JtYXQiLCJmb3JtYXR0ZWRUaW1lIiwiZmlsZUluZGV4IiwiZXJyb3JGaWxlSW5kZXgiLCJ0ZXN0SW5kZXgiLCJmaXh0dXJlIiwidGVzdCIsImZvckVycm9yIiwicGFyc2VkVXNlckFnZW50IiwidG9TdHJpbmciLCJmYW1pbHkiLCJ0b1ZlcnNpb24iLCJvcyIsIl9idWlsZFBhdGgiLCJyZXN1bHRGaWxlUGF0aCIsInBsYWNlaG9sZGVyIiwiZmluZFBsYWNlaG9sZGVyUmVnRXhwIiwiUmVnRXhwIiwicmVwbGFjZSIsImdldEZpbGVJbmRleEZuIiwicmVzdWx0IiwidXNlckFnZW50IiwiZ2V0UGF0aCIsInBhdGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FB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Qkg7O0FBRUQsZUFBT0QsY0FBUDtBQUNIOztBQUVEUSxZQUFTZixRQUFULEVBQW1CO0FBQ2YsY0FBTWdCLE9BQU9uQyxZQUFZeUIsVUFBWixDQUF1QixLQUFLdkIsT0FBNUIsRUFBcUMsS0FBS0ssb0JBQTFDLEVBQWdFWSxRQUFoRSxDQUFiOztBQUVBLGVBQU8sK0JBQWdCZ0IsSUFBaEIsRUFBc0JyRCxtQkFBdEIsQ0FBUDtBQUNIOztBQUVEO0FBQ0EsZUFBV0UsWUFBWCxHQUEyQjtBQUN2QixlQUFPQSxZQUFQO0FBQ0g7QUFqRjRCO2tCQUFaZ0IsVyIsImZpbGUiOiJzY3JlZW5zaG90cy9wYXRoLXBhdHRlcm4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlc2NhcGVSZWdFeHAgYXMgZXNjYXBlUmUgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGNvcnJlY3RGaWxlUGF0aCBmcm9tICcuLi91dGlscy9jb3JyZWN0LWZpbGUtcGF0aCc7XG5pbXBvcnQgZXNjYXBlVXNlckFnZW50IGZyb20gJy4uL3V0aWxzL2VzY2FwZS11c2VyLWFnZW50JztcblxuY29uc3QgREFURV9GT1JNQVQgPSAnWVlZWS1NTS1ERCc7XG5jb25zdCBUSU1FX0ZPUk1BVCA9ICdISC1tbS1zcyc7XG5cbmNvbnN0IFNDUkVOU0hPVF9FWFRFTlRJT04gPSAncG5nJztcblxuY29uc3QgRVJST1JTX0ZPTERFUiA9ICdlcnJvcnMnO1xuXG5jb25zdCBQTEFDRUhPTERFUlMgPSB7XG4gICAgREFURTogICAgICAgICAgICAgICAnJHtEQVRFfScsXG4gICAgVElNRTogICAgICAgICAgICAgICAnJHtUSU1FfScsXG4gICAgVEVTVF9JTkRFWDogICAgICAgICAnJHtURVNUX0lOREVYfScsXG4gICAgRklMRV9JTkRFWDogICAgICAgICAnJHtGSUxFX0lOREVYfScsXG4gICAgUVVBUkFOVElORV9BVFRFTVBUOiAnJHtRVUFSQU5USU5FX0FUVEVNUFR9JyxcbiAgICBGSVhUVVJFOiAgICAgICAgICAgICcke0ZJWFRVUkV9JyxcbiAgICBURVNUOiAgICAgICAgICAgICAgICcke1RFU1R9JyxcbiAgICBVU0VSQUdFTlQ6ICAgICAgICAgICcke1VTRVJBR0VOVH0nLFxuICAgIEJST1dTRVI6ICAgICAgICAgICAgJyR7QlJPV1NFUn0nLFxuICAgIEJST1dTRVJfVkVSU0lPTjogICAgJyR7QlJPV1NFUl9WRVJTSU9OfScsXG4gICAgT1M6ICAgICAgICAgICAgICAgICAnJHtPU30nLFxuICAgIE9TX1ZFUlNJT046ICAgICAgICAgJyR7T1NfVkVSU0lPTn0nXG59O1xuXG5jb25zdCBERUZBVUxUX1BBVEhfUEFUVEVSTl9GT1JfUkVQT1JUICAgICAgPSBgJHtQTEFDRUhPTERFUlMuREFURX1fJHtQTEFDRUhPTERFUlMuVElNRX1cXFxcdGVzdC0ke1BMQUNFSE9MREVSUy5URVNUX0lOREVYfWA7XG5jb25zdCBERUZBVUxUX1BBVEhfUEFUVEVSTiAgICAgICAgICAgICAgICAgPSBgJHtERUZBVUxUX1BBVEhfUEFUVEVSTl9GT1JfUkVQT1JUfVxcXFwke1BMQUNFSE9MREVSUy5VU0VSQUdFTlR9XFxcXCR7UExBQ0VIT0xERVJTLkZJTEVfSU5ERVh9LiR7U0NSRU5TSE9UX0VYVEVOVElPTn1gO1xuY29uc3QgUVVBUkFOVElORV9NT0RFX0RFRkFVTFRfUEFUSF9QQVRURVJOID0gYCR7REVGQVVMVF9QQVRIX1BBVFRFUk5fRk9SX1JFUE9SVH1cXFxccnVuLSR7UExBQ0VIT0xERVJTLlFVQVJBTlRJTkVfQVRURU1QVH1cXFxcJHtQTEFDRUhPTERFUlMuVVNFUkFHRU5UfVxcXFwke1BMQUNFSE9MREVSUy5GSUxFX0lOREVYfS4ke1NDUkVOU0hPVF9FWFRFTlRJT059YDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF0aFBhdHRlcm4ge1xuICAgIGNvbnN0cnVjdG9yIChwYXR0ZXJuLCBkYXRhKSB7XG4gICAgICAgIHRoaXMucGF0dGVybiAgICAgICAgICAgICAgPSB0aGlzLl9lbnN1cmVQYXR0ZXJuKHBhdHRlcm4sIGRhdGEucXVhcmFudGluZUF0dGVtcHQpO1xuICAgICAgICB0aGlzLmRhdGEgICAgICAgICAgICAgICAgID0gdGhpcy5fYWRkRGVmYXVsdEZpZWxkcyhkYXRhKTtcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlclRvRGF0YU1hcCA9IHRoaXMuX2NyZWF0ZVBsYWNlaG9sZGVyVG9EYXRhTWFwKCk7XG4gICAgfVxuXG4gICAgX2Vuc3VyZVBhdHRlcm4gKHBhdHRlcm4sIHF1YXJhbnRpbmVBdHRlbXB0KSB7XG4gICAgICAgIGlmIChwYXR0ZXJuKVxuICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm47XG5cbiAgICAgICAgcmV0dXJuIHF1YXJhbnRpbmVBdHRlbXB0ID8gUVVBUkFOVElORV9NT0RFX0RFRkFVTFRfUEFUSF9QQVRURVJOIDogREVGQVVMVF9QQVRIX1BBVFRFUk47XG4gICAgfVxuXG4gICAgX2FkZERlZmF1bHRGaWVsZHMgKGRhdGEpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdEZpZWxkcyA9IHtcbiAgICAgICAgICAgIGZvcm1hdHRlZERhdGU6ICBkYXRhLm5vdy5mb3JtYXQoREFURV9GT1JNQVQpLFxuICAgICAgICAgICAgZm9ybWF0dGVkVGltZTogIGRhdGEubm93LmZvcm1hdChUSU1FX0ZPUk1BVCksXG4gICAgICAgICAgICBmaWxlSW5kZXg6ICAgICAgMSxcbiAgICAgICAgICAgIGVycm9yRmlsZUluZGV4OiAxXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRGaWVsZHMsIGRhdGEpO1xuICAgIH1cblxuICAgIF9jcmVhdGVQbGFjZWhvbGRlclRvRGF0YU1hcCAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbUExBQ0VIT0xERVJTLkRBVEVdOiAgICAgICAgICAgICAgIHRoaXMuZGF0YS5mb3JtYXR0ZWREYXRlLFxuICAgICAgICAgICAgW1BMQUNFSE9MREVSUy5USU1FXTogICAgICAgICAgICAgICB0aGlzLmRhdGEuZm9ybWF0dGVkVGltZSxcbiAgICAgICAgICAgIFtQTEFDRUhPTERFUlMuVEVTVF9JTkRFWF06ICAgICAgICAgdGhpcy5kYXRhLnRlc3RJbmRleCxcbiAgICAgICAgICAgIFtQTEFDRUhPTERFUlMuUVVBUkFOVElORV9BVFRFTVBUXTogdGhpcy5kYXRhLnF1YXJhbnRpbmVBdHRlbXB0IHx8IDEsXG4gICAgICAgICAgICBbUExBQ0VIT0xERVJTLkZJWFRVUkVdOiAgICAgICAgICAgIHRoaXMuZGF0YS5maXh0dXJlLFxuICAgICAgICAgICAgW1BMQUNFSE9MREVSUy5URVNUXTogICAgICAgICAgICAgICB0aGlzLmRhdGEudGVzdCxcbiAgICAgICAgICAgIFtQTEFDRUhPTERFUlMuRklMRV9JTkRFWF06ICAgICAgICAgZm9yRXJyb3IgPT4gZm9yRXJyb3IgPyB0aGlzLmRhdGEuZXJyb3JGaWxlSW5kZXggOiB0aGlzLmRhdGEuZmlsZUluZGV4LFxuICAgICAgICAgICAgW1BMQUNFSE9MREVSUy5VU0VSQUdFTlRdOiAgICAgICAgICB0aGlzLmRhdGEucGFyc2VkVXNlckFnZW50LnRvU3RyaW5nKCksXG4gICAgICAgICAgICBbUExBQ0VIT0xERVJTLkJST1dTRVJdOiAgICAgICAgICAgIHRoaXMuZGF0YS5wYXJzZWRVc2VyQWdlbnQuZmFtaWx5LFxuICAgICAgICAgICAgW1BMQUNFSE9MREVSUy5CUk9XU0VSX1ZFUlNJT05dOiAgICB0aGlzLmRhdGEucGFyc2VkVXNlckFnZW50LnRvVmVyc2lvbigpLFxuICAgICAgICAgICAgW1BMQUNFSE9MREVSUy5PU106ICAgICAgICAgICAgICAgICB0aGlzLmRhdGEucGFyc2VkVXNlckFnZW50Lm9zLmZhbWlseSxcbiAgICAgICAgICAgIFtQTEFDRUhPTERFUlMuT1NfVkVSU0lPTl06ICAgICAgICAgdGhpcy5kYXRhLnBhcnNlZFVzZXJBZ2VudC5vcy50b1ZlcnNpb24oKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBfYnVpbGRQYXRoIChwYXR0ZXJuLCBwbGFjZWhvbGRlclRvRGF0YU1hcCwgZm9yRXJyb3IpIHtcbiAgICAgICAgbGV0IHJlc3VsdEZpbGVQYXRoID0gcGF0dGVybjtcblxuICAgICAgICBmb3IgKGNvbnN0IHBsYWNlaG9sZGVyIGluIHBsYWNlaG9sZGVyVG9EYXRhTWFwKSB7XG4gICAgICAgICAgICBjb25zdCBmaW5kUGxhY2Vob2xkZXJSZWdFeHAgPSBuZXcgUmVnRXhwKGVzY2FwZVJlKHBsYWNlaG9sZGVyKSwgJ2cnKTtcblxuICAgICAgICAgICAgcmVzdWx0RmlsZVBhdGggPSByZXN1bHRGaWxlUGF0aC5yZXBsYWNlKGZpbmRQbGFjZWhvbGRlclJlZ0V4cCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlciA9PT0gUExBQ0VIT0xERVJTLkZJTEVfSU5ERVgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2V0RmlsZUluZGV4Rm4gPSBwbGFjZWhvbGRlclRvRGF0YU1hcFtwbGFjZWhvbGRlcl07XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgICAgICAgICAgID0gZ2V0RmlsZUluZGV4Rm4oZm9yRXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JFcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGAke0VSUk9SU19GT0xERVJ9XFxcXCR7cmVzdWx0fWA7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwbGFjZWhvbGRlciA9PT0gUExBQ0VIT0xERVJTLlVTRVJBR0VOVCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VyQWdlbnQgPSBwbGFjZWhvbGRlclRvRGF0YU1hcFtwbGFjZWhvbGRlcl07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVzY2FwZVVzZXJBZ2VudCh1c2VyQWdlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBwbGFjZWhvbGRlclRvRGF0YU1hcFtwbGFjZWhvbGRlcl07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRGaWxlUGF0aDtcbiAgICB9XG5cbiAgICBnZXRQYXRoIChmb3JFcnJvcikge1xuICAgICAgICBjb25zdCBwYXRoID0gUGF0aFBhdHRlcm4uX2J1aWxkUGF0aCh0aGlzLnBhdHRlcm4sIHRoaXMucGxhY2Vob2xkZXJUb0RhdGFNYXAsIGZvckVycm9yKTtcblxuICAgICAgICByZXR1cm4gY29ycmVjdEZpbGVQYXRoKHBhdGgsIFNDUkVOU0hPVF9FWFRFTlRJT04pO1xuICAgIH1cblxuICAgIC8vIEZvciB0ZXN0aW5nIHB1cnBvc2VzXG4gICAgc3RhdGljIGdldCBQTEFDRUhPTERFUlMgKCkge1xuICAgICAgICByZXR1cm4gUExBQ0VIT0xERVJTO1xuICAgIH1cbn1cbiJdfQ==
