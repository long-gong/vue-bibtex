'use strict';

exports.__esModule = true;
exports.default = {
    screenshotsPathNotSpecified: 'Was unable to take screenshots because the screenshot directory is not specified. To specify it, use the "-s" or "--screenshots" command line option or the "screenshots" method of the test runner in case you are using API.',
    screenshotError: 'Was unable to take a screenshot due to an error.\n\n{errMessage}',
    screenshotMarkNotFound: 'Unable to locate the page area in the browser window screenshot at {screenshotPath}, because the page area mark with ID {markId} is not found in the screenshot.',
    screenshotRewritingError: 'The file at "{screenshotPath}" already exists. It has just been rewritten with a recent screenshot. This situation can possibly cause issues. To avoid them, make sure that each screenshot has a unique path. If a test runs in multiple browsers, consider including the user agent in the screenshot path or generate a unique identifier in another way.',
    browserManipulationsOnRemoteBrowser: 'The screenshot and window resize functionalities are not supported in a remote browser. They can function only if the browser is running on the same machine and in the same environment as the TestCafe server.',
    screenshotNotSupportedByBrowserProvider: 'The screenshot functionality is not supported by the "{providerName}" browser provider.',
    resizeNotSupportedByBrowserProvider: 'The window resize functionality is not supported by the "{providerName}" browser provider.',
    maximizeNotSupportedByBrowserProvider: 'The window maximization functionality is not supported by the "{providerName}" browser provider.',
    resizeError: 'Was unable to resize the window due to an error.\n\n{errMessage}',
    maximizeError: 'Was unable to maximize the window due to an error.\n\n{errMessage}',
    requestMockCORSValidationFailed: '{RequestHook}: CORS validation failed for a request specified as {requestFilterRule}',
    debugInHeadlessError: 'You cannot debug in headless mode.'
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub3RpZmljYXRpb25zL3dhcm5pbmctbWVzc2FnZS5qcyJdLCJuYW1lcyI6WyJzY3JlZW5zaG90c1BhdGhOb3RTcGVjaWZpZWQiLCJzY3JlZW5zaG90RXJyb3IiLCJzY3JlZW5zaG90TWFya05vdEZvdW5kIiwic2NyZWVuc2hvdFJld3JpdGluZ0Vycm9yIiwiYnJvd3Nlck1hbmlwdWxhdGlvbnNPblJlbW90ZUJyb3dzZXIiLCJzY3JlZW5zaG90Tm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXIiLCJyZXNpemVOb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlciIsIm1heGltaXplTm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXIiLCJyZXNpemVFcnJvciIsIm1heGltaXplRXJyb3IiLCJyZXF1ZXN0TW9ja0NPUlNWYWxpZGF0aW9uRmFpbGVkIiwiZGVidWdJbkhlYWRsZXNzRXJyb3IiXSwibWFwcGluZ3MiOiI7OztrQkFBZTtBQUNYQSxpQ0FBeUMsZ09BRDlCO0FBRVhDLHFCQUF5QyxrRUFGOUI7QUFHWEMsNEJBQXlDLGtLQUg5QjtBQUlYQyw4QkFBeUMsOFZBSjlCO0FBS1hDLHlDQUF5QyxrTkFMOUI7QUFNWEMsNkNBQXlDLHlGQU45QjtBQU9YQyx5Q0FBeUMsNEZBUDlCO0FBUVhDLDJDQUF5QyxrR0FSOUI7QUFTWEMsaUJBQXlDLGtFQVQ5QjtBQVVYQyxtQkFBeUMsb0VBVjlCO0FBV1hDLHFDQUF5QyxzRkFYOUI7QUFZWEMsMEJBQXlDO0FBWjlCLEMiLCJmaWxlIjoibm90aWZpY2F0aW9ucy93YXJuaW5nLW1lc3NhZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgc2NyZWVuc2hvdHNQYXRoTm90U3BlY2lmaWVkOiAgICAgICAgICAgICAnV2FzIHVuYWJsZSB0byB0YWtlIHNjcmVlbnNob3RzIGJlY2F1c2UgdGhlIHNjcmVlbnNob3QgZGlyZWN0b3J5IGlzIG5vdCBzcGVjaWZpZWQuIFRvIHNwZWNpZnkgaXQsIHVzZSB0aGUgXCItc1wiIG9yIFwiLS1zY3JlZW5zaG90c1wiIGNvbW1hbmQgbGluZSBvcHRpb24gb3IgdGhlIFwic2NyZWVuc2hvdHNcIiBtZXRob2Qgb2YgdGhlIHRlc3QgcnVubmVyIGluIGNhc2UgeW91IGFyZSB1c2luZyBBUEkuJyxcbiAgICBzY3JlZW5zaG90RXJyb3I6ICAgICAgICAgICAgICAgICAgICAgICAgICdXYXMgdW5hYmxlIHRvIHRha2UgYSBzY3JlZW5zaG90IGR1ZSB0byBhbiBlcnJvci5cXG5cXG57ZXJyTWVzc2FnZX0nLFxuICAgIHNjcmVlbnNob3RNYXJrTm90Rm91bmQ6ICAgICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBsb2NhdGUgdGhlIHBhZ2UgYXJlYSBpbiB0aGUgYnJvd3NlciB3aW5kb3cgc2NyZWVuc2hvdCBhdCB7c2NyZWVuc2hvdFBhdGh9LCBiZWNhdXNlIHRoZSBwYWdlIGFyZWEgbWFyayB3aXRoIElEIHttYXJrSWR9IGlzIG5vdCBmb3VuZCBpbiB0aGUgc2NyZWVuc2hvdC4nLFxuICAgIHNjcmVlbnNob3RSZXdyaXRpbmdFcnJvcjogICAgICAgICAgICAgICAgJ1RoZSBmaWxlIGF0IFwie3NjcmVlbnNob3RQYXRofVwiIGFscmVhZHkgZXhpc3RzLiBJdCBoYXMganVzdCBiZWVuIHJld3JpdHRlbiB3aXRoIGEgcmVjZW50IHNjcmVlbnNob3QuIFRoaXMgc2l0dWF0aW9uIGNhbiBwb3NzaWJseSBjYXVzZSBpc3N1ZXMuIFRvIGF2b2lkIHRoZW0sIG1ha2Ugc3VyZSB0aGF0IGVhY2ggc2NyZWVuc2hvdCBoYXMgYSB1bmlxdWUgcGF0aC4gSWYgYSB0ZXN0IHJ1bnMgaW4gbXVsdGlwbGUgYnJvd3NlcnMsIGNvbnNpZGVyIGluY2x1ZGluZyB0aGUgdXNlciBhZ2VudCBpbiB0aGUgc2NyZWVuc2hvdCBwYXRoIG9yIGdlbmVyYXRlIGEgdW5pcXVlIGlkZW50aWZpZXIgaW4gYW5vdGhlciB3YXkuJyxcbiAgICBicm93c2VyTWFuaXB1bGF0aW9uc09uUmVtb3RlQnJvd3NlcjogICAgICdUaGUgc2NyZWVuc2hvdCBhbmQgd2luZG93IHJlc2l6ZSBmdW5jdGlvbmFsaXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gYSByZW1vdGUgYnJvd3Nlci4gVGhleSBjYW4gZnVuY3Rpb24gb25seSBpZiB0aGUgYnJvd3NlciBpcyBydW5uaW5nIG9uIHRoZSBzYW1lIG1hY2hpbmUgYW5kIGluIHRoZSBzYW1lIGVudmlyb25tZW50IGFzIHRoZSBUZXN0Q2FmZSBzZXJ2ZXIuJyxcbiAgICBzY3JlZW5zaG90Tm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXI6ICdUaGUgc2NyZWVuc2hvdCBmdW5jdGlvbmFsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie3Byb3ZpZGVyTmFtZX1cIiBicm93c2VyIHByb3ZpZGVyLicsXG4gICAgcmVzaXplTm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXI6ICAgICAnVGhlIHdpbmRvdyByZXNpemUgZnVuY3Rpb25hbGl0eSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBcIntwcm92aWRlck5hbWV9XCIgYnJvd3NlciBwcm92aWRlci4nLFxuICAgIG1heGltaXplTm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXI6ICAgJ1RoZSB3aW5kb3cgbWF4aW1pemF0aW9uIGZ1bmN0aW9uYWxpdHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgXCJ7cHJvdmlkZXJOYW1lfVwiIGJyb3dzZXIgcHJvdmlkZXIuJyxcbiAgICByZXNpemVFcnJvcjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXYXMgdW5hYmxlIHRvIHJlc2l6ZSB0aGUgd2luZG93IGR1ZSB0byBhbiBlcnJvci5cXG5cXG57ZXJyTWVzc2FnZX0nLFxuICAgIG1heGltaXplRXJyb3I6ICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dhcyB1bmFibGUgdG8gbWF4aW1pemUgdGhlIHdpbmRvdyBkdWUgdG8gYW4gZXJyb3IuXFxuXFxue2Vyck1lc3NhZ2V9JyxcbiAgICByZXF1ZXN0TW9ja0NPUlNWYWxpZGF0aW9uRmFpbGVkOiAgICAgICAgICd7UmVxdWVzdEhvb2t9OiBDT1JTIHZhbGlkYXRpb24gZmFpbGVkIGZvciBhIHJlcXVlc3Qgc3BlY2lmaWVkIGFzIHtyZXF1ZXN0RmlsdGVyUnVsZX0nLFxuICAgIGRlYnVnSW5IZWFkbGVzc0Vycm9yOiAgICAgICAgICAgICAgICAgICAgJ1lvdSBjYW5ub3QgZGVidWcgaW4gaGVhZGxlc3MgbW9kZS4nXG59O1xuIl19
