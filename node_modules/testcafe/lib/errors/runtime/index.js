'use strict';

exports.__esModule = true;
exports.ClientFunctionAPIError = exports.APIError = exports.TestCompilationError = exports.GeneralError = undefined;

var _callsiteRecord = require('callsite-record');

var _message = require('./message');

var _message2 = _interopRequireDefault(_message);

var _createStackFilter = require('../create-stack-filter');

var _createStackFilter2 = _interopRequireDefault(_createStackFilter);

var _getCallsite = require('../get-callsite');

var _renderTemplate = require('../../utils/render-template');

var _renderTemplate2 = _interopRequireDefault(_renderTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Errors
class GeneralError extends Error {
    constructor(...args) {
        super((0, _renderTemplate2.default)(...args));
        Error.captureStackTrace(this, GeneralError);

        // HACK: workaround for the `instanceof` problem
        // (see: http://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node)
        this.constructor = GeneralError;
    }
}

exports.GeneralError = GeneralError;
class TestCompilationError extends Error {
    constructor(originalError) {
        super((0, _renderTemplate2.default)(_message2.default.cannotPrepareTestsDueToError, originalError.toString()));

        // NOTE: stack includes message as well.
        this.stack = (0, _renderTemplate2.default)(_message2.default.cannotPrepareTestsDueToError, originalError.stack);
        this.constructor = TestCompilationError;
    }
}

exports.TestCompilationError = TestCompilationError;
class APIError extends Error {
    constructor(methodName, template, ...args) {
        const rawMessage = (0, _renderTemplate2.default)(template, ...args);

        super((0, _renderTemplate2.default)(_message2.default.cannotPrepareTestsDueToError, rawMessage));

        // NOTE: `rawMessage` is used in error substitution if it occurs in test run.
        this.rawMessage = rawMessage;
        this.callsite = (0, _getCallsite.getCallsiteForMethod)(methodName);
        this.constructor = APIError;

        // HACK: prototype properties don't work with built-in subclasses
        // (see: http://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node)
        Object.defineProperty(this, 'stack', {
            get: () => APIError._createStack(this.message, this.callsite, _callsiteRecord.renderers.noColor)
        });

        Object.defineProperty(this, 'coloredStack', {
            get: () => APIError._createStack(this.message, this.callsite, _callsiteRecord.renderers.default)
        });
    }

    static _createStack(message, callsiteRecord, renderer) {
        return message + '\n\n' + callsiteRecord.renderSync({
            renderer: renderer,
            stackFilter: (0, _createStackFilter2.default)(Error.stackTraceLimit)
        });
    }
}

exports.APIError = APIError;
class ClientFunctionAPIError extends APIError {
    constructor(methodName, instantiationCallsiteName, template, ...args) {
        template = template.replace(/\{#instantiationCallsiteName\}/g, instantiationCallsiteName);

        super(methodName, template, ...args);
    }
}
exports.ClientFunctionAPIError = ClientFunctionAPIError;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lcnJvcnMvcnVudGltZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJHZW5lcmFsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiYXJncyIsImNhcHR1cmVTdGFja1RyYWNlIiwiVGVzdENvbXBpbGF0aW9uRXJyb3IiLCJvcmlnaW5hbEVycm9yIiwiTUVTU0FHRSIsImNhbm5vdFByZXBhcmVUZXN0c0R1ZVRvRXJyb3IiLCJ0b1N0cmluZyIsInN0YWNrIiwiQVBJRXJyb3IiLCJtZXRob2ROYW1lIiwidGVtcGxhdGUiLCJyYXdNZXNzYWdlIiwiY2FsbHNpdGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIl9jcmVhdGVTdGFjayIsIm1lc3NhZ2UiLCJyZW5kZXJlcnMiLCJub0NvbG9yIiwiZGVmYXVsdCIsImNhbGxzaXRlUmVjb3JkIiwicmVuZGVyZXIiLCJyZW5kZXJTeW5jIiwic3RhY2tGaWx0ZXIiLCJzdGFja1RyYWNlTGltaXQiLCJDbGllbnRGdW5jdGlvbkFQSUVycm9yIiwiaW5zdGFudGlhdGlvbkNhbGxzaXRlTmFtZSIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7Ozs7QUFFQTtBQUNPLE1BQU1BLFlBQU4sU0FBMkJDLEtBQTNCLENBQWlDO0FBQ3BDQyxnQkFBYSxHQUFHQyxJQUFoQixFQUFzQjtBQUNsQixjQUFNLDhCQUFlLEdBQUdBLElBQWxCLENBQU47QUFDQUYsY0FBTUcsaUJBQU4sQ0FBd0IsSUFBeEIsRUFBOEJKLFlBQTlCOztBQUVBO0FBQ0E7QUFDQSxhQUFLRSxXQUFMLEdBQW1CRixZQUFuQjtBQUNIO0FBUm1DOztRQUEzQkEsWSxHQUFBQSxZO0FBV04sTUFBTUssb0JBQU4sU0FBbUNKLEtBQW5DLENBQXlDO0FBQzVDQyxnQkFBYUksYUFBYixFQUE0QjtBQUN4QixjQUFNLDhCQUFlQyxrQkFBUUMsNEJBQXZCLEVBQXFERixjQUFjRyxRQUFkLEVBQXJELENBQU47O0FBRUE7QUFDQSxhQUFLQyxLQUFMLEdBQW1CLDhCQUFlSCxrQkFBUUMsNEJBQXZCLEVBQXFERixjQUFjSSxLQUFuRSxDQUFuQjtBQUNBLGFBQUtSLFdBQUwsR0FBbUJHLG9CQUFuQjtBQUNIO0FBUDJDOztRQUFuQ0Esb0IsR0FBQUEsb0I7QUFVTixNQUFNTSxRQUFOLFNBQXVCVixLQUF2QixDQUE2QjtBQUNoQ0MsZ0JBQWFVLFVBQWIsRUFBeUJDLFFBQXpCLEVBQW1DLEdBQUdWLElBQXRDLEVBQTRDO0FBQ3hDLGNBQU1XLGFBQWEsOEJBQWVELFFBQWYsRUFBeUIsR0FBR1YsSUFBNUIsQ0FBbkI7O0FBRUEsY0FBTSw4QkFBZUksa0JBQVFDLDRCQUF2QixFQUFxRE0sVUFBckQsQ0FBTjs7QUFFQTtBQUNBLGFBQUtBLFVBQUwsR0FBbUJBLFVBQW5CO0FBQ0EsYUFBS0MsUUFBTCxHQUFtQix1Q0FBcUJILFVBQXJCLENBQW5CO0FBQ0EsYUFBS1YsV0FBTCxHQUFtQlMsUUFBbkI7O0FBRUE7QUFDQTtBQUNBSyxlQUFPQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLE9BQTVCLEVBQXFDO0FBQ2pDQyxpQkFBSyxNQUFNUCxTQUFTUSxZQUFULENBQXNCLEtBQUtDLE9BQTNCLEVBQW9DLEtBQUtMLFFBQXpDLEVBQW1ETSwwQkFBVUMsT0FBN0Q7QUFEc0IsU0FBckM7O0FBSUFOLGVBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsY0FBNUIsRUFBNEM7QUFDeENDLGlCQUFLLE1BQU1QLFNBQVNRLFlBQVQsQ0FBc0IsS0FBS0MsT0FBM0IsRUFBb0MsS0FBS0wsUUFBekMsRUFBbURNLDBCQUFVRSxPQUE3RDtBQUQ2QixTQUE1QztBQUdIOztBQUVELFdBQU9KLFlBQVAsQ0FBcUJDLE9BQXJCLEVBQThCSSxjQUE5QixFQUE4Q0MsUUFBOUMsRUFBd0Q7QUFDcEQsZUFBT0wsVUFDQSxNQURBLEdBRUFJLGVBQWVFLFVBQWYsQ0FBMEI7QUFDdEJELHNCQUFhQSxRQURTO0FBRXRCRSx5QkFBYSxpQ0FBa0IxQixNQUFNMkIsZUFBeEI7QUFGUyxTQUExQixDQUZQO0FBTUg7QUE3QitCOztRQUF2QmpCLFEsR0FBQUEsUTtBQWdDTixNQUFNa0Isc0JBQU4sU0FBcUNsQixRQUFyQyxDQUE4QztBQUNqRFQsZ0JBQWFVLFVBQWIsRUFBeUJrQix5QkFBekIsRUFBb0RqQixRQUFwRCxFQUE4RCxHQUFHVixJQUFqRSxFQUF1RTtBQUNuRVUsbUJBQVdBLFNBQVNrQixPQUFULENBQWlCLGlDQUFqQixFQUFvREQseUJBQXBELENBQVg7O0FBRUEsY0FBTWxCLFVBQU4sRUFBa0JDLFFBQWxCLEVBQTRCLEdBQUdWLElBQS9CO0FBQ0g7QUFMZ0Q7UUFBeEMwQixzQixHQUFBQSxzQiIsImZpbGUiOiJlcnJvcnMvcnVudGltZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlcmVycyB9IGZyb20gJ2NhbGxzaXRlLXJlY29yZCc7XG5pbXBvcnQgTUVTU0FHRSBmcm9tICcuL21lc3NhZ2UnO1xuaW1wb3J0IGNyZWF0ZVN0YWNrRmlsdGVyIGZyb20gJy4uL2NyZWF0ZS1zdGFjay1maWx0ZXInO1xuaW1wb3J0IHsgZ2V0Q2FsbHNpdGVGb3JNZXRob2QgfSBmcm9tICcuLi9nZXQtY2FsbHNpdGUnO1xuaW1wb3J0IHJlbmRlclRlbXBsYXRlIGZyb20gJy4uLy4uL3V0aWxzL3JlbmRlci10ZW1wbGF0ZSc7XG5cbi8vIEVycm9yc1xuZXhwb3J0IGNsYXNzIEdlbmVyYWxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgICAgICBzdXBlcihyZW5kZXJUZW1wbGF0ZSguLi5hcmdzKSk7XG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEdlbmVyYWxFcnJvcik7XG5cbiAgICAgICAgLy8gSEFDSzogd29ya2Fyb3VuZCBmb3IgdGhlIGBpbnN0YW5jZW9mYCBwcm9ibGVtXG4gICAgICAgIC8vIChzZWU6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzM4NzA2ODQvd2h5LWRvZXNudC1pbnN0YW5jZW9mLXdvcmstb24taW5zdGFuY2VzLW9mLWVycm9yLXN1YmNsYXNzZXMtdW5kZXItYmFiZWwtbm9kZSlcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IEdlbmVyYWxFcnJvcjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUZXN0Q29tcGlsYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAob3JpZ2luYWxFcnJvcikge1xuICAgICAgICBzdXBlcihyZW5kZXJUZW1wbGF0ZShNRVNTQUdFLmNhbm5vdFByZXBhcmVUZXN0c0R1ZVRvRXJyb3IsIG9yaWdpbmFsRXJyb3IudG9TdHJpbmcoKSkpO1xuXG4gICAgICAgIC8vIE5PVEU6IHN0YWNrIGluY2x1ZGVzIG1lc3NhZ2UgYXMgd2VsbC5cbiAgICAgICAgdGhpcy5zdGFjayAgICAgICA9IHJlbmRlclRlbXBsYXRlKE1FU1NBR0UuY2Fubm90UHJlcGFyZVRlc3RzRHVlVG9FcnJvciwgb3JpZ2luYWxFcnJvci5zdGFjayk7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBUZXN0Q29tcGlsYXRpb25FcnJvcjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBUElFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAobWV0aG9kTmFtZSwgdGVtcGxhdGUsIC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgcmF3TWVzc2FnZSA9IHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCAuLi5hcmdzKTtcblxuICAgICAgICBzdXBlcihyZW5kZXJUZW1wbGF0ZShNRVNTQUdFLmNhbm5vdFByZXBhcmVUZXN0c0R1ZVRvRXJyb3IsIHJhd01lc3NhZ2UpKTtcblxuICAgICAgICAvLyBOT1RFOiBgcmF3TWVzc2FnZWAgaXMgdXNlZCBpbiBlcnJvciBzdWJzdGl0dXRpb24gaWYgaXQgb2NjdXJzIGluIHRlc3QgcnVuLlxuICAgICAgICB0aGlzLnJhd01lc3NhZ2UgID0gcmF3TWVzc2FnZTtcbiAgICAgICAgdGhpcy5jYWxsc2l0ZSAgICA9IGdldENhbGxzaXRlRm9yTWV0aG9kKG1ldGhvZE5hbWUpO1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gQVBJRXJyb3I7XG5cbiAgICAgICAgLy8gSEFDSzogcHJvdG90eXBlIHByb3BlcnRpZXMgZG9uJ3Qgd29yayB3aXRoIGJ1aWx0LWluIHN1YmNsYXNzZXNcbiAgICAgICAgLy8gKHNlZTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMzg3MDY4NC93aHktZG9lc250LWluc3RhbmNlb2Ytd29yay1vbi1pbnN0YW5jZXMtb2YtZXJyb3Itc3ViY2xhc3Nlcy11bmRlci1iYWJlbC1ub2RlKVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0YWNrJywge1xuICAgICAgICAgICAgZ2V0OiAoKSA9PiBBUElFcnJvci5fY3JlYXRlU3RhY2sodGhpcy5tZXNzYWdlLCB0aGlzLmNhbGxzaXRlLCByZW5kZXJlcnMubm9Db2xvcilcbiAgICAgICAgfSk7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2xvcmVkU3RhY2snLCB7XG4gICAgICAgICAgICBnZXQ6ICgpID0+IEFQSUVycm9yLl9jcmVhdGVTdGFjayh0aGlzLm1lc3NhZ2UsIHRoaXMuY2FsbHNpdGUsIHJlbmRlcmVycy5kZWZhdWx0KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX2NyZWF0ZVN0YWNrIChtZXNzYWdlLCBjYWxsc2l0ZVJlY29yZCwgcmVuZGVyZXIpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UgK1xuICAgICAgICAgICAgICAgJ1xcblxcbicgK1xuICAgICAgICAgICAgICAgY2FsbHNpdGVSZWNvcmQucmVuZGVyU3luYyh7XG4gICAgICAgICAgICAgICAgICAgcmVuZGVyZXI6ICAgIHJlbmRlcmVyLFxuICAgICAgICAgICAgICAgICAgIHN0YWNrRmlsdGVyOiBjcmVhdGVTdGFja0ZpbHRlcihFcnJvci5zdGFja1RyYWNlTGltaXQpXG4gICAgICAgICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbGllbnRGdW5jdGlvbkFQSUVycm9yIGV4dGVuZHMgQVBJRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yIChtZXRob2ROYW1lLCBpbnN0YW50aWF0aW9uQ2FsbHNpdGVOYW1lLCB0ZW1wbGF0ZSwgLi4uYXJncykge1xuICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoL1xceyNpbnN0YW50aWF0aW9uQ2FsbHNpdGVOYW1lXFx9L2csIGluc3RhbnRpYXRpb25DYWxsc2l0ZU5hbWUpO1xuXG4gICAgICAgIHN1cGVyKG1ldGhvZE5hbWUsIHRlbXBsYXRlLCAuLi5hcmdzKTtcbiAgICB9XG59XG4iXX0=
