'use strict';

exports.__esModule = true;
exports.DebugCommand = exports.ExecuteSelectorCommand = exports.ExecuteClientFunctionCommand = exports.WaitCommand = undefined;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _argument = require('./validations/argument');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Commands
class WaitCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.wait);
    }

    _getAssignableProperties() {
        return [{ name: 'timeout', type: _argument.positiveIntegerArgument, required: true }];
    }
}

exports.WaitCommand = WaitCommand;
class ExecuteClientFunctionCommandBase extends _base2.default {
    constructor(obj, testRun, type) {
        super(obj, testRun, type, false);
    }

    _getAssignableProperties() {
        return [{ name: 'instantiationCallsiteName', defaultValue: '' }, { name: 'fnCode', defaultValue: '' }, { name: 'args', defaultValue: [] }, { name: 'dependencies', defaultValue: [] }];
    }
}

class ExecuteClientFunctionCommand extends ExecuteClientFunctionCommandBase {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.executeClientFunction);
    }
}

exports.ExecuteClientFunctionCommand = ExecuteClientFunctionCommand;
class ExecuteSelectorCommand extends ExecuteClientFunctionCommandBase {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.executeSelector);
    }

    _getAssignableProperties() {
        return super._getAssignableProperties().concat([{ name: 'visibilityCheck', defaultValue: false }, { name: 'timeout', defaultValue: null }, { name: 'apiFnChain' }, { name: 'needError' }, { name: 'index', defaultValue: 0 }]);
    }
}

exports.ExecuteSelectorCommand = ExecuteSelectorCommand;
class DebugCommand {
    constructor() {
        this.type = _type2.default.debug;
    }
}
exports.DebugCommand = DebugCommand;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy9vYnNlcnZhdGlvbi5qcyJdLCJuYW1lcyI6WyJXYWl0Q29tbWFuZCIsIkNvbW1hbmRCYXNlIiwiY29uc3RydWN0b3IiLCJvYmoiLCJ0ZXN0UnVuIiwiVFlQRSIsIndhaXQiLCJfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMiLCJuYW1lIiwidHlwZSIsInBvc2l0aXZlSW50ZWdlckFyZ3VtZW50IiwicmVxdWlyZWQiLCJFeGVjdXRlQ2xpZW50RnVuY3Rpb25Db21tYW5kQmFzZSIsImRlZmF1bHRWYWx1ZSIsIkV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmQiLCJleGVjdXRlQ2xpZW50RnVuY3Rpb24iLCJFeGVjdXRlU2VsZWN0b3JDb21tYW5kIiwiZXhlY3V0ZVNlbGVjdG9yIiwiY29uY2F0IiwiRGVidWdDb21tYW5kIiwiZGVidWciXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7QUFDTyxNQUFNQSxXQUFOLFNBQTBCQyxjQUExQixDQUFzQztBQUN6Q0MsZ0JBQWFDLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQ3ZCLGNBQU1ELEdBQU4sRUFBV0MsT0FBWCxFQUFvQkMsZUFBS0MsSUFBekI7QUFDSDs7QUFFREMsK0JBQTRCO0FBQ3hCLGVBQU8sQ0FDSCxFQUFFQyxNQUFNLFNBQVIsRUFBbUJDLE1BQU1DLGlDQUF6QixFQUFrREMsVUFBVSxJQUE1RCxFQURHLENBQVA7QUFHSDtBQVR3Qzs7UUFBaENYLFcsR0FBQUEsVztBQVliLE1BQU1ZLGdDQUFOLFNBQStDWCxjQUEvQyxDQUEyRDtBQUN2REMsZ0JBQWFDLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCSyxJQUEzQixFQUFpQztBQUM3QixjQUFNTixHQUFOLEVBQVdDLE9BQVgsRUFBb0JLLElBQXBCLEVBQTBCLEtBQTFCO0FBQ0g7O0FBRURGLCtCQUE0QjtBQUN4QixlQUFPLENBQ0gsRUFBRUMsTUFBTSwyQkFBUixFQUFxQ0ssY0FBYyxFQUFuRCxFQURHLEVBRUgsRUFBRUwsTUFBTSxRQUFSLEVBQWtCSyxjQUFjLEVBQWhDLEVBRkcsRUFHSCxFQUFFTCxNQUFNLE1BQVIsRUFBZ0JLLGNBQWMsRUFBOUIsRUFIRyxFQUlILEVBQUVMLE1BQU0sY0FBUixFQUF3QkssY0FBYyxFQUF0QyxFQUpHLENBQVA7QUFNSDtBQVpzRDs7QUFlcEQsTUFBTUMsNEJBQU4sU0FBMkNGLGdDQUEzQyxDQUE0RTtBQUMvRVYsZ0JBQWFDLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQ3ZCLGNBQU1ELEdBQU4sRUFBV0MsT0FBWCxFQUFvQkMsZUFBS1UscUJBQXpCO0FBQ0g7QUFIOEU7O1FBQXRFRCw0QixHQUFBQSw0QjtBQU1OLE1BQU1FLHNCQUFOLFNBQXFDSixnQ0FBckMsQ0FBc0U7QUFDekVWLGdCQUFhQyxHQUFiLEVBQWtCQyxPQUFsQixFQUEyQjtBQUN2QixjQUFNRCxHQUFOLEVBQVdDLE9BQVgsRUFBb0JDLGVBQUtZLGVBQXpCO0FBQ0g7O0FBRURWLCtCQUE0QjtBQUN4QixlQUFPLE1BQU1BLHdCQUFOLEdBQWlDVyxNQUFqQyxDQUF3QyxDQUMzQyxFQUFFVixNQUFNLGlCQUFSLEVBQTJCSyxjQUFjLEtBQXpDLEVBRDJDLEVBRTNDLEVBQUVMLE1BQU0sU0FBUixFQUFtQkssY0FBYyxJQUFqQyxFQUYyQyxFQUczQyxFQUFFTCxNQUFNLFlBQVIsRUFIMkMsRUFJM0MsRUFBRUEsTUFBTSxXQUFSLEVBSjJDLEVBSzNDLEVBQUVBLE1BQU0sT0FBUixFQUFpQkssY0FBYyxDQUEvQixFQUwyQyxDQUF4QyxDQUFQO0FBT0g7QUFid0U7O1FBQWhFRyxzQixHQUFBQSxzQjtBQWdCTixNQUFNRyxZQUFOLENBQW1CO0FBQ3RCakIsa0JBQWU7QUFDWCxhQUFLTyxJQUFMLEdBQVlKLGVBQUtlLEtBQWpCO0FBQ0g7QUFIcUI7UUFBYkQsWSxHQUFBQSxZIiwiZmlsZSI6InRlc3QtcnVuL2NvbW1hbmRzL29ic2VydmF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRZUEUgZnJvbSAnLi90eXBlJztcbmltcG9ydCBDb21tYW5kQmFzZSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgcG9zaXRpdmVJbnRlZ2VyQXJndW1lbnQgfSBmcm9tICcuL3ZhbGlkYXRpb25zL2FyZ3VtZW50JztcblxuLy8gQ29tbWFuZHNcbmV4cG9ydCBjbGFzcyBXYWl0Q29tbWFuZCBleHRlbmRzIENvbW1hbmRCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgVFlQRS53YWl0KTtcbiAgICB9XG5cbiAgICBfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMgKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyBuYW1lOiAndGltZW91dCcsIHR5cGU6IHBvc2l0aXZlSW50ZWdlckFyZ3VtZW50LCByZXF1aXJlZDogdHJ1ZSB9XG4gICAgICAgIF07XG4gICAgfVxufVxuXG5jbGFzcyBFeGVjdXRlQ2xpZW50RnVuY3Rpb25Db21tYW5kQmFzZSBleHRlbmRzIENvbW1hbmRCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuLCB0eXBlKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgdHlwZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIF9nZXRBc3NpZ25hYmxlUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IG5hbWU6ICdpbnN0YW50aWF0aW9uQ2FsbHNpdGVOYW1lJywgZGVmYXVsdFZhbHVlOiAnJyB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnZm5Db2RlJywgZGVmYXVsdFZhbHVlOiAnJyB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnYXJncycsIGRlZmF1bHRWYWx1ZTogW10gfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2RlcGVuZGVuY2llcycsIGRlZmF1bHRWYWx1ZTogW10gfVxuICAgICAgICBdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmQgZXh0ZW5kcyBFeGVjdXRlQ2xpZW50RnVuY3Rpb25Db21tYW5kQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKG9iaiwgdGVzdFJ1bikge1xuICAgICAgICBzdXBlcihvYmosIHRlc3RSdW4sIFRZUEUuZXhlY3V0ZUNsaWVudEZ1bmN0aW9uKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFeGVjdXRlU2VsZWN0b3JDb21tYW5kIGV4dGVuZHMgRXhlY3V0ZUNsaWVudEZ1bmN0aW9uQ29tbWFuZEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChvYmosIHRlc3RSdW4pIHtcbiAgICAgICAgc3VwZXIob2JqLCB0ZXN0UnVuLCBUWVBFLmV4ZWN1dGVTZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRBc3NpZ25hYmxlUHJvcGVydGllcygpLmNvbmNhdChbXG4gICAgICAgICAgICB7IG5hbWU6ICd2aXNpYmlsaXR5Q2hlY2snLCBkZWZhdWx0VmFsdWU6IGZhbHNlIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICd0aW1lb3V0JywgZGVmYXVsdFZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdhcGlGbkNoYWluJyB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnbmVlZEVycm9yJyB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnaW5kZXgnLCBkZWZhdWx0VmFsdWU6IDAgfVxuICAgICAgICBdKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZWJ1Z0NvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy50eXBlID0gVFlQRS5kZWJ1ZztcbiAgICB9XG59XG5cbiJdfQ==
