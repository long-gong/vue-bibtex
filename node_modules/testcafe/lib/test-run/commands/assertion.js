'use strict';

exports.__esModule = true;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _options = require('./options');

var _runtime = require('../../errors/runtime');

var _testRun = require('../../errors/test-run');

var _executeJsExpression = require('../execute-js-expression');

var _executeJsExpression2 = _interopRequireDefault(_executeJsExpression);

var _utils = require('./utils');

var _argument = require('./validations/argument');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Initializers
function initAssertionOptions(name, val) {
    return new _options.AssertionOptions(val, true);
}

//Initializers
function initAssertionParameter(name, val, { skipVisibilityCheck, testRun }) {
    try {
        if ((0, _utils.isJSExpression)(val)) val = (0, _executeJsExpression2.default)(val.value, testRun, { skipVisibilityCheck });

        return val;
    } catch (err) {
        const msg = err.constructor === _runtime.APIError ? err.rawMessage : err.message;

        throw new _testRun.AssertionExecutableArgumentError(name, val.value, msg);
    }
}

// Commands
class AssertionCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.assertion);
    }

    _getAssignableProperties() {
        return [{ name: 'assertionType', type: _argument.nonEmptyStringArgument, required: true }, { name: 'actual', init: initAssertionParameter, defaultValue: void 0 }, { name: 'expected', init: initAssertionParameter, defaultValue: void 0 }, { name: 'expected2', init: initAssertionParameter, defaultValue: void 0 }, { name: 'message', type: _argument.stringArgument, defaultValue: null }, { name: 'options', type: _argument.actionOptions, init: initAssertionOptions, required: true }];
    }
}
exports.default = AssertionCommand;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy9hc3NlcnRpb24uanMiXSwibmFtZXMiOlsiaW5pdEFzc2VydGlvbk9wdGlvbnMiLCJuYW1lIiwidmFsIiwiQXNzZXJ0aW9uT3B0aW9ucyIsImluaXRBc3NlcnRpb25QYXJhbWV0ZXIiLCJza2lwVmlzaWJpbGl0eUNoZWNrIiwidGVzdFJ1biIsInZhbHVlIiwiZXJyIiwibXNnIiwiY29uc3RydWN0b3IiLCJBUElFcnJvciIsInJhd01lc3NhZ2UiLCJtZXNzYWdlIiwiQXNzZXJ0aW9uRXhlY3V0YWJsZUFyZ3VtZW50RXJyb3IiLCJBc3NlcnRpb25Db21tYW5kIiwiQ29tbWFuZEJhc2UiLCJvYmoiLCJUWVBFIiwiYXNzZXJ0aW9uIiwiX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzIiwidHlwZSIsIm5vbkVtcHR5U3RyaW5nQXJndW1lbnQiLCJyZXF1aXJlZCIsImluaXQiLCJkZWZhdWx0VmFsdWUiLCJzdHJpbmdBcmd1bWVudCIsImFjdGlvbk9wdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7QUFFQTs7OztBQUVBO0FBQ0EsU0FBU0Esb0JBQVQsQ0FBK0JDLElBQS9CLEVBQXFDQyxHQUFyQyxFQUEwQztBQUN0QyxXQUFPLElBQUlDLHlCQUFKLENBQXFCRCxHQUFyQixFQUEwQixJQUExQixDQUFQO0FBQ0g7O0FBRUQ7QUFDQSxTQUFTRSxzQkFBVCxDQUFpQ0gsSUFBakMsRUFBdUNDLEdBQXZDLEVBQTRDLEVBQUVHLG1CQUFGLEVBQXVCQyxPQUF2QixFQUE1QyxFQUE4RTtBQUMxRSxRQUFJO0FBQ0EsWUFBSSwyQkFBZUosR0FBZixDQUFKLEVBQ0lBLE1BQU0sbUNBQW9CQSxJQUFJSyxLQUF4QixFQUErQkQsT0FBL0IsRUFBd0MsRUFBRUQsbUJBQUYsRUFBeEMsQ0FBTjs7QUFFSixlQUFPSCxHQUFQO0FBQ0gsS0FMRCxDQU1BLE9BQU9NLEdBQVAsRUFBWTtBQUNSLGNBQU1DLE1BQU1ELElBQUlFLFdBQUosS0FBb0JDLGlCQUFwQixHQUErQkgsSUFBSUksVUFBbkMsR0FBZ0RKLElBQUlLLE9BQWhFOztBQUVBLGNBQU0sSUFBSUMseUNBQUosQ0FBcUNiLElBQXJDLEVBQTJDQyxJQUFJSyxLQUEvQyxFQUFzREUsR0FBdEQsQ0FBTjtBQUNIO0FBQ0o7O0FBRUQ7QUFDZSxNQUFNTSxnQkFBTixTQUErQkMsY0FBL0IsQ0FBMkM7QUFDdEROLGdCQUFhTyxHQUFiLEVBQWtCWCxPQUFsQixFQUEyQjtBQUN2QixjQUFNVyxHQUFOLEVBQVdYLE9BQVgsRUFBb0JZLGVBQUtDLFNBQXpCO0FBQ0g7O0FBRURDLCtCQUE0QjtBQUN4QixlQUFPLENBQ0gsRUFBRW5CLE1BQU0sZUFBUixFQUF5Qm9CLE1BQU1DLGdDQUEvQixFQUF1REMsVUFBVSxJQUFqRSxFQURHLEVBRUgsRUFBRXRCLE1BQU0sUUFBUixFQUFrQnVCLE1BQU1wQixzQkFBeEIsRUFBZ0RxQixjQUFjLEtBQUssQ0FBbkUsRUFGRyxFQUdILEVBQUV4QixNQUFNLFVBQVIsRUFBb0J1QixNQUFNcEIsc0JBQTFCLEVBQWtEcUIsY0FBYyxLQUFLLENBQXJFLEVBSEcsRUFJSCxFQUFFeEIsTUFBTSxXQUFSLEVBQXFCdUIsTUFBTXBCLHNCQUEzQixFQUFtRHFCLGNBQWMsS0FBSyxDQUF0RSxFQUpHLEVBS0gsRUFBRXhCLE1BQU0sU0FBUixFQUFtQm9CLE1BQU1LLHdCQUF6QixFQUF5Q0QsY0FBYyxJQUF2RCxFQUxHLEVBTUgsRUFBRXhCLE1BQU0sU0FBUixFQUFtQm9CLE1BQU1NLHVCQUF6QixFQUF3Q0gsTUFBTXhCLG9CQUE5QyxFQUFvRXVCLFVBQVUsSUFBOUUsRUFORyxDQUFQO0FBUUg7QUFkcUQ7a0JBQXJDUixnQiIsImZpbGUiOiJ0ZXN0LXJ1bi9jb21tYW5kcy9hc3NlcnRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVFlQRSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IENvbW1hbmRCYXNlIGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBBc3NlcnRpb25PcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzL3J1bnRpbWUnO1xuaW1wb3J0IHsgQXNzZXJ0aW9uRXhlY3V0YWJsZUFyZ3VtZW50RXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvcnMvdGVzdC1ydW4nO1xuaW1wb3J0IGV4ZWN1dGVKc0V4cHJlc3Npb24gZnJvbSAnLi4vZXhlY3V0ZS1qcy1leHByZXNzaW9uJztcbmltcG9ydCB7IGlzSlNFeHByZXNzaW9uIH0gZnJvbSAnLi91dGlscyc7XG5cbmltcG9ydCB7IHN0cmluZ0FyZ3VtZW50LCBhY3Rpb25PcHRpb25zLCBub25FbXB0eVN0cmluZ0FyZ3VtZW50IH0gZnJvbSAnLi92YWxpZGF0aW9ucy9hcmd1bWVudCc7XG5cbi8vIEluaXRpYWxpemVyc1xuZnVuY3Rpb24gaW5pdEFzc2VydGlvbk9wdGlvbnMgKG5hbWUsIHZhbCkge1xuICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uT3B0aW9ucyh2YWwsIHRydWUpO1xufVxuXG4vL0luaXRpYWxpemVyc1xuZnVuY3Rpb24gaW5pdEFzc2VydGlvblBhcmFtZXRlciAobmFtZSwgdmFsLCB7IHNraXBWaXNpYmlsaXR5Q2hlY2ssIHRlc3RSdW4gfSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0pTRXhwcmVzc2lvbih2YWwpKVxuICAgICAgICAgICAgdmFsID0gZXhlY3V0ZUpzRXhwcmVzc2lvbih2YWwudmFsdWUsIHRlc3RSdW4sIHsgc2tpcFZpc2liaWxpdHlDaGVjayB9KTtcblxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGVyci5jb25zdHJ1Y3RvciA9PT0gQVBJRXJyb3IgPyBlcnIucmF3TWVzc2FnZSA6IGVyci5tZXNzYWdlO1xuXG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FeGVjdXRhYmxlQXJndW1lbnRFcnJvcihuYW1lLCB2YWwudmFsdWUsIG1zZyk7XG4gICAgfVxufVxuXG4vLyBDb21tYW5kc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXNzZXJ0aW9uQ29tbWFuZCBleHRlbmRzIENvbW1hbmRCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgVFlQRS5hc3NlcnRpb24pO1xuICAgIH1cblxuICAgIF9nZXRBc3NpZ25hYmxlUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IG5hbWU6ICdhc3NlcnRpb25UeXBlJywgdHlwZTogbm9uRW1wdHlTdHJpbmdBcmd1bWVudCwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2FjdHVhbCcsIGluaXQ6IGluaXRBc3NlcnRpb25QYXJhbWV0ZXIsIGRlZmF1bHRWYWx1ZTogdm9pZCAwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdleHBlY3RlZCcsIGluaXQ6IGluaXRBc3NlcnRpb25QYXJhbWV0ZXIsIGRlZmF1bHRWYWx1ZTogdm9pZCAwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdleHBlY3RlZDInLCBpbml0OiBpbml0QXNzZXJ0aW9uUGFyYW1ldGVyLCBkZWZhdWx0VmFsdWU6IHZvaWQgMCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnbWVzc2FnZScsIHR5cGU6IHN0cmluZ0FyZ3VtZW50LCBkZWZhdWx0VmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ29wdGlvbnMnLCB0eXBlOiBhY3Rpb25PcHRpb25zLCBpbml0OiBpbml0QXNzZXJ0aW9uT3B0aW9ucywgcmVxdWlyZWQ6IHRydWUgfVxuICAgICAgICBdO1xuICAgIH1cbn1cbiJdfQ==
