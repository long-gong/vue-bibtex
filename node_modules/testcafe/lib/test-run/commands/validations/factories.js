'use strict';

exports.__esModule = true;
exports.createIntegerValidator = createIntegerValidator;
exports.createPositiveIntegerValidator = createPositiveIntegerValidator;
exports.createBooleanValidator = createBooleanValidator;
exports.createSpeedValidator = createSpeedValidator;
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

function createIntegerValidator(ErrorCtor) {
    return (name, val) => {
        const valType = typeof val;

        if (valType !== 'number') throw new ErrorCtor(name, valType);

        const isInteger = !isNaN(val) && isFinite(val) && val === Math.floor(val);

        if (!isInteger) throw new ErrorCtor(name, val);
    };
}

function createPositiveIntegerValidator(ErrorCtor) {
    const integerValidator = createIntegerValidator(ErrorCtor);

    return (name, val) => {
        integerValidator(name, val);

        if (val < 0) throw new ErrorCtor(name, val);
    };
}

function createBooleanValidator(ErrorCtor) {
    return (name, val) => {
        const valType = typeof val;

        if (valType !== 'boolean') throw new ErrorCtor(name, valType);
    };
}

function createSpeedValidator(ErrorCtor) {
    return (name, val) => {
        const valType = typeof val;

        if (valType !== 'number') throw new ErrorCtor(name, valType);

        if (isNaN(val) || val < 0.01 || val > 1) throw new ErrorCtor(name, val);
    };
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy92YWxpZGF0aW9ucy9mYWN0b3JpZXMuanMiXSwibmFtZXMiOlsiY3JlYXRlSW50ZWdlclZhbGlkYXRvciIsImNyZWF0ZVBvc2l0aXZlSW50ZWdlclZhbGlkYXRvciIsImNyZWF0ZUJvb2xlYW5WYWxpZGF0b3IiLCJjcmVhdGVTcGVlZFZhbGlkYXRvciIsIkVycm9yQ3RvciIsIm5hbWUiLCJ2YWwiLCJ2YWxUeXBlIiwiaXNJbnRlZ2VyIiwiaXNOYU4iLCJpc0Zpbml0ZSIsIk1hdGgiLCJmbG9vciIsImludGVnZXJWYWxpZGF0b3IiXSwibWFwcGluZ3MiOiI7OztRQUtnQkEsc0IsR0FBQUEsc0I7UUFnQkFDLDhCLEdBQUFBLDhCO1FBV0FDLHNCLEdBQUFBLHNCO1FBU0FDLG9CLEdBQUFBLG9CO0FBekNoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFTyxTQUFTSCxzQkFBVCxDQUFpQ0ksU0FBakMsRUFBNEM7QUFDL0MsV0FBTyxDQUFDQyxJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNsQixjQUFNQyxVQUFVLE9BQU9ELEdBQXZCOztBQUVBLFlBQUlDLFlBQVksUUFBaEIsRUFDSSxNQUFNLElBQUlILFNBQUosQ0FBY0MsSUFBZCxFQUFvQkUsT0FBcEIsQ0FBTjs7QUFFSixjQUFNQyxZQUFZLENBQUNDLE1BQU1ILEdBQU4sQ0FBRCxJQUNGSSxTQUFTSixHQUFULENBREUsSUFFRkEsUUFBUUssS0FBS0MsS0FBTCxDQUFXTixHQUFYLENBRnhCOztBQUlBLFlBQUksQ0FBQ0UsU0FBTCxFQUNJLE1BQU0sSUFBSUosU0FBSixDQUFjQyxJQUFkLEVBQW9CQyxHQUFwQixDQUFOO0FBQ1AsS0FaRDtBQWFIOztBQUVNLFNBQVNMLDhCQUFULENBQXlDRyxTQUF6QyxFQUFvRDtBQUN2RCxVQUFNUyxtQkFBbUJiLHVCQUF1QkksU0FBdkIsQ0FBekI7O0FBRUEsV0FBTyxDQUFDQyxJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNsQk8seUJBQWlCUixJQUFqQixFQUF1QkMsR0FBdkI7O0FBRUEsWUFBSUEsTUFBTSxDQUFWLEVBQ0ksTUFBTSxJQUFJRixTQUFKLENBQWNDLElBQWQsRUFBb0JDLEdBQXBCLENBQU47QUFDUCxLQUxEO0FBTUg7O0FBRU0sU0FBU0osc0JBQVQsQ0FBaUNFLFNBQWpDLEVBQTRDO0FBQy9DLFdBQU8sQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDbEIsY0FBTUMsVUFBVSxPQUFPRCxHQUF2Qjs7QUFFQSxZQUFJQyxZQUFZLFNBQWhCLEVBQ0ksTUFBTSxJQUFJSCxTQUFKLENBQWNDLElBQWQsRUFBb0JFLE9BQXBCLENBQU47QUFDUCxLQUxEO0FBTUg7O0FBRU0sU0FBU0osb0JBQVQsQ0FBK0JDLFNBQS9CLEVBQTBDO0FBQzdDLFdBQU8sQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDbEIsY0FBTUMsVUFBVSxPQUFPRCxHQUF2Qjs7QUFFQSxZQUFJQyxZQUFZLFFBQWhCLEVBQ0ksTUFBTSxJQUFJSCxTQUFKLENBQWNDLElBQWQsRUFBb0JFLE9BQXBCLENBQU47O0FBRUosWUFBSUUsTUFBTUgsR0FBTixLQUFjQSxNQUFNLElBQXBCLElBQTRCQSxNQUFNLENBQXRDLEVBQ0ksTUFBTSxJQUFJRixTQUFKLENBQWNDLElBQWQsRUFBb0JDLEdBQXBCLENBQU47QUFDUCxLQVJEO0FBU0giLCJmaWxlIjoidGVzdC1ydW4vY29tbWFuZHMvdmFsaWRhdGlvbnMvZmFjdG9yaWVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gV0FSTklORzogdGhpcyBmaWxlIGlzIHVzZWQgYnkgYm90aCB0aGUgY2xpZW50IGFuZCB0aGUgc2VydmVyLlxuLy8gRG8gbm90IHVzZSBhbnkgYnJvd3NlciBvciBub2RlLXNwZWNpZmljIEFQSSFcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludGVnZXJWYWxpZGF0b3IgKEVycm9yQ3Rvcikge1xuICAgIHJldHVybiAobmFtZSwgdmFsKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbFR5cGUgPSB0eXBlb2YgdmFsO1xuXG4gICAgICAgIGlmICh2YWxUeXBlICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvckN0b3IobmFtZSwgdmFsVHlwZSk7XG5cbiAgICAgICAgY29uc3QgaXNJbnRlZ2VyID0gIWlzTmFOKHZhbCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRmluaXRlKHZhbCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9PT0gTWF0aC5mbG9vcih2YWwpO1xuXG4gICAgICAgIGlmICghaXNJbnRlZ2VyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yQ3RvcihuYW1lLCB2YWwpO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb3NpdGl2ZUludGVnZXJWYWxpZGF0b3IgKEVycm9yQ3Rvcikge1xuICAgIGNvbnN0IGludGVnZXJWYWxpZGF0b3IgPSBjcmVhdGVJbnRlZ2VyVmFsaWRhdG9yKEVycm9yQ3Rvcik7XG5cbiAgICByZXR1cm4gKG5hbWUsIHZhbCkgPT4ge1xuICAgICAgICBpbnRlZ2VyVmFsaWRhdG9yKG5hbWUsIHZhbCk7XG5cbiAgICAgICAgaWYgKHZhbCA8IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JDdG9yKG5hbWUsIHZhbCk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJvb2xlYW5WYWxpZGF0b3IgKEVycm9yQ3Rvcikge1xuICAgIHJldHVybiAobmFtZSwgdmFsKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbFR5cGUgPSB0eXBlb2YgdmFsO1xuXG4gICAgICAgIGlmICh2YWxUeXBlICE9PSAnYm9vbGVhbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JDdG9yKG5hbWUsIHZhbFR5cGUpO1xuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTcGVlZFZhbGlkYXRvciAoRXJyb3JDdG9yKSB7XG4gICAgcmV0dXJuIChuYW1lLCB2YWwpID0+IHtcbiAgICAgICAgY29uc3QgdmFsVHlwZSA9IHR5cGVvZiB2YWw7XG5cbiAgICAgICAgaWYgKHZhbFR5cGUgIT09ICdudW1iZXInKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yQ3RvcihuYW1lLCB2YWxUeXBlKTtcblxuICAgICAgICBpZiAoaXNOYU4odmFsKSB8fCB2YWwgPCAwLjAxIHx8IHZhbCA+IDEpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JDdG9yKG5hbWUsIHZhbCk7XG4gICAgfTtcbn1cbiJdfQ==
