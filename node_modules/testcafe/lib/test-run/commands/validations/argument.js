'use strict';

exports.__esModule = true;
exports.setSpeedArgument = exports.booleanArgument = exports.positiveIntegerArgument = exports.integerArgument = undefined;
exports.actionRoleArgument = actionRoleArgument;
exports.actionOptions = actionOptions;
exports.nonEmptyStringArgument = nonEmptyStringArgument;
exports.nullableStringArgument = nullableStringArgument;
exports.urlArgument = urlArgument;
exports.stringOrStringArrayArgument = stringOrStringArrayArgument;
exports.resizeWindowDeviceArgument = resizeWindowDeviceArgument;
exports.screenshotPathArgument = screenshotPathArgument;

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _markerSymbol = require('../../../role/marker-symbol');

var _markerSymbol2 = _interopRequireDefault(_markerSymbol);

var _factories = require('./factories');

var _testRun = require('../../../errors/test-run');

var _testPageUrl = require('../../../api/test-page-url');

var _checkFilePath = require('../../../utils/check-file-path');

var _checkFilePath2 = _interopRequireDefault(_checkFilePath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Validators
const integerArgument = exports.integerArgument = (0, _factories.createIntegerValidator)(_testRun.ActionIntegerArgumentError);
const positiveIntegerArgument = exports.positiveIntegerArgument = (0, _factories.createPositiveIntegerValidator)(_testRun.ActionPositiveIntegerArgumentError);
const booleanArgument = exports.booleanArgument = (0, _factories.createBooleanValidator)(_testRun.ActionBooleanArgumentError);
const setSpeedArgument = exports.setSpeedArgument = (0, _factories.createSpeedValidator)(_testRun.SetTestSpeedArgumentError);

function actionRoleArgument(name, val) {
    if (!val || !val[_markerSymbol2.default]) throw new _testRun.ActionRoleArgumentError(name, typeof val);
}

function actionOptions(name, val) {
    const type = typeof val;

    if (type !== 'object' && val !== null && val !== void 0) throw new _testRun.ActionOptionsTypeError(type);
}

function nonEmptyStringArgument(argument, val, createError) {
    if (!createError) createError = actualValue => new _testRun.ActionStringArgumentError(argument, actualValue);

    const type = typeof val;

    if (type !== 'string') throw createError(type);

    if (!val.length) throw createError('""');
}

function nullableStringArgument(argument, val) {
    const type = typeof val;

    if (type !== 'string' && val !== null) throw new _testRun.ActionNullableStringArgumentError(argument, type);
}

function urlArgument(name, val) {
    nonEmptyStringArgument(name, val);

    (0, _testPageUrl.assertUrl)(val.trim(), 'navigateTo');
}

function stringOrStringArrayArgument(argument, val) {
    const type = typeof val;

    if (type === 'string') {
        if (!val.length) throw new _testRun.ActionStringOrStringArrayArgumentError(argument, '""');
    } else if (Array.isArray(val)) {
        if (!val.length) throw new _testRun.ActionStringOrStringArrayArgumentError(argument, '[]');

        const validateElement = elementIndex => nonEmptyStringArgument(argument, val[elementIndex], actualValue => new _testRun.ActionStringArrayElementError(argument, actualValue, elementIndex));

        for (let i = 0; i < val.length; i++) validateElement(i);
    } else throw new _testRun.ActionStringOrStringArrayArgumentError(argument, type);
}

function resizeWindowDeviceArgument(name, val) {
    nonEmptyStringArgument(name, val);

    if (!(0, _testcafeBrowserTools.isValidDeviceName)(val)) throw new _testRun.ActionUnsupportedDeviceTypeError(name, val);
}

function screenshotPathArgument(name, val) {
    nonEmptyStringArgument(name, val);

    const forbiddenCharsList = (0, _checkFilePath2.default)(val);

    if (forbiddenCharsList.length) throw new _testRun.ForbiddenCharactersInScreenshotPathError(val, forbiddenCharsList);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
