'use strict';

exports.__esModule = true;
exports.default = createCommandFromObject;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _actions = require('./actions');

var _assertion = require('./assertion');

var _assertion2 = _interopRequireDefault(_assertion);

var _browserManipulation = require('./browser-manipulation');

var _observation = require('./observation');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getCmdCtor(type) {
    switch (type) {
        case _type2.default.click:
            return _actions.ClickCommand;

        case _type2.default.rightClick:
            return _actions.RightClickCommand;

        case _type2.default.doubleClick:
            return _actions.DoubleClickCommand;

        case _type2.default.hover:
            return _actions.HoverCommand;

        case _type2.default.drag:
            return _actions.DragCommand;

        case _type2.default.dragToElement:
            return _actions.DragToElementCommand;

        case _type2.default.typeText:
            return _actions.TypeTextCommand;

        case _type2.default.selectText:
            return _actions.SelectTextCommand;

        case _type2.default.selectTextAreaContent:
            return _actions.SelectTextAreaContentCommand;

        case _type2.default.selectEditableContent:
            return _actions.SelectEditableContentCommand;

        case _type2.default.pressKey:
            return _actions.PressKeyCommand;

        case _type2.default.wait:
            return _observation.WaitCommand;

        case _type2.default.navigateTo:
            return _actions.NavigateToCommand;

        case _type2.default.setFilesToUpload:
            return _actions.SetFilesToUploadCommand;

        case _type2.default.clearUpload:
            return _actions.ClearUploadCommand;

        case _type2.default.takeScreenshot:
            return _browserManipulation.TakeScreenshotCommand;

        case _type2.default.takeElementScreenshot:
            return _browserManipulation.TakeElementScreenshotCommand;

        case _type2.default.resizeWindow:
            return _browserManipulation.ResizeWindowCommand;

        case _type2.default.resizeWindowToFitDevice:
            return _browserManipulation.ResizeWindowToFitDeviceCommand;

        case _type2.default.maximizeWindow:
            return _browserManipulation.MaximizeWindowCommand;

        case _type2.default.switchToIframe:
            return _actions.SwitchToIframeCommand;

        case _type2.default.switchToMainWindow:
            return _actions.SwitchToMainWindowCommand;

        case _type2.default.setNativeDialogHandler:
            return _actions.SetNativeDialogHandlerCommand;

        case _type2.default.setTestSpeed:
            return _actions.SetTestSpeedCommand;

        case _type2.default.setPageLoadTimeout:
            return _actions.SetPageLoadTimeoutCommand;

        case _type2.default.assertion:
            return _assertion2.default;

        case _type2.default.debug:
            return _observation.DebugCommand;

        case _type2.default.executeExpression:
            return _actions.ExecuteExpressionCommand;

        default:
            return null;
    }
}

// Create command from object
function createCommandFromObject(obj, testRun) {
    const CmdCtor = getCmdCtor(obj.type);

    return CmdCtor && new CmdCtor(obj, testRun);
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
