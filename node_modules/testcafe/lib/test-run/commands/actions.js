'use strict';

exports.__esModule = true;
exports.UseRoleCommand = exports.SetPageLoadTimeoutCommand = exports.SetTestSpeedCommand = exports.GetBrowserConsoleMessagesCommand = exports.GetNativeDialogHistoryCommand = exports.SetNativeDialogHandlerCommand = exports.SwitchToMainWindowCommand = exports.SwitchToIframeCommand = exports.ClearUploadCommand = exports.SetFilesToUploadCommand = exports.NavigateToCommand = exports.PressKeyCommand = exports.SelectTextAreaContentCommand = exports.SelectEditableContentCommand = exports.SelectTextCommand = exports.DragToElementCommand = exports.DragCommand = exports.TypeTextCommand = exports.HoverCommand = exports.DoubleClickCommand = exports.ExecuteExpressionCommand = exports.RightClickCommand = exports.ClickCommand = undefined;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _selectorBuilder = require('../../client-functions/selectors/selector-builder');

var _selectorBuilder2 = _interopRequireDefault(_selectorBuilder);

var _clientFunctionBuilder = require('../../client-functions/client-function-builder');

var _clientFunctionBuilder2 = _interopRequireDefault(_clientFunctionBuilder);

var _builderSymbol = require('../../client-functions/builder-symbol');

var _builderSymbol2 = _interopRequireDefault(_builderSymbol);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _options = require('./options');

var _initializers = require('./validations/initializers');

var _executeJsExpression = require('../execute-js-expression');

var _executeJsExpression2 = _interopRequireDefault(_executeJsExpression);

var _utils = require('./utils');

var _argument = require('./validations/argument');

var _testRun = require('../../errors/test-run');

var _observation = require('./observation');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Initializers
function initActionOptions(name, val) {
    return new _options.ActionOptions(val, true);
}

function initClickOptions(name, val) {
    return new _options.ClickOptions(val, true);
}

function initMouseOptions(name, val) {
    return new _options.MouseOptions(val, true);
}

function initTypeOptions(name, val) {
    return new _options.TypeOptions(val, true);
}

function initDragToElementOptions(name, val) {
    return new _options.DragToElementOptions(val, true);
}

function initDialogHandler(name, val, { skipVisibilityCheck, testRun }) {
    let fn;

    if ((0, _utils.isJSExpression)(val)) fn = (0, _executeJsExpression2.default)(val.value, testRun, { skipVisibilityCheck });else fn = val.fn;

    if (fn === null || fn instanceof _observation.ExecuteClientFunctionCommand) return fn;

    const options = val.options;
    const methodName = 'setNativeDialogHandler';
    let builder = fn && fn[_builderSymbol2.default];
    const isSelector = builder instanceof _selectorBuilder2.default;
    const functionType = typeof fn;

    if (functionType !== 'function' || isSelector) throw new _testRun.SetNativeDialogHandlerCodeWrongTypeError(isSelector ? 'Selector' : functionType);

    builder = builder instanceof _clientFunctionBuilder2.default ? fn.with(options)[_builderSymbol2.default] : new _clientFunctionBuilder2.default(fn, options, { instantiation: methodName, execution: methodName });

    return builder.getCommand([]);
}

// Commands
class ClickCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.click);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'options', type: _argument.actionOptions, init: initClickOptions, required: true }];
    }
}

exports.ClickCommand = ClickCommand;
class RightClickCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.rightClick);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'options', type: _argument.actionOptions, init: initClickOptions, required: true }];
    }
}

exports.RightClickCommand = RightClickCommand;
class ExecuteExpressionCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.executeExpression);
    }

    _getAssignableProperties() {
        return [{ name: 'expression', type: _argument.nonEmptyStringArgument, required: true }, { name: 'resultVariableName', type: _argument.nonEmptyStringArgument, defaultValue: null }, { name: 'isAsyncExpression', type: _argument.booleanArgument, defaultValue: false }];
    }
}

exports.ExecuteExpressionCommand = ExecuteExpressionCommand;
class DoubleClickCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.doubleClick);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'options', type: _argument.actionOptions, init: initClickOptions, required: true }];
    }
}

exports.DoubleClickCommand = DoubleClickCommand;
class HoverCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.hover);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'options', type: _argument.actionOptions, init: initMouseOptions, required: true }];
    }
}

exports.HoverCommand = HoverCommand;
class TypeTextCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.typeText);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'text', type: _argument.nonEmptyStringArgument, required: true }, { name: 'options', type: _argument.actionOptions, init: initTypeOptions, required: true }];
    }
}

exports.TypeTextCommand = TypeTextCommand;
class DragCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.drag);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'dragOffsetX', type: _argument.integerArgument, required: true }, { name: 'dragOffsetY', type: _argument.integerArgument, required: true }, { name: 'options', type: _argument.actionOptions, init: initMouseOptions, required: true }];
    }
}

exports.DragCommand = DragCommand;
class DragToElementCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.dragToElement);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'destinationSelector', init: _initializers.initSelector, required: true }, { name: 'options', type: _argument.actionOptions, init: initDragToElementOptions, required: true }];
    }
}

exports.DragToElementCommand = DragToElementCommand;
class SelectTextCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.selectText);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'startPos', type: _argument.positiveIntegerArgument, defaultValue: null }, { name: 'endPos', type: _argument.positiveIntegerArgument, defaultValue: null }, { name: 'options', type: _argument.actionOptions, init: initActionOptions, required: true }];
    }
}

exports.SelectTextCommand = SelectTextCommand;
class SelectEditableContentCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.selectEditableContent);
    }

    _getAssignableProperties() {
        return [{ name: 'startSelector', init: _initializers.initSelector, required: true }, { name: 'endSelector', init: _initializers.initSelector, defaultValue: null }, { name: 'options', type: _argument.actionOptions, init: initActionOptions, required: true }];
    }
}

exports.SelectEditableContentCommand = SelectEditableContentCommand;
class SelectTextAreaContentCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.selectTextAreaContent);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'startLine', type: _argument.positiveIntegerArgument, defaultValue: null }, { name: 'startPos', type: _argument.positiveIntegerArgument, defaultValue: null }, { name: 'endLine', type: _argument.positiveIntegerArgument, defaultValue: null }, { name: 'endPos', type: _argument.positiveIntegerArgument, defaultValue: null }, { name: 'options', type: _argument.actionOptions, init: initActionOptions, required: true }];
    }
}

exports.SelectTextAreaContentCommand = SelectTextAreaContentCommand;
class PressKeyCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.pressKey);
    }

    _getAssignableProperties() {
        return [{ name: 'keys', type: _argument.nonEmptyStringArgument, required: true }, { name: 'options', type: _argument.actionOptions, init: initActionOptions, required: true }];
    }
}

exports.PressKeyCommand = PressKeyCommand;
class NavigateToCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.navigateTo);
    }

    _getAssignableProperties() {
        return [{ name: 'url', type: _argument.urlArgument, required: true }, { name: 'stateSnapshot', type: _argument.nullableStringArgument, defaultValue: null }];
    }
}

exports.NavigateToCommand = NavigateToCommand;
class SetFilesToUploadCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.setFilesToUpload);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initUploadSelector, required: true }, { name: 'filePath', type: _argument.stringOrStringArrayArgument, required: true }];
    }
}

exports.SetFilesToUploadCommand = SetFilesToUploadCommand;
class ClearUploadCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.clearUpload);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initUploadSelector, required: true }];
    }
}

exports.ClearUploadCommand = ClearUploadCommand;
class SwitchToIframeCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.switchToIframe);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }];
    }
}

exports.SwitchToIframeCommand = SwitchToIframeCommand;
class SwitchToMainWindowCommand {
    constructor() {
        this.type = _type2.default.switchToMainWindow;
    }
}

exports.SwitchToMainWindowCommand = SwitchToMainWindowCommand;
class SetNativeDialogHandlerCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.setNativeDialogHandler);
    }

    _getAssignableProperties() {
        return [{ name: 'dialogHandler', init: initDialogHandler, required: true }];
    }
}

exports.SetNativeDialogHandlerCommand = SetNativeDialogHandlerCommand;
class GetNativeDialogHistoryCommand {
    constructor() {
        this.type = _type2.default.getNativeDialogHistory;
    }
}

exports.GetNativeDialogHistoryCommand = GetNativeDialogHistoryCommand;
class GetBrowserConsoleMessagesCommand {
    constructor() {
        this.type = _type2.default.getBrowserConsoleMessages;
    }
}

exports.GetBrowserConsoleMessagesCommand = GetBrowserConsoleMessagesCommand;
class SetTestSpeedCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.setTestSpeed);
    }

    _getAssignableProperties() {
        return [{ name: 'speed', type: _argument.setSpeedArgument, required: true }];
    }
}

exports.SetTestSpeedCommand = SetTestSpeedCommand;
class SetPageLoadTimeoutCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.setPageLoadTimeout);
    }

    _getAssignableProperties() {
        return [{ name: 'duration', type: _argument.positiveIntegerArgument, required: true }];
    }
}

exports.SetPageLoadTimeoutCommand = SetPageLoadTimeoutCommand;
class UseRoleCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.useRole);
    }

    _getAssignableProperties() {
        return [{ name: 'role', type: _argument.actionRoleArgument, required: true }];
    }
}
exports.UseRoleCommand = UseRoleCommand;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
