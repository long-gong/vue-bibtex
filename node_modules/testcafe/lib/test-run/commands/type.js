'use strict';

exports.__esModule = true;
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

exports.default = {
    click: 'click',
    rightClick: 'right-click',
    doubleClick: 'double-click',
    drag: 'drag',
    dragToElement: 'drag-to-element',
    hover: 'hover',
    typeText: 'type-text',
    selectText: 'select-text',
    selectTextAreaContent: 'select-text-area-content',
    selectEditableContent: 'select-editable-content',
    pressKey: 'press-key',
    wait: 'wait',
    navigateTo: 'navigate-to',
    setFilesToUpload: 'set-files-to-upload',
    clearUpload: 'clear-upload',
    executeClientFunction: 'execute-client-function',
    executeSelector: 'execute-selector',
    takeScreenshot: 'take-screenshot',
    takeElementScreenshot: 'take-element-screenshot',
    takeScreenshotOnFail: 'take-screenshot-on-fail',
    prepareBrowserManipulation: 'prepare-browser-manipulation',
    showAssertionRetriesStatus: 'show-assertion-retries-status',
    hideAssertionRetriesStatus: 'hide-assertion-retries-status',
    setBreakpoint: 'set-breakpoint',
    resizeWindow: 'resize-window',
    resizeWindowToFitDevice: 'resize-window-to-fit-device',
    maximizeWindow: 'maximize-window',
    switchToIframe: 'switch-to-iframe',
    switchToMainWindow: 'switch-to-main-window',
    setNativeDialogHandler: 'set-native-dialog-handler',
    getNativeDialogHistory: 'get-native-dialog-history',
    getBrowserConsoleMessages: 'get-browser-console-messages',
    setTestSpeed: 'set-test-speed',
    setPageLoadTimeout: 'set-page-load-timeout',
    debug: 'debug',
    assertion: 'assertion',
    useRole: 'useRole',
    testDone: 'test-done',
    backupStorages: 'backup-storages',
    executeExpression: 'execute-expression'
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy90eXBlLmpzIl0sIm5hbWVzIjpbImNsaWNrIiwicmlnaHRDbGljayIsImRvdWJsZUNsaWNrIiwiZHJhZyIsImRyYWdUb0VsZW1lbnQiLCJob3ZlciIsInR5cGVUZXh0Iiwic2VsZWN0VGV4dCIsInNlbGVjdFRleHRBcmVhQ29udGVudCIsInNlbGVjdEVkaXRhYmxlQ29udGVudCIsInByZXNzS2V5Iiwid2FpdCIsIm5hdmlnYXRlVG8iLCJzZXRGaWxlc1RvVXBsb2FkIiwiY2xlYXJVcGxvYWQiLCJleGVjdXRlQ2xpZW50RnVuY3Rpb24iLCJleGVjdXRlU2VsZWN0b3IiLCJ0YWtlU2NyZWVuc2hvdCIsInRha2VFbGVtZW50U2NyZWVuc2hvdCIsInRha2VTY3JlZW5zaG90T25GYWlsIiwicHJlcGFyZUJyb3dzZXJNYW5pcHVsYXRpb24iLCJzaG93QXNzZXJ0aW9uUmV0cmllc1N0YXR1cyIsImhpZGVBc3NlcnRpb25SZXRyaWVzU3RhdHVzIiwic2V0QnJlYWtwb2ludCIsInJlc2l6ZVdpbmRvdyIsInJlc2l6ZVdpbmRvd1RvRml0RGV2aWNlIiwibWF4aW1pemVXaW5kb3ciLCJzd2l0Y2hUb0lmcmFtZSIsInN3aXRjaFRvTWFpbldpbmRvdyIsInNldE5hdGl2ZURpYWxvZ0hhbmRsZXIiLCJnZXROYXRpdmVEaWFsb2dIaXN0b3J5IiwiZ2V0QnJvd3NlckNvbnNvbGVNZXNzYWdlcyIsInNldFRlc3RTcGVlZCIsInNldFBhZ2VMb2FkVGltZW91dCIsImRlYnVnIiwiYXNzZXJ0aW9uIiwidXNlUm9sZSIsInRlc3REb25lIiwiYmFja3VwU3RvcmFnZXMiLCJleGVjdXRlRXhwcmVzc2lvbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7O2tCQUVlO0FBQ1hBLFdBQTRCLE9BRGpCO0FBRVhDLGdCQUE0QixhQUZqQjtBQUdYQyxpQkFBNEIsY0FIakI7QUFJWEMsVUFBNEIsTUFKakI7QUFLWEMsbUJBQTRCLGlCQUxqQjtBQU1YQyxXQUE0QixPQU5qQjtBQU9YQyxjQUE0QixXQVBqQjtBQVFYQyxnQkFBNEIsYUFSakI7QUFTWEMsMkJBQTRCLDBCQVRqQjtBQVVYQywyQkFBNEIseUJBVmpCO0FBV1hDLGNBQTRCLFdBWGpCO0FBWVhDLFVBQTRCLE1BWmpCO0FBYVhDLGdCQUE0QixhQWJqQjtBQWNYQyxzQkFBNEIscUJBZGpCO0FBZVhDLGlCQUE0QixjQWZqQjtBQWdCWEMsMkJBQTRCLHlCQWhCakI7QUFpQlhDLHFCQUE0QixrQkFqQmpCO0FBa0JYQyxvQkFBNEIsaUJBbEJqQjtBQW1CWEMsMkJBQTRCLHlCQW5CakI7QUFvQlhDLDBCQUE0Qix5QkFwQmpCO0FBcUJYQyxnQ0FBNEIsOEJBckJqQjtBQXNCWEMsZ0NBQTRCLCtCQXRCakI7QUF1QlhDLGdDQUE0QiwrQkF2QmpCO0FBd0JYQyxtQkFBNEIsZ0JBeEJqQjtBQXlCWEMsa0JBQTRCLGVBekJqQjtBQTBCWEMsNkJBQTRCLDZCQTFCakI7QUEyQlhDLG9CQUE0QixpQkEzQmpCO0FBNEJYQyxvQkFBNEIsa0JBNUJqQjtBQTZCWEMsd0JBQTRCLHVCQTdCakI7QUE4QlhDLDRCQUE0QiwyQkE5QmpCO0FBK0JYQyw0QkFBNEIsMkJBL0JqQjtBQWdDWEMsK0JBQTRCLDhCQWhDakI7QUFpQ1hDLGtCQUE0QixnQkFqQ2pCO0FBa0NYQyx3QkFBNEIsdUJBbENqQjtBQW1DWEMsV0FBNEIsT0FuQ2pCO0FBb0NYQyxlQUE0QixXQXBDakI7QUFxQ1hDLGFBQTRCLFNBckNqQjtBQXNDWEMsY0FBNEIsV0F0Q2pCO0FBdUNYQyxvQkFBNEIsaUJBdkNqQjtBQXdDWEMsdUJBQTRCO0FBeENqQixDIiwiZmlsZSI6InRlc3QtcnVuL2NvbW1hbmRzL3R5cGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBXQVJOSU5HOiB0aGlzIGZpbGUgaXMgdXNlZCBieSBib3RoIHRoZSBjbGllbnQgYW5kIHRoZSBzZXJ2ZXIuXG4vLyBEbyBub3QgdXNlIGFueSBicm93c2VyIG9yIG5vZGUtc3BlY2lmaWMgQVBJIVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY2xpY2s6ICAgICAgICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgcmlnaHRDbGljazogICAgICAgICAgICAgICAgICdyaWdodC1jbGljaycsXG4gICAgZG91YmxlQ2xpY2s6ICAgICAgICAgICAgICAgICdkb3VibGUtY2xpY2snLFxuICAgIGRyYWc6ICAgICAgICAgICAgICAgICAgICAgICAnZHJhZycsXG4gICAgZHJhZ1RvRWxlbWVudDogICAgICAgICAgICAgICdkcmFnLXRvLWVsZW1lbnQnLFxuICAgIGhvdmVyOiAgICAgICAgICAgICAgICAgICAgICAnaG92ZXInLFxuICAgIHR5cGVUZXh0OiAgICAgICAgICAgICAgICAgICAndHlwZS10ZXh0JyxcbiAgICBzZWxlY3RUZXh0OiAgICAgICAgICAgICAgICAgJ3NlbGVjdC10ZXh0JyxcbiAgICBzZWxlY3RUZXh0QXJlYUNvbnRlbnQ6ICAgICAgJ3NlbGVjdC10ZXh0LWFyZWEtY29udGVudCcsXG4gICAgc2VsZWN0RWRpdGFibGVDb250ZW50OiAgICAgICdzZWxlY3QtZWRpdGFibGUtY29udGVudCcsXG4gICAgcHJlc3NLZXk6ICAgICAgICAgICAgICAgICAgICdwcmVzcy1rZXknLFxuICAgIHdhaXQ6ICAgICAgICAgICAgICAgICAgICAgICAnd2FpdCcsXG4gICAgbmF2aWdhdGVUbzogICAgICAgICAgICAgICAgICduYXZpZ2F0ZS10bycsXG4gICAgc2V0RmlsZXNUb1VwbG9hZDogICAgICAgICAgICdzZXQtZmlsZXMtdG8tdXBsb2FkJyxcbiAgICBjbGVhclVwbG9hZDogICAgICAgICAgICAgICAgJ2NsZWFyLXVwbG9hZCcsXG4gICAgZXhlY3V0ZUNsaWVudEZ1bmN0aW9uOiAgICAgICdleGVjdXRlLWNsaWVudC1mdW5jdGlvbicsXG4gICAgZXhlY3V0ZVNlbGVjdG9yOiAgICAgICAgICAgICdleGVjdXRlLXNlbGVjdG9yJyxcbiAgICB0YWtlU2NyZWVuc2hvdDogICAgICAgICAgICAgJ3Rha2Utc2NyZWVuc2hvdCcsXG4gICAgdGFrZUVsZW1lbnRTY3JlZW5zaG90OiAgICAgICd0YWtlLWVsZW1lbnQtc2NyZWVuc2hvdCcsXG4gICAgdGFrZVNjcmVlbnNob3RPbkZhaWw6ICAgICAgICd0YWtlLXNjcmVlbnNob3Qtb24tZmFpbCcsXG4gICAgcHJlcGFyZUJyb3dzZXJNYW5pcHVsYXRpb246ICdwcmVwYXJlLWJyb3dzZXItbWFuaXB1bGF0aW9uJyxcbiAgICBzaG93QXNzZXJ0aW9uUmV0cmllc1N0YXR1czogJ3Nob3ctYXNzZXJ0aW9uLXJldHJpZXMtc3RhdHVzJyxcbiAgICBoaWRlQXNzZXJ0aW9uUmV0cmllc1N0YXR1czogJ2hpZGUtYXNzZXJ0aW9uLXJldHJpZXMtc3RhdHVzJyxcbiAgICBzZXRCcmVha3BvaW50OiAgICAgICAgICAgICAgJ3NldC1icmVha3BvaW50JyxcbiAgICByZXNpemVXaW5kb3c6ICAgICAgICAgICAgICAgJ3Jlc2l6ZS13aW5kb3cnLFxuICAgIHJlc2l6ZVdpbmRvd1RvRml0RGV2aWNlOiAgICAncmVzaXplLXdpbmRvdy10by1maXQtZGV2aWNlJyxcbiAgICBtYXhpbWl6ZVdpbmRvdzogICAgICAgICAgICAgJ21heGltaXplLXdpbmRvdycsXG4gICAgc3dpdGNoVG9JZnJhbWU6ICAgICAgICAgICAgICdzd2l0Y2gtdG8taWZyYW1lJyxcbiAgICBzd2l0Y2hUb01haW5XaW5kb3c6ICAgICAgICAgJ3N3aXRjaC10by1tYWluLXdpbmRvdycsXG4gICAgc2V0TmF0aXZlRGlhbG9nSGFuZGxlcjogICAgICdzZXQtbmF0aXZlLWRpYWxvZy1oYW5kbGVyJyxcbiAgICBnZXROYXRpdmVEaWFsb2dIaXN0b3J5OiAgICAgJ2dldC1uYXRpdmUtZGlhbG9nLWhpc3RvcnknLFxuICAgIGdldEJyb3dzZXJDb25zb2xlTWVzc2FnZXM6ICAnZ2V0LWJyb3dzZXItY29uc29sZS1tZXNzYWdlcycsXG4gICAgc2V0VGVzdFNwZWVkOiAgICAgICAgICAgICAgICdzZXQtdGVzdC1zcGVlZCcsXG4gICAgc2V0UGFnZUxvYWRUaW1lb3V0OiAgICAgICAgICdzZXQtcGFnZS1sb2FkLXRpbWVvdXQnLFxuICAgIGRlYnVnOiAgICAgICAgICAgICAgICAgICAgICAnZGVidWcnLFxuICAgIGFzc2VydGlvbjogICAgICAgICAgICAgICAgICAnYXNzZXJ0aW9uJyxcbiAgICB1c2VSb2xlOiAgICAgICAgICAgICAgICAgICAgJ3VzZVJvbGUnLFxuICAgIHRlc3REb25lOiAgICAgICAgICAgICAgICAgICAndGVzdC1kb25lJyxcbiAgICBiYWNrdXBTdG9yYWdlczogICAgICAgICAgICAgJ2JhY2t1cC1zdG9yYWdlcycsXG4gICAgZXhlY3V0ZUV4cHJlc3Npb246ICAgICAgICAgICdleGVjdXRlLWV4cHJlc3Npb24nXG59O1xuIl19
