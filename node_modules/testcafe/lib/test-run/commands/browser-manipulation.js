'use strict';

exports.__esModule = true;
exports.MaximizeWindowCommand = exports.ResizeWindowToFitDeviceCommand = exports.ResizeWindowCommand = exports.TakeScreenshotOnFailCommand = exports.TakeElementScreenshotCommand = exports.TakeScreenshotCommand = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _options = require('./options');

var _initializers = require('./validations/initializers');

var _argument = require('./validations/argument');

var _generateMark = require('../../screenshots/generate-mark');

var _generateMark2 = _interopRequireDefault(_generateMark);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initResizeToFitDeviceOptions(name, val) {
    return new _options.ResizeToFitDeviceOptions(val, true);
}

function initElementScreenshotOptions(name, val) {
    return new _options.ElementScreenshotOptions(val, true);
}

// Commands
class TakeScreenshotBaseCommand extends _base2.default {
    constructor(obj, testRun, type) {
        super(obj, testRun, type);

        this.markSeed = null;
        this.markData = '';
    }

    generateScreenshotMark() {
        (0, _assign2.default)(this, (0, _generateMark2.default)());
    }
}

class TakeScreenshotCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.takeScreenshot);
    }

    _getAssignableProperties() {
        return [{ name: 'path', type: _argument.screenshotPathArgument, defaultValue: '' }];
    }
}

exports.TakeScreenshotCommand = TakeScreenshotCommand;
class TakeElementScreenshotCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.takeElementScreenshot);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'options', init: initElementScreenshotOptions, required: true }, { name: 'path', type: _argument.screenshotPathArgument, defaultValue: '' }];
    }
}

exports.TakeElementScreenshotCommand = TakeElementScreenshotCommand;
class TakeScreenshotOnFailCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.takeScreenshotOnFail);
    }

    _getAssignableProperties() {
        return [];
    }
}

exports.TakeScreenshotOnFailCommand = TakeScreenshotOnFailCommand;
class ResizeWindowCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.resizeWindow);
    }

    _getAssignableProperties() {
        return [{ name: 'width', type: _argument.positiveIntegerArgument, required: true }, { name: 'height', type: _argument.positiveIntegerArgument, required: true }];
    }
}

exports.ResizeWindowCommand = ResizeWindowCommand;
class ResizeWindowToFitDeviceCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.resizeWindowToFitDevice);
    }

    _getAssignableProperties() {
        return [{ name: 'device', type: _argument.resizeWindowDeviceArgument, required: true }, { name: 'options', type: _argument.actionOptions, init: initResizeToFitDeviceOptions, required: true }];
    }
}

exports.ResizeWindowToFitDeviceCommand = ResizeWindowToFitDeviceCommand;
class MaximizeWindowCommand {
    constructor() {
        this.type = _type2.default.maximizeWindow;
    }
}
exports.MaximizeWindowCommand = MaximizeWindowCommand;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy9icm93c2VyLW1hbmlwdWxhdGlvbi5qcyJdLCJuYW1lcyI6WyJpbml0UmVzaXplVG9GaXREZXZpY2VPcHRpb25zIiwibmFtZSIsInZhbCIsIlJlc2l6ZVRvRml0RGV2aWNlT3B0aW9ucyIsImluaXRFbGVtZW50U2NyZWVuc2hvdE9wdGlvbnMiLCJFbGVtZW50U2NyZWVuc2hvdE9wdGlvbnMiLCJUYWtlU2NyZWVuc2hvdEJhc2VDb21tYW5kIiwiQ29tbWFuZEJhc2UiLCJjb25zdHJ1Y3RvciIsIm9iaiIsInRlc3RSdW4iLCJ0eXBlIiwibWFya1NlZWQiLCJtYXJrRGF0YSIsImdlbmVyYXRlU2NyZWVuc2hvdE1hcmsiLCJUYWtlU2NyZWVuc2hvdENvbW1hbmQiLCJUWVBFIiwidGFrZVNjcmVlbnNob3QiLCJfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMiLCJzY3JlZW5zaG90UGF0aEFyZ3VtZW50IiwiZGVmYXVsdFZhbHVlIiwiVGFrZUVsZW1lbnRTY3JlZW5zaG90Q29tbWFuZCIsInRha2VFbGVtZW50U2NyZWVuc2hvdCIsImluaXQiLCJpbml0U2VsZWN0b3IiLCJyZXF1aXJlZCIsIlRha2VTY3JlZW5zaG90T25GYWlsQ29tbWFuZCIsInRha2VTY3JlZW5zaG90T25GYWlsIiwiUmVzaXplV2luZG93Q29tbWFuZCIsInJlc2l6ZVdpbmRvdyIsInBvc2l0aXZlSW50ZWdlckFyZ3VtZW50IiwiUmVzaXplV2luZG93VG9GaXREZXZpY2VDb21tYW5kIiwicmVzaXplV2luZG93VG9GaXREZXZpY2UiLCJyZXNpemVXaW5kb3dEZXZpY2VBcmd1bWVudCIsImFjdGlvbk9wdGlvbnMiLCJNYXhpbWl6ZVdpbmRvd0NvbW1hbmQiLCJtYXhpbWl6ZVdpbmRvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUVBOztBQU9BOzs7Ozs7QUFHQSxTQUFTQSw0QkFBVCxDQUF1Q0Ms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QUFVLElBQTlELEVBREcsRUFFSCxFQUFFeEIsTUFBTSxTQUFSLEVBQW1CVSxNQUFNdUIsdUJBQXpCLEVBQXdDWCxNQUFNdkIsNEJBQTlDLEVBQTRFeUIsVUFBVSxJQUF0RixFQUZHLENBQVA7QUFJSDtBQVYyRDs7UUFBbkRNLDhCLEdBQUFBLDhCO0FBYU4sTUFBTUkscUJBQU4sQ0FBNEI7QUFDL0IzQixrQkFBZTtBQUNYLGFBQUtHLElBQUwsR0FBWUssZUFBS29CLGNBQWpCO0FBQ0g7QUFIOEI7UUFBdEJELHFCLEdBQUFBLHFCIiwiZmlsZSI6InRlc3QtcnVuL2NvbW1hbmRzL2Jyb3dzZXItbWFuaXB1bGF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRZUEUgZnJvbSAnLi90eXBlJztcbmltcG9ydCBDb21tYW5kQmFzZSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgRWxlbWVudFNjcmVlbnNob3RPcHRpb25zLCBSZXNpemVUb0ZpdERldmljZU9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgaW5pdFNlbGVjdG9yIH0gZnJvbSAnLi92YWxpZGF0aW9ucy9pbml0aWFsaXplcnMnO1xuXG5pbXBvcnQge1xuICAgIHBvc2l0aXZlSW50ZWdlckFyZ3VtZW50LFxuICAgIHNjcmVlbnNob3RQYXRoQXJndW1lbnQsXG4gICAgcmVzaXplV2luZG93RGV2aWNlQXJndW1lbnQsXG4gICAgYWN0aW9uT3B0aW9uc1xufSBmcm9tICcuL3ZhbGlkYXRpb25zL2FyZ3VtZW50JztcblxuaW1wb3J0IGdlbmVyYXRlU2NyZWVuc2hvdE1hcmsgZnJvbSAnLi4vLi4vc2NyZWVuc2hvdHMvZ2VuZXJhdGUtbWFyayc7XG5cblxuZnVuY3Rpb24gaW5pdFJlc2l6ZVRvRml0RGV2aWNlT3B0aW9ucyAobmFtZSwgdmFsKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNpemVUb0ZpdERldmljZU9wdGlvbnModmFsLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gaW5pdEVsZW1lbnRTY3JlZW5zaG90T3B0aW9ucyAobmFtZSwgdmFsKSB7XG4gICAgcmV0dXJuIG5ldyBFbGVtZW50U2NyZWVuc2hvdE9wdGlvbnModmFsLCB0cnVlKTtcbn1cblxuLy8gQ29tbWFuZHNcbmNsYXNzIFRha2VTY3JlZW5zaG90QmFzZUNvbW1hbmQgZXh0ZW5kcyBDb21tYW5kQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKG9iaiwgdGVzdFJ1biwgdHlwZSkge1xuICAgICAgICBzdXBlcihvYmosIHRlc3RSdW4sIHR5cGUpO1xuXG4gICAgICAgIHRoaXMubWFya1NlZWQgPSBudWxsO1xuICAgICAgICB0aGlzLm1hcmtEYXRhID0gJyc7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVTY3JlZW5zaG90TWFyayAoKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgZ2VuZXJhdGVTY3JlZW5zaG90TWFyaygpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUYWtlU2NyZWVuc2hvdENvbW1hbmQgZXh0ZW5kcyBUYWtlU2NyZWVuc2hvdEJhc2VDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgVFlQRS50YWtlU2NyZWVuc2hvdCk7XG4gICAgfVxuXG4gICAgX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgbmFtZTogJ3BhdGgnLCB0eXBlOiBzY3JlZW5zaG90UGF0aEFyZ3VtZW50LCBkZWZhdWx0VmFsdWU6ICcnIH1cbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUYWtlRWxlbWVudFNjcmVlbnNob3RDb21tYW5kIGV4dGVuZHMgVGFrZVNjcmVlbnNob3RCYXNlQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKG9iaiwgdGVzdFJ1bikge1xuICAgICAgICBzdXBlcihvYmosIHRlc3RSdW4sIFRZUEUudGFrZUVsZW1lbnRTY3JlZW5zaG90KTtcbiAgICB9XG5cbiAgICBfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMgKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyBuYW1lOiAnc2VsZWN0b3InLCBpbml0OiBpbml0U2VsZWN0b3IsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdvcHRpb25zJywgaW5pdDogaW5pdEVsZW1lbnRTY3JlZW5zaG90T3B0aW9ucywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ3BhdGgnLCB0eXBlOiBzY3JlZW5zaG90UGF0aEFyZ3VtZW50LCBkZWZhdWx0VmFsdWU6ICcnIH1cbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUYWtlU2NyZWVuc2hvdE9uRmFpbENvbW1hbmQgZXh0ZW5kcyBUYWtlU2NyZWVuc2hvdEJhc2VDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgVFlQRS50YWtlU2NyZWVuc2hvdE9uRmFpbCk7XG4gICAgfVxuXG4gICAgX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2l6ZVdpbmRvd0NvbW1hbmQgZXh0ZW5kcyBDb21tYW5kQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKG9iaiwgdGVzdFJ1bikge1xuICAgICAgICBzdXBlcihvYmosIHRlc3RSdW4sIFRZUEUucmVzaXplV2luZG93KTtcbiAgICB9XG5cbiAgICBfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMgKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyBuYW1lOiAnd2lkdGgnLCB0eXBlOiBwb3NpdGl2ZUludGVnZXJBcmd1bWVudCwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2hlaWdodCcsIHR5cGU6IHBvc2l0aXZlSW50ZWdlckFyZ3VtZW50LCByZXF1aXJlZDogdHJ1ZSB9XG4gICAgICAgIF07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVzaXplV2luZG93VG9GaXREZXZpY2VDb21tYW5kIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChvYmosIHRlc3RSdW4pIHtcbiAgICAgICAgc3VwZXIob2JqLCB0ZXN0UnVuLCBUWVBFLnJlc2l6ZVdpbmRvd1RvRml0RGV2aWNlKTtcbiAgICB9XG5cbiAgICBfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMgKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyBuYW1lOiAnZGV2aWNlJywgdHlwZTogcmVzaXplV2luZG93RGV2aWNlQXJndW1lbnQsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdvcHRpb25zJywgdHlwZTogYWN0aW9uT3B0aW9ucywgaW5pdDogaW5pdFJlc2l6ZVRvRml0RGV2aWNlT3B0aW9ucywgcmVxdWlyZWQ6IHRydWUgfVxuICAgICAgICBdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1heGltaXplV2luZG93Q29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLnR5cGUgPSBUWVBFLm1heGltaXplV2luZG93O1xuICAgIH1cbn1cbiJdfQ==
