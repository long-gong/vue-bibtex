'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _lodash = require('lodash');

var _readFileRelative = require('read-file-relative');

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

var _debugLogger = require('../notifications/debug-logger');

var _debugLogger2 = _interopRequireDefault(_debugLogger);

var _debugLog = require('./debug-log');

var _debugLog2 = _interopRequireDefault(_debugLog);

var _formattableAdapter = require('../errors/test-run/formattable-adapter');

var _formattableAdapter2 = _interopRequireDefault(_formattableAdapter);

var _errorList = require('../errors/error-list');

var _errorList2 = _interopRequireDefault(_errorList);

var _testRun = require('../errors/test-run/');

var _phase = require('./phase');

var _phase2 = _interopRequireDefault(_phase);

var _clientMessages = require('./client-messages');

var _clientMessages2 = _interopRequireDefault(_clientMessages);

var _type = require('./commands/type');

var _type2 = _interopRequireDefault(_type);

var _delay = require('../utils/delay');

var _delay2 = _interopRequireDefault(_delay);

var _markerSymbol = require('./marker-symbol');

var _markerSymbol2 = _interopRequireDefault(_markerSymbol);

var _testRunTracker = require('../api/test-run-tracker');

var _testRunTracker2 = _interopRequireDefault(_testRunTracker);

var _phase3 = require('../role/phase');

var _phase4 = _interopRequireDefault(_phase3);

var _pluginHost = require('../reporter/plugin-host');

var _pluginHost2 = _interopRequireDefault(_pluginHost);

var _browserConsoleMessages = require('./browser-console-messages');

var _browserConsoleMessages2 = _interopRequireDefault(_browserConsoleMessages);

var _unstableNetworkMode = require('../browser/connection/unstable-network-mode');

var _warningMessage = require('../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

var _utils = require('./commands/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const lazyRequire = require('import-lazy')(require);
const SessionController = lazyRequire('./session-controller');
const ClientFunctionBuilder = lazyRequire('../client-functions/client-function-builder');
const executeJsExpression = lazyRequire('./execute-js-expression');
const BrowserManipulationQueue = lazyRequire('./browser-manipulation-queue');
const TestRunBookmark = lazyRequire('./bookmark');
const AssertionExecutor = lazyRequire('../assertions/executor');
const actionCommands = lazyRequire('./commands/actions');
const browserManipulationCommands = lazyRequire('./commands/browser-manipulation');
const serviceCommands = lazyRequire('./commands/service');

const TEST_RUN_TEMPLATE = (0, _readFileRelative.readSync)('../client/test-run/index.js.mustache');
const IFRAME_TEST_RUN_TEMPLATE = (0, _readFileRelative.readSync)('../client/test-run/iframe.js.mustache');
const TEST_DONE_CONFIRMATION_RESPONSE = 'test-done-confirmation';
const MAX_RESPONSE_DELAY = 3000;

const ALL_DRIVER_TASKS_ADDED_TO_QUEUE_EVENT = 'all-driver-tasks-added-to-queue';

class TestRun extends _events2.default {
    constructor(test, browserConnection, screenshotCapturer, warningLog, opts) {
        super();

        this[_markerSymbol2.default] = true;

        this.opts = opts;
        this.test = test;
        this.browserConnection = browserConnection;

        this.phase = _phase2.default.initial;

        this.driverTaskQueue = [];
        this.testDoneCommandQueued = false;

        this.activeDialogHandler = null;
        this.activeIframeSelector = null;
        this.speed = this.opts.speed;
        this.pageLoadTimeout = this.opts.pageLoadTimeout;

        this.disablePageReloads = test.disablePageReloads || opts.disablePageReloads && test.disablePageReloads !== false;

        this.session = SessionController.getSession(this);

        this.consoleMessages = new _browserConsoleMessages2.default();

        this.pendingRequest = null;
        this.pendingPageError = null;

        this.controller = null;
        this.ctx = (0, _create2.default)(null);
        this.fixtureCtx = null;

        this.currentRoleId = null;
        this.usedRoleStates = (0, _create2.default)(null);

        this.errs = [];

        this.lastDriverStatusId = null;
        this.lastDriverStatusResponse = null;

        this.fileDownloadingHandled = false;
        this.resolveWaitForFileDownloadingPromise = null;

        this.addingDriverTasksCount = 0;

        this.debugging = this.opts.debugMode;
        this.debugOnFail = this.opts.debugOnFail;
        this.disableDebugBreakpoints = false;
        this.debugReporterPluginHost = new _pluginHost2.default({ noColors: false });

        this.browserManipulationQueue = new BrowserManipulationQueue(browserConnection, screenshotCapturer, warningLog);

        this.debugLog = new _debugLog2.default(this.browserConnection.userAgent);

        this.quarantine = null;

        this.warningLog = warningLog;

        this.injectable.scripts.push('/testcafe-core.js');
        this.injectable.scripts.push('/testcafe-ui.js');
        this.injectable.scripts.push('/testcafe-automation.js');
        this.injectable.scripts.push('/testcafe-driver.js');
        this.injectable.styles.push('/testcafe-ui-styles.css');

        this.requestHooks = (0, _from2.default)(this.test.requestHooks);

        this._initRequestHooks();
    }

    get id() {
        return this.session.id;
    }

    get injectable() {
        return this.session.injectable;
    }

    addQuarantineInfo(quarantine) {
        this.quarantine = quarantine;
    }

    addRequestHook(hook) {
        if (this.requestHooks.indexOf(hook) !== -1) return;

        this.requestHooks.push(hook);
        this._initRequestHook(hook);
    }

    removeRequestHook(hook) {
        if (this.requestHooks.indexOf(hook) === -1) return;

        (0, _lodash.pull)(this.requestHooks, hook);
        this._disposeRequestHook(hook);
    }

    _initRequestHook(hook) {
        hook.warningLog = this.warningLog;

        hook._instantiateRequestFilterRules();
        hook._instantiatedRequestFilterRules.forEach(rule => {
            this.session.addRequestEventListeners(rule, {
                onRequest: hook.onRequest.bind(hook),
                onConfigureResponse: hook._onConfigureResponse.bind(hook),
                onResponse: hook.onResponse.bind(hook)
            });
        });
    }

    _disposeRequestHook(hook) {
        hook.warningLog = null;

        hook._instantiatedRequestFilterRules.forEach(rule => {
            this.session.removeRequestEventListeners(rule);
        });
    }

    _initRequestHooks() {
        this.requestHooks.forEach(hook => this._initRequestHook(hook));
    }

    // Hammerhead payload
    _getPayloadScript() {
        this.fileDownloadingHandled = false;
        this.resolveWaitForFileDownloadingPromise = null;

        return _mustache2.default.render(TEST_RUN_TEMPLATE, {
            testRunId: (0, _stringify2.default)(this.session.id),
            browserId: (0, _stringify2.default)(this.browserConnection.id),
            browserHeartbeatRelativeUrl: (0, _stringify2.default)(this.browserConnection.heartbeatRelativeUrl),
            browserStatusRelativeUrl: (0, _stringify2.default)(this.browserConnection.statusRelativeUrl),
            browserStatusDoneRelativeUrl: (0, _stringify2.default)(this.browserConnection.statusDoneRelativeUrl),
            userAgent: (0, _stringify2.default)(this.browserConnection.userAgent),
            testName: (0, _stringify2.default)(this.test.name),
            fixtureName: (0, _stringify2.default)(this.test.fixture.name),
            selectorTimeout: this.opts.selectorTimeout,
            pageLoadTimeout: this.pageLoadTimeout,
            skipJsErrors: this.opts.skipJsErrors,
            retryTestPages: !!this.opts.retryTestPages,
            speed: this.speed,
            dialogHandler: (0, _stringify2.default)(this.activeDialogHandler)
        });
    }

    _getIframePayloadScript() {
        return _mustache2.default.render(IFRAME_TEST_RUN_TEMPLATE, {
            testRunId: (0, _stringify2.default)(this.session.id),
            selectorTimeout: this.opts.selectorTimeout,
            pageLoadTimeout: this.pageLoadTimeout,
            retryTestPages: !!this.opts.retryTestPages,
            speed: this.speed,
            dialogHandler: (0, _stringify2.default)(this.activeDialogHandler)
        });
    }

    // Hammerhead handlers
    getAuthCredentials() {
        return this.test.authCredentials;
    }

    handleFileDownload() {
        if (this.resolveWaitForFileDownloadingPromise) {
            this.resolveWaitForFileDownloadingPromise(true);
            this.resolveWaitForFileDownloadingPromise = null;
        } else this.fileDownloadingHandled = true;
    }

    handlePageError(ctx, err) {
        if (ctx.req.headers[_unstableNetworkMode.UNSTABLE_NETWORK_MODE_HEADER]) {
            ctx.closeWithError(500, err.toString());
            return;
        }

        this.pendingPageError = new _testRun.PageLoadError(err);

        ctx.redirect(ctx.toProxyUrl('about:error'));
    }

    // Test function execution
    _executeTestFn(phase, fn) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this.phase = phase;

            try {
                yield fn(_this);
            } catch (err) {
                let screenshotPath = null;

                if (_this.opts.takeScreenshotsOnFails) screenshotPath = yield _this.executeCommand(new browserManipulationCommands.TakeScreenshotOnFailCommand());

                _this.addError(err, screenshotPath);
                return false;
            }

            return !_this._addPendingPageErrorIfAny();
        })();
    }

    _runBeforeHook() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this2.test.beforeFn) return yield _this2._executeTestFn(_phase2.default.inTestBeforeHook, _this2.test.beforeFn);

            if (_this2.test.fixture.beforeEachFn) return yield _this2._executeTestFn(_phase2.default.inFixtureBeforeEachHook, _this2.test.fixture.beforeEachFn);

            return true;
        })();
    }

    _runAfterHook() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this3.test.afterFn) return yield _this3._executeTestFn(_phase2.default.inTestAfterHook, _this3.test.afterFn);

            if (_this3.test.fixture.afterEachFn) return yield _this3._executeTestFn(_phase2.default.inFixtureAfterEachHook, _this3.test.fixture.afterEachFn);

            return true;
        })();
    }

    start() {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _testRunTracker2.default.activeTestRuns[_this4.session.id] = _this4;

            _this4.emit('start');

            const onDisconnected = function onDisconnected(err) {
                return _this4._disconnect(err);
            };

            _this4.browserConnection.once('disconnected', onDisconnected);

            if (yield _this4._runBeforeHook()) {
                yield _this4._executeTestFn(_phase2.default.inTest, _this4.test.fn);
                yield _this4._runAfterHook();
            }

            if (_this4.disconnected) return;

            _this4.browserConnection.removeListener('disconnected', onDisconnected);

            if (_this4.errs.length && _this4.debugOnFail) yield _this4._enqueueSetBreakpointCommand(null, _this4.debugReporterPluginHost.formatError(_this4.errs[0]));

            yield _this4.executeCommand(new serviceCommands.TestDoneCommand());

            _this4._addPendingPageErrorIfAny();

            delete _testRunTracker2.default.activeTestRuns[_this4.session.id];

            _this4.emit('done');
        })();
    }

    _evaluate(code) {
        try {
            return executeJsExpression(code, this, { skipVisibilityCheck: false });
        } catch (err) {
            return { err };
        }
    }

    // Errors
    _addPendingPageErrorIfAny() {
        if (this.pendingPageError) {
            this.addError(this.pendingPageError);
            this.pendingPageError = null;
            return true;
        }

        return false;
    }

    addError(err, screenshotPath) {
        const errList = err instanceof _errorList2.default ? err.items : [err];

        errList.forEach(item => {
            const adapter = new _formattableAdapter2.default(item, {
                userAgent: this.browserConnection.userAgent,
                screenshotPath: screenshotPath || '',
                testRunPhase: this.phase
            });

            this.errs.push(adapter);
        });
    }

    // Task queue
    _enqueueCommand(command, callsite) {
        if (this.pendingRequest) this._resolvePendingRequest(command);

        return new _pinkie2.default((resolve, reject) => {
            this.addingDriverTasksCount--;
            this.driverTaskQueue.push({ command, resolve, reject, callsite });

            if (!this.addingDriverTasksCount) this.emit(ALL_DRIVER_TASKS_ADDED_TO_QUEUE_EVENT, this.driverTaskQueue.length);
        });
    }

    get driverTaskQueueLength() {
        return this.addingDriverTasksCount ? (0, _promisifyEvent2.default)(this, ALL_DRIVER_TASKS_ADDED_TO_QUEUE_EVENT) : _pinkie2.default.resolve(this.driverTaskQueue.length);
    }

    _enqueueBrowserConsoleMessagesCommand(command, callsite) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this5._enqueueCommand(command, callsite);

            return _this5.consoleMessages.getCopy();
        })();
    }

    _enqueueSetBreakpointCommand(callsite, error) {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this6.browserConnection.isHeadlessBrowser()) {
                _this6.warningLog.addWarning(_warningMessage2.default.debugInHeadlessError);
                return;
            }

            _debugLogger2.default.showBreakpoint(_this6.session.id, _this6.browserConnection.userAgent, callsite, error);

            _this6.debugging = yield _this6.executeCommand(new serviceCommands.SetBreakpointCommand(!!error), callsite);
        })();
    }

    _removeAllNonServiceTasks() {
        this.driverTaskQueue = this.driverTaskQueue.filter(driverTask => (0, _utils.isServiceCommand)(driverTask.command));

        this.browserManipulationQueue.removeAllNonServiceManipulations();
    }

    // Current driver task
    get currentDriverTask() {
        return this.driverTaskQueue[0];
    }

    _resolveCurrentDriverTask(result) {
        this.currentDriverTask.resolve(result);
        this.driverTaskQueue.shift();

        if (this.testDoneCommandQueued) this._removeAllNonServiceTasks();
    }

    _rejectCurrentDriverTask(err) {
        err.callsite = err.callsite || this.currentDriverTask.callsite;
        err.isRejectedDriverTask = true;

        this.currentDriverTask.reject(err);
        this._removeAllNonServiceTasks();
    }

    // Pending request
    _clearPendingRequest() {
        if (this.pendingRequest) {
            clearTimeout(this.pendingRequest.responseTimeout);
            this.pendingRequest = null;
        }
    }

    _resolvePendingRequest(command) {
        this.lastDriverStatusResponse = command;
        this.pendingRequest.resolve(command);
        this._clearPendingRequest();
    }

    // Handle driver request
    _fulfillCurrentDriverTask(driverStatus) {
        if (driverStatus.executionError) this._rejectCurrentDriverTask(driverStatus.executionError);else this._resolveCurrentDriverTask(driverStatus.result);
    }

    _handlePageErrorStatus(pageError) {
        if (this.currentDriverTask && (0, _utils.isCommandRejectableByPageError)(this.currentDriverTask.command)) {
            this._rejectCurrentDriverTask(pageError);
            this.pendingPageError = null;

            return true;
        }

        this.pendingPageError = this.pendingPageError || pageError;

        return false;
    }

    _handleDriverRequest(driverStatus) {
        const isTestDone = this.currentDriverTask && this.currentDriverTask.command.type === _type2.default.testDone;
        const pageError = this.pendingPageError || driverStatus.pageError;
        const currentTaskRejectedByError = pageError && this._handlePageErrorStatus(pageError);

        if (this.disconnected) return new _pinkie2.default((_, reject) => reject());

        this.consoleMessages.concat(driverStatus.consoleMessages);

        if (!currentTaskRejectedByError && driverStatus.isCommandResult) {
            if (isTestDone) {
                this._resolveCurrentDriverTask();

                return TEST_DONE_CONFIRMATION_RESPONSE;
            }

            this._fulfillCurrentDriverTask(driverStatus);
        }

        return this._getCurrentDriverTaskCommand();
    }

    _getCurrentDriverTaskCommand() {
        if (!this.currentDriverTask) return null;

        const command = this.currentDriverTask.command;

        if (command.type === _type2.default.navigateTo && command.stateSnapshot) this.session.useStateSnapshot(JSON.parse(command.stateSnapshot));

        return command;
    }

    // Execute command
    _executeExpression(command) {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const resultVariableName = command.resultVariableName,
                  isAsyncExpression = command.isAsyncExpression;


            let expression = command.expression;

            if (isAsyncExpression) expression = `await ${expression}`;

            if (resultVariableName) expression = `${resultVariableName} = ${expression}, ${resultVariableName}`;

            if (isAsyncExpression) expression = `(async () => { return ${expression}; }).apply(this);`;

            const result = _this7._evaluate(expression);

            return isAsyncExpression ? yield result : result;
        })();
    }

    _executeAssertion(command, callsite) {
        var _this8 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const assertionTimeout = command.options.timeout === void 0 ? _this8.opts.assertionTimeout : command.options.timeout;
            const executor = new AssertionExecutor(command, assertionTimeout, callsite);

            executor.once('start-assertion-retries', function (timeout) {
                return _this8.executeCommand(new serviceCommands.ShowAssertionRetriesStatusCommand(timeout));
            });
            executor.once('end-assertion-retries', function (success) {
                return _this8.executeCommand(new serviceCommands.HideAssertionRetriesStatusCommand(success));
            });

            return executor.run();
        })();
    }

    _adjustConfigurationWithCommand(command) {
        if (command.type === _type2.default.testDone) {
            this.testDoneCommandQueued = true;
            _debugLogger2.default.hideBreakpoint(this.session.id);
        } else if (command.type === _type2.default.setNativeDialogHandler) this.activeDialogHandler = command.dialogHandler;else if (command.type === _type2.default.switchToIframe) this.activeIframeSelector = command.selector;else if (command.type === _type2.default.switchToMainWindow) this.activeIframeSelector = null;else if (command.type === _type2.default.setTestSpeed) this.speed = command.speed;else if (command.type === _type2.default.setPageLoadTimeout) this.pageLoadTimeout = command.duration;else if (command.type === _type2.default.debug) this.debugging = true;
    }

    _adjustScreenshotCommand(command) {
        var _this9 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const browserId = _this9.browserConnection.id;

            var _ref = yield _this9.browserConnection.provider.hasCustomActionForBrowser(browserId);

            const hasChromelessScreenshots = _ref.hasChromelessScreenshots;


            if (!hasChromelessScreenshots) command.generateScreenshotMark();
        })();
    }

    _setBreakpointIfNecessary(command, callsite) {
        var _this10 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this10.disableDebugBreakpoints && _this10.debugging && (0, _utils.canSetDebuggerBreakpointBeforeCommand)(command)) yield _this10._enqueueSetBreakpointCommand(callsite);
        })();
    }

    executeCommand(command, callsite) {
        var _this11 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this11.debugLog.command(command);

            if (_this11.pendingPageError && (0, _utils.isCommandRejectableByPageError)(command)) return _this11._rejectCommandWithPageError(callsite);

            if ((0, _utils.isExecutableOnClientCommand)(command)) _this11.addingDriverTasksCount++;

            _this11._adjustConfigurationWithCommand(command);

            yield _this11._setBreakpointIfNecessary(command, callsite);

            if ((0, _utils.isScreenshotCommand)(command)) yield _this11._adjustScreenshotCommand(command);

            if ((0, _utils.isBrowserManipulationCommand)(command)) _this11.browserManipulationQueue.push(command);

            if (command.type === _type2.default.wait) return (0, _delay2.default)(command.timeout);

            if (command.type === _type2.default.setPageLoadTimeout) return null;

            if (command.type === _type2.default.debug) return yield _this11._enqueueSetBreakpointCommand(callsite);

            if (command.type === _type2.default.useRole) return yield _this11._useRole(command.role, callsite);

            if (command.type === _type2.default.assertion) return _this11._executeAssertion(command, callsite);

            if (command.type === _type2.default.executeExpression) return yield _this11._executeExpression(command, callsite);

            if (command.type === _type2.default.getBrowserConsoleMessages) return yield _this11._enqueueBrowserConsoleMessagesCommand(command, callsite);

            return _this11._enqueueCommand(command, callsite);
        })();
    }

    _rejectCommandWithPageError(callsite) {
        const err = this.pendingPageError;

        err.callsite = callsite;
        this.pendingPageError = null;

        return _pinkie2.default.reject(err);
    }

    // Role management
    getStateSnapshot() {
        var _this12 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const state = _this12.session.getStateSnapshot();

            state.storages = yield _this12.executeCommand(new serviceCommands.BackupStoragesCommand());

            return state;
        })();
    }

    switchToCleanRun() {
        var _this13 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this13.ctx = (0, _create2.default)(null);
            _this13.fixtureCtx = (0, _create2.default)(null);
            _this13.consoleMessages = new _browserConsoleMessages2.default();

            _this13.session.useStateSnapshot(null);

            if (_this13.activeDialogHandler) {
                const removeDialogHandlerCommand = new actionCommands.SetNativeDialogHandlerCommand({ dialogHandler: { fn: null } });

                yield _this13.executeCommand(removeDialogHandlerCommand);
            }

            if (_this13.speed !== _this13.opts.speed) {
                const setSpeedCommand = new actionCommands.SetTestSpeedCommand({ speed: _this13.opts.speed });

                yield _this13.executeCommand(setSpeedCommand);
            }

            if (_this13.pageLoadTimeout !== _this13.opts.pageLoadTimeout) {
                const setPageLoadTimeoutCommand = new actionCommands.SetPageLoadTimeoutCommand({ duration: _this13.opts.pageLoadTimeout });

                yield _this13.executeCommand(setPageLoadTimeoutCommand);
            }
        })();
    }

    _getStateSnapshotFromRole(role) {
        var _this14 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const prevPhase = _this14.phase;

            _this14.phase = _phase2.default.inRoleInitializer;

            if (role.phase === _phase4.default.uninitialized) yield role.initialize(_this14);else if (role.phase === _phase4.default.pendingInitialization) yield (0, _promisifyEvent2.default)(role, 'initialized');

            if (role.initErr) throw role.initErr;

            _this14.phase = prevPhase;

            return role.stateSnapshot;
        })();
    }

    _useRole(role, callsite) {
        var _this15 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this15.phase === _phase2.default.inRoleInitializer) throw new _testRun.RoleSwitchInRoleInitializerError(callsite);

            _this15.disableDebugBreakpoints = true;

            const bookmark = new TestRunBookmark(_this15, role);

            yield bookmark.init();

            if (_this15.currentRoleId) _this15.usedRoleStates[_this15.currentRoleId] = yield _this15.getStateSnapshot();

            const stateSnapshot = _this15.usedRoleStates[role.id] || (yield _this15._getStateSnapshotFromRole(role));

            _this15.session.useStateSnapshot(stateSnapshot);

            _this15.currentRoleId = role.id;

            yield bookmark.restore(callsite, stateSnapshot);

            _this15.disableDebugBreakpoints = false;
        })();
    }

    // Get current URL
    getCurrentUrl() {
        var _this16 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const builder = new ClientFunctionBuilder(function () {
                /* eslint-disable no-undef */
                return window.location.href;
                /* eslint-enable no-undef */
            }, { boundTestRun: _this16 });

            const getLocation = builder.getFunction();

            return yield getLocation();
        })();
    }

    _disconnect(err) {
        this.disconnected = true;

        this._rejectCurrentDriverTask(err);

        this.emit('disconnected', err);

        delete _testRunTracker2.default.activeTestRuns[this.session.id];
    }
}

exports.default = TestRun; // Service message handlers

const ServiceMessages = TestRun.prototype;

ServiceMessages[_clientMessages2.default.ready] = function (msg) {
    this.debugLog.driverMessage(msg);

    this._clearPendingRequest();

    // NOTE: the driver sends the status for the second time if it didn't get a response at the
    // first try. This is possible when the page was unloaded after the driver sent the status.
    if (msg.status.id === this.lastDriverStatusId) return this.lastDriverStatusResponse;

    this.lastDriverStatusId = msg.status.id;
    this.lastDriverStatusResponse = this._handleDriverRequest(msg.status);

    if (this.lastDriverStatusResponse) return this.lastDriverStatusResponse;

    // NOTE: we send an empty response after the MAX_RESPONSE_DELAY timeout is exceeded to keep connection
    // with the client and prevent the response timeout exception on the client side
    const responseTimeout = setTimeout(() => this._resolvePendingRequest(null), MAX_RESPONSE_DELAY);

    return new _pinkie2.default((resolve, reject) => {
        this.pendingRequest = { resolve, reject, responseTimeout };
    });
};

ServiceMessages[_clientMessages2.default.readyForBrowserManipulation] = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (msg) {
        this.debugLog.driverMessage(msg);

        let result = null;
        let error = null;

        try {
            result = yield this.browserManipulationQueue.executePendingManipulation(msg);
        } catch (err) {
            error = err;
        }

        return { result, error };
    });

    return function (_x) {
        return _ref2.apply(this, arguments);
    };
})();

ServiceMessages[_clientMessages2.default.waitForFileDownload] = function (msg) {
    this.debugLog.driverMessage(msg);

    return new _pinkie2.default(resolve => {
        if (this.fileDownloadingHandled) {
            this.fileDownloadingHandled = false;
            resolve(true);
        } else this.resolveWaitForFileDownloadingPromise = resolve;
    });
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0LXJ1bi9pbmRleC5qcyJdLCJuYW1lcyI6WyJsYXp5UmVxdWlyZSIsInJlcXVpcmUiLCJTZXNzaW9uQ29udHJvbGxlciIsIkNsaWVudEZ1bmN0aW9uQnVpbGRlciIsImV4ZWN1dGVKc0V4cHJlc3Npb24iLCJCcm93c2VyTWFuaXB1bGF0aW9uUXVldWUiLCJUZXN0UnVuQm9va21hcmsiLCJBc3NlcnRpb25FeGVjdXRvciIsImFjdGlvbkNvbW1hbmRzIiwiYnJvd3Nlck1hbmlwdWxhdGlvbkNvbW1hbmRzIiwic2VydmljZUNvbW1hbmRzIiwiVEVTVF9SVU5fVEVNUExBVEUiLCJJRlJBTUVfVEVTVF9SVU5fVEVNUExBVEUiLCJURVNUX0RPTkVfQ09ORklSTUFUSU9OX1JFU1BPTlNFIiwiTUFYX1JFU1BPTlNFX0RFTEFZIiwiQUxMX0RSSVZFUl9UQVNLU19BRERFRF9UT19RVUVVRV9FVkVOVCIsIlRlc3RSdW4iLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsInRlc3QiLCJicm93c2VyQ29ubmVjdGlvbiIsInNjcmVlbnNob3RDYXB0dXJlciIsIndhcm5pbmdMb2ciLCJvcHRzIiwidGVzdFJ1bk1hcmtlciIsInBoYXNlIiwiUEhBU0UiLCJpbml0aWFsIiwiZHJpdmVyVGFza1F1ZXVlIiwidGVzdERvbmVDb21tYW5kUXVldWVkIiwiYWN0aXZlRGlhbG9nSGFuZGxlciIsImFjdGl2ZUlmcmFtZVNlbGVjdG9yIiwic3BlZWQiLCJwYWdlTG9hZFRpbWVvdXQiLCJkaXNhYmxlUGFnZVJlbG9hZHMiLCJzZXNzaW9uIiwiZ2V0U2Vzc2lvbiIsImNvbnNvbGVNZXNzYWdlcyIsIkJyb3dzZXJDb25zb2xlTWVzc2FnZXMiLCJwZW5kaW5nUmVxdWVzdCIsInBlbmRpbmdQYWdlRXJyb3IiLCJjb250cm9sbGVyIiwiY3R4IiwiZml4dHVyZUN0eCIsImN1cnJlbnRSb2xlSWQiLCJ1c2VkUm9sZVN0YXRlcyIsImVycnMiLCJsYXN0RHJpdmVyU3RhdHVzSWQiLCJsYXN0RHJpdmVyU3RhdHVzUmVzcG9uc2UiLCJmaWxlRG93bmxvYWRpbmdIYW5kbGVkIiwicmVzb2x2ZVdhaXRGb3JGaWxlRG93bmxvYWRpbmdQcm9taXNlIiwiYWRkaW5nRHJpdmVyVGFza3NDb3VudCIsImRlYnVnZ2luZyIsImRlYnVnTW9kZSIsImRlYnVnT25GYWlsIiwiZGlzYWJsZURlYnVnQnJlYWtwb2ludHMiLCJkZWJ1Z1JlcG9ydGVyUGx1Z2luSG9zdCIsIlJlcG9ydGVyUGx1Z2luSG9zdCIsIm5vQ29sb3JzIiwiYnJvd3Nlck1hbmlwdWxhdGlvblF1ZXVlIiwiZGVidWdMb2ciLCJUZXN0UnVuRGVidWdMb2ciLCJ1c2VyQWdlbnQiLCJxdWFyYW50aW5lIiwiaW5qZWN0YWJsZSIsInNjcmlwdHMiLCJwdXNoIiwic3R5bGVzIiwicmVxdWVzdEhvb2tzIiwiX2luaXRSZXF1ZXN0SG9va3MiLCJpZCIsImFkZFF1YXJhbnRpbmVJbmZvIiwiYWRkUmVxdWVzdEhvb2siLCJob29rIiwiaW5kZXhPZiIsIl9pbml0UmVxdWVzdEhvb2siLCJyZW1vdmVSZXF1ZXN0SG9vayIsIl9kaXNwb3NlUmVxdWVzdEhvb2siLCJfaW5zdGFudGlhdGVSZXF1ZXN0RmlsdGVyUnVsZXMiLCJfaW5zdGFudGlhdGVkUmVxdWVzdEZpbHRlclJ1bGVzIiwiZm9yRWFjaCIsInJ1bGUiLCJhZGRSZXF1ZXN0RXZlbnRMaXN0ZW5lcnMiLCJvblJlcXVlc3QiLCJiaW5kIiwib25Db25maWd1cmVSZXNwb25zZSIsIl9vbkNvbmZpZ3VyZVJlc3BvbnNlIiwib25SZXNwb25zZSIsInJlbW92ZVJlcXVlc3RFdmVudExpc3RlbmVycyIsIl9nZXRQYXlsb2FkU2NyaXB0IiwiTXVzdGFjaGUiLCJyZW5kZXIiLCJ0ZXN0UnVuSWQiLCJicm93c2VySWQiLCJicm93c2VySGVhcnRiZWF0UmVsYXRpdmVVcmwiLCJoZWFydGJlYXRSZWxhdGl2ZVVybCIsImJyb3dzZXJTdGF0dXNSZWxhdGl2ZVVybCIsInN0YXR1c1JlbGF0aXZlVXJsIiwiYnJvd3NlclN0YXR1c0RvbmVSZWxhdGl2ZVVybCIsInN0YXR1c0RvbmVSZWxhdGl2ZVVybCIsInRlc3ROYW1lIiwibmFtZSIsImZpeHR1cmVOYW1lIiwiZml4dHVyZSIsInNlbGVjdG9yVGltZW91dCIsInNraXBKc0Vycm9ycyIsInJldHJ5VGVzdFBhZ2VzIiwiZGlhbG9nSGFuZGxlciIsIl9nZXRJZnJhbWVQYXlsb2FkU2NyaXB0IiwiZ2V0QXV0aENyZWRlbnRpYWxzIiwiYXV0aENyZWRlbnRpYWxzIiwiaGFuZGxlRmlsZURvd25sb2FkIiwiaGFuZGxlUGFnZUVycm9yIiwiZXJyIiwicmVxIiwiaGVhZGVycyIsIlVOU1RBQkxFX05FVFdPUktfTU9ERV9IRUFERVIiLCJjbG9zZVdpdGhFcnJvciIsInRvU3RyaW5nIiwiUGFnZUxvYWRFcnJvciIsInJlZGlyZWN0IiwidG9Qcm94eVVybCIsIl9leGVjdXRlVGVzdEZuIiwiZm4iLCJzY3JlZW5zaG90UGF0aCIsInRha2VTY3JlZW5zaG90c09uRmFpbHMiLCJleGVjdXRlQ29tbWFuZCIsIlRha2VTY3JlZW5zaG90T25GYWlsQ29tbWFuZCIsImFkZEVycm9yIiwiX2FkZFBlbmRpbmdQYWdlRXJyb3JJZkFueSIsIl9ydW5CZWZvcmVIb29rIiwiYmVmb3JlRm4iLCJpblRlc3RCZWZvcmVIb29rIiwiYmVmb3JlRWFjaEZuIiwiaW5GaXh0dXJlQmVmb3JlRWFjaEhvb2siLCJfcnVuQWZ0ZXJIb29rIiwiYWZ0ZXJGbiIsImluVGVzdEFmdGVySG9vayIsImFmdGVyRWFjaEZuIiwiaW5GaXh0dXJlQWZ0ZXJFYWNoSG9vayIsInN0YXJ0IiwidGVzdFJ1blRyYWNrZXIiLCJhY3RpdmVUZXN0UnVucyIsImVtaXQiLCJvbkRpc2Nvbm5lY3RlZCIsIl9kaXNjb25uZWN0Iiwib25jZSIsImluVGVzdCIsImRpc2Nvbm5lY3RlZCIsInJlbW92ZUxpc3RlbmVyIiwibGVuZ3RoIiwiX2VucXVldWVTZXRCcmVha3BvaW50Q29tbWFuZCIsImZvcm1hdEVycm9yIiwiVGVzdERvbmVDb21tYW5kIiwiX2V2YWx1YXRlIiwiY29kZSIsInNraXBWaXNpYmlsaXR5Q2hlY2siLCJlcnJMaXN0IiwiVGVzdENhZmVFcnJvckxpc3QiLCJpdGVtcyIsIml0ZW0iLCJhZGFwdGVyIiwiVGVzdFJ1bkVycm9yRm9ybWF0dGFibGVBZGFwdGVyIiwidGVzdFJ1blBoYXNlIiwiX2VucXVldWVDb21tYW5kIiwiY29tbWFuZCIsImNhbGxzaXRlIiwiX3Jlc29sdmVQZW5kaW5nUmVxdWVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZHJpdmVyVGFza1F1ZXVlTGVuZ3RoIiwiX2VucXVldWVCcm93c2VyQ29uc29sZU1lc3NhZ2VzQ29tbWFuZCIsImdldENvcHkiLCJlcnJvciIsImlzSGVhZGxlc3NCcm93c2VyIiwiYWRkV2FybmluZyIsIldBUk5JTkdfTUVTU0FHRSIsImRlYnVnSW5IZWFkbGVzc0Vycm9yIiwiZGVidWdMb2dnZXIiLCJzaG93QnJlYWtwb2ludCIsIlNldEJyZWFrcG9pbnRDb21tYW5kIiwiX3JlbW92ZUFsbE5vblNlcnZpY2VUYXNrcyIsImZpbHRlciIsImRyaXZlclRhc2siLCJyZW1vdmVBbGxOb25TZXJ2aWNlTWFuaXB1bGF0aW9ucyIsImN1cnJlbnREcml2ZXJUYXNrIiwiX3Jlc29sdmVDdXJyZW50RHJpdmVyVGFzayIsInJlc3VsdCIsInNoaWZ0IiwiX3JlamVjdEN1cnJlbnREcml2ZXJUYXNrIiwiaXNSZWplY3RlZERyaXZlclRhc2siLCJfY2xlYXJQZW5kaW5nUmVxdWVzdCIsImNsZWFyVGltZW91dCIsInJlc3BvbnNlVGltZW91dCIsIl9mdWxmaWxsQ3VycmVudERyaXZlclRhc2siLCJkcml2ZXJTdGF0dXMiLCJleGVjdXRpb25FcnJvciIsIl9oYW5kbGVQYWdlRXJyb3JTdGF0dXMiLCJwYWdlRXJyb3IiLCJfaGFuZGxlRHJpdmVyUmVxdWVzdCIsImlzVGVzdERvbmUiLCJ0eXBlIiwiQ09NTUFORF9UWVBFIiwidGVzdERvbmUiLCJjdXJyZW50VGFza1JlamVjdGVkQnlFcnJvciIsIl8iLCJjb25jYXQiLCJpc0NvbW1hbmRSZXN1bHQiLCJfZ2V0Q3VycmVudERyaXZlclRhc2tDb21tYW5kIiwibmF2aWdhdGVUbyIsInN0YXRlU25hcHNob3QiLCJ1c2VTdGF0ZVNuYXBzaG90IiwiSlNPTiIsInBhcnNlIiwiX2V4ZWN1dGVFeHByZXNzaW9uIiwicmVzdWx0VmFyaWFibGVOYW1lIiwiaXNBc3luY0V4cHJlc3Npb24iLCJleHByZXNzaW9uIiwiX2V4ZWN1dGVBc3NlcnRpb24iLCJhc3NlcnRpb25UaW1lb3V0Iiwib3B0aW9ucyIsInRpbWVvdXQiLCJleGVjdXRvciIsIlNob3dBc3NlcnRpb25SZXRyaWVzU3RhdHVzQ29tbWFuZCIsIkhpZGVBc3NlcnRpb25SZXRyaWVzU3RhdHVzQ29tbWFuZCIsInN1Y2Nlc3MiLCJydW4iLCJfYWRqdXN0Q29uZmlndXJhdGlvbldpdGhDb21tYW5kIiwiaGlkZUJyZWFrcG9pbnQiLCJzZXROYXRpdmVEaWFsb2dIYW5kbGVyIiwic3dpdGNoVG9JZnJhbWUiLCJzZWxlY3RvciIsInN3aXRjaFRvTWFpbldpbmRvdyIsInNldFRlc3RTcGVlZCIsInNldFBhZ2VMb2FkVGltZW91dCIsImR1cmF0aW9uIiwiZGVidWciLCJfYWRqdXN0U2NyZWVuc2hvdENvbW1hbmQiLCJwcm92aWRlciIsImhhc0N1c3RvbUFjdGlvbkZvckJyb3dzZXIiLCJoYXNDaHJvbWVsZXNzU2NyZWVuc2hvdHMiLCJnZW5lcmF0ZVNjcmVlbnNob3RNYXJrIiwiX3NldEJyZWFrcG9pbnRJZk5lY2Vzc2FyeSIsIl9yZWplY3RDb21tYW5kV2l0aFBhZ2VFcnJvciIsIndhaXQiLCJ1c2VSb2xlIiwiX3VzZVJvbGUiLCJyb2xlIiwiYXNzZXJ0aW9uIiwiZXhlY3V0ZUV4cHJlc3Npb24iLCJnZXRCcm93c2VyQ29uc29sZU1lc3NhZ2VzIiwiZ2V0U3RhdGVTbmFwc2hvdCIsInN0YXRlIiwic3RvcmFnZXMiLCJCYWNrdXBTdG9yYWdlc0NvbW1hbmQiLCJzd2l0Y2hUb0NsZWFuUnVuIiwicmVtb3ZlRGlhbG9nSGFuZGxlckNvbW1hbmQiLCJTZXROYXRpdmVEaWFsb2dIYW5kbGVyQ29tbWFuZCIsInNldFNwZWVkQ29tbWFuZCIsIlNldFRlc3RTcGVlZENvbW1hbmQiLCJzZXRQYWdlTG9hZFRpbWVvdXRDb21tYW5kIiwiU2V0UGFnZUxvYWRUaW1lb3V0Q29tbWFuZCIsIl9nZXRTdGF0ZVNuYXBzaG90RnJvbVJvbGUiLCJwcmV2UGhhc2UiLCJpblJvbGVJbml0aWFsaXplciIsIlJPTEVfUEhBU0UiLCJ1bmluaXRpYWxpemVkIiwiaW5pdGlhbGl6ZSIsInBlbmRpbmdJbml0aWFsaXphdGlvbiIsImluaXRFcnIiLCJSb2xlU3dpdGNoSW5Sb2xlSW5pdGlhbGl6ZXJFcnJvciIsImJvb2ttYXJrIiwiaW5pdCIsInJlc3RvcmUiLCJnZXRDdXJyZW50VXJsIiwiYnVpbGRlciIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImJvdW5kVGVzdFJ1biIsImdldExvY2F0aW9uIiwiZ2V0RnVuY3Rpb24iLCJTZXJ2aWNlTWVzc2FnZXMiLCJwcm90b3R5cGUiLCJDTElFTlRfTUVTU0FHRVMiLCJyZWFkeSIsIm1zZyIsImRyaXZlck1lc3NhZ2UiLCJzdGF0dXMiLCJzZXRUaW1lb3V0IiwicmVhZHlGb3JCcm93c2VyTWFuaXB1bGF0aW9uIiwiZXhlY3V0ZVBlbmRpbmdNYW5pcHVsYXRpb24iLCJ3YWl0Rm9yRmlsZURvd25sb2FkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUVBOzs7O0FBU0EsTUFBTUEsY0FBOEJDLFFBQVEsYUFBUixFQUF1QkEsT0FBdkIsQ0FBcEM7QUFDQSxNQUFNQyxvQkFB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SCxzQkFBVCxFQUFpQztBQUM3QixpQkFBS0Esc0JBQUwsR0FBOEIsS0FBOUI7QUFDQXdILG9CQUFRLElBQVI7QUFDSCxTQUhELE1BS0ksS0FBS3ZILG9DQUFMLEdBQTRDdUgsT0FBNUM7QUFDUCxLQVBNLENBQVA7QUFRSCxDQVhEIiwiZmlsZSI6InRlc3QtcnVuL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgcHVsbCBhcyByZW1vdmUgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgcmVhZFN5bmMgYXMgcmVhZCB9IGZyb20gJ3JlYWQtZmlsZS1yZWxhdGl2ZSc7XG5pbXBvcnQgcHJvbWlzaWZ5RXZlbnQgZnJvbSAncHJvbWlzaWZ5LWV2ZW50JztcbmltcG9ydCBQcm9taXNlIGZyb20gJ3BpbmtpZSc7XG5pbXBvcnQgTXVzdGFjaGUgZnJvbSAnbXVzdGFjaGUnO1xuaW1wb3J0IGRlYnVnTG9nZ2VyIGZyb20gJy4uL25vdGlmaWNhdGlvbnMvZGVidWctbG9nZ2VyJztcbmltcG9ydCBUZXN0UnVuRGVidWdMb2cgZnJvbSAnLi9kZWJ1Zy1sb2cnO1xuaW1wb3J0IFRlc3RSdW5FcnJvckZvcm1hdHRhYmxlQWRhcHRlciBmcm9tICcuLi9lcnJvcnMvdGVzdC1ydW4vZm9ybWF0dGFibGUtYWRhcHRlcic7XG5pbXBvcnQgVGVzdENhZmVFcnJvckxpc3QgZnJvbSAnLi4vZXJyb3JzL2Vycm9yLWxpc3QnO1xuaW1wb3J0IHsgUGFnZUxvYWRFcnJvciwgUm9sZVN3aXRjaEluUm9sZUluaXRpYWxpemVyRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvdGVzdC1ydW4vJztcbmltcG9ydCBQSEFTRSBmcm9tICcuL3BoYXNlJztcbmltcG9ydCBDTElFTlRfTUVTU0FHRVMgZnJvbSAnLi9jbGllbnQtbWVzc2FnZXMnO1xuaW1wb3J0IENPTU1BTkRfVFlQRSBmcm9tICcuL2NvbW1hbmRzL3R5cGUnO1xuaW1wb3J0IGRlbGF5IGZyb20gJy4uL3V0aWxzL2RlbGF5JztcbmltcG9ydCB0ZXN0UnVuTWFya2VyIGZyb20gJy4vbWFya2VyLXN5bWJvbCc7XG5pbXBvcnQgdGVzdFJ1blRyYWNrZXIgZnJvbSAnLi4vYXBpL3Rlc3QtcnVuLXRyYWNrZXInO1xuaW1wb3J0IFJPTEVfUEhBU0UgZnJvbSAnLi4vcm9sZS9waGFzZSc7XG5pbXBvcnQgUmVwb3J0ZXJQbHVnaW5Ib3N0IGZyb20gJy4uL3JlcG9ydGVyL3BsdWdpbi1ob3N0JztcbmltcG9ydCBCcm93c2VyQ29uc29sZU1lc3NhZ2VzIGZyb20gJy4vYnJvd3Nlci1jb25zb2xlLW1lc3NhZ2VzJztcbmltcG9ydCB7IFVOU1RBQkxFX05FVFdPUktfTU9ERV9IRUFERVIgfSBmcm9tICcuLi9icm93c2VyL2Nvbm5lY3Rpb24vdW5zdGFibGUtbmV0d29yay1tb2RlJztcbmltcG9ydCBXQVJOSU5HX01FU1NBR0UgZnJvbSAnLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLW1lc3NhZ2UnO1xuXG5pbXBvcnQge1xuICAgIGlzQ29tbWFuZFJlamVjdGFibGVCeVBhZ2VFcnJvcixcbiAgICBpc0Jyb3dzZXJNYW5pcHVsYXRpb25Db21tYW5kLFxuICAgIGlzU2NyZWVuc2hvdENvbW1hbmQsXG4gICAgaXNTZXJ2aWNlQ29tbWFuZCxcbiAgICBjYW5TZXREZWJ1Z2dlckJyZWFrcG9pbnRCZWZvcmVDb21tYW5kLFxuICAgIGlzRXhlY3V0YWJsZU9uQ2xpZW50Q29tbWFuZFxufSBmcm9tICcuL2NvbW1hbmRzL3V0aWxzJztcblxuY29uc3QgbGF6eVJlcXVpcmUgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnaW1wb3J0LWxhenknKShyZXF1aXJlKTtcbmNvbnN0IFNlc3Npb25Db250cm9sbGVyICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL3Nlc3Npb24tY29udHJvbGxlcicpO1xuY29uc3QgQ2xpZW50RnVuY3Rpb25CdWlsZGVyICAgICAgID0gbGF6eVJlcXVpcmUoJy4uL2NsaWVudC1mdW5jdGlvbnMvY2xpZW50LWZ1bmN0aW9uLWJ1aWxkZXInKTtcbmNvbnN0IGV4ZWN1dGVKc0V4cHJlc3Npb24gICAgICAgICA9IGxhenlSZXF1aXJlKCcuL2V4ZWN1dGUtanMtZXhwcmVzc2lvbicpO1xuY29uc3QgQnJvd3Nlck1hbmlwdWxhdGlvblF1ZXVlICAgID0gbGF6eVJlcXVpcmUoJy4vYnJvd3Nlci1tYW5pcHVsYXRpb24tcXVldWUnKTtcbmNvbnN0IFRlc3RSdW5Cb29rbWFyayAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL2Jvb2ttYXJrJyk7XG5jb25zdCBBc3NlcnRpb25FeGVjdXRvciAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi4vYXNzZXJ0aW9ucy9leGVjdXRvcicpO1xuY29uc3QgYWN0aW9uQ29tbWFuZHMgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vY29tbWFuZHMvYWN0aW9ucycpO1xuY29uc3QgYnJvd3Nlck1hbmlwdWxhdGlvbkNvbW1hbmRzID0gbGF6eVJlcXVpcmUoJy4vY29tbWFuZHMvYnJvd3Nlci1tYW5pcHVsYXRpb24nKTtcbmNvbnN0IHNlcnZpY2VDb21tYW5kcyAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL2NvbW1hbmRzL3NlcnZpY2UnKTtcblxuXG5jb25zdCBURVNUX1JVTl9URU1QTEFURSAgICAgICAgICAgICAgID0gcmVhZCgnLi4vY2xpZW50L3Rlc3QtcnVuL2luZGV4LmpzLm11c3RhY2hlJyk7XG5jb25zdCBJRlJBTUVfVEVTVF9SVU5fVEVNUExBVEUgICAgICAgID0gcmVhZCgnLi4vY2xpZW50L3Rlc3QtcnVuL2lmcmFtZS5qcy5tdXN0YWNoZScpO1xuY29uc3QgVEVTVF9ET05FX0NPTkZJUk1BVElPTl9SRVNQT05TRSA9ICd0ZXN0LWRvbmUtY29uZmlybWF0aW9uJztcbmNvbnN0IE1BWF9SRVNQT05TRV9ERUxBWSAgICAgICAgICAgICAgPSAzMDAwO1xuXG5jb25zdCBBTExfRFJJVkVSX1RBU0tTX0FEREVEX1RPX1FVRVVFX0VWRU5UID0gJ2FsbC1kcml2ZXItdGFza3MtYWRkZWQtdG8tcXVldWUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXN0UnVuIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvciAodGVzdCwgYnJvd3NlckNvbm5lY3Rpb24sIHNjcmVlbnNob3RDYXB0dXJlciwgd2FybmluZ0xvZywgb3B0cykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXNbdGVzdFJ1bk1hcmtlcl0gPSB0cnVlO1xuXG4gICAgICAgIHRoaXMub3B0cyAgICAgICAgICAgICAgPSBvcHRzO1xuICAgICAgICB0aGlzLnRlc3QgICAgICAgICAgICAgID0gdGVzdDtcbiAgICAgICAgdGhpcy5icm93c2VyQ29ubmVjdGlvbiA9IGJyb3dzZXJDb25uZWN0aW9uO1xuXG4gICAgICAgIHRoaXMucGhhc2UgPSBQSEFTRS5pbml0aWFsO1xuXG4gICAgICAgIHRoaXMuZHJpdmVyVGFza1F1ZXVlICAgICAgID0gW107XG4gICAgICAgIHRoaXMudGVzdERvbmVDb21tYW5kUXVldWVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5hY3RpdmVEaWFsb2dIYW5kbGVyICA9IG51bGw7XG4gICAgICAgIHRoaXMuYWN0aXZlSWZyYW1lU2VsZWN0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLnNwZWVkICAgICAgICAgICAgICAgID0gdGhpcy5vcHRzLnNwZWVkO1xuICAgICAgICB0aGlzLnBhZ2VMb2FkVGltZW91dCAgICAgID0gdGhpcy5vcHRzLnBhZ2VMb2FkVGltZW91dDtcblxuICAgICAgICB0aGlzLmRpc2FibGVQYWdlUmVsb2FkcyA9IHRlc3QuZGlzYWJsZVBhZ2VSZWxvYWRzIHx8IG9wdHMuZGlzYWJsZVBhZ2VSZWxvYWRzICYmIHRlc3QuZGlzYWJsZVBhZ2VSZWxvYWRzICE9PSBmYWxzZTtcblxuICAgICAgICB0aGlzLnNlc3Npb24gPSBTZXNzaW9uQ29udHJvbGxlci5nZXRTZXNzaW9uKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuY29uc29sZU1lc3NhZ2VzID0gbmV3IEJyb3dzZXJDb25zb2xlTWVzc2FnZXMoKTtcblxuICAgICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0ICAgPSBudWxsO1xuICAgICAgICB0aGlzLnBlbmRpbmdQYWdlRXJyb3IgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IG51bGw7XG4gICAgICAgIHRoaXMuY3R4ICAgICAgICA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuZml4dHVyZUN0eCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50Um9sZUlkICA9IG51bGw7XG4gICAgICAgIHRoaXMudXNlZFJvbGVTdGF0ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICAgIHRoaXMuZXJycyA9IFtdO1xuXG4gICAgICAgIHRoaXMubGFzdERyaXZlclN0YXR1c0lkICAgICAgID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0RHJpdmVyU3RhdHVzUmVzcG9uc2UgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZmlsZURvd25sb2FkaW5nSGFuZGxlZCAgICAgICAgICAgICAgID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzb2x2ZVdhaXRGb3JGaWxlRG93bmxvYWRpbmdQcm9taXNlID0gbnVsbDtcblxuICAgICAgICB0aGlzLmFkZGluZ0RyaXZlclRhc2tzQ291bnQgPSAwO1xuXG4gICAgICAgIHRoaXMuZGVidWdnaW5nICAgICAgICAgICAgICAgPSB0aGlzLm9wdHMuZGVidWdNb2RlO1xuICAgICAgICB0aGlzLmRlYnVnT25GYWlsICAgICAgICAgICAgID0gdGhpcy5vcHRzLmRlYnVnT25GYWlsO1xuICAgICAgICB0aGlzLmRpc2FibGVEZWJ1Z0JyZWFrcG9pbnRzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVidWdSZXBvcnRlclBsdWdpbkhvc3QgPSBuZXcgUmVwb3J0ZXJQbHVnaW5Ib3N0KHsgbm9Db2xvcnM6IGZhbHNlIH0pO1xuXG4gICAgICAgIHRoaXMuYnJvd3Nlck1hbmlwdWxhdGlvblF1ZXVlID0gbmV3IEJyb3dzZXJNYW5pcHVsYXRpb25RdWV1ZShicm93c2VyQ29ubmVjdGlvbiwgc2NyZWVuc2hvdENhcHR1cmVyLCB3YXJuaW5nTG9nKTtcblxuICAgICAgICB0aGlzLmRlYnVnTG9nID0gbmV3IFRlc3RSdW5EZWJ1Z0xvZyh0aGlzLmJyb3dzZXJDb25uZWN0aW9uLnVzZXJBZ2VudCk7XG5cbiAgICAgICAgdGhpcy5xdWFyYW50aW5lID0gbnVsbDtcblxuICAgICAgICB0aGlzLndhcm5pbmdMb2cgPSB3YXJuaW5nTG9nO1xuXG4gICAgICAgIHRoaXMuaW5qZWN0YWJsZS5zY3JpcHRzLnB1c2goJy90ZXN0Y2FmZS1jb3JlLmpzJyk7XG4gICAgICAgIHRoaXMuaW5qZWN0YWJsZS5zY3JpcHRzLnB1c2goJy90ZXN0Y2FmZS11aS5qcycpO1xuICAgICAgICB0aGlzLmluamVjdGFibGUuc2NyaXB0cy5wdXNoKCcvdGVzdGNhZmUtYXV0b21hdGlvbi5qcycpO1xuICAgICAgICB0aGlzLmluamVjdGFibGUuc2NyaXB0cy5wdXNoKCcvdGVzdGNhZmUtZHJpdmVyLmpzJyk7XG4gICAgICAgIHRoaXMuaW5qZWN0YWJsZS5zdHlsZXMucHVzaCgnL3Rlc3RjYWZlLXVpLXN0eWxlcy5jc3MnKTtcblxuICAgICAgICB0aGlzLnJlcXVlc3RIb29rcyA9IEFycmF5LmZyb20odGhpcy50ZXN0LnJlcXVlc3RIb29rcyk7XG5cbiAgICAgICAgdGhpcy5faW5pdFJlcXVlc3RIb29rcygpO1xuICAgIH1cblxuICAgIGdldCBpZCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlc3Npb24uaWQ7XG4gICAgfVxuXG4gICAgZ2V0IGluamVjdGFibGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uLmluamVjdGFibGU7XG4gICAgfVxuXG4gICAgYWRkUXVhcmFudGluZUluZm8gKHF1YXJhbnRpbmUpIHtcbiAgICAgICAgdGhpcy5xdWFyYW50aW5lID0gcXVhcmFudGluZTtcbiAgICB9XG5cbiAgICBhZGRSZXF1ZXN0SG9vayAoaG9vaykge1xuICAgICAgICBpZiAodGhpcy5yZXF1ZXN0SG9va3MuaW5kZXhPZihob29rKSAhPT0gLTEpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0SG9va3MucHVzaChob29rKTtcbiAgICAgICAgdGhpcy5faW5pdFJlcXVlc3RIb29rKGhvb2spO1xuICAgIH1cblxuICAgIHJlbW92ZVJlcXVlc3RIb29rIChob29rKSB7XG4gICAgICAgIGlmICh0aGlzLnJlcXVlc3RIb29rcy5pbmRleE9mKGhvb2spID09PSAtMSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICByZW1vdmUodGhpcy5yZXF1ZXN0SG9va3MsIGhvb2spO1xuICAgICAgICB0aGlzLl9kaXNwb3NlUmVxdWVzdEhvb2soaG9vayk7XG4gICAgfVxuXG4gICAgX2luaXRSZXF1ZXN0SG9vayAoaG9vaykge1xuICAgICAgICBob29rLndhcm5pbmdMb2cgPSB0aGlzLndhcm5pbmdMb2c7XG5cbiAgICAgICAgaG9vay5faW5zdGFudGlhdGVSZXF1ZXN0RmlsdGVyUnVsZXMoKTtcbiAgICAgICAgaG9vay5faW5zdGFudGlhdGVkUmVxdWVzdEZpbHRlclJ1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNlc3Npb24uYWRkUmVxdWVzdEV2ZW50TGlzdGVuZXJzKHJ1bGUsIHtcbiAgICAgICAgICAgICAgICBvblJlcXVlc3Q6ICAgICAgICAgICBob29rLm9uUmVxdWVzdC5iaW5kKGhvb2spLFxuICAgICAgICAgICAgICAgIG9uQ29uZmlndXJlUmVzcG9uc2U6IGhvb2suX29uQ29uZmlndXJlUmVzcG9uc2UuYmluZChob29rKSxcbiAgICAgICAgICAgICAgICBvblJlc3BvbnNlOiAgICAgICAgICBob29rLm9uUmVzcG9uc2UuYmluZChob29rKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9kaXNwb3NlUmVxdWVzdEhvb2sgKGhvb2spIHtcbiAgICAgICAgaG9vay53YXJuaW5nTG9nID0gbnVsbDtcblxuICAgICAgICBob29rLl9pbnN0YW50aWF0ZWRSZXF1ZXN0RmlsdGVyUnVsZXMuZm9yRWFjaChydWxlID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2Vzc2lvbi5yZW1vdmVSZXF1ZXN0RXZlbnRMaXN0ZW5lcnMocnVsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9pbml0UmVxdWVzdEhvb2tzICgpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SG9va3MuZm9yRWFjaChob29rID0+IHRoaXMuX2luaXRSZXF1ZXN0SG9vayhob29rKSk7XG4gICAgfVxuXG4gICAgLy8gSGFtbWVyaGVhZCBwYXlsb2FkXG4gICAgX2dldFBheWxvYWRTY3JpcHQgKCkge1xuICAgICAgICB0aGlzLmZpbGVEb3dubG9hZGluZ0hhbmRsZWQgICAgICAgICAgICAgICA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc29sdmVXYWl0Rm9yRmlsZURvd25sb2FkaW5nUHJvbWlzZSA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIE11c3RhY2hlLnJlbmRlcihURVNUX1JVTl9URU1QTEFURSwge1xuICAgICAgICAgICAgdGVzdFJ1bklkOiAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5zZXNzaW9uLmlkKSxcbiAgICAgICAgICAgIGJyb3dzZXJJZDogICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHRoaXMuYnJvd3NlckNvbm5lY3Rpb24uaWQpLFxuICAgICAgICAgICAgYnJvd3NlckhlYXJ0YmVhdFJlbGF0aXZlVXJsOiAgSlNPTi5zdHJpbmdpZnkodGhpcy5icm93c2VyQ29ubmVjdGlvbi5oZWFydGJlYXRSZWxhdGl2ZVVybCksXG4gICAgICAgICAgICBicm93c2VyU3RhdHVzUmVsYXRpdmVVcmw6ICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLmJyb3dzZXJDb25uZWN0aW9uLnN0YXR1c1JlbGF0aXZlVXJsKSxcbiAgICAgICAgICAgIGJyb3dzZXJTdGF0dXNEb25lUmVsYXRpdmVVcmw6IEpTT04uc3RyaW5naWZ5KHRoaXMuYnJvd3NlckNvbm5lY3Rpb24uc3RhdHVzRG9uZVJlbGF0aXZlVXJsKSxcbiAgICAgICAgICAgIHVzZXJBZ2VudDogICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHRoaXMuYnJvd3NlckNvbm5lY3Rpb24udXNlckFnZW50KSxcbiAgICAgICAgICAgIHRlc3ROYW1lOiAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHRoaXMudGVzdC5uYW1lKSxcbiAgICAgICAgICAgIGZpeHR1cmVOYW1lOiAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHRoaXMudGVzdC5maXh0dXJlLm5hbWUpLFxuICAgICAgICAgICAgc2VsZWN0b3JUaW1lb3V0OiAgICAgICAgICAgICAgdGhpcy5vcHRzLnNlbGVjdG9yVGltZW91dCxcbiAgICAgICAgICAgIHBhZ2VMb2FkVGltZW91dDogICAgICAgICAgICAgIHRoaXMucGFnZUxvYWRUaW1lb3V0LFxuICAgICAgICAgICAgc2tpcEpzRXJyb3JzOiAgICAgICAgICAgICAgICAgdGhpcy5vcHRzLnNraXBKc0Vycm9ycyxcbiAgICAgICAgICAgIHJldHJ5VGVzdFBhZ2VzOiAgICAgICAgICAgICAgICEhdGhpcy5vcHRzLnJldHJ5VGVzdFBhZ2VzLFxuICAgICAgICAgICAgc3BlZWQ6ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGVlZCxcbiAgICAgICAgICAgIGRpYWxvZ0hhbmRsZXI6ICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHRoaXMuYWN0aXZlRGlhbG9nSGFuZGxlcilcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2dldElmcmFtZVBheWxvYWRTY3JpcHQgKCkge1xuICAgICAgICByZXR1cm4gTXVzdGFjaGUucmVuZGVyKElGUkFNRV9URVNUX1JVTl9URU1QTEFURSwge1xuICAgICAgICAgICAgdGVzdFJ1bklkOiAgICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLnNlc3Npb24uaWQpLFxuICAgICAgICAgICAgc2VsZWN0b3JUaW1lb3V0OiB0aGlzLm9wdHMuc2VsZWN0b3JUaW1lb3V0LFxuICAgICAgICAgICAgcGFnZUxvYWRUaW1lb3V0OiB0aGlzLnBhZ2VMb2FkVGltZW91dCxcbiAgICAgICAgICAgIHJldHJ5VGVzdFBhZ2VzOiAgISF0aGlzLm9wdHMucmV0cnlUZXN0UGFnZXMsXG4gICAgICAgICAgICBzcGVlZDogICAgICAgICAgIHRoaXMuc3BlZWQsXG4gICAgICAgICAgICBkaWFsb2dIYW5kbGVyOiAgIEpTT04uc3RyaW5naWZ5KHRoaXMuYWN0aXZlRGlhbG9nSGFuZGxlcilcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSGFtbWVyaGVhZCBoYW5kbGVyc1xuICAgIGdldEF1dGhDcmVkZW50aWFscyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRlc3QuYXV0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIGhhbmRsZUZpbGVEb3dubG9hZCAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc29sdmVXYWl0Rm9yRmlsZURvd25sb2FkaW5nUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlV2FpdEZvckZpbGVEb3dubG9hZGluZ1Byb21pc2UodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVXYWl0Rm9yRmlsZURvd25sb2FkaW5nUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5maWxlRG93bmxvYWRpbmdIYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBoYW5kbGVQYWdlRXJyb3IgKGN0eCwgZXJyKSB7XG4gICAgICAgIGlmIChjdHgucmVxLmhlYWRlcnNbVU5TVEFCTEVfTkVUV09SS19NT0RFX0hFQURFUl0pIHtcbiAgICAgICAgICAgIGN0eC5jbG9zZVdpdGhFcnJvcig1MDAsIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGVuZGluZ1BhZ2VFcnJvciA9IG5ldyBQYWdlTG9hZEVycm9yKGVycik7XG5cbiAgICAgICAgY3R4LnJlZGlyZWN0KGN0eC50b1Byb3h5VXJsKCdhYm91dDplcnJvcicpKTtcbiAgICB9XG5cbiAgICAvLyBUZXN0IGZ1bmN0aW9uIGV4ZWN1dGlvblxuICAgIGFzeW5jIF9leGVjdXRlVGVzdEZuIChwaGFzZSwgZm4pIHtcbiAgICAgICAgdGhpcy5waGFzZSA9IHBoYXNlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBmbih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBsZXQgc2NyZWVuc2hvdFBhdGggPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnRha2VTY3JlZW5zaG90c09uRmFpbHMpXG4gICAgICAgICAgICAgICAgc2NyZWVuc2hvdFBhdGggPSBhd2FpdCB0aGlzLmV4ZWN1dGVDb21tYW5kKG5ldyBicm93c2VyTWFuaXB1bGF0aW9uQ29tbWFuZHMuVGFrZVNjcmVlbnNob3RPbkZhaWxDb21tYW5kKCkpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZEVycm9yKGVyciwgc2NyZWVuc2hvdFBhdGgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICF0aGlzLl9hZGRQZW5kaW5nUGFnZUVycm9ySWZBbnkoKTtcbiAgICB9XG5cbiAgICBhc3luYyBfcnVuQmVmb3JlSG9vayAoKSB7XG4gICAgICAgIGlmICh0aGlzLnRlc3QuYmVmb3JlRm4pXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZXhlY3V0ZVRlc3RGbihQSEFTRS5pblRlc3RCZWZvcmVIb29rLCB0aGlzLnRlc3QuYmVmb3JlRm4pO1xuXG4gICAgICAgIGlmICh0aGlzLnRlc3QuZml4dHVyZS5iZWZvcmVFYWNoRm4pXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZXhlY3V0ZVRlc3RGbihQSEFTRS5pbkZpeHR1cmVCZWZvcmVFYWNoSG9vaywgdGhpcy50ZXN0LmZpeHR1cmUuYmVmb3JlRWFjaEZuKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBhc3luYyBfcnVuQWZ0ZXJIb29rICgpIHtcbiAgICAgICAgaWYgKHRoaXMudGVzdC5hZnRlckZuKVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2V4ZWN1dGVUZXN0Rm4oUEhBU0UuaW5UZXN0QWZ0ZXJIb29rLCB0aGlzLnRlc3QuYWZ0ZXJGbik7XG5cbiAgICAgICAgaWYgKHRoaXMudGVzdC5maXh0dXJlLmFmdGVyRWFjaEZuKVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2V4ZWN1dGVUZXN0Rm4oUEhBU0UuaW5GaXh0dXJlQWZ0ZXJFYWNoSG9vaywgdGhpcy50ZXN0LmZpeHR1cmUuYWZ0ZXJFYWNoRm4pO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGFzeW5jIHN0YXJ0ICgpIHtcbiAgICAgICAgdGVzdFJ1blRyYWNrZXIuYWN0aXZlVGVzdFJ1bnNbdGhpcy5zZXNzaW9uLmlkXSA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5lbWl0KCdzdGFydCcpO1xuXG4gICAgICAgIGNvbnN0IG9uRGlzY29ubmVjdGVkID0gZXJyID0+IHRoaXMuX2Rpc2Nvbm5lY3QoZXJyKTtcblxuICAgICAgICB0aGlzLmJyb3dzZXJDb25uZWN0aW9uLm9uY2UoJ2Rpc2Nvbm5lY3RlZCcsIG9uRGlzY29ubmVjdGVkKTtcblxuICAgICAgICBpZiAoYXdhaXQgdGhpcy5fcnVuQmVmb3JlSG9vaygpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9leGVjdXRlVGVzdEZuKFBIQVNFLmluVGVzdCwgdGhpcy50ZXN0LmZuKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3J1bkFmdGVySG9vaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGlzY29ubmVjdGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuYnJvd3NlckNvbm5lY3Rpb24ucmVtb3ZlTGlzdGVuZXIoJ2Rpc2Nvbm5lY3RlZCcsIG9uRGlzY29ubmVjdGVkKTtcblxuICAgICAgICBpZiAodGhpcy5lcnJzLmxlbmd0aCAmJiB0aGlzLmRlYnVnT25GYWlsKVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fZW5xdWV1ZVNldEJyZWFrcG9pbnRDb21tYW5kKG51bGwsIHRoaXMuZGVidWdSZXBvcnRlclBsdWdpbkhvc3QuZm9ybWF0RXJyb3IodGhpcy5lcnJzWzBdKSk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlQ29tbWFuZChuZXcgc2VydmljZUNvbW1hbmRzLlRlc3REb25lQ29tbWFuZCgpKTtcblxuICAgICAgICB0aGlzLl9hZGRQZW5kaW5nUGFnZUVycm9ySWZBbnkoKTtcblxuICAgICAgICBkZWxldGUgdGVzdFJ1blRyYWNrZXIuYWN0aXZlVGVzdFJ1bnNbdGhpcy5zZXNzaW9uLmlkXTtcblxuICAgICAgICB0aGlzLmVtaXQoJ2RvbmUnKTtcbiAgICB9XG5cbiAgICBfZXZhbHVhdGUgKGNvZGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBleGVjdXRlSnNFeHByZXNzaW9uKGNvZGUsIHRoaXMsIHsgc2tpcFZpc2liaWxpdHlDaGVjazogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFcnJvcnNcbiAgICBfYWRkUGVuZGluZ1BhZ2VFcnJvcklmQW55ICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1BhZ2VFcnJvcikge1xuICAgICAgICAgICAgdGhpcy5hZGRFcnJvcih0aGlzLnBlbmRpbmdQYWdlRXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nUGFnZUVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGFkZEVycm9yIChlcnIsIHNjcmVlbnNob3RQYXRoKSB7XG4gICAgICAgIGNvbnN0IGVyckxpc3QgPSBlcnIgaW5zdGFuY2VvZiBUZXN0Q2FmZUVycm9yTGlzdCA/IGVyci5pdGVtcyA6IFtlcnJdO1xuXG4gICAgICAgIGVyckxpc3QuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkYXB0ZXIgPSBuZXcgVGVzdFJ1bkVycm9yRm9ybWF0dGFibGVBZGFwdGVyKGl0ZW0sIHtcbiAgICAgICAgICAgICAgICB1c2VyQWdlbnQ6ICAgICAgdGhpcy5icm93c2VyQ29ubmVjdGlvbi51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgc2NyZWVuc2hvdFBhdGg6IHNjcmVlbnNob3RQYXRoIHx8ICcnLFxuICAgICAgICAgICAgICAgIHRlc3RSdW5QaGFzZTogICB0aGlzLnBoYXNlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5lcnJzLnB1c2goYWRhcHRlcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRhc2sgcXVldWVcbiAgICBfZW5xdWV1ZUNvbW1hbmQgKGNvbW1hbmQsIGNhbGxzaXRlKSB7XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdSZXF1ZXN0KVxuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZVBlbmRpbmdSZXF1ZXN0KGNvbW1hbmQpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZGluZ0RyaXZlclRhc2tzQ291bnQtLTtcbiAgICAgICAgICAgIHRoaXMuZHJpdmVyVGFza1F1ZXVlLnB1c2goeyBjb21tYW5kLCByZXNvbHZlLCByZWplY3QsIGNhbGxzaXRlIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuYWRkaW5nRHJpdmVyVGFza3NDb3VudClcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoQUxMX0RSSVZFUl9UQVNLU19BRERFRF9UT19RVUVVRV9FVkVOVCwgdGhpcy5kcml2ZXJUYXNrUXVldWUubGVuZ3RoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IGRyaXZlclRhc2tRdWV1ZUxlbmd0aCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZGluZ0RyaXZlclRhc2tzQ291bnQgPyBwcm9taXNpZnlFdmVudCh0aGlzLCBBTExfRFJJVkVSX1RBU0tTX0FEREVEX1RPX1FVRVVFX0VWRU5UKSA6IFByb21pc2UucmVzb2x2ZSh0aGlzLmRyaXZlclRhc2tRdWV1ZS5sZW5ndGgpO1xuICAgIH1cblxuICAgIGFzeW5jIF9lbnF1ZXVlQnJvd3NlckNvbnNvbGVNZXNzYWdlc0NvbW1hbmQgKGNvbW1hbmQsIGNhbGxzaXRlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX2VucXVldWVDb21tYW5kKGNvbW1hbmQsIGNhbGxzaXRlKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jb25zb2xlTWVzc2FnZXMuZ2V0Q29weSgpO1xuICAgIH1cblxuICAgIGFzeW5jIF9lbnF1ZXVlU2V0QnJlYWtwb2ludENvbW1hbmQgKGNhbGxzaXRlLCBlcnJvcikge1xuICAgICAgICBpZiAodGhpcy5icm93c2VyQ29ubmVjdGlvbi5pc0hlYWRsZXNzQnJvd3NlcigpKSB7XG4gICAgICAgICAgICB0aGlzLndhcm5pbmdMb2cuYWRkV2FybmluZyhXQVJOSU5HX01FU1NBR0UuZGVidWdJbkhlYWRsZXNzRXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVidWdMb2dnZXIuc2hvd0JyZWFrcG9pbnQodGhpcy5zZXNzaW9uLmlkLCB0aGlzLmJyb3dzZXJDb25uZWN0aW9uLnVzZXJBZ2VudCwgY2FsbHNpdGUsIGVycm9yKTtcblxuICAgICAgICB0aGlzLmRlYnVnZ2luZyA9IGF3YWl0IHRoaXMuZXhlY3V0ZUNvbW1hbmQobmV3IHNlcnZpY2VDb21tYW5kcy5TZXRCcmVha3BvaW50Q29tbWFuZCghIWVycm9yKSwgY2FsbHNpdGUpO1xuICAgIH1cblxuICAgIF9yZW1vdmVBbGxOb25TZXJ2aWNlVGFza3MgKCkge1xuICAgICAgICB0aGlzLmRyaXZlclRhc2tRdWV1ZSA9IHRoaXMuZHJpdmVyVGFza1F1ZXVlLmZpbHRlcihkcml2ZXJUYXNrID0+IGlzU2VydmljZUNvbW1hbmQoZHJpdmVyVGFzay5jb21tYW5kKSk7XG5cbiAgICAgICAgdGhpcy5icm93c2VyTWFuaXB1bGF0aW9uUXVldWUucmVtb3ZlQWxsTm9uU2VydmljZU1hbmlwdWxhdGlvbnMoKTtcbiAgICB9XG5cbiAgICAvLyBDdXJyZW50IGRyaXZlciB0YXNrXG4gICAgZ2V0IGN1cnJlbnREcml2ZXJUYXNrICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJpdmVyVGFza1F1ZXVlWzBdO1xuICAgIH1cblxuICAgIF9yZXNvbHZlQ3VycmVudERyaXZlclRhc2sgKHJlc3VsdCkge1xuICAgICAgICB0aGlzLmN1cnJlbnREcml2ZXJUYXNrLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgdGhpcy5kcml2ZXJUYXNrUXVldWUuc2hpZnQoKTtcblxuICAgICAgICBpZiAodGhpcy50ZXN0RG9uZUNvbW1hbmRRdWV1ZWQpXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVBbGxOb25TZXJ2aWNlVGFza3MoKTtcbiAgICB9XG5cbiAgICBfcmVqZWN0Q3VycmVudERyaXZlclRhc2sgKGVycikge1xuICAgICAgICBlcnIuY2FsbHNpdGUgICAgICAgICAgICAgPSBlcnIuY2FsbHNpdGUgfHwgdGhpcy5jdXJyZW50RHJpdmVyVGFzay5jYWxsc2l0ZTtcbiAgICAgICAgZXJyLmlzUmVqZWN0ZWREcml2ZXJUYXNrID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmN1cnJlbnREcml2ZXJUYXNrLnJlamVjdChlcnIpO1xuICAgICAgICB0aGlzLl9yZW1vdmVBbGxOb25TZXJ2aWNlVGFza3MoKTtcbiAgICB9XG5cbiAgICAvLyBQZW5kaW5nIHJlcXVlc3RcbiAgICBfY2xlYXJQZW5kaW5nUmVxdWVzdCAoKSB7XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdSZXF1ZXN0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wZW5kaW5nUmVxdWVzdC5yZXNwb25zZVRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVzb2x2ZVBlbmRpbmdSZXF1ZXN0IChjb21tYW5kKSB7XG4gICAgICAgIHRoaXMubGFzdERyaXZlclN0YXR1c1Jlc3BvbnNlID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdC5yZXNvbHZlKGNvbW1hbmQpO1xuICAgICAgICB0aGlzLl9jbGVhclBlbmRpbmdSZXF1ZXN0KCk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGRyaXZlciByZXF1ZXN0XG4gICAgX2Z1bGZpbGxDdXJyZW50RHJpdmVyVGFzayAoZHJpdmVyU3RhdHVzKSB7XG4gICAgICAgIGlmIChkcml2ZXJTdGF0dXMuZXhlY3V0aW9uRXJyb3IpXG4gICAgICAgICAgICB0aGlzLl9yZWplY3RDdXJyZW50RHJpdmVyVGFzayhkcml2ZXJTdGF0dXMuZXhlY3V0aW9uRXJyb3IpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQ3VycmVudERyaXZlclRhc2soZHJpdmVyU3RhdHVzLnJlc3VsdCk7XG4gICAgfVxuXG4gICAgX2hhbmRsZVBhZ2VFcnJvclN0YXR1cyAocGFnZUVycm9yKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnREcml2ZXJUYXNrICYmIGlzQ29tbWFuZFJlamVjdGFibGVCeVBhZ2VFcnJvcih0aGlzLmN1cnJlbnREcml2ZXJUYXNrLmNvbW1hbmQpKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWplY3RDdXJyZW50RHJpdmVyVGFzayhwYWdlRXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nUGFnZUVycm9yID0gbnVsbDtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBlbmRpbmdQYWdlRXJyb3IgPSB0aGlzLnBlbmRpbmdQYWdlRXJyb3IgfHwgcGFnZUVycm9yO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBfaGFuZGxlRHJpdmVyUmVxdWVzdCAoZHJpdmVyU3RhdHVzKSB7XG4gICAgICAgIGNvbnN0IGlzVGVzdERvbmUgICAgICAgICAgICAgICAgID0gdGhpcy5jdXJyZW50RHJpdmVyVGFzayAmJiB0aGlzLmN1cnJlbnREcml2ZXJUYXNrLmNvbW1hbmQudHlwZSA9PT0gQ09NTUFORF9UWVBFLnRlc3REb25lO1xuICAgICAgICBjb25zdCBwYWdlRXJyb3IgICAgICAgICAgICAgICAgICA9IHRoaXMucGVuZGluZ1BhZ2VFcnJvciB8fCBkcml2ZXJTdGF0dXMucGFnZUVycm9yO1xuICAgICAgICBjb25zdCBjdXJyZW50VGFza1JlamVjdGVkQnlFcnJvciA9IHBhZ2VFcnJvciAmJiB0aGlzLl9oYW5kbGVQYWdlRXJyb3JTdGF0dXMocGFnZUVycm9yKTtcblxuICAgICAgICBpZiAodGhpcy5kaXNjb25uZWN0ZWQpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4gcmVqZWN0KCkpO1xuXG4gICAgICAgIHRoaXMuY29uc29sZU1lc3NhZ2VzLmNvbmNhdChkcml2ZXJTdGF0dXMuY29uc29sZU1lc3NhZ2VzKTtcblxuICAgICAgICBpZiAoIWN1cnJlbnRUYXNrUmVqZWN0ZWRCeUVycm9yICYmIGRyaXZlclN0YXR1cy5pc0NvbW1hbmRSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChpc1Rlc3REb25lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZUN1cnJlbnREcml2ZXJUYXNrKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gVEVTVF9ET05FX0NPTkZJUk1BVElPTl9SRVNQT05TRTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZnVsZmlsbEN1cnJlbnREcml2ZXJUYXNrKGRyaXZlclN0YXR1cyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q3VycmVudERyaXZlclRhc2tDb21tYW5kKCk7XG4gICAgfVxuXG4gICAgX2dldEN1cnJlbnREcml2ZXJUYXNrQ29tbWFuZCAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50RHJpdmVyVGFzaylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB0aGlzLmN1cnJlbnREcml2ZXJUYXNrLmNvbW1hbmQ7XG5cbiAgICAgICAgaWYgKGNvbW1hbmQudHlwZSA9PT0gQ09NTUFORF9UWVBFLm5hdmlnYXRlVG8gJiYgY29tbWFuZC5zdGF0ZVNuYXBzaG90KVxuICAgICAgICAgICAgdGhpcy5zZXNzaW9uLnVzZVN0YXRlU25hcHNob3QoSlNPTi5wYXJzZShjb21tYW5kLnN0YXRlU25hcHNob3QpKTtcblxuICAgICAgICByZXR1cm4gY29tbWFuZDtcbiAgICB9XG5cbiAgICAvLyBFeGVjdXRlIGNvbW1hbmRcbiAgICBhc3luYyBfZXhlY3V0ZUV4cHJlc3Npb24gKGNvbW1hbmQpIHtcbiAgICAgICAgY29uc3QgeyByZXN1bHRWYXJpYWJsZU5hbWUsIGlzQXN5bmNFeHByZXNzaW9uIH0gPSBjb21tYW5kO1xuXG4gICAgICAgIGxldCBleHByZXNzaW9uID0gY29tbWFuZC5leHByZXNzaW9uO1xuXG4gICAgICAgIGlmIChpc0FzeW5jRXhwcmVzc2lvbilcbiAgICAgICAgICAgIGV4cHJlc3Npb24gPSBgYXdhaXQgJHtleHByZXNzaW9ufWA7XG5cbiAgICAgICAgaWYgKHJlc3VsdFZhcmlhYmxlTmFtZSlcbiAgICAgICAgICAgIGV4cHJlc3Npb24gPSBgJHtyZXN1bHRWYXJpYWJsZU5hbWV9ID0gJHtleHByZXNzaW9ufSwgJHtyZXN1bHRWYXJpYWJsZU5hbWV9YDtcblxuICAgICAgICBpZiAoaXNBc3luY0V4cHJlc3Npb24pXG4gICAgICAgICAgICBleHByZXNzaW9uID0gYChhc3luYyAoKSA9PiB7IHJldHVybiAke2V4cHJlc3Npb259OyB9KS5hcHBseSh0aGlzKTtgO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2V2YWx1YXRlKGV4cHJlc3Npb24pO1xuXG4gICAgICAgIHJldHVybiBpc0FzeW5jRXhwcmVzc2lvbiA/IGF3YWl0IHJlc3VsdCA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICBhc3luYyBfZXhlY3V0ZUFzc2VydGlvbiAoY29tbWFuZCwgY2FsbHNpdGUpIHtcbiAgICAgICAgY29uc3QgYXNzZXJ0aW9uVGltZW91dCA9IGNvbW1hbmQub3B0aW9ucy50aW1lb3V0ID09PSB2b2lkIDAgPyB0aGlzLm9wdHMuYXNzZXJ0aW9uVGltZW91dCA6IGNvbW1hbmQub3B0aW9ucy50aW1lb3V0O1xuICAgICAgICBjb25zdCBleGVjdXRvciAgICAgICAgID0gbmV3IEFzc2VydGlvbkV4ZWN1dG9yKGNvbW1hbmQsIGFzc2VydGlvblRpbWVvdXQsIGNhbGxzaXRlKTtcblxuICAgICAgICBleGVjdXRvci5vbmNlKCdzdGFydC1hc3NlcnRpb24tcmV0cmllcycsIHRpbWVvdXQgPT4gdGhpcy5leGVjdXRlQ29tbWFuZChuZXcgc2VydmljZUNvbW1hbmRzLlNob3dBc3NlcnRpb25SZXRyaWVzU3RhdHVzQ29tbWFuZCh0aW1lb3V0KSkpO1xuICAgICAgICBleGVjdXRvci5vbmNlKCdlbmQtYXNzZXJ0aW9uLXJldHJpZXMnLCBzdWNjZXNzID0+IHRoaXMuZXhlY3V0ZUNvbW1hbmQobmV3IHNlcnZpY2VDb21tYW5kcy5IaWRlQXNzZXJ0aW9uUmV0cmllc1N0YXR1c0NvbW1hbmQoc3VjY2VzcykpKTtcblxuICAgICAgICByZXR1cm4gZXhlY3V0b3IucnVuKCk7XG4gICAgfVxuXG4gICAgX2FkanVzdENvbmZpZ3VyYXRpb25XaXRoQ29tbWFuZCAoY29tbWFuZCkge1xuICAgICAgICBpZiAoY29tbWFuZC50eXBlID09PSBDT01NQU5EX1RZUEUudGVzdERvbmUpIHtcbiAgICAgICAgICAgIHRoaXMudGVzdERvbmVDb21tYW5kUXVldWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRlYnVnTG9nZ2VyLmhpZGVCcmVha3BvaW50KHRoaXMuc2Vzc2lvbi5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmIChjb21tYW5kLnR5cGUgPT09IENPTU1BTkRfVFlQRS5zZXROYXRpdmVEaWFsb2dIYW5kbGVyKVxuICAgICAgICAgICAgdGhpcy5hY3RpdmVEaWFsb2dIYW5kbGVyID0gY29tbWFuZC5kaWFsb2dIYW5kbGVyO1xuXG4gICAgICAgIGVsc2UgaWYgKGNvbW1hbmQudHlwZSA9PT0gQ09NTUFORF9UWVBFLnN3aXRjaFRvSWZyYW1lKVxuICAgICAgICAgICAgdGhpcy5hY3RpdmVJZnJhbWVTZWxlY3RvciA9IGNvbW1hbmQuc2VsZWN0b3I7XG5cbiAgICAgICAgZWxzZSBpZiAoY29tbWFuZC50eXBlID09PSBDT01NQU5EX1RZUEUuc3dpdGNoVG9NYWluV2luZG93KVxuICAgICAgICAgICAgdGhpcy5hY3RpdmVJZnJhbWVTZWxlY3RvciA9IG51bGw7XG5cbiAgICAgICAgZWxzZSBpZiAoY29tbWFuZC50eXBlID09PSBDT01NQU5EX1RZUEUuc2V0VGVzdFNwZWVkKVxuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IGNvbW1hbmQuc3BlZWQ7XG5cbiAgICAgICAgZWxzZSBpZiAoY29tbWFuZC50eXBlID09PSBDT01NQU5EX1RZUEUuc2V0UGFnZUxvYWRUaW1lb3V0KVxuICAgICAgICAgICAgdGhpcy5wYWdlTG9hZFRpbWVvdXQgPSBjb21tYW5kLmR1cmF0aW9uO1xuXG4gICAgICAgIGVsc2UgaWYgKGNvbW1hbmQudHlwZSA9PT0gQ09NTUFORF9UWVBFLmRlYnVnKVxuICAgICAgICAgICAgdGhpcy5kZWJ1Z2dpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIGFzeW5jIF9hZGp1c3RTY3JlZW5zaG90Q29tbWFuZCAoY29tbWFuZCkge1xuICAgICAgICBjb25zdCBicm93c2VySWQgICAgICAgICAgICAgICAgICAgID0gdGhpcy5icm93c2VyQ29ubmVjdGlvbi5pZDtcbiAgICAgICAgY29uc3QgeyBoYXNDaHJvbWVsZXNzU2NyZWVuc2hvdHMgfSA9IGF3YWl0IHRoaXMuYnJvd3NlckNvbm5lY3Rpb24ucHJvdmlkZXIuaGFzQ3VzdG9tQWN0aW9uRm9yQnJvd3Nlcihicm93c2VySWQpO1xuXG4gICAgICAgIGlmICghaGFzQ2hyb21lbGVzc1NjcmVlbnNob3RzKVxuICAgICAgICAgICAgY29tbWFuZC5nZW5lcmF0ZVNjcmVlbnNob3RNYXJrKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgX3NldEJyZWFrcG9pbnRJZk5lY2Vzc2FyeSAoY29tbWFuZCwgY2FsbHNpdGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVEZWJ1Z0JyZWFrcG9pbnRzICYmIHRoaXMuZGVidWdnaW5nICYmIGNhblNldERlYnVnZ2VyQnJlYWtwb2ludEJlZm9yZUNvbW1hbmQoY29tbWFuZCkpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9lbnF1ZXVlU2V0QnJlYWtwb2ludENvbW1hbmQoY2FsbHNpdGUpO1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGVDb21tYW5kIChjb21tYW5kLCBjYWxsc2l0ZSkge1xuICAgICAgICB0aGlzLmRlYnVnTG9nLmNvbW1hbmQoY29tbWFuZCk7XG5cbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1BhZ2VFcnJvciAmJiBpc0NvbW1hbmRSZWplY3RhYmxlQnlQYWdlRXJyb3IoY29tbWFuZCkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVqZWN0Q29tbWFuZFdpdGhQYWdlRXJyb3IoY2FsbHNpdGUpO1xuXG4gICAgICAgIGlmIChpc0V4ZWN1dGFibGVPbkNsaWVudENvbW1hbmQoY29tbWFuZCkpXG4gICAgICAgICAgICB0aGlzLmFkZGluZ0RyaXZlclRhc2tzQ291bnQrKztcblxuICAgICAgICB0aGlzLl9hZGp1c3RDb25maWd1cmF0aW9uV2l0aENvbW1hbmQoY29tbWFuZCk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5fc2V0QnJlYWtwb2ludElmTmVjZXNzYXJ5KGNvbW1hbmQsIGNhbGxzaXRlKTtcblxuICAgICAgICBpZiAoaXNTY3JlZW5zaG90Q29tbWFuZChjb21tYW5kKSlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2FkanVzdFNjcmVlbnNob3RDb21tYW5kKGNvbW1hbmQpO1xuXG4gICAgICAgIGlmIChpc0Jyb3dzZXJNYW5pcHVsYXRpb25Db21tYW5kKGNvbW1hbmQpKVxuICAgICAgICAgICAgdGhpcy5icm93c2VyTWFuaXB1bGF0aW9uUXVldWUucHVzaChjb21tYW5kKTtcblxuICAgICAgICBpZiAoY29tbWFuZC50eXBlID09PSBDT01NQU5EX1RZUEUud2FpdClcbiAgICAgICAgICAgIHJldHVybiBkZWxheShjb21tYW5kLnRpbWVvdXQpO1xuXG4gICAgICAgIGlmIChjb21tYW5kLnR5cGUgPT09IENPTU1BTkRfVFlQRS5zZXRQYWdlTG9hZFRpbWVvdXQpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBpZiAoY29tbWFuZC50eXBlID09PSBDT01NQU5EX1RZUEUuZGVidWcpXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fZW5xdWV1ZVNldEJyZWFrcG9pbnRDb21tYW5kKGNhbGxzaXRlKTtcblxuICAgICAgICBpZiAoY29tbWFuZC50eXBlID09PSBDT01NQU5EX1RZUEUudXNlUm9sZSlcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl91c2VSb2xlKGNvbW1hbmQucm9sZSwgY2FsbHNpdGUpO1xuXG4gICAgICAgIGlmIChjb21tYW5kLnR5cGUgPT09IENPTU1BTkRfVFlQRS5hc3NlcnRpb24pXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZUFzc2VydGlvbihjb21tYW5kLCBjYWxsc2l0ZSk7XG5cbiAgICAgICAgaWYgKGNvbW1hbmQudHlwZSA9PT0gQ09NTUFORF9UWVBFLmV4ZWN1dGVFeHByZXNzaW9uKVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2V4ZWN1dGVFeHByZXNzaW9uKGNvbW1hbmQsIGNhbGxzaXRlKTtcblxuICAgICAgICBpZiAoY29tbWFuZC50eXBlID09PSBDT01NQU5EX1RZUEUuZ2V0QnJvd3NlckNvbnNvbGVNZXNzYWdlcylcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9lbnF1ZXVlQnJvd3NlckNvbnNvbGVNZXNzYWdlc0NvbW1hbmQoY29tbWFuZCwgY2FsbHNpdGUpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnF1ZXVlQ29tbWFuZChjb21tYW5kLCBjYWxsc2l0ZSk7XG4gICAgfVxuXG4gICAgX3JlamVjdENvbW1hbmRXaXRoUGFnZUVycm9yIChjYWxsc2l0ZSkge1xuICAgICAgICBjb25zdCBlcnIgPSB0aGlzLnBlbmRpbmdQYWdlRXJyb3I7XG5cbiAgICAgICAgZXJyLmNhbGxzaXRlICAgICAgICAgID0gY2FsbHNpdGU7XG4gICAgICAgIHRoaXMucGVuZGluZ1BhZ2VFcnJvciA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgLy8gUm9sZSBtYW5hZ2VtZW50XG4gICAgYXN5bmMgZ2V0U3RhdGVTbmFwc2hvdCAoKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zZXNzaW9uLmdldFN0YXRlU25hcHNob3QoKTtcblxuICAgICAgICBzdGF0ZS5zdG9yYWdlcyA9IGF3YWl0IHRoaXMuZXhlY3V0ZUNvbW1hbmQobmV3IHNlcnZpY2VDb21tYW5kcy5CYWNrdXBTdG9yYWdlc0NvbW1hbmQoKSk7XG5cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIGFzeW5jIHN3aXRjaFRvQ2xlYW5SdW4gKCkge1xuICAgICAgICB0aGlzLmN0eCAgICAgICAgICAgICA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuZml4dHVyZUN0eCAgICAgID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5jb25zb2xlTWVzc2FnZXMgPSBuZXcgQnJvd3NlckNvbnNvbGVNZXNzYWdlcygpO1xuXG4gICAgICAgIHRoaXMuc2Vzc2lvbi51c2VTdGF0ZVNuYXBzaG90KG51bGwpO1xuXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZURpYWxvZ0hhbmRsZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZURpYWxvZ0hhbmRsZXJDb21tYW5kID0gbmV3IGFjdGlvbkNvbW1hbmRzLlNldE5hdGl2ZURpYWxvZ0hhbmRsZXJDb21tYW5kKHsgZGlhbG9nSGFuZGxlcjogeyBmbjogbnVsbCB9IH0pO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dGVDb21tYW5kKHJlbW92ZURpYWxvZ0hhbmRsZXJDb21tYW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNwZWVkICE9PSB0aGlzLm9wdHMuc3BlZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNldFNwZWVkQ29tbWFuZCA9IG5ldyBhY3Rpb25Db21tYW5kcy5TZXRUZXN0U3BlZWRDb21tYW5kKHsgc3BlZWQ6IHRoaXMub3B0cy5zcGVlZCB9KTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlQ29tbWFuZChzZXRTcGVlZENvbW1hbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucGFnZUxvYWRUaW1lb3V0ICE9PSB0aGlzLm9wdHMucGFnZUxvYWRUaW1lb3V0KSB7XG4gICAgICAgICAgICBjb25zdCBzZXRQYWdlTG9hZFRpbWVvdXRDb21tYW5kID0gbmV3IGFjdGlvbkNvbW1hbmRzLlNldFBhZ2VMb2FkVGltZW91dENvbW1hbmQoeyBkdXJhdGlvbjogdGhpcy5vcHRzLnBhZ2VMb2FkVGltZW91dCB9KTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlQ29tbWFuZChzZXRQYWdlTG9hZFRpbWVvdXRDb21tYW5kKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIF9nZXRTdGF0ZVNuYXBzaG90RnJvbVJvbGUgKHJvbGUpIHtcbiAgICAgICAgY29uc3QgcHJldlBoYXNlID0gdGhpcy5waGFzZTtcblxuICAgICAgICB0aGlzLnBoYXNlID0gUEhBU0UuaW5Sb2xlSW5pdGlhbGl6ZXI7XG5cbiAgICAgICAgaWYgKHJvbGUucGhhc2UgPT09IFJPTEVfUEhBU0UudW5pbml0aWFsaXplZClcbiAgICAgICAgICAgIGF3YWl0IHJvbGUuaW5pdGlhbGl6ZSh0aGlzKTtcblxuICAgICAgICBlbHNlIGlmIChyb2xlLnBoYXNlID09PSBST0xFX1BIQVNFLnBlbmRpbmdJbml0aWFsaXphdGlvbilcbiAgICAgICAgICAgIGF3YWl0IHByb21pc2lmeUV2ZW50KHJvbGUsICdpbml0aWFsaXplZCcpO1xuXG4gICAgICAgIGlmIChyb2xlLmluaXRFcnIpXG4gICAgICAgICAgICB0aHJvdyByb2xlLmluaXRFcnI7XG5cbiAgICAgICAgdGhpcy5waGFzZSA9IHByZXZQaGFzZTtcblxuICAgICAgICByZXR1cm4gcm9sZS5zdGF0ZVNuYXBzaG90O1xuICAgIH1cblxuICAgIGFzeW5jIF91c2VSb2xlIChyb2xlLCBjYWxsc2l0ZSkge1xuICAgICAgICBpZiAodGhpcy5waGFzZSA9PT0gUEhBU0UuaW5Sb2xlSW5pdGlhbGl6ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUm9sZVN3aXRjaEluUm9sZUluaXRpYWxpemVyRXJyb3IoY2FsbHNpdGUpO1xuXG4gICAgICAgIHRoaXMuZGlzYWJsZURlYnVnQnJlYWtwb2ludHMgPSB0cnVlO1xuXG4gICAgICAgIGNvbnN0IGJvb2ttYXJrID0gbmV3IFRlc3RSdW5Cb29rbWFyayh0aGlzLCByb2xlKTtcblxuICAgICAgICBhd2FpdCBib29rbWFyay5pbml0KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFJvbGVJZClcbiAgICAgICAgICAgIHRoaXMudXNlZFJvbGVTdGF0ZXNbdGhpcy5jdXJyZW50Um9sZUlkXSA9IGF3YWl0IHRoaXMuZ2V0U3RhdGVTbmFwc2hvdCgpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlU25hcHNob3QgPSB0aGlzLnVzZWRSb2xlU3RhdGVzW3JvbGUuaWRdIHx8IGF3YWl0IHRoaXMuX2dldFN0YXRlU25hcHNob3RGcm9tUm9sZShyb2xlKTtcblxuICAgICAgICB0aGlzLnNlc3Npb24udXNlU3RhdGVTbmFwc2hvdChzdGF0ZVNuYXBzaG90KTtcblxuICAgICAgICB0aGlzLmN1cnJlbnRSb2xlSWQgPSByb2xlLmlkO1xuXG4gICAgICAgIGF3YWl0IGJvb2ttYXJrLnJlc3RvcmUoY2FsbHNpdGUsIHN0YXRlU25hcHNob3QpO1xuXG4gICAgICAgIHRoaXMuZGlzYWJsZURlYnVnQnJlYWtwb2ludHMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBHZXQgY3VycmVudCBVUkxcbiAgICBhc3luYyBnZXRDdXJyZW50VXJsICgpIHtcbiAgICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBDbGllbnRGdW5jdGlvbkJ1aWxkZXIoKCkgPT4ge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYgKi9cbiAgICAgICAgfSwgeyBib3VuZFRlc3RSdW46IHRoaXMgfSk7XG5cbiAgICAgICAgY29uc3QgZ2V0TG9jYXRpb24gPSBidWlsZGVyLmdldEZ1bmN0aW9uKCk7XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IGdldExvY2F0aW9uKCk7XG4gICAgfVxuXG4gICAgX2Rpc2Nvbm5lY3QgKGVycikge1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fcmVqZWN0Q3VycmVudERyaXZlclRhc2soZXJyKTtcblxuICAgICAgICB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3RlZCcsIGVycik7XG5cbiAgICAgICAgZGVsZXRlIHRlc3RSdW5UcmFja2VyLmFjdGl2ZVRlc3RSdW5zW3RoaXMuc2Vzc2lvbi5pZF07XG4gICAgfVxufVxuXG4vLyBTZXJ2aWNlIG1lc3NhZ2UgaGFuZGxlcnNcbmNvbnN0IFNlcnZpY2VNZXNzYWdlcyA9IFRlc3RSdW4ucHJvdG90eXBlO1xuXG5TZXJ2aWNlTWVzc2FnZXNbQ0xJRU5UX01FU1NBR0VTLnJlYWR5XSA9IGZ1bmN0aW9uIChtc2cpIHtcbiAgICB0aGlzLmRlYnVnTG9nLmRyaXZlck1lc3NhZ2UobXNnKTtcblxuICAgIHRoaXMuX2NsZWFyUGVuZGluZ1JlcXVlc3QoKTtcblxuICAgIC8vIE5PVEU6IHRoZSBkcml2ZXIgc2VuZHMgdGhlIHN0YXR1cyBmb3IgdGhlIHNlY29uZCB0aW1lIGlmIGl0IGRpZG4ndCBnZXQgYSByZXNwb25zZSBhdCB0aGVcbiAgICAvLyBmaXJzdCB0cnkuIFRoaXMgaXMgcG9zc2libGUgd2hlbiB0aGUgcGFnZSB3YXMgdW5sb2FkZWQgYWZ0ZXIgdGhlIGRyaXZlciBzZW50IHRoZSBzdGF0dXMuXG4gICAgaWYgKG1zZy5zdGF0dXMuaWQgPT09IHRoaXMubGFzdERyaXZlclN0YXR1c0lkKVxuICAgICAgICByZXR1cm4gdGhpcy5sYXN0RHJpdmVyU3RhdHVzUmVzcG9uc2U7XG5cbiAgICB0aGlzLmxhc3REcml2ZXJTdGF0dXNJZCAgICAgICA9IG1zZy5zdGF0dXMuaWQ7XG4gICAgdGhpcy5sYXN0RHJpdmVyU3RhdHVzUmVzcG9uc2UgPSB0aGlzLl9oYW5kbGVEcml2ZXJSZXF1ZXN0KG1zZy5zdGF0dXMpO1xuXG4gICAgaWYgKHRoaXMubGFzdERyaXZlclN0YXR1c1Jlc3BvbnNlKVxuICAgICAgICByZXR1cm4gdGhpcy5sYXN0RHJpdmVyU3RhdHVzUmVzcG9uc2U7XG5cbiAgICAvLyBOT1RFOiB3ZSBzZW5kIGFuIGVtcHR5IHJlc3BvbnNlIGFmdGVyIHRoZSBNQVhfUkVTUE9OU0VfREVMQVkgdGltZW91dCBpcyBleGNlZWRlZCB0byBrZWVwIGNvbm5lY3Rpb25cbiAgICAvLyB3aXRoIHRoZSBjbGllbnQgYW5kIHByZXZlbnQgdGhlIHJlc3BvbnNlIHRpbWVvdXQgZXhjZXB0aW9uIG9uIHRoZSBjbGllbnQgc2lkZVxuICAgIGNvbnN0IHJlc3BvbnNlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fcmVzb2x2ZVBlbmRpbmdSZXF1ZXN0KG51bGwpLCBNQVhfUkVTUE9OU0VfREVMQVkpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdCA9IHsgcmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZVRpbWVvdXQgfTtcbiAgICB9KTtcbn07XG5cblNlcnZpY2VNZXNzYWdlc1tDTElFTlRfTUVTU0FHRVMucmVhZHlGb3JCcm93c2VyTWFuaXB1bGF0aW9uXSA9IGFzeW5jIGZ1bmN0aW9uIChtc2cpIHtcbiAgICB0aGlzLmRlYnVnTG9nLmRyaXZlck1lc3NhZ2UobXNnKTtcblxuICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgIGxldCBlcnJvciAgPSBudWxsO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5icm93c2VyTWFuaXB1bGF0aW9uUXVldWUuZXhlY3V0ZVBlbmRpbmdNYW5pcHVsYXRpb24obXNnKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBlcnJvciA9IGVycjtcbiAgICB9XG5cbiAgICByZXR1cm4geyByZXN1bHQsIGVycm9yIH07XG59O1xuXG5TZXJ2aWNlTWVzc2FnZXNbQ0xJRU5UX01FU1NBR0VTLndhaXRGb3JGaWxlRG93bmxvYWRdID0gZnVuY3Rpb24gKG1zZykge1xuICAgIHRoaXMuZGVidWdMb2cuZHJpdmVyTWVzc2FnZShtc2cpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBpZiAodGhpcy5maWxlRG93bmxvYWRpbmdIYW5kbGVkKSB7XG4gICAgICAgICAgICB0aGlzLmZpbGVEb3dubG9hZGluZ0hhbmRsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlV2FpdEZvckZpbGVEb3dubG9hZGluZ1Byb21pc2UgPSByZXNvbHZlO1xuICAgIH0pO1xufTtcbiJdfQ==
