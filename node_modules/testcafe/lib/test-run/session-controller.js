'use strict';

exports.__esModule = true;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _testcafeHammerhead = require('testcafe-hammerhead');

var _unstableNetworkMode = require('../browser/connection/unstable-network-mode');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ACTIVE_SESSIONS_MAP = {};

class SessionController extends _testcafeHammerhead.Session {
    constructor(uploadsRoot) {
        super(uploadsRoot);

        this.currentTestRun = null;
    }

    // Hammerhead payload
    _getPayloadScript() {
        return this.currentTestRun._getPayloadScript();
    }

    _getIframePayloadScript() {
        return this.currentTestRun._getIframePayloadScript();
    }

    // Hammerhead handlers
    handleServiceMessage(msg, serverInfo) {
        if (this.currentTestRun[msg.cmd]) return super.handleServiceMessage.call(this.currentTestRun, msg, serverInfo);

        return super.handleServiceMessage(msg, serverInfo);
    }

    getAuthCredentials() {
        return this.currentTestRun.getAuthCredentials();
    }

    handleFileDownload() {
        return this.currentTestRun.handleFileDownload();
    }

    handlePageError(ctx, err) {
        return this.currentTestRun.handlePageError(ctx, err);
    }

    onPageRequest(ctx) {
        const requireStateSwitch = this.requireStateSwitch;
        const pendingStateSnapshot = this.pendingStateSnapshot;

        super.onPageRequest(ctx);

        if (requireStateSwitch && ctx.req.headers[_unstableNetworkMode.UNSTABLE_NETWORK_MODE_HEADER]) {
            this.requireStateSwitch = true;

            this.pendingStateSnapshot = pendingStateSnapshot;
        }
    }
    // API
    static getSession(testRun) {
        let sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];

        if (!sessionInfo || !testRun.disablePageReloads) {
            if (sessionInfo && sessionInfo.url) SessionController.closeSession(testRun);

            let session = null;

            if (testRun.test.isLegacy) session = testRun;else {
                session = new SessionController(_path2.default.dirname(testRun.test.fixture.path));

                session.currentTestRun = testRun;
            }

            sessionInfo = {
                session: session,
                proxy: null,
                url: null
            };

            ACTIVE_SESSIONS_MAP[testRun.browserConnection.id] = sessionInfo;
        } else if (!testRun.test.isLegacy) sessionInfo.session.currentTestRun = testRun;

        return sessionInfo.session;
    }

    static getSessionUrl(testRun, proxy) {
        let sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];

        if (!sessionInfo || testRun.test.isLegacy) {
            SessionController.getSession(testRun);

            sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
        }

        if (!sessionInfo.url) {
            const pageUrl = testRun.test.pageUrl;
            const externalProxyHost = testRun.opts.externalProxyHost;
            let externalProxySettings = null;

            if (externalProxyHost) {
                externalProxySettings = {
                    url: externalProxyHost,
                    bypassRules: testRun.opts.proxyBypass
                };
            }

            sessionInfo.proxy = proxy;
            sessionInfo.url = proxy.openSession(pageUrl, sessionInfo.session, externalProxySettings);
        }

        return sessionInfo.url;
    }

    static closeSession(testRun) {
        const sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];

        if (!sessionInfo || !sessionInfo.url || !sessionInfo.proxy) return;

        sessionInfo.proxy.closeSession(sessionInfo.session);

        delete ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
    }
}
exports.default = SessionController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0LXJ1bi9zZXNzaW9uLWNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiQUNUSVZFX1NFU1NJT05TX01BUCIsIlNlc3Npb25Db250cm9sbGVyIiwiU2Vzc2lvbiIsImNvbnN0cnVjdG9yIiwidXBsb2Fkc1Jvb3QiLCJjdXJyZW50VGVzdFJ1biIsIl9nZXRQYXlsb2FkU2NyaXB0IiwiX2dldElmcmFtZVBheWxvYWRTY3JpcHQiLCJoYW5kbGVTZXJ2aWNlTWVzc2FnZSIsIm1zZyIsInNlcnZlckluZm8iLCJjbWQiLCJjYWxsIiwiZ2V0QXV0aENyZWRlbnRpYWxzIiwiaGFuZGxlRmlsZURvd25sb2FkIiwiaGFuZGxlUGFnZUVycm9yIiwiY3R4IiwiZXJyIiwib25QYWdlUmVxdWVzdCIsInJlcXVpcmVTdGF0ZVN3aXRjaCIsInBlbmRpbmdTdGF0ZVNuYXBzaG90IiwicmVxIiwiaGVhZGVycyIsIlVOU1RBQkxFX05FVFdPUktfTU9ERV9IRUFERVIiLCJnZXRTZXNzaW9uIiwidGVzdFJ1biIsInNlc3Npb25JbmZvIiwiYnJvd3NlckNvbm5lY3Rpb24iLCJpZCIsImRpc2FibGVQYWdlUmVsb2FkcyIsInVybCIsImNsb3NlU2Vzc2lvbiIsInNlc3Npb24iLCJ0ZXN0IiwiaXNMZWdhY3kiLCJwYXRoIiwiZGlybmFtZSIsImZpeHR1cmUiLCJwcm94eSIsImdldFNlc3Npb25VcmwiLCJwYWdlVXJsIiwiZXh0ZXJuYWxQcm94eUhvc3QiLCJvcHRzIiwiZXh0ZXJuYWxQcm94eVNldHRpbmdzIiwiYnlwYXNzUnVsZXMiLCJwcm94eUJ5cGFzcyIsIm9wZW5TZXNzaW9uIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7QUFDQTs7OztBQUdBLE1BQU1BLHNCQUFzQixFQUE1Qjs7QUFFZSxNQUFNQyxpQkFBTixTQUFnQ0MsMkJBQWhDLENBQXdDO0FBQ25EQyxnQkFBYUMsV0FBYixFQUEwQjtBQUN0QixjQUFNQSxXQUFOOztBQUVBLGFBQUtDLGNBQUws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LEVBQTlDLENBQWQ7QUFDSDs7QUFFRCxZQUFJLENBQUNGLFlBQVlJLEdBQWpCLEVBQXNCO0FBQ2xCLGtCQUFNVSxVQUFzQmYsUUFBUVEsSUFBUixDQUFhTyxPQUF6QztBQUNBLGtCQUFNQyxvQkFBc0JoQixRQUFRaUIsSUFBUixDQUFhRCxpQkFBekM7QUFDQSxnQkFBSUUsd0JBQXdCLElBQTVCOztBQUVBLGdCQUFJRixpQkFBSixFQUF1QjtBQUNuQkUsd0NBQXdCO0FBQ3BCYix5QkFBYVcsaUJBRE87QUFFcEJHLGlDQUFhbkIsUUFBUWlCLElBQVIsQ0FBYUc7QUFGTixpQkFBeEI7QUFJSDs7QUFFRG5CLHdCQUFZWSxLQUFaLEdBQW9CQSxLQUFwQjtBQUNBWix3QkFBWUksR0FBWixHQUFvQlEsTUFBTVEsV0FBTixDQUFrQk4sT0FBbEIsRUFBMkJkLFlBQVlNLE9BQXZDLEVBQWdEVyxxQkFBaEQsQ0FBcEI7QUFDSDs7QUFFRCxlQUFPakIsWUFBWUksR0FBbkI7QUFDSDs7QUFFRCxXQUFPQyxZQUFQLENBQXFCTixPQUFyQixFQUE4QjtBQUMxQixjQUFNQyxjQUFjMUIsb0JBQW9CeUIsUUFBUUUsaUJBQVIsQ0FBMEJDLEVBQTlDLENBQXBCOztBQUVBLFlBQUksQ0FBQ0YsV0FBRCxJQUFnQixDQUFDQSxZQUFZSSxHQUE3QixJQUFvQyxDQUFDSixZQUFZWSxLQUFyRCxFQUNJOztBQUVKWixvQkFBWVksS0FBWixDQUFrQlAsWUFBbEIsQ0FBK0JMLFlBQVlNLE9BQTNDOztBQUVBLGVBQU9oQyxvQkFBb0J5QixRQUFRRSxpQkFBUixDQUEwQkMsRUFBOUMsQ0FBUDtBQUNIO0FBdEhrRDtrQkFBbEMzQixpQiIsImZpbGUiOiJ0ZXN0LXJ1bi9zZXNzaW9uLWNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFNlc3Npb24gfSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcbmltcG9ydCB7IFVOU1RBQkxFX05FVFdPUktfTU9ERV9IRUFERVIgfSBmcm9tICcuLi9icm93c2VyL2Nvbm5lY3Rpb24vdW5zdGFibGUtbmV0d29yay1tb2RlJztcblxuXG5jb25zdCBBQ1RJVkVfU0VTU0lPTlNfTUFQID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlc3Npb25Db250cm9sbGVyIGV4dGVuZHMgU2Vzc2lvbiB7XG4gICAgY29uc3RydWN0b3IgKHVwbG9hZHNSb290KSB7XG4gICAgICAgIHN1cGVyKHVwbG9hZHNSb290KTtcblxuICAgICAgICB0aGlzLmN1cnJlbnRUZXN0UnVuID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBIYW1tZXJoZWFkIHBheWxvYWRcbiAgICBfZ2V0UGF5bG9hZFNjcmlwdCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUZXN0UnVuLl9nZXRQYXlsb2FkU2NyaXB0KCk7XG4gICAgfVxuXG4gICAgX2dldElmcmFtZVBheWxvYWRTY3JpcHQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VGVzdFJ1bi5fZ2V0SWZyYW1lUGF5bG9hZFNjcmlwdCgpO1xuICAgIH1cblxuXG4gICAgLy8gSGFtbWVyaGVhZCBoYW5kbGVyc1xuICAgIGhhbmRsZVNlcnZpY2VNZXNzYWdlIChtc2csIHNlcnZlckluZm8pIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFRlc3RSdW5bbXNnLmNtZF0pXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIuaGFuZGxlU2VydmljZU1lc3NhZ2UuY2FsbCh0aGlzLmN1cnJlbnRUZXN0UnVuLCBtc2csIHNlcnZlckluZm8pO1xuXG4gICAgICAgIHJldHVybiBzdXBlci5oYW5kbGVTZXJ2aWNlTWVzc2FnZShtc2csIHNlcnZlckluZm8pO1xuICAgIH1cblxuICAgIGdldEF1dGhDcmVkZW50aWFscyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUZXN0UnVuLmdldEF1dGhDcmVkZW50aWFscygpO1xuICAgIH1cblxuICAgIGhhbmRsZUZpbGVEb3dubG9hZCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUZXN0UnVuLmhhbmRsZUZpbGVEb3dubG9hZCgpO1xuICAgIH1cblxuICAgIGhhbmRsZVBhZ2VFcnJvciAoY3R4LCBlcnIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRlc3RSdW4uaGFuZGxlUGFnZUVycm9yKGN0eCwgZXJyKTtcbiAgICB9XG5cbiAgICBvblBhZ2VSZXF1ZXN0IChjdHgpIHtcbiAgICAgICAgY29uc3QgcmVxdWlyZVN0YXRlU3dpdGNoICAgPSB0aGlzLnJlcXVpcmVTdGF0ZVN3aXRjaDtcbiAgICAgICAgY29uc3QgcGVuZGluZ1N0YXRlU25hcHNob3QgPSB0aGlzLnBlbmRpbmdTdGF0ZVNuYXBzaG90O1xuXG4gICAgICAgIHN1cGVyLm9uUGFnZVJlcXVlc3QoY3R4KTtcblxuICAgICAgICBpZiAocmVxdWlyZVN0YXRlU3dpdGNoICYmIGN0eC5yZXEuaGVhZGVyc1tVTlNUQUJMRV9ORVRXT1JLX01PREVfSEVBREVSXSkge1xuICAgICAgICAgICAgdGhpcy5yZXF1aXJlU3RhdGVTd2l0Y2ggPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdTdGF0ZVNuYXBzaG90ID0gcGVuZGluZ1N0YXRlU25hcHNob3Q7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQVBJXG4gICAgc3RhdGljIGdldFNlc3Npb24gKHRlc3RSdW4pIHtcbiAgICAgICAgbGV0IHNlc3Npb25JbmZvID0gQUNUSVZFX1NFU1NJT05TX01BUFt0ZXN0UnVuLmJyb3dzZXJDb25uZWN0aW9uLmlkXTtcblxuICAgICAgICBpZiAoIXNlc3Npb25JbmZvIHx8ICF0ZXN0UnVuLmRpc2FibGVQYWdlUmVsb2Fkcykge1xuICAgICAgICAgICAgaWYgKHNlc3Npb25JbmZvICYmIHNlc3Npb25JbmZvLnVybClcbiAgICAgICAgICAgICAgICBTZXNzaW9uQ29udHJvbGxlci5jbG9zZVNlc3Npb24odGVzdFJ1bik7XG5cbiAgICAgICAgICAgIGxldCBzZXNzaW9uID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKHRlc3RSdW4udGVzdC5pc0xlZ2FjeSlcbiAgICAgICAgICAgICAgICBzZXNzaW9uID0gdGVzdFJ1bjtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlc3Npb24gPSBuZXcgU2Vzc2lvbkNvbnRyb2xsZXIocGF0aC5kaXJuYW1lKHRlc3RSdW4udGVzdC5maXh0dXJlLnBhdGgpKTtcblxuICAgICAgICAgICAgICAgIHNlc3Npb24uY3VycmVudFRlc3RSdW4gPSB0ZXN0UnVuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXNzaW9uSW5mbyA9IHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgICAgICAgICAgICAgIHByb3h5OiAgIG51bGwsXG4gICAgICAgICAgICAgICAgdXJsOiAgICAgbnVsbFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgQUNUSVZFX1NFU1NJT05TX01BUFt0ZXN0UnVuLmJyb3dzZXJDb25uZWN0aW9uLmlkXSA9IHNlc3Npb25JbmZvO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0ZXN0UnVuLnRlc3QuaXNMZWdhY3kpXG4gICAgICAgICAgICBzZXNzaW9uSW5mby5zZXNzaW9uLmN1cnJlbnRUZXN0UnVuID0gdGVzdFJ1bjtcblxuICAgICAgICByZXR1cm4gc2Vzc2lvbkluZm8uc2Vzc2lvbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0U2Vzc2lvblVybCAodGVzdFJ1biwgcHJveHkpIHtcbiAgICAgICAgbGV0IHNlc3Npb25JbmZvID0gQUNUSVZFX1NFU1NJT05TX01BUFt0ZXN0UnVuLmJyb3dzZXJDb25uZWN0aW9uLmlkXTtcblxuICAgICAgICBpZiAoIXNlc3Npb25JbmZvIHx8IHRlc3RSdW4udGVzdC5pc0xlZ2FjeSkge1xuICAgICAgICAgICAgU2Vzc2lvbkNvbnRyb2xsZXIuZ2V0U2Vzc2lvbih0ZXN0UnVuKTtcblxuICAgICAgICAgICAgc2Vzc2lvbkluZm8gPSBBQ1RJVkVfU0VTU0lPTlNfTUFQW3Rlc3RSdW4uYnJvd3NlckNvbm5lY3Rpb24uaWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzZXNzaW9uSW5mby51cmwpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2VVcmwgICAgICAgICAgICAgPSB0ZXN0UnVuLnRlc3QucGFnZVVybDtcbiAgICAgICAgICAgIGNvbnN0IGV4dGVybmFsUHJveHlIb3N0ICAgPSB0ZXN0UnVuLm9wdHMuZXh0ZXJuYWxQcm94eUhvc3Q7XG4gICAgICAgICAgICBsZXQgZXh0ZXJuYWxQcm94eVNldHRpbmdzID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKGV4dGVybmFsUHJveHlIb3N0KSB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxQcm94eVNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgICAgICB1cmw6ICAgICAgICAgZXh0ZXJuYWxQcm94eUhvc3QsXG4gICAgICAgICAgICAgICAgICAgIGJ5cGFzc1J1bGVzOiB0ZXN0UnVuLm9wdHMucHJveHlCeXBhc3NcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXNzaW9uSW5mby5wcm94eSA9IHByb3h5O1xuICAgICAgICAgICAgc2Vzc2lvbkluZm8udXJsICAgPSBwcm94eS5vcGVuU2Vzc2lvbihwYWdlVXJsLCBzZXNzaW9uSW5mby5zZXNzaW9uLCBleHRlcm5hbFByb3h5U2V0dGluZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlc3Npb25JbmZvLnVybDtcbiAgICB9XG5cbiAgICBzdGF0aWMgY2xvc2VTZXNzaW9uICh0ZXN0UnVuKSB7XG4gICAgICAgIGNvbnN0IHNlc3Npb25JbmZvID0gQUNUSVZFX1NFU1NJT05TX01BUFt0ZXN0UnVuLmJyb3dzZXJDb25uZWN0aW9uLmlkXTtcblxuICAgICAgICBpZiAoIXNlc3Npb25JbmZvIHx8ICFzZXNzaW9uSW5mby51cmwgfHwgIXNlc3Npb25JbmZvLnByb3h5KVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHNlc3Npb25JbmZvLnByb3h5LmNsb3NlU2Vzc2lvbihzZXNzaW9uSW5mby5zZXNzaW9uKTtcblxuICAgICAgICBkZWxldGUgQUNUSVZFX1NFU1NJT05TX01BUFt0ZXN0UnVuLmJyb3dzZXJDb25uZWN0aW9uLmlkXTtcbiAgICB9XG59XG5cbiJdfQ==
