'use strict';

exports.__esModule = true;

exports.default = function (optionsStr = '') {
    const splittedOptions = optionsStr.split(OPTIONS_SEPARATOR);

    if (!splittedOptions.length) return null;

    const parsedOptions = {};

    splittedOptions.forEach(item => {
        const keyValuePair = item.split(OPTION_KEY_VALUE_SEPARATOR);
        const key = keyValuePair[0];
        let value = keyValuePair[1];

        if (!key || !value) return;

        value = convertToBestFitType(value);

        if (FILE_OPTION_NAMES.includes(key) && value.length < OS_MAX_PATH_LENGTH && _fs2.default.existsSync(value)) value = _fs2.default.readFileSync(value);

        parsedOptions[key] = value;
    });

    return parsedOptions;
};

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MAX_PATH_LENGTH = {
    'Linux': 4096,
    'Windows_NT': 260,
    'Darwin': 1024
};

const OS_MAX_PATH_LENGTH = MAX_PATH_LENGTH[_os2.default.type()];

const OPTIONS_SEPARATOR = ';';
const OPTION_KEY_VALUE_SEPARATOR = '=';
const FILE_OPTION_NAMES = ['cert', 'key', 'pfx'];
const NUMBER_REG_EX = /^[0-9-.,]+$/;
const BOOLEAN_STRING_VALUES = ['true', 'false'];

function convertToBestFitType(valueStr) {
    if (typeof valueStr !== 'string') return void 0;else if (NUMBER_REG_EX.test(valueStr)) return parseFloat(valueStr);else if (BOOLEAN_STRING_VALUES.includes(valueStr)) return valueStr === 'true';else if (!valueStr.length) return void 0;

    return valueStr;
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvcGFyc2Utc3NsLW9wdGlvbnMuanMiXSwibmFtZXMiOlsib3B0aW9uc1N0ciIsInNwbGl0dGVkT3B0aW9ucyIsInNwbGl0IiwiT1BUSU9OU19TRVBBUkFUT1IiLCJsZW5ndGgiLCJwYXJzZWRPcHRpb25zIiwiZm9yRWFjaCIsIml0ZW0iLCJrZXlWYWx1ZVBhaXIiLCJPUFRJT05fS0VZX1ZBTFVFX1NFUEFSQVRPUiIsImtleSIsInZhbHVlIiwiY29udmVydFRvQmVzdEZpdFR5cGUiLCJGSUxFX09QVElPTl9OQU1FUyIsImluY2x1ZGVzIiwiT1NfTUFYX1BBVEhfTEVOR1RIIiwiZnMiLCJleGlzdHNTeW5jIiwicmVhZEZpbGVTeW5jIiwiTUFYX1BBVEhfTEVOR1RIIiwib3MiLCJ0eXBlIiwiTlVNQkVSX1JFR19FWCIsIkJPT0xFQU5fU1RSSU5HX1ZBTFVFUyIsInZhbHVlU3RyIiwidGVzdCIsInBhcnNlRmxvYXQiXSwibWFwcGluZ3MiOiI7Ozs7a0JBaUJlLFVBQVVBLGFBQWEsRUFBdkIsRUFBMkI7QUFDdEMsVUFBTUMsa0JBQWtCRCxXQUFXRSxLQUFYLENBQWlCQyxpQkFBakIsQ0FBeEI7O0FBRUEsUUFBSSxDQUFDRixnQkFBZ0JHLE1BQXJCLEVBQ0ksT0FBTyxJQUFQOztBQUVKLFVBQU1DLGdCQUFnQixFQUF0Qjs7QUFFQUosb0JBQWdCSyxPQUFoQixDQUF3QkMsUUFBUTtBQUM1QixjQUFNQyxlQUFlRCxLQUFLTCxLQUFMLENBQVdPLDBCQUFYLENBQXJCO0FBQ0EsY0FBTUMsTUFBZUYsYUFBYSxDQUFiLENBQXJCO0FBQ0EsWUFBSUcsUUFBaUJILGFBQWEsQ0FBYixDQUFyQjs7QUFFQSxZQUFJLENBQUNFLEdBQUQsSUFBUSxDQUFDQyxLQUFiLEVBQ0k7O0FBRUpBLGdCQUFRQyxxQkFBcUJELEtBQXJCLENBQVI7O0FBRUEsWUFBSUUsa0JBQWtCQyxRQUFsQixDQUEyQkosR0FBM0IsS0FBbUNDLE1BQU1QLE1BQU4sR0FBZVcsa0JBQWxELElBQXdFQyxhQUFHQyxVQUFILENBQWNOLEtBQWQsQ0FBNUUsRUFDSUEsUUFBUUssYUFBR0UsWUFBSCxDQUFnQlAsS0FBaEIsQ0FBUjs7QUFFSk4sc0JBQWNLLEdBQWQsSUFBcUJDLEtBQXJCO0FBQ0gsS0FkRDs7QUFnQkEsV0FBT04sYUFBUDtBQUNILEM7O0FBMUNEOzs7O0FBQ0E7Ozs7OztBQUVBLE1BQU1jLGtCQUFrQjtBQUNwQixhQUFjLElBRE07QUFFcEIsa0JBQWMsR0FGTTtBQUdwQixjQUFjO0FBSE0sQ0FBeEI7O0FBTUEsTUFBTUoscUJBQXFCSSxnQkFBZ0JDLGFBQUdDLElBQUgsRUFBaEIsQ0FBM0I7O0FBRUEsTUFBTWxCLG9CQUE2QixHQUFuQztBQUNBLE1BQU1NLDZCQUE2QixHQUFuQztBQUNBLE1BQU1JLG9CQUE2QixDQUFDLE1BQUQsRUFBUyxLQUFULEVBQWdCLEtBQWhCLENBQW5DO0FBQ0EsTUFBTVMsZ0JBQTZCLGFBQW5DO0FBQ0EsTUFBTUMsd0JBQTZCLENBQUMsTUFBRCxFQUFTLE9BQVQsQ0FBbkM7O0FBNkJBLFNBQVNYLG9CQUFULENBQStCWSxRQUEvQixFQUF5QztBQUNyQyxRQUFJLE9BQU9BLFFBQVAsS0FBb0IsUUFBeEIsRUFDSSxPQUFPLEtBQUssQ0FBWixDQURKLEtBR0ssSUFBSUYsY0FBY0csSUFBZCxDQUFtQkQsUUFBbkIsQ0FBSixFQUNELE9BQU9FLFdBQVdGLFFBQVgsQ0FBUCxDQURDLEtBR0EsSUFBSUQsc0JBQXNCVCxRQUF0QixDQUErQlUsUUFBL0IsQ0FBSixFQUNELE9BQU9BLGFBQWEsTUFBcEIsQ0FEQyxLQUdBLElBQUksQ0FBQ0EsU0FBU3BCLE1BQWQsRUFDRCxPQUFPLEtBQUssQ0FBWjs7QUFFSixXQUFPb0IsUUFBUDtBQUNIIiwiZmlsZSI6ImNsaS9wYXJzZS1zc2wtb3B0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuXG5jb25zdCBNQVhfUEFUSF9MRU5HVEggPSB7XG4gICAgJ0xpbnV4JzogICAgICA0MDk2LFxuICAgICdXaW5kb3dzX05UJzogMjYwLFxuICAgICdEYXJ3aW4nOiAgICAgMTAyNFxufTtcblxuY29uc3QgT1NfTUFYX1BBVEhfTEVOR1RIID0gTUFYX1BBVEhfTEVOR1RIW29zLnR5cGUoKV07XG5cbmNvbnN0IE9QVElPTlNfU0VQQVJBVE9SICAgICAgICAgID0gJzsnO1xuY29uc3QgT1BUSU9OX0tFWV9WQUxVRV9TRVBBUkFUT1IgPSAnPSc7XG5jb25zdCBGSUxFX09QVElPTl9OQU1FUyAgICAgICAgICA9IFsnY2VydCcsICdrZXknLCAncGZ4J107XG5jb25zdCBOVU1CRVJfUkVHX0VYICAgICAgICAgICAgICA9IC9eWzAtOS0uLF0rJC87XG5jb25zdCBCT09MRUFOX1NUUklOR19WQUxVRVMgICAgICA9IFsndHJ1ZScsICdmYWxzZSddO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAob3B0aW9uc1N0ciA9ICcnKSB7XG4gICAgY29uc3Qgc3BsaXR0ZWRPcHRpb25zID0gb3B0aW9uc1N0ci5zcGxpdChPUFRJT05TX1NFUEFSQVRPUik7XG5cbiAgICBpZiAoIXNwbGl0dGVkT3B0aW9ucy5sZW5ndGgpXG4gICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgcGFyc2VkT3B0aW9ucyA9IHt9O1xuXG4gICAgc3BsaXR0ZWRPcHRpb25zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGNvbnN0IGtleVZhbHVlUGFpciA9IGl0ZW0uc3BsaXQoT1BUSU9OX0tFWV9WQUxVRV9TRVBBUkFUT1IpO1xuICAgICAgICBjb25zdCBrZXkgICAgICAgICAgPSBrZXlWYWx1ZVBhaXJbMF07XG4gICAgICAgIGxldCB2YWx1ZSAgICAgICAgICA9IGtleVZhbHVlUGFpclsxXTtcblxuICAgICAgICBpZiAoIWtleSB8fCAhdmFsdWUpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdmFsdWUgPSBjb252ZXJ0VG9CZXN0Rml0VHlwZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKEZJTEVfT1BUSU9OX05BTUVTLmluY2x1ZGVzKGtleSkgJiYgdmFsdWUubGVuZ3RoIDwgT1NfTUFYX1BBVEhfTEVOR1RIICYmIGZzLmV4aXN0c1N5bmModmFsdWUpKVxuICAgICAgICAgICAgdmFsdWUgPSBmcy5yZWFkRmlsZVN5bmModmFsdWUpO1xuXG4gICAgICAgIHBhcnNlZE9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhcnNlZE9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRUb0Jlc3RGaXRUeXBlICh2YWx1ZVN0cikge1xuICAgIGlmICh0eXBlb2YgdmFsdWVTdHIgIT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gdm9pZCAwO1xuXG4gICAgZWxzZSBpZiAoTlVNQkVSX1JFR19FWC50ZXN0KHZhbHVlU3RyKSlcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWVTdHIpO1xuXG4gICAgZWxzZSBpZiAoQk9PTEVBTl9TVFJJTkdfVkFMVUVTLmluY2x1ZGVzKHZhbHVlU3RyKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlU3RyID09PSAndHJ1ZSc7XG5cbiAgICBlbHNlIGlmICghdmFsdWVTdHIubGVuZ3RoKVxuICAgICAgICByZXR1cm4gdm9pZCAwO1xuXG4gICAgcmV0dXJuIHZhbHVlU3RyO1xufVxuXG4iXX0=
